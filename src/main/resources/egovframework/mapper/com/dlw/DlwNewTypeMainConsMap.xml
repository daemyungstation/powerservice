<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="DlwNewTypeMainConsMap">
    <sql id="DlwNewTypeMainConsMap.selectCondition_fragment1">
        <where>
            <if test="mem_no != null and mem_no != ''">
                AND A.MEM_NO = #{mem_no}
            </if>
            <if test="cntr_cd != null and cntr_cd != ''">
                AND A.CNTR_CD = #{cntr_cd}
            </if>
        </where>
    </sql>
    <sql id="DlwNewTypeMainConsMap.selectCondition_fragment_scrt">
        <where>
            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                AND AMNT_DTTM BETWEEN REPLACE(#{stt_dt}, '-', '') || '000000' AND REPLACE(#{end_dt}, '-', '') || '235959'
            </if>
            <if test="srch_typ == 'gthr' and srch_val != null and srch_val != ''"  >
                AND PRIF_GTHR_CNSN_SCRT LIKE '%' || #{srch_val} || '%'
            </if>
            <if test="srch_typ == 'offr' and srch_val != null and srch_val != ''"  >
                AND ENTS_OFFR_CNSN_SCRT LIKE '%' || #{srch_val} || '%'
            </if>
            <if test="srch_typ == 'thpr' and srch_val != null and srch_val != ''"  >
                AND PRIF_THPR_OFFR_CNSN_SCRT LIKE '%' || #{srch_val} || '%'
            </if>
            <if test="srch_typ == 'mrkn' and srch_val != null and srch_val != ''"  >
                AND PRIF_MRKN_PCUS_CNSN_SCRT LIKE '%' || #{srch_val} || '%'
            </if>
            <if test="use_yn != null and use_yn != ''">
                AND A.USE_YN = #{use_yn}
            </if>
            <if test="cntr_cd != null and cntr_cd != ''">
                AND A.CNTR_CD = #{cntr_cd}
            </if>
        </where>
    </sql>
    
    <sql id="DlwNewTypeMainConsMap.selectCondition_fragment2">
        <where>
            <if test="cntr_cd != null and cntr_cd != ''">
                TH.CNTR_CD = #{cntr_cd}
            </if>
            <if test="trgt_list_id != null and trgt_list_id != ''">
                AND TH.TRGT_LIST_ID = #{trgt_list_id}
            </if>
            <if test="user_id != null and user_id != ''">
                AND TH.CNSR_ID = #{user_id}
            </if>
            <if test="cmpg_id != null and cmpg_id != ''">
                AND TH.CMPG_ID = #{cmpg_id}
            </if>
            <if test="sub_trgt_list_id != null and sub_trgt_list_id != ''">
                AND TH.SUB_TRGT_LIST_ID = #{sub_trgt_list_id}
            </if>
            <if test="trgt_cust_dtpt_id != null and trgt_cust_dtpt_id != ''">
                AND TH.TRGT_CUST_DTPT_ID = #{trgt_cust_dtpt_id}
            </if>
            <if test="cmpg_stt_dt != null and cmpg_stt_dt != '' and cmpg_end_dt != null and cmpg_end_dt != ''">
                AND CMPG_STT_DT BETWEEN REPLACE(#{cmpg_stt_dt}, '-', '') AND REPLACE(#{cmpg_end_dt}, '-', '')
            </if>
            <if test="cmpg_prgr_stat_cd != null and cmpg_prgr_stat_cd != ''">
                AND CMPG_PRGR_STAT_CD = #{cmpg_prgr_stat_cd}
            </if>
            <if test="mem_no != null and mem_no != ''">
                AND TD.MEM_NO = #{mem_no}
            </if>
        </where>
    </sql>
    
    <sql id="DlwNewTypeMainConsMap.selectCondition_fragment3">
        <where>
             AND NVL(DEL_FG,'N') ='N'
            <if test="voc_id != null and voc_id != ''">
                AND VOC_ID = #{voc_id}
            </if>
            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                AND VOC_ACPG_DTTM BETWEEN REPLACE(#{stt_dt}, '-', '') || '000000' AND REPLACE(#{end_dt}, '-', '') || '235959'
            </if>
            <choose>
                <when test="voc_dssr_id != null and voc_dssr_id != ''">
                AND VOC_DSSR_ID = #{voc_dssr_id}
                </when>
                <when test="voc_dssr_team2_cd != null and voc_dssr_team2_cd != ''">
                AND EXISTS (SELECT 'Y'
                              FROM PS_WILLVI.TB_USER B
                             WHERE B.USER_ID = A.VOC_DSSR_ID
                               AND B.CNTR_CD = A.CNTR_CD
                               AND B.TEAM_CD = #{voc_dssr_team2_cd})
                </when>
                <when test="voc_dssr_team1_cd != null and voc_dssr_team1_cd != ''">
                AND EXISTS (SELECT 'Y'
                              FROM PS_WILLVI.TB_USER B
                                 , PS_WILLVI.TB_CONS_TEAM C
                             WHERE B.USER_ID = A.VOC_DSSR_ID
                               AND B.CNTR_CD = A.CNTR_CD
                               AND B.TEAM_CD = C.TEAM_CD
                               AND B.CNTR_CD = C.CNTR_CD
                               AND C.HGRN_TEAM_CD = #{voc_dssr_team1_cd})
                </when>
            </choose>
            <if test="voc_typ_cd != null and voc_typ_cd != ''">
                AND VOC_TYP_CD = #{voc_typ_cd}
            </if>
            <if test="voc_dsps_stat_cd != null and voc_dsps_stat_cd != ''">
                AND VOC_DSPS_STAT_CD = #{voc_dsps_stat_cd}
            </if>
            <if test="voc_dsps_stat_cd_list != null and voc_dsps_stat_cd_list != ''">
                AND VOC_DSPS_STAT_CD IN (${voc_dsps_stat_cd_list})
            </if>
            <if test="cntr_cd != null and cntr_cd != ''">
                AND A.CNTR_CD = #{cntr_cd}
            </if>
            <if test="path_typ == 'history'">
                AND MEM_NO = #{mem_no}
            </if>
            <if test="hpcl_trgt_yn != null and hpcl_trgt_yn != ''">
                AND HPCL_TRGT_YN = #{hpcl_trgt_yn}
            </if>
            <if test="hpcl_dssr_id != null and hpcl_dssr_id != ''">
                AND HPCL_DSSR_ID = #{hpcl_dssr_id}
            </if>
            <if test="hpcl_dsps_stat_cd_list != null and hpcl_dsps_stat_cd_list != ''">
                AND HPCL_DSPS_STAT_CD IN (${hpcl_dsps_stat_cd_list})
            </if>
        </where>
    </sql>
    
    <sql id="DlwNewTypeMainConsMap.selectCondition_fragment4">
        <where>
            <if test="cntr_cd != null and cntr_cd != ''">
                CNTR_CD = #{cntr_cd}
            </if>
            <if test="cell != null and cell != ''">
                AND CELL LIKE '%' || REPLACE(#{cell}, '-', '') || '%'
            </if>
            <if test="chat_sndg_div_cd != null and chat_sndg_div_cd != ''">
                AND CHAT_SNDG_DIV_CD = #{chat_sndg_div_cd}
            </if>
            <if test="chat_msg_titl != null and chat_msg_titl != ''">
                AND CHAT_MSG_TITL LIKE '%' || #{chat_msg_titl} || '%'
            </if>
            <if test="chat_msg_cntn != null and chat_msg_cntn != ''">
                AND CHAT_MSG_CNTN LIKE '%' || #{chat_msg_cntn} || '%'
            </if>
            <if test="stt_dt != null and stt_dt != ''">
            <![CDATA[
                AND SNDG_DTTM >= REPLACE(#{stt_dt}, '-', '') || '000000'
            ]]>
            </if>
            <if test="end_dt != null and end_dt != ''">
            <![CDATA[
                AND SNDG_DTTM <= REPLACE(#{end_dt}, '-', '') || '235959'
            ]]>
            </if>
            <if test="dt_typ == 'today'">
                AND CONS_DSPS_DTTM BETWEEN TO_CHAR(SYSDATE, 'YYYYMMDD') || '000000' AND TO_CHAR(SYSDATE, 'YYYYMMDD') || '235959'
            </if>
            <choose>
                <when test="sndg_chpr_id != null and sndg_chpr_id != ''">
                AND SNDG_CHPR_ID = #{sndg_chpr_id}
                </when>
                <when test="team_cd != null and team_cd != ''">
                AND EXISTS (SELECT 'Y'
                              FROM PS_WILLVI.TB_USER B
                             WHERE B.USER_ID = A.SNDG_CHPR_ID
                               AND B.CNTR_CD = A.CNTR_CD
                               AND B.TEAM_CD = #{team_cd})
                </when>
                <when test="hgrn_team_cd != null and hgrn_team_cd != ''">
                AND EXISTS (SELECT 'Y'
                              FROM PS_WILLVI.TB_USER B
                                 , PS_WILLVI.TB_CONS_TEAM C
                             WHERE B.USER_ID = A.SNDG_CHPR_ID
                               AND B.CNTR_CD = A.CNTR_CD
                               AND B.TEAM_CD = C.TEAM_CD
                               AND B.CNTR_CD = C.CNTR_CD
                               AND C.HGRN_TEAM_CD = #{hgrn_team_cd})
                </when>
            </choose>
            <if test="resr_yn != null and resr_yn != ''">
                AND RESR_YN = #{resr_yn}
            </if>
            <if test="cntr_rprs_tlno != null and cntr_rprs_tlno != ''">
                AND CNTR_RPRS_TLNO = REPLACE(#{cntr_rprs_tlno}, '-', '')
            </if>
            <if test="consno != null and consno != ''">
                AND CONSNO = #{consno}
            </if>
            <if test="mem_no != null and mem_no != ''">
                AND MEM_NO = #{mem_no}
            </if>
            <if test="mem_nm != null and mem_nm != ''">
                AND MEM_NM LIKE '%' || #{mem_nm} || '%'
            </if>
            <if test="chat_sndg_stat_cd != null and chat_sndg_stat_cd != ''">
                AND CHAT_SNDG_STAT_CD = #{chat_sndg_stat_cd}
            </if>
            <if test="chat_sndg_resl_cd != null and chat_sndg_resl_cd != ''">
                <choose>
                    <when test="chat_sndg_resl_cd == 'FAIL'">
                AND CHAT_SNDG_RESL_CD IS NOT NULL
                AND CHAT_SNDG_RESL_CD != '1000'
                    </when>
                    <otherwise>
                AND CHAT_SNDG_RESL_CD = #{chat_sndg_resl_cd}
                    </otherwise>
                </choose>
            </if>
            <if test="chat_sndg_hstr_id != null and chat_sndg_hstr_id != ''">
                AND CHAT_SNDG_HSTR_ID = #{chat_sndg_hstr_id}
            </if>
        </where>
    </sql>
    
    <sql id="DlwNewTypeMainConsMap.selectCondition_fragment5">
        <where>
            <if test="cntr_cd != null and cntr_cd != ''">
                AND A.CNTR_CD = #{cntr_cd}
            </if>
            <if test="dlv_id != null and dlv_id != ''">
                AND A.DLV_ID = #{dlv_id}
            </if>
            <if test="accnt_no != null and accnt_no != ''">
                AND A.ACCNT_NO = #{accnt_no}
            </if>
            <if test="sndg_kind_cd != null and sndg_kind_cd != ''">
                AND A.SNDG_KIND_CD = #{sndg_kind_cd}
            </if>
            <if test="dlv_type_cd != null and dlv_type_cd != ''">
                AND A.DLV_TYPE_CD = #{dlv_type_cd}
            </if>
            <if test="dlv_stat_cd != null and dlv_stat_cd != ''">
                AND A.DLV_STAT_CD = #{dlv_stat_cd}
            </if>
            <if test="dsps_mthd_cd != null and dsps_mthd_cd != ''">
                AND A.DSPS_MTHD_CD = #{dsps_mthd_cd}
            </if>
            <if test="dsps_rsn_cd != null and dsps_rsn_cd != ''">
                AND A.DSPS_RSN_CD = #{dsps_rsn_cd}
            </if>
            <if test="dlv_dsps_dt != null and dlv_dsps_dt != ''">
                AND A.DLV_DSPS_DT = #{dlv_dsps_dt}
            </if>
            <if test="dlv_dsps_rsn_cd != null and dlv_dsps_rsn_cd != ''">
                AND A.DLV_DSPS_RSN_CD != #{dlv_dsps_rsn_cd}
            </if>
        </where>
    </sql>
    
    <sql id="DlwNewTypeMainConsMap.selectCondition_fragment6">
        <if test="cell != null and cell != ''">
            <!-- 2018.05.11 PS_WILLVI.TB_CONS 테이블 개인정보는 MEMBER 테이블에서... AND CELL = REPLACE(#{cell}, '-', '') -->
                AND REPLACE(MEM.CELL, '-', '') = REPLACE(#{cell}, '-', '')
        </if>
        <if test="consno != null and consno != ''">
            AND A.CONSNO = #{consno}
        </if>
        <if test="(mem_no != null and mem_no != '') or path_typ == 'history'">
            AND A.MEM_NO = #{mem_no}
        </if>
        <if test="dt_typ != null and dt_typ != ''">
            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                <if test="dt_typ == 'acpg_dttm'">
                    AND A.ACPG_DTTM BETWEEN REPLACE(#{stt_dt}, '-', '') || '000000' AND REPLACE(#{end_dt}, '-', '') || '235959'
                </if>
                <if test="dt_typ == 'cons_dsps_dttm'">
                    AND A.CONS_DSPS_DTTM BETWEEN REPLACE(#{stt_dt}, '-', '') || '000000' AND REPLACE(#{end_dt}, '-', '') || '235959'
                </if>
            </if>
            <if test="dt_typ == 'today'">
                AND A.CONS_DSPS_DTTM BETWEEN TO_CHAR(SYSDATE, 'YYYYMMDD') || '000000' AND TO_CHAR(SYSDATE, 'YYYYMMDD') || '235959'
            </if>
        </if>
        <if test="cons_dspsmddl_dtpt_cd != null and cons_dspsmddl_dtpt_cd != ''">
            AND A.CONS_DSPSMDDL_DTPT_CD = #{cons_dspsmddl_dtpt_cd}
        </if>
        <if test="cons_dspsmddl_dtpt_cd_list != null and cons_dspsmddl_dtpt_cd_list != ''">
            AND A.CONS_DSPSMDDL_DTPT_CD IN (${cons_dspsmddl_dtpt_cd_list})
        </if>
        <if test="acpg_chnl_cd != null and acpg_chnl_cd != ''">
            AND A.ACPG_CHNL_CD = #{acpg_chnl_cd}
        </if>
        <if test="cons_stat_cd != null and cons_stat_cd != ''">
            AND A.CONS_STAT_CD = #{cons_stat_cd}
        </if>
        <if test="cons_stat_cd_list != null and cons_stat_cd_list != ''">
            AND A.CONS_STAT_CD IN (${cons_stat_cd_list})
        </if>
        <if test="user_typ == 'actp_id'">
            <choose>
                <when test="user_id != null and user_id != ''">
                AND A.ACTP_ID IN(${user_id})
                </when>
                <when test="team2_cd != null and team2_cd != ''">
                AND EXISTS (SELECT 'Y'
                              FROM PS_WILLVI.TB_USER B
                             WHERE B.USER_ID = A.ACTP_ID
                               AND B.CNTR_CD = A.CNTR_CD
                               AND B.TEAM_CD = #{team2_cd})
                </when>
                <when test="team1_cd != null and team1_cd != ''">
                AND EXISTS (SELECT 'Y'
                              FROM PS_WILLVI.TB_USER B
                                 , PS_WILLVI.TB_CONS_TEAM C
                             WHERE B.USER_ID = A.ACTP_ID
                               AND B.CNTR_CD = A.CNTR_CD
                               AND B.TEAM_CD = C.TEAM_CD
                               AND B.CNTR_CD = C.CNTR_CD
                               AND C.HGRN_TEAM_CD = #{team1_cd})
                </when>
            </choose>
        </if>
        <if test="user_typ == 'chpr_id'">
            <choose>
                <when test="user_id != null and user_id != ''">
                AND A.CHPR_ID = #{user_id}
                </when>
                <when test="team2_cd != null and team2_cd != ''">
                AND EXISTS (SELECT 'Y'
                              FROM PS_WILLVI.TB_USER B
                             WHERE B.USER_ID = A.CHPR_ID
                               AND B.CNTR_CD = A.CNTR_CD
                               AND B.TEAM_CD = #{team2_cd})
                </when>
                <when test="team1_cd != null and team1_cd != ''">
                AND EXISTS (SELECT 'Y'
                              FROM PS_WILLVI.TB_USER B
                                 , PS_WILLVI.TB_CONS_TEAM C
                             WHERE B.USER_ID = A.CHPR_ID
                               AND B.CNTR_CD = A.CNTR_CD
                               AND B.TEAM_CD = C.TEAM_CD
                               AND B.CNTR_CD = C.CNTR_CD
                               AND C.HGRN_TEAM_CD = #{team1_cd})
                </when>
            </choose>
        </if>
        <if test="user_typ == 'amnd_id'">
            <choose>
                <when test="user_id != null and user_id != ''">
                AND A.AMND_ID = #{user_id}
                </when>
                <when test="team2_cd != null and team2_cd != ''">
                AND EXISTS (SELECT 'Y'
                              FROM PS_WILLVI.TB_USER B
                             WHERE B.USER_ID = A.AMND_ID
                               AND B.CNTR_CD = A.CNTR_CD
                               AND B.TEAM_CD = #{team2_cd})
                </when>
                <when test="team1_cd != null and team1_cd != ''">
                AND EXISTS (SELECT 'Y'
                              FROM PS_WILLVI.TB_USER B
                                 , PS_WILLVI.TB_CONS_TEAM C
                             WHERE B.USER_ID = A.AMND_ID
                               AND B.CNTR_CD = A.CNTR_CD
                               AND B.TEAM_CD = C.TEAM_CD
                               AND B.CNTR_CD = C.CNTR_CD
                               AND C.HGRN_TEAM_CD = #{team1_cd})
                </when>
            </choose>
        </if>
        <if test="cons_typ1_cd != null and cons_typ1_cd != ''">
            AND A.CONS_TYP1_CD = #{cons_typ1_cd}
        </if>
        <if test="cons_typ2_cd != null and cons_typ2_cd != ''">
            AND A.CONS_TYP2_CD = #{cons_typ2_cd}
        </if>
        <if test="cons_typ3_cd != null and cons_typ3_cd != ''">
            AND A.CONS_TYP3_CD = #{cons_typ3_cd}
        </if>
        <if test="cntr_cd != null and cntr_cd != ''">
            AND A.CNTR_CD = #{cntr_cd}
        </if>
        <if test="srch_vl != null and srch_vl != ''">
            <if test="srch_typ == 'cust_nm'">
                <!-- 2018.05.11 PS_WILLVI.TB_CONS 테이블 개인정보는 MEMBER 테이블에서... AND A.MEM_NM LIKE '%' || #{srch_vl} || '%' -->
                AND MEM.MEM_NM LIKE '%' || #{srch_vl} || '%'
            </if>
            <if test="srch_typ == 'cons_memo_cntn'">
                AND A.CONS_MEMO_CNTN LIKE '%' || #{srch_vl} || '%'
            </if>
            <if test="srch_typ == 'all'">
                AND (A.CONS_MEMO_CNTN LIKE '%' || #{srch_vl} || '%'
                     OR MEM.MEM_NM LIKE '%' || #{srch_vl} || '%')  <!-- 2018.05.11 PS_WILLVI.TB_CONS 테이블 개인정보는 MEMBER 테이블에서... OR A.MEM_NM LIKE '%' || #{srch_vl} || '%') -->
            </if>
        </if>
        <if test='dept_yn == "Y"'>
            <if test="dataAthrQury != null and dataAthrQury != ''">
                ${dataAthrQury}
            </if>
        </if>
    </sql>

    <select id="DlwNewTypeMainConsMap.getDlwCustMemList" parameterType="map" resultType="resultMap">
		SELECT 
			/* DlwNewTypeMainConsMap.getDlwCustMemList*/
		    MB.MEM_NO,
		    (CASE WHEN LENGTH(MB.IDN_NO) = 10 THEN 'Y' ELSE 'N' END) AS BUSINESS_YN,
		    MB.MEM_NM,
		    MB.BRTH_MON_DAY,
		    MB.SEX,
		    MB.CELL,
		    NVL(MB.HOME_TEL,'') AS HOME_TEL,
		    MB.HOME_ZIP,
		    MB.HOME_ADDR,
		    MB.HOME_ADDR2,
		    MB.CI_VAL,
		    NVL(MB.EMAIL,'') AS EMAIL,
		    NVL(MB.CREDIT_RATING,'') AS CREDIT_RATING ,
		    NVL(MB.CRDT_MNG_NO,'') AS CRDT_MNG_NO,
		    NVL(MB.SAFEKEY,'') AS SAFEKEY,
		    NVL(MB.SAFEKEY_SRCH_DT,'') AS SAFEKEY_SRCH_DT,
		    NVL(MB.ACUON_FITNESS_YN,'') AS ACUON_FITNESS_YN ,
		    NVL(MB.MARKT_AGR_YN,'') AS MARKT_AGR_YN ,
		    NVL(MB.TEL_YN,'') AS TEL_YN,
		    NVL(MB.DM_YN,'') AS DM_YN,
		    NVL(MB.EMAIL_YN,'') AS EMAIL_YN,
		    NVL(MB.SMS_YN,'') AS SMS_YN,
		    NVL(MB.MARRY_YN,'') AS MARRY_YN,
		    NVL(MB.CHILD_CNT,'') AS CHILD_CNT,
		    MB.OCB_YN,
		    MB.NOTE,
		    MB.CI_VAL AS OLD_CI_VAL,
		    MB.HOME_ZIP AS OLD_HOME_ZIP,
		    NVL(MB.IDN_NO,'') AS IDN_NO,
            MB.CL
		FROM MEMBER MB
		WHERE 1=1
		AND MEM_NO =#{mem_no}
		AND DEL_FG = 'N'
    </select>
	
    
    <select id="DlwNewTypeMainConsMap.getPersInfoPcusCnsnList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeMainConsMap.getPersInfoPcusCnsnList */
               C.*
          FROM (SELECT ROWNUM AS PAGE_INDX, B.*
                  FROM (SELECT MEM_NO, PRIF_GTHR_CNSN_YN, PRIF_THPR_OFFR_CNSN_YN, ENTS_OFFR_CNSN_YN, PRIF_MRKN_PCUS_CNSN_YN
                             , DM_PCUS_CNSN_YN, EMIL_PCUS_CNSN_YN, VOC_PCUS_CNSN_YN, PRIF_GTHR_CNSN_DT, PRIF_THPR_OFFR_CNSN_DT
                             , ENTS_OFFR_CNSN_DT, PRIF_MRKN_PCUS_CNSN_DT, PRIF_MRKN_PCUS_VLD_DT
                             , CNTR_CD, RGSR_ID, RGSN_DTTM, AMND_ID, AMNT_DTTM
                             , CHAT_PCUS_CNSN_YN, TEL_PCUS_CNSN_YN
                             , (SELECT C.USER_NM
                                  FROM PS_WILLVI.TB_USER C
                                 WHERE C.USER_ID = A.RGSR_ID
                                   AND C.CNTR_CD = A.CNTR_CD) AS RGSR_NM
                             , (SELECT C.USER_NM
                                  FROM PS_WILLVI.TB_USER C
                                 WHERE C.USER_ID = A.AMND_ID
                                   AND C.CNTR_CD = A.CNTR_CD) AS AMND_NM
                          FROM PS_WILLVI.TB_PERS_INFO_PCUS_CNSN A
        <include refid="DlwNewTypeMainConsMap.selectCondition_fragment1"/>
        <if test="orderBy != null and orderBy != ''">
                         ORDER BY ${orderBy} ${orderDirection}
        </if>
                       ) B
               ) C
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
        <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
        ]]>
        </if>
    </select>
    
    <select id="DlwNewTypeMainConsMap.getPersInfoPcusSrctHstrList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeMainConsMap.getPersInfoPcusSrctHstrList */
               C.*
          FROM (SELECT ROWNUM AS PAGE_INDX, B.*
                  FROM (SELECT PRIF_PCUS_CNSN_SCRT_ID, PRIF_GTHR_CNSN_SCRT, PRIF_THPR_OFFR_CNSN_SCRT, ENTS_OFFR_CNSN_SCRT, PRIF_MRKN_PCUS_CNSN_SCRT
                             , USE_YN, CNTR_CD, RGSR_ID, RGSN_DTTM, AMND_ID
                             , AMNT_DTTM
                             , (SELECT C.USER_NM
                                  FROM PS_WILLVI.TB_USER C
                                 WHERE C.USER_ID = A.RGSR_ID
                                   AND C.CNTR_CD = A.CNTR_CD) AS RGSR_NM
                             , (SELECT C.USER_NM
                                  FROM PS_WILLVI.TB_USER C
                                 WHERE C.USER_ID = A.AMND_ID
                                   AND C.CNTR_CD = A.CNTR_CD) AS AMND_NM
                          FROM PS_WILLVI.TB_PERS_INFO_PCUS_SCRT A
                        <include refid="DlwNewTypeMainConsMap.selectCondition_fragment_scrt"/>
                        <if test="orderBy != null and orderBy != ''">
                            ORDER BY ${orderBy} ${orderDirection}
                        </if>
                       ) B
                ) C
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
        <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
        ]]>
        </if>
    </select>
    
    <!-- 고객 조회 로그 등록 -->
    <insert id="DlwNewTypeMainConsMap.insertCustInqLog" parameterType="map">
        <selectKey keyProperty="cust_inq_log_id" resultType="String" order="BEFORE">
            SELECT 'CIL' || TO_CHAR(SYSDATE, 'YYYYMMDD') || LPAD(PS_WILLVI.SEQ_COMMON.NEXTVAL, 7, '0') FROM DUAL
        </selectKey>

        INSERT /* CustBasiMap.insertCustInqLog */
          INTO PS_WILLVI.TB_CUST_INQ_LOG
               (CUST_INQ_LOG_ID, MEM_NO, CUST_INQ_TRGT_CD, CUST_INQP_ID, CUST_INQ_DTTM
              , CNTR_CD, RGSR_ID, RGSN_DTTM, AMND_ID, AMNT_DTTM)
        VALUES (#{cust_inq_log_id}, #{mem_no}, #{cust_inq_trgt_cd}, #{rgsr_id}, SYSTIMESTAMP
              , #{cntr_cd}, #{rgsr_id}, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), #{amnd_id}, TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'))
    </insert>
    
    <select id="DlwNewTypeMainConsMap.getCustUnusMemoCnt" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeMainConsMap.getCustUnusMemoCnt */
               COUNT(*)
          FROM PS_WILLVI.TB_CUST_UNUS_MEMO
         WHERE CNTR_CD = #{cntr_cd}
           AND MEM_NO = #{mem_no}
        <if test="user_id != null and user_id != ''">
            AND (OPEN_YN = 'Y'
                 OR ACTP_ID = #{user_id})
        </if>
        <if test="bzpt_divs != null and bzpt_divs != ''">
            AND BZPT_DIV IN (${bzpt_divs})
        </if>
    </select>
    
    <!-- OCB이력 카운트 -->
    <select id="DlwNewTypeMainConsMap.getOcbTransHistCnt" resultType="int">
        <!-- DM-SQLID : sql-life.xml selectOCBTransHistCnt -->


        SELECT /* DlwNewTypeMainConsMap.getOcbTransHistCnt */
               NVL(MAX(SEQ),0)+1
          FROM OCB_TRANS_HIST
    </select>
    
    <!-- 고객 이력 등록 -->
    <insert id="DlwNewTypeMainConsMap.insertCustBasiHstr" parameterType="map">
        INSERT /* DlwNewTypeMainConsMap.insertCustBasiHstr */
          INTO PS_WILLVI.MEMBER_HSTR
              (MEM_NO, MEM_NM, HUSHLD, WRPL_NM, DEPT_NM
             , CELL, HOME_TEL, WRPL_TEL, HOME_ZIP, HOME_ADDR
             , HOME_ADDR2, WRPL_ZIP, WRPL_ADDR, WRPL_ADDR2, EMAIL
             , EMAIL_CHK, SMS_CHK, CONTC_TM, CONTC_TM_FROM, CONTC_TM_TO
             , CERTF_RCV_CHK, BRTH_MON_DAY, SOL_LUN, ANNV, RE_JOIN
             , NOTE, CL, OLD_MEM_NO, RGSN_DTTM, RGSR_ID
             , AMNT_DTTM, AMND_ID, DEL_FG, ENG_NM, INSPL_ZIP
             , INSPL_ADDR, INSPL_ADDR2, IDN_NO_CHK_NOT_USE, CI_VAL, IDN_NO
             , SEX, CREDIT_RATING, ADDR_UPDATE, CRDT_MNG_NO, CARD_AUTH
             , PRN_SI_NM, HOME_ZIP_OLD, WRPL_ZIP_OLD, BLACK_CONSUMER, OCB_YN
             , ACEEPT_YN, MARKT_AGR_YN, CNTR_CD, CHNG_DTTM, SAFEKEY, SAFEKEY_SRCH_DT, ACUON_FITNESS_YN
             , DM_YN, EMAIL_YN, SMS_YN, TEL_YN
             )
       VALUES (#{mem_no}, #{mem_nm}, #{hushld}, #{wrpl_nm}, #{dept_nm}
             , REPLACE(#{cell}, '-', ''), REPLACE(#{home_tel}, '-', ''), REPLACE(#{wrpl_tel}, '-', ''), REPLACE(#{home_zip}, '-', ''), #{home_addr}
             , #{home_addr2}, REPLACE(#{wrpl_zip}, '-', ''), #{wrpl_addr}, #{wrpl_addr2}, #{email}
             , #{email_chk}, #{sms_chk}, #{contc_tm}, #{contc_tm_from}, #{contc_tm_to}
             , #{certf_rcv_chk}, #{brth_mon_day}, #{sol_lun}, #{annv}, #{re_join}
             , #{note}, #{cl}, #{old_mem_no}, #{rgsn_dttm}, #{rgsr_id}
             , #{amnt_dttm}, #{amnd_id}, #{del_fg}, #{eng_nm}, REPLACE(#{inspl_zip}, '-', '')
             , #{inspl_addr}, #{inspl_addr2}, #{idn_no_chk_not_use}, #{ci_val}, #{idn_no}
             , #{sex}, #{credit_rating}, #{addr_update}, #{crdt_mng_no}, #{card_auth}
             , #{prn_si_nm}, REPLACE(#{home_zip_old}, '-', ''), REPLACE(#{wrpl_zip_old}, '-', ''), #{black_consumer}, #{ocb_yn}
             , #{aceept_yn}, #{markt_agr_yn}, #{cntr_cd}, SYSTIMESTAMP, #{safekey}, #{safekey_srch_dt}, #{acuon_fitness_yn}
             , #{dm_yn}, #{email_yn}, #{sms_yn}, #{tel_yn}
             )
    </insert>
    
    <!-- OCB UPDATE -->
    <update id="DlwNewTypeMainConsMap.updateMemberOCB" parameterType="map" timeout="3">
    <!-- sql-life.xml updateMemberOCB -->
        UPDATE /* DlwNewTypeMainConsMap.updateMemberOCB */
               MEMBER
           SET OCB_YN	= #{ocb_yn}
             , UPD_DM	= SYSDATE
             , UPD_MAN	= #{amnd_id}
         WHERE MEM_NO 	= #{mem_no}
    </update>
    
    <select id="DlwNewTypeMainConsMap.getDlwMemberDtpt" parameterType="String" resultType="resultMap">

        SELECT /* DlwNewTypeMainConsMap.getDlwMemberDtpt */
               MEM_NO, MEM_NM, HUSHLD, WRPL_NM, DEPT_NM
             ,  nvl(CELL,' ') CELL, nvl(HOME_TEL,' ') HOME_TEL, nvl(WRPL_TEL,' ') WRPL_TEL, nvl(HOME_ZIP,' ')HOME_ZIP, nvl(HOME_ADDR,' ') HOME_ADDR
             ,  nvl(HOME_ADDR2 ,' ')HOME_ADDR2, nvl(WRPL_ZIP,' ') WRPL_ZIP, nvl(WRPL_ADDR,' ') WRPL_ADDR,  nvl(WRPL_ADDR2,' ') WRPL_ADDR2, nvl(EMAIL,' ') EMAIL
             ,  nvl(EMAIL_CHK,' ') EMAIL_CHK
             ,  nvl(SMS_CHK,' ') SMS_CHK
             ,  nvl(CONTC_TM,' ') CONTC_TM
             ,  nvl(CONTC_TM_FROM,' ') CONTC_TM_FROM
             ,  nvl(CONTC_TM_TO,' ')  CONTC_TM_TO
             ,  nvl(CERTF_RCV_CHK,' ')  CERTF_RCV_CHK
             , BRTH_MON_DAY
             ,  nvl(SOL_LUN,' ')  SOL_LUN
             , ANNV
             ,  nvl(RE_JOIN,' ')  RE_JOIN
             ,  nvl(NOTE,' ')  NOTE
             ,  nvl(CL,' ')  CL
             ,  nvl(OLD_MEM_NO,' ')  OLD_MEM_NO
             , TO_CHAR(REG_DM,'YYYYMMDD') AS RGSN_DTTM
             ,  nvl(REG_MAN,' ')   RGSR_ID
             , TO_CHAR(UPD_DM,'YYYYMMDDHH24MMSS') AS AMNT_DTTM
             ,  nvl(UPD_MAN,' ')    AMND_ID
             ,  nvl(DEL_FG,' ')  DEL_FG
             ,  nvl(ENG_NM,' ')  ENG_NM
             ,  nvl(INSPL_ZIP,' ')  INSPL_ZIP
             ,  nvl(INSPL_ADDR,' ')  INSPL_ADDR
             ,  nvl(INSPL_ADDR2,' ')  INSPL_ADDR2
             ,  nvl(IDN_NO_CHK_NOT_USE,' ')  IDN_NO_CHK_NOT_USE
             ,  nvl(CI_VAL,' ')  CI_VAL
             ,  IDN_NO  AS IDN_NO
             ,  nvl(SEX,' ')  SEX
             ,  nvl(CREDIT_RATING,' ')  CREDIT_RATING
             ,  nvl(ADDR_UPDATE,' ')  ADDR_UPDATE
             ,  nvl(CRDT_MNG_NO,' ')  CRDT_MNG_NO
             ,  nvl(CARD_AUTH,' ')  CARD_AUTH
             ,  nvl(PRN_SI_NM,' ')  PRN_SI_NM
             ,  nvl(HOME_ZIP_OLD,' ')  HOME_ZIP_OLD
             ,  nvl(WRPL_ZIP_OLD,' ')  WRPL_ZIP_OLD
             ,  nvl(BLACK_CONSUMER,' ')  BLACK_CONSUMER
             ,  nvl(OCB_YN,' ')  OCB_YN
             ,  nvl(ACEEPT_YN,' ')  ACEEPT_YN
             ,  nvl(MARKT_AGR_YN,' ')  MARKT_AGR_YN
             ,  nvl(SAFEKEY,' ')  SAFEKEY
             ,  nvl(SAFEKEY_SRCH_DT,' ')  SAFEKEY_SRCH_DT
             , ACUON_FITNESS_YN
             , NVL(DM_YN,' ')  DM_YN
             , NVL(EMAIL_YN,' ') EMAIL_YN
             , NVL(SMS_YN,' ')  SMS_YN
             , NVL(TEL_YN,' ')  TEL_YN
          FROM MEMBER
         WHERE MEM_NO = #{mem_no}
    </select>
    
    <insert id="DlwNewTypeMainConsMap.insertMember" parameterType="map" timeout="3">
                        
        <selectKey keyProperty="mem_no" resultType="String" order="BEFORE">
            SELECT FN_CREATE_MEM_NO_NEW() AS MEMNO FROM DUAL
        </selectKey>
        
        /* DlwNewTypeMainConsMap.insertMember */
		INSERT INTO MEMBER 
        (
            MEM_NO, MEM_NM, BRTH_MON_DAY, SEX, CELL,
            HOME_TEL, HOME_ZIP, HOME_ADDR, HOME_ADDR2,
            CI_VAL, EMAIL, CREDIT_RATING, CRDT_MNG_NO, SAFEKEY,
            SAFEKEY_SRCH_DT, ACUON_FITNESS_YN, MARKT_AGR_YN, TEL_YN,
            DM_YN, EMAIL_YN, SMS_YN, MARRY_YN, CHILD_CNT, OCB_YN,
            IDN_NO, NOTE, REG_MAN, REG_DM , DEL_FG, CL, CELL1
        )
        VALUES
        ( 
            #{mem_no}, TRIM(#{mem_nm}), #{brth_mon_day}, #{sex}, #{cell},
            #{home_tel}, REPLACE(#{home_zip}, '-', ''), #{home_addr}, #{home_addr2},
            #{ci_val}, #{email}, #{credit_rating}, #{crdt_mng_no}, #{safekey},
            #{safekey_srch_dt}, #{acuon_fitness_yn}, #{markt_agr_yn}, #{tel_yn},
            #{dm_yn}, #{email_yn}, #{sms_yn}, #{marry_yn}, #{child_cnt}, #{ocb_yn},
            #{idn_no}, #{note}, #{rgsr_id}, sysdate, 'N', #{cl}, REPLACE(#{cell}, '-', '')
         )
         
    </insert>
    
    <insert id="DlwNewTypeMainConsMap.mergeMemberAddrDtl" parameterType="map">
        <selectKey keyProperty="mem_addr_id" resultType="String" order="BEFORE">
            SELECT 'MAD' || TO_CHAR(SYSDATE, 'YYYYMMDD') || LPAD(PS_WILLVI.SEQ_COMMON.NEXTVAL, 7, '0') FROM DUAL
        </selectKey>

        MERGE INTO /* DlwNewTypeMainConsMap.mergeMemberAddrDtl */
              PS_WILLVI.TB_MEMBER_ADDR_DTL A
        USING (SELECT #{mem_no} AS MEM_NO
                    , REPLACE(#{home_zip}, '-', '') AS HOME_ZIP
                    , #{home_addr} AS HOME_ADDR
                    , #{home_addr2} AS HOME_ADDR2
                 FROM DUAL) B
           ON (A.MEM_NO 		= B.MEM_NO
               AND A.HOME_ZIP 	= B.HOME_ZIP
               AND A.HOME_ADDR 	= B.HOME_ADDR
            <choose>
                <when test="home_addr2 != null and home_addr2 != ''">
                    AND A.HOME_ADDR2 = B.HOME_ADDR2
                </when>
                <otherwise>
                    AND A.HOME_ADDR2 IS NULL
                </otherwise>
            </choose>
            )
         WHEN MATCHED THEN
                UPDATE SET MEM_NM		= #{mem_nm}
                         , RLTN_CD 		= #{rltn_cd}
                         , CELL 		= REPLACE(#{cell}, '-', '')
                         , HOME_TEL 	= REPLACE(#{home_tel}, '-', '')
                         , AMND_ID 		= #{amnd_id}
                         , AMNT_DTTM 	= TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
          WHEN NOT MATCHED THEN
                INSERT (MEM_ADDR_ID, MEM_NO, RLTN_CD, HOME_ZIP, HOME_ADDR
                      , HOME_ADDR2, CELL, HOME_TEL, RGSR_ID, RGSN_DTTM
                      , AMND_ID, AMNT_DTTM, CNTR_CD, MEM_NM, BZPT_DIV)
                VALUES (#{mem_addr_id}, #{mem_no}, #{rltn_cd}, REPLACE(#{home_zip}, '-', ''), #{home_addr}
                      , #{home_addr2}, REPLACE(#{cell}, '-', ''), REPLACE(#{home_tel}, '-', ''), #{rgsr_id}, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
                      , #{amnd_id}, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), #{cntr_cd}, #{mem_nm}, #{bzpt_div})
    </insert>
    
    <insert id="DlwNewTypeMainConsMap.insertMemberAddrDtlHstr" parameterType="map">
        INSERT /* DlwNewTypeMainConsMap.insertMemberAddrDtlHstr */
          INTO PS_WILLVI.TB_MEMBER_ADDR_DTL_HSTR
             ( MEM_ADDR_ID
             , CNTR_CD
             , CHNG_DTTM
             , MEM_NO
             , MEM_NM
             , RLTN_CD
             , HOME_ZIP
             , HOME_ADDR
             , HOME_ADDR2
             , CELL
             , HOME_TEL
             , BZPT_DIV
             , RGSR_ID
             , RGSN_DTTM
             , AMND_ID
             , AMNT_DTTM
             )
        SELECT MEM_ADDR_ID
             , CNTR_CD
             , SYSTIMESTAMP
             , MEM_NO
             , MEM_NM
             , RLTN_CD
             , HOME_ZIP
             , HOME_ADDR
             , HOME_ADDR2
             , CELL
             , HOME_TEL
             , BZPT_DIV
             , RGSR_ID
             , RGSN_DTTM
             , AMND_ID
             , AMNT_DTTM
          FROM PS_WILLVI.TB_MEMBER_ADDR_DTL
        <choose>
            <when test="member_addr_dtl_merge_yn != null and member_addr_dtl_merge_yn.equalsIgnoreCase('Y')">
         WHERE MEM_NO = #{mem_no}
           AND HOME_ZIP = REPLACE(#{home_zip}, '-', '')
           AND HOME_ADDR = #{home_addr}
                <choose>
                    <when test="home_addr2 != null and home_addr2 != ''">
                    AND HOME_ADDR2 = #{home_addr2}
                    </when>
                    <otherwise>
                    AND HOME_ADDR2 IS NULL
                    </otherwise>
                </choose>
            </when>
            <otherwise>
         WHERE MEM_ADDR_ID = #{mem_addr_id}
            </otherwise>
        </choose>
    </insert>
    
    <update id="DlwNewTypeMainConsMap.updateMember" parameterType="map" timeout="3">
        /* DlwNewTypeMainConsMap.updateMember */
        UPDATE MEMBER 
        SET 
        	<if test="mem_nm_chk != null and mem_nm_chk != ''">        
        		MEM_NM = TRIM(#{mem_nm}),
        	</if>
        	<if test="cell_chk != null and cell_chk != ''">                                                        
            	CELL = #{cell},
            </if>
            <if test="cell_chk != null and cell_chk != ''">                                                        
            	CELL1 = REPLACE(#{cell}, '-', ''),
            </if>
            <if test="ci_val_chk != null and ci_val_chk != ''">
            	CI_VAL = #{ci_val},
            </if>
            <if test="sex_chk != null and sex_chk != ''">
            	SEX = #{sex},
            </if>
            <if test="home_tel_chk != null and home_tel_chk != ''">
            	HOME_TEL = #{home_tel},
            </if>
            <if test="home_zip_chk != null and home_zip_chk != ''">        
            	HOME_ZIP = REPLACE(#{home_zip}, '-', ''),
            </if>
            <if test="home_addr_chk != null and home_addr_chk != ''">        
            	HOME_ADDR = #{home_addr},
            </if>
            <if test="home_addr2_chk != null and home_addr2_chk != ''">        
            	HOME_ADDR2 = #{home_addr2},     
            </if>      
            <if test="email_chk != null and email_chk != ''">        
            	EMAIL = #{email},
            </if>
            <if test="brth_mon_day_chk != null and brth_mon_day_chk != ''">        
            	BRTH_MON_DAY = #{brth_mon_day},
            </if>
            <if test="idn_no_chk != null and idn_no_chk != ''">        
            	IDN_NO = TO_CHAR(REPLACE(#{idn_no}, '-', '')),
            </if>
            <if test="credit_rating_chk != null and credit_rating_chk != ''">        
            	CREDIT_RATING = #{credit_rating},
            </if>
            <if test="crdt_mng_no_chk != null and crdt_mng_no_chk != ''">        
            	CRDT_MNG_NO = #{crdt_mng_no},
            </if>
            <if test="ocb_yn_chk != null and ocb_yn_chk != ''">        
            	OCB_YN = #{ocb_yn},
            </if>
            <if test="safekey_chk != null and safekey_chk != ''">        
            	SAFEKEY = #{safekey},
            </if>
            <if test="safekey_srch_dt_chk != null and safekey_srch_dt_chk != ''">        
            	SAFEKEY_SRCH_DT = #{safekey_srch_dt},
            </if>
            <if test="acuon_fitness_yn_chk != null and acuon_fitness_yn_chk != ''">        
            	ACUON_FITNESS_YN = #{acuon_fitness_yn},
            </if>
            <if test="markt_agr_yn_chk != null and markt_agr_yn_chk != ''">        
            	MARKT_AGR_YN = #{markt_agr_yn},
            </if>
            <if test="dm_yn_chk != null and dm_yn_chk != ''">        
            	DM_YN = #{dm_yn},
            </if>
            <if test="email_yn_chk != null and email_yn_chk != ''">        
            	EMAIL_YN = #{email_yn},
            </if>
            <if test="sms_yn_chk != null and sms_yn_chk != ''">        
            	SMS_YN = #{sms_yn},
            </if>
            <if test="tel_yn_chk != null and tel_yn_chk != ''">                       
            	TEL_YN = #{tel_yn},
            </if>
            <if test="marry_yn_chk != null and marry_yn_chk != ''">        
            	MARRY_YN = #{marry_yn},
            </if>
            <if test="child_cnt_chk != null and child_cnt_chk != ''">        
            	CHILD_CNT = #{child_cnt},   
            </if> 
            <if test="note_chk != null and note_chk != ''">                    
            	NOTE = #{note},
            </if>
            UPD_DM = sysdate,
            UPD_MAN = #{amnd_id}            
        WHERE MEM_NO = #{mem_no}
    </update>
    
    <select id="DlwNewTypeMainConsMap.getMemberAddrDtlExistCount" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeMainConsMap.getMemberAddrDtlExistCount */
               COUNT(*)
          FROM PS_WILLVI.TB_MEMBER_ADDR_DTL A
         WHERE MEM_NO = #{mem_no}
            <!-- 고객주소관리 -->
            <if test="mem_addr_id != null and mem_addr_id != ''">
           AND MEM_ADDR_ID = #{mem_addr_id}
                <choose>
                    <when test="home_zip != null and home_zip != ''">
           AND HOME_ZIP = REPLACE(#{home_zip}, '-', '')
                    </when>
                    <otherwise>
           AND HOME_ZIP IS NULL
                    </otherwise>
                </choose>
                <choose>
                    <when test="home_addr != null and home_addr != ''">
           AND HOME_ADDR = #{home_addr}
                    </when>
                    <otherwise>
           AND HOME_ADDR IS NULL
                    </otherwise>
                </choose>
            </if>

            <!-- 고객정보 / 상품정보 -->
            <if test="mem_addr_id == null or mem_addr_id == ''">
           AND HOME_ZIP = REPLACE(#{home_zip}, '-', '')
           AND HOME_ADDR = #{home_addr}
            </if>

            <!-- 항목 변경 체크 -->
            <choose>
                <when test="home_addr2 != null and home_addr2 != ''">
           AND HOME_ADDR2 = #{home_addr2}
                </when>
                <otherwise>
           AND HOME_ADDR2 IS NULL
                </otherwise>
            </choose>
            <choose>
                <when test="mem_nm != null and mem_nm != ''">
           AND MEM_NM = #{mem_nm}
                </when>
                <otherwise>
           AND MEM_NM IS NULL
                </otherwise>
            </choose>
            <choose>
                <when test="rltn_cd != null and rltn_cd != ''">
           AND RLTN_CD = #{rltn_cd}
                </when>
                <otherwise>
           AND RLTN_CD IS NULL
                </otherwise>
            </choose>
            <choose>
                <when test="cell != null and cell != ''">
           AND CELL = REPLACE(#{cell}, '-', '')
                </when>
                <otherwise>
           AND CELL IS NULL
                </otherwise>
            </choose>
            <choose>
                <when test="home_tel != null and home_tel != ''">
           AND HOME_TEL = REPLACE(#{home_tel}, '-', '')
                </when>
                <otherwise>
           AND HOME_TEL IS NULL
                </otherwise>
            </choose>
    </select>
    
     <!-- 2017.09.20 김준호 해당 고객 고유번호로 고객의 상품정보 확인 -->
    <select id="DlwNewTypeMainConsMap.selectCountProd" parameterType="map" resultType="map">
        SELECT ACCNT_NO /* DlwNewTypeMainConsMap.selectCountProd */
        FROM MEM_PROD_ACCNT
        WHERE 1=1
        AND MEM_NO =#{mem_no} /* 고유번호 */
        AND DEL_FG = 'N' /* 삭제되지 않은 건만 */
    </select>
    
    <!-- * 입력 혹은 수정된 고객 정보 상담이력 및 변견 LOG 등록 -->
    <parameterMap id="memLogSendDataMap" type="resultMap">
        <parameter property="mem_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="accnt_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="loc" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="newyn" mode="IN" jdbcType="VARCHAR" javaType="java.lang.String" />
        <parameter property="fieldnm" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="asisval" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="tobeval" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
    </parameterMap>

     <select id="DlwNewTypeMainConsMap.insertMemLogSave" statementType="CALLABLE" parameterMap="memLogSendDataMap">
           {call SP_MEMBER_HISTORY_INSERT( ?, ? ,?, ?, ?, ?, ?, ?)}
    </select>
    
    <!-- 변경삭제내역 등록 -->
    <insert id="DlwNewTypeMainConsMap.insertReqUpdDelInf" parameterType="map" timeout="3">
    <!-- DM sql-id: sql-life.insertReqUpdDelInf -->
        INSERT /* DlwNewTypeMainConsMap.insertReqUpdDelInf */
          INTO REG_UPD_DEL_INF
             ( SEQ
             , EMPLE_NO
             , MEM_NO
             , ACCNT_NO
             , WORK_DM
             , DAT1
             , DAT2
             , DAT3
             , CL1
             , CL2
             , OCC_RESON
             , NEW_YN
             , REG_DM
             , REG_MAN
             , UPD_DM
             , UPD_MAN)
        SELECT A.SEQ
             , #{rgsr_id}
             , #{mem_no}
             , #{accnt_no}
             , TO_CHAR(SYSDATE, 'YYYYMMDD')
             , #{dat1}
             , #{dat2}
             , #{dat3}
             , #{cl1}
             , ''
             , ''
             , 'Y'
             , SYSDATE
             , #{rgsr_id}
             , SYSDATE
             , #{amnd_id}
          FROM (SELECT NVL(MAX(SEQ), 0)+1 AS SEQ
                  FROM REG_UPD_DEL_INF) A
    </insert>
    
    <!-- [delFlagMemProdAccnt del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagMemProdAccnt" parameterType="map" timeout="3">
    <!-- DM sql-id: sql-life.delFlagMemProdAccnt -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagMemProdAccnt */
               MEM_PROD_ACCNT
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- [delFlagPayMng del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagPayMng" parameterType="map">
    <!-- DM sql-id: sql-life.delFlagPayMng -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagPayMng */
               PAY_MNG
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- [delFlagRescission del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagRescission" parameterType="map">
    <!-- DM sql-id: sql-life.delFlagRescission -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagRescission */
               RESCISSION
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- [delFlagCnclBrkdnMng del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagCnclBrkdnMng" parameterType="map">
    <!-- DM sql-id: sql-life.delFlagCnclBrkdnMng -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagCnclBrkdnMng */
               CNCL_BRKDN_MNG
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- [delFlagEvent del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagEvent" parameterType="map">
    <!-- DM sql-id: sql-life.delFlagEvent -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagEvent */
               EVENT
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- [delFlagTaxtProc del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagTaxtProc" parameterType="map">
    <!-- DM sql-id: sql-life.delFlagTaxtProc -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagTaxtProc */
               TAXT_PROC
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- [delFlagCmsMemb del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagCmsMemb" parameterType="map" timeout="3">
    <!-- DM sql-id: sql-life.delFlagCmsMemb -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagCmsMemb */
               CMS_MEM
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- [delFlagMstrChgInf del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagMstrChgInf" parameterType="map">
    <!-- DM sql-id: sql-life.delFlagMstrChgInf -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagMstrChgInf */
               MSTR_CHG_INF
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- [delFlagGasuAmtReg del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagGasuAmtReg" parameterType="map">
    <!-- DM sql-id: sql-life.delFlagGasuAmtReg -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagGasuAmtReg */
               GASU_AMT_REG
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- [delFlagDcAmtReg del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagDcAmtReg" parameterType="map">
    <!-- DM sql-id: sql-life.delFlagDcAmtReg -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagDcAmtReg */
               DC_AMT_REG
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- [delFlagCardMemb del_fg 수정] -->
    <update id="DlwNewTypeMainConsMap.delFlagCardMemb" parameterType="map" timeout="3">
    <!-- DM sql-id: sql-life.delFlagCardMemb -->
        UPDATE /* DlwNewTypeMainConsMap.delFlagCardMemb */
               CARD_MEM
           SET DEL_FG   = 'Y'
             , UPD_DM   = SYSDATE
             , UPD_MAN  = #{amnd_id}
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <update id="DlwNewTypeMainConsMap.deleteDlwCmsMmbr" parameterType="map" >
        <!-- DM sql-id : deleteCMSMember -->
        UPDATE /* DlwNewTypeMainConsMap.deleteDlwCmsMmbr */
               CMS_MEM
           SET DEL_FG = 'Y'
             , CNSL_DT = SYSDATE
             , UPD_DM = SYSDATE
             , UPD_MAN = #{emple_no}
         <where>
             <if test="acpt_mthd == '07'">
                 <if test="cl_tmp == 'tempModule'">
                     AND ACCNT_NO = #{accnt_no}
                 </if>
                 <if test="cl_tmp == 'syncCheck'">
                     AND SYNC_NO = #{accnt_no}
                 </if>
             </if>
             <if test="acpt_mthd != '07'">
                 AND ACCNT_NO = #{accnt_no}
             </if>
         </where>
    </update>
    
    <!-- 대명 개명신청자 웹 디비  업데이트 -->
    <update id="DlwNewTypeMainConsMap.updateMember_web" parameterType="map" timeout="3">
    <!-- DM sql-id : sql-task.updateMember_web -->
        UPDATE /* DlwNewTypeMainConsMap.updateMember_web*/
               MB_MEM_MST@DMWEB
           SET NAME = #{dat3}
         WHERE UNQ_NO = #{mem_no}
    </update>
    
    <select id="DlwNewTypeMainConsMap.getDlwCustPrdtList" parameterType="map" resultType="resultMap">
        <!-- sql-life.xml selectMemberList -->
        /* DlwNewTypeMainConsMap.getDlwCustPrdtList */
		<!--
        SELECT
               A.MEM_NO, A.MEM_NM, A.SEX, A.HOME_ZIP, A.HOME_ADDR
             , A.HOME_ADDR2, A.WRPL_ZIP, A.WRPL_ADDR, A.WRPL_ADDR2, A.CELL
             , A.HOME_TEL, A.WRPL_TEL, A.CI_VAL, A.CREDIT_RATING, A.DEPT_NM
             , A.CI_VAL AS OLD_CI_VAL, A.HOME_ZIP AS OLD_HOME_ZIP, A.HOME_ADDR AS OLD_HOME_ADDR, A.HOME_ADDR2 AS OLD_HOME_ADDR2
             , A.OCB_YN, A.MARKT_AGR_YN
             , CASE WHEN (A.BRTH_MON_DAY = '19000101' OR A.BRTH_MON_DAY IS NULL) THEN ''
                    ELSE A.BRTH_MON_DAY
                END AS BRTH_MON_DAY
             , (SELECT CD_NM
                  FROM COM_CD
                 WHERE USE_YN = 'Y'
                   AND GRP_CD = '0123'
                   AND COM_CD = A.SEX) AS SEX_NM
             , CASE WHEN  LENGTH(A.IDN_NO) = 10
                    THEN 'Y'
                    ELSE 'N'
                END AS BUSINESS_YN
             , CASE WHEN LENGTH(A.IDN_NO)  = 13
                    THEN SUBSTR(A.BRTH_MON_DAY, 0,8)
                    ELSE  A.IDN_NO
                     END AS IDN_NO
             , A.EMAIL, A.EMAIL_CHK, A.SMS_CHK
             , A.CRDT_MNG_NO
             , A.NOTE
             , A.DEL_FG
             , NVL(A.BLACK_CONSUMER,'N') BLACK_CONSUMER

             , B.ACCNT_NO, B.PROD_CD
             , B.BANK_ACCNT_NO  AS BANK_ACCNT_NO
             , B.JOIN_DT
             , B.EMPLE_NO
             , FN_EMPLE_NM(B.EMPLE_NO) AS EMPLE_NM
             , FN_DEPT_NM((SELECT DEPT_CD
                           FROM EMPLOYEE
                           WHERE EMPLE_NO = B.EMPLE_NO)) AS EMPLE_DEPT_NM
             , D.EXPR_NO
             , A.SAFEKEY
             , A.SAFEKEY_SRCH_DT
             , A.ACUON_FITNESS_YN
             , TO_CHAR(SYSDATE, 'YYYYMMDD') AS CURR_YMD
             , A.DM_YN
             , A.EMAIL_YN
             , SMS_YN
             , TEL_YN
             , MARRY_YN
             , CHILD_CNT
          FROM MEMBER A
          LEFT OUTER JOIN MEM_PROD_ACCNT B
                          ON A.MEM_NO = B.MEM_NO
                          AND B.DEL_FG = 'N'
          LEFT OUTER JOIN EMPLOYEE EMP
                          ON EMP.EMPLE_NO = B.EMPLE_NO

          LEFT OUTER JOIN PRODUCT D
                          ON B.PROD_CD = D.PROD_CD
                          AND D.DEL_FG = 'N'
          LEFT OUTER JOIN PAY_MNG E
                          ON B.ACCNT_NO = E.ACCNT_NO
                          AND E.DEL_FG = 'N'
                          AND E.NO = 1
          LEFT OUTER JOIN RESCISSION F
                          ON B.ACCNT_NO = F.ACCNT_NO
                          AND F.DEL_FG = 'N'
          LEFT OUTER JOIN CMS_MEM G
                          ON B.ACCNT_NO = G.ACCNT_NO
                          AND G.DEL_FG = 'N'
         WHERE A.DEL_FG = 'N'
          -->

        SELECT
            /*+INDEX(MPA, IDX_MEM_PROD_ACCNT_MEM_NO)*/
            MB.MEM_NO,
            MPA.ACCNT_NO,
            MB.MEM_NM,
            MB.SEX,
            MB.HOME_ZIP,
            MB.HOME_ADDR,
            MB.HOME_ADDR2,
            MB.WRPL_ZIP,
            MB.WRPL_ADDR,
            MB.WRPL_ADDR2,
            MB.CELL,
            MB.HOME_TEL,
            MB.WRPL_TEL,
            MB.CI_VAL,
            MB.CREDIT_RATING,
            MB.DEPT_NM,
            MB.CI_VAL AS OLD_CI_VAL,
            MB.HOME_ZIP AS OLD_HOME_ZIP,
            MB.HOME_ADDR AS OLD_HOME_ADDR,
            MB.HOME_ADDR2 AS OLD_HOME_ADDR2,
            MB.OCB_YN,
            MB.MARKT_AGR_YN,
            CASE WHEN (MB.BRTH_MON_DAY = '19000101' OR MB.BRTH_MON_DAY IS NULL) THEN '' ELSE MB.BRTH_MON_DAY END AS BRTH_MON_DAY,
            (SELECT CD_NM
                  FROM COM_CD
                 WHERE USE_YN = 'Y'
                   AND GRP_CD = '0123'
                   AND COM_CD = MB.SEX) AS SEX_NM ,
             (CASE WHEN  LENGTH(MB.IDN_NO) = 10 THEN 'Y' ELSE 'N' END) AS BUSINESS_YN,
             (CASE WHEN LENGTH(MB.IDN_NO)  = 13 THEN SUBSTR(MB.BRTH_MON_DAY, 0,8) ELSE  MB.IDN_NO END) AS IDN_NO,
             MB.EMAIL,
             MB.EMAIL_CHK,
             MB.SMS_CHK,
             MB.CRDT_MNG_NO,
             MB.NOTE,
             MB.DEL_FG,
             NVL(MB.BLACK_CONSUMER,'N') BLACK_CONSUMER,
             MPA.ACCNT_NO,
             MPA.PROD_CD,
             MPA.BANK_ACCNT_NO  AS BANK_ACCNT_NO,
             MPA.JOIN_DT,
             MPA.EMPLE_NO,
             EMP.EMPLE_NM AS EMPLE_NM,
             DEP.DEPT_NM AS EMPLE_DEPT_NM,
             PD.EXPR_NO,
             MB.SAFEKEY,
             MB.SAFEKEY_SRCH_DT,
             MB.ACUON_FITNESS_YN,
             TO_CHAR(SYSDATE, 'YYYYMMDD') AS CURR_YMD,
             MB.DM_YN,
             MB.EMAIL_YN,
             MB.SMS_YN,
             MB.TEL_YN,
             MB.MARRY_YN,
             MB.CHILD_CNT
          FROM MEMBER MB LEFT OUTER JOIN
              MEM_PROD_ACCNT MPA ON MPA.MEM_NO = MB.MEM_NO AND MPA.DEL_FG = 'N' LEFT OUTER JOIN
              EMPLOYEE EMP ON EMP.EMPLE_NO = MPA.EMPLE_NO LEFT OUTER JOIN
              DEPARTMENT DEP ON EMP.DEPT_CD = DEP.DEPT_CD  LEFT OUTER JOIN
              PRODUCT PD ON MPA.PROD_CD = PD.PROD_CD AND PD.DEL_FG = 'N'
         WHERE 1=1
         	AND MB.DEL_FG = 'N'

        <if test="dataAthrQury != null and dataAthrQury != ''">
            ${dataAthrQury}
        </if>
        <if test="mem_no != null and mem_no != ''">
            AND MB.MEM_NO = #{mem_no}
        </if>
        <if test="mem_nm != null and mem_nm != ''">
            AND MB.MEM_NM = #{mem_nm}
        </if>
        <if test="idn_no != null and idn_no != ''">
            AND MB.IDN_NO LIKE REPLACE(#{idn_no}, '-', '') || '%'
        </if>
        <if test="ci_val != null and ci_val != ''">
            AND MB.CI_VAL = #{ci_val}
        </if>
        <if test="accnt_no != null and accnt_no != ''">
            <if test="accnt_no != '00000'">
                AND MPA.ACCNT_NO = #{accnt_no}
            </if>
        </if>
        <if test="home_tel != null and home_tel != ''">
            AND MB.HOME_TEL = #{home_tel}
        </if>
        <if test="cell != null and cell != ''">
            AND REPLACE(MB.CELL,'-','') = REPLACE(#{cell},'-','')  <!-- 2017.11.10 김찬영 REPLACE추가  -->
        </if>
        <if test="wrpl_tel != null and wrpl_tel != ''">
            AND MB.WRPL_TEL = #{wrpl_tel}
        </if>
        <if test="brth_mon_day != null and brth_mon_day != ''">
            <!-- AND CONVERT(VARCHAR, A.BRTH_MON_DAY, 112) = CONVERT(VARCHAR, #{brth_mon_day}, 112) -->
            AND MB.BRTH_MON_DAY = #{brth_mon_day}
        </if>
        <if test="sex != null and sex != ''">
            AND MB.SEX = #{sex}
        </if>
        <if test="unty_inq_yn != null and unty_inq_yn != ''">
            AND ROWNUM = 1
        </if>
        ORDER BY MB.MEM_NM, MB.BRTH_MON_DAY
    </select>
    
    <select id="DlwNewTypeMainConsMap.getIbDpmsReslHstrCount" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeMainConsMap.getIbDpmsReslHstrCount */
                COUNT(*)
          FROM (SELECT *
                  FROM PS_WILLVI.TB_TRGT_CUST_DTPT TD INNER JOIN PS_WILLVI.TB_DPMS_RESL_HSTR TH
                    ON (TD.TRGT_CUST_DTPT_ID = TH.TRGT_CUST_DTPT_ID)
                  <include refid="DlwNewTypeMainConsMap.selectCondition_fragment2"/>
                ) B
    </select>
    
    <select id="DlwNewTypeMainConsMap.getIbDpmsReslHstrList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeMainConsMap.getIbDpmsReslHstrList */
                C.*
                 , PS_WILLVI.GETCODENM('CAM090', C.DPMS_RESL_CD, C.CNTR_CD) AS DPMS_RESL_NM
                 , PS_WILLVI.GETCODENM('CAM100', C.DPMS_STAT_CD, C.CNTR_CD) AS DPMS_STAT_NM
                 , PS_WILLVI.GETCODENM('CAM130', C.DPMS_TLPH_DIV_CD, C.CNTR_CD) AS DPMS_TLPH_DIV_NM
                 , (SELECT USER_NM FROM PS_WILLVI.TB_USER WHERE USER_ID = C.CNSR_ID ) AS CNSR_NM
                 , (SELECT SUB_TRGT_LIST_NM FROM PS_WILLVI.TB_SUB_TRGT_LIST_DTL
                                           WHERE SUB_TRGT_LIST_ID = C.SUB_TRGT_LIST_ID) AS SUB_TRGT_LIST_NM
                 , (SELECT CMPG_NM FROM PS_WILLVI.TB_CMPG_BASI WHERE CMPG_ID = C.CMPG_ID) AS CMPG_NM
          FROM (SELECT ROWNUM AS PAGE_INDX
                     , CHNG_DTTM, CNTR_CD, CMPG_ID, TRGT_LIST_ID ,MEM_NO
                     , SUB_TRGT_LIST_ID, TRGT_CUST_DTPT_ID, CNSR_ID, DPMS_RESL_CD
                     , DPMS_STAT_CD, DPMS_TLPH_DIV_CD, DPMS_TLNO, DPMS_RESL_CNTN, DPMS_TMCNT
                     , DPMS_DTTM, PROD_JOIN_YN , RGSR_ID, RGSN_DTTM, AMND_ID, AMNT_DTTM
                  FROM ( SELECT TO_CHAR(TH.CHNG_DTTM, 'YYYYMMDDHH24MISS') AS CHNG_DTTM, TH.CNTR_CD, TH.CMPG_ID, TH.TRGT_LIST_ID
                              , TH.SUB_TRGT_LIST_ID, TH.TRGT_CUST_DTPT_ID, TH.CNSR_ID, TH.DPMS_RESL_CD , TD.MEM_NO
                              , TH.DPMS_STAT_CD, TH.DPMS_TLPH_DIV_CD, TH.DPMS_TLNO, TH.DPMS_RESL_CNTN, TH.DPMS_TMCNT
                              , TO_CHAR(TH.DPMS_DTTM, 'YYYYMMDDHH24MISS') AS DPMS_DTTM, TH.PROD_JOIN_YN
                              , TH.RGSR_ID, TH.RGSN_DTTM, TH.AMND_ID, TH.AMNT_DTTM
                          FROM PS_WILLVI.TB_TRGT_CUST_DTPT TD INNER JOIN PS_WILLVI.TB_DPMS_RESL_HSTR TH
                                                            ON (TD.TRGT_CUST_DTPT_ID = TH.TRGT_CUST_DTPT_ID)
                            <include refid="DlwNewTypeMainConsMap.selectCondition_fragment2"/>
                             <if test="orderBy != null and orderBy != ''">
                                 ORDER BY ${orderBy} ${orderDirection}
                             </if>
                        ) B
                    ) C
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
        <![CDATA[
            WHERE PAGE_INDX >= #{startLine}
              AND PAGE_INDX < #{endLine}
        ]]>
        </if>
    </select>
    
    <select id="DlwNewTypeMainConsMap.getVocDtlCount" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeMainConsMap.getVocDtlCount */
               COUNT(*)
          FROM PS_WILLVI.TB_VOC_DTL A
        <include refid="DlwNewTypeMainConsMap.selectCondition_fragment3" />
    </select>
    
    <select id="DlwNewTypeMainConsMap.getVocDtlList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeMainConsMap.getVocDtlList */
               C.*
             , PS_WILLVI.GETCODENM('CNS080', VOC_TYP_CD, CNTR_CD) AS VOC_TYP_NM
             , PS_WILLVI.GETCODENM('CNS090', VOC_IMPC_CD, CNTR_CD) AS VOC_IMPC_NM
             , PS_WILLVI.GETCODENM('CNS100', VOC_DSPS_STAT_CD, CNTR_CD) AS VOC_DSPS_STAT_NM
             , (SELECT D.TEAM_NM
                  FROM PS_WILLVI.TB_CONS_TEAM D
                 WHERE D.TEAM_CD = C.VOC_DSSR_TEAM1_CD
                   AND D.CNTR_CD = C.CNTR_CD) AS VOC_DSSR_TEAM1_NM
             , (SELECT D.TEAM_NM
                  FROM PS_WILLVI.TB_CONS_TEAM D
                 WHERE D.TEAM_CD = C.VOC_DSSR_TEAM2_CD
                   AND D.CNTR_CD = C.CNTR_CD) AS VOC_DSSR_TEAM2_NM
             , (SELECT D.TEAM_NM
                  FROM PS_WILLVI.TB_CONS_TEAM D
                 WHERE D.TEAM_CD = C.VOC_ACTP_TEAM1_CD
                   AND D.CNTR_CD = C.CNTR_CD) AS VOC_ACTP_TEAM1_NM
             , (SELECT D.TEAM_NM
                  FROM PS_WILLVI.TB_CONS_TEAM D
                 WHERE D.TEAM_CD = C.VOC_ACTP_TEAM2_CD
                   AND D.CNTR_CD = C.CNTR_CD) AS VOC_ACTP_TEAM2_NM
             , (SELECT D.USER_NM
                  FROM PS_WILLVI.TB_USER D
                 WHERE D.USER_ID = C.RGSR_ID
                   AND D.CNTR_CD = C.CNTR_CD) AS RGSR_NM
             , (SELECT D.USER_NM
                  FROM PS_WILLVI.TB_USER D
                 WHERE D.USER_ID = C.AMND_ID
                   AND D.CNTR_CD = C.CNTR_CD) AS AMND_NM
             , (CASE WHEN HPCL_TRGT_YN = 'Y'
                     THEN (SELECT D.USER_NM
                             FROM PS_WILLVI.TB_USER D
                            WHERE D.USER_ID = C.HPCL_DSSR_ID
                              AND D.CNTR_CD = C.CNTR_CD)
                     ELSE ''
                END) AS HPCL_DSSR_NM
             , (CASE WHEN HPCL_TRGT_YN = 'Y'
                     THEN PS_WILLVI.GETCODENM('CNS100', C.HPCL_DSPS_STAT_CD, C.CNTR_CD)
                     ELSE ''
                END) AS HPCL_DSPS_STAT_NM
             , (CASE WHEN VOC_DSPS_STAT_CD = '30' OR SYSDATE - TO_DATE(VOC_ACPG_DTTM,'YYYYMMDDHH24MISS') <![CDATA[<]]> 0
                     THEN NULL
                     ELSE TRUNC(SYSDATE - TO_DATE(VOC_ACPG_DTTM, 'YYYYMMDDHH24MISS')) || '일 ' ||
                          TRUNC(MOD((SYSDATE - TO_DATE(VOC_ACPG_DTTM ,'YYYYMMDDHH24MISS')), 1) * 24) || '시간 ' ||
                          LPAD(TRUNC(MOD((SYSDATE - TO_DATE(VOC_ACPG_DTTM, 'YYYYMMDDHH24MISS')) * 24, 1) * 60), 2, 0) || '분'
                END) AS VOC_DSPS_TERM
              , C.TCCONSNO
              ,C.TCACCNT_NO
              , (select cons_typ_nm  from PS_WILLVI.TB_CONS_TYP_CD   where cons_typ_cd =  C.TCCONS_TYP3_CD)  TCCONS_TYP3_NM
          FROM (SELECT ROWNUM AS PAGE_INDX, B.*
                     , (SELECT C.HGRN_TEAM_CD
                          FROM PS_WILLVI.TB_CONS_TEAM C
                         WHERE C.TEAM_CD = B.VOC_DSSR_TEAM2_CD
                           AND C.CNTR_CD = B.CNTR_CD) AS VOC_DSSR_TEAM1_CD
                     , (SELECT C.HGRN_TEAM_CD
                          FROM PS_WILLVI.TB_CONS_TEAM C
                         WHERE C.TEAM_CD = B.VOC_ACTP_TEAM2_CD
                           AND C.CNTR_CD = B.CNTR_CD) AS VOC_ACTP_TEAM1_CD
                  FROM (SELECT VOC_ID, VOC_ACPG_CHNL_CD, MEM_NO, VOC_CUST_NM, A.CONSNO
                             , VOC_TYP_CD, VOC_IMPC_CD, VOC_TITL, VOC_ACPG_CNTN, SMS_RPL_YN
                             , SMS_RPL_CNPL_TLNO, TLPH_RPL_YN, TLPH_RPL_CNPL_TLNO, EMIL_RPL_YN, EMIL_RPL_ADDR
                             , VOC_DSPS_STAT_CD, VOC_DSPS_CNTN, VOC_ACTP_ID, VOC_ACPG_DTTM, VOC_DSSR_ID
                             , VOC_DSPS_DTTM, HPCL_TRGT_YN, HPCL_SIDO_TMCNT, HPCL_DSSR_ID, HPCL_DSPS_DTTM
                             , HPCL_DSPS_STAT_CD, MEM_NM, VOC_ACTP_ID AS OLD_VOC_ACTP_ID
                             , A.CNTR_CD, RGSR_ID, RGSN_DTTM, AMND_ID, AMNT_DTTM
                             , (SELECT B.USER_NM
                                  FROM PS_WILLVI.TB_USER B
                                 WHERE B.USER_ID = A.VOC_ACTP_ID
                                   AND B.CNTR_CD = A.CNTR_CD) AS VOC_ACTP_NM
                             , (SELECT B.TEAM_CD
                                  FROM PS_WILLVI.TB_USER B
                                 WHERE B.USER_ID = A.VOC_ACTP_ID
                                   AND B.CNTR_CD = A.CNTR_CD) AS VOC_ACTP_TEAM2_CD
                             , (SELECT B.USER_NM
                                  FROM PS_WILLVI.TB_USER B
                                 WHERE B.USER_ID = A.VOC_DSSR_ID
                                   AND B.CNTR_CD = A.CNTR_CD) AS VOC_DSSR_NM
                             , (SELECT B.TEAM_CD
                                  FROM PS_WILLVI.TB_USER B
                                 WHERE B.USER_ID = A.VOC_DSSR_ID
                                   AND B.CNTR_CD = A.CNTR_CD) AS VOC_DSSR_TEAM2_CD
                             ,TC.CONSNO TCCONSNO
                             ,TC.ACCNT_NO TCACCNT_NO
                             ,TC.CONS_TYP3_CD TCCONS_TYP3_CD
                          FROM PS_WILLVI.TB_VOC_DTL A
                              INNER join (SELECT CNTR_CD,CONSNO,ACCNT_NO,CONS_TYP3_CD  FROM PS_WILLVI.TB_CONS )TC ON TC.CNTR_CD = 'CCA' AND  A.consno =TC.consno

                    <include refid="DlwNewTypeMainConsMap.selectCondition_fragment3"/>
                    <if test="orderBy != null and orderBy != ''">
                                     ORDER BY ${orderBy} ${orderDirection}
                    </if>
                       ) B
               ) C
    <if test="excel_fg == null or excel_fg == '' or !excel_fg.equalsIgnoreCase('Y')">
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
        <![CDATA[
             WHERE PAGE_INDX >= #{startLine}
               AND PAGE_INDX <  #{endLine}
            ]]>
        </if>
    </if>
    </select>
    
    <select id="DlwNewTypeMainConsMap.getChatSndgHstrCount" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeMainConsMap.getChatSndgHstrCount */
               COUNT(*)
          FROM PS_WILLVI.TB_CHAT_SNDG_HSTR A
          <choose>
             <when test = "chat_fg != null and chat_fg !='' and chat_fg.equalsIgnoreCase('Y')">
                WHERE CNTR_CD = #{cntr_cd}
                  AND (MEM_NO = #{mem_no} OR CELL = REPLACE(#{v_cell}, '-', ''))
             </when>
             <otherwise>
                 <include refid="DlwNewTypeMainConsMap.selectCondition_fragment4"/>
             </otherwise>
          </choose>
    </select>
    
    <select id="DlwNewTypeMainConsMap.getChatSndgHstrList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeMainConsMap.getChatSndgHstrList */
               C.*
             , CASE WHEN CHAT_SNDG_DIV_CD = '0' THEN 'SMS'
                    WHEN CHAT_SNDG_DIV_CD = '2' THEN 'MMS'
                    WHEN CHAT_SNDG_DIV_CD = '3' THEN 'LMS'
                    WHEN CHAT_SNDG_DIV_CD = '4' THEN '알림톡'
                    ELSE ''
                END CHAT_SNDG_DIV_NM
                    /***********************************************
                    2017-09-26 김준호 알림톡 관련 코드값 추가 및 수정
                    ***********************************************/
             , CASE
                    WHEN  C.GUBUN= 'B' THEN NVL((SELECT CD_NM FROM PS_WILLVI.TB_CD T WHERE CD_SET_CD = 'MSG001' AND CD= CHAT_SNDG_STAT_CD),'알림톡실패')
                    ELSE CASE WHEN CHAT_SNDG_STAT_CD = '3' THEN '완료'
                          WHEN CHAT_SNDG_STAT_CD = '2' THEN '결과대기'
                          WHEN CHAT_SNDG_STAT_CD = '1' THEN '전송대기'
                          WHEN CHAT_SNDG_STAT_CD = 'U' THEN '전송대기'
                          ELSE ''
                          END
                END CHAT_SNDG_STAT_NM
                   /*****************************************
                    2017-09-26 김준호 알림톡 관련 코드값 추가 및 수정
                    *****************************************/
             , CASE
                  WHEN C.GUBUN = 'B' THEN NVL((SELECT CD_NM FROM PS_WILLVI.TB_CD T WHERE CD_SET_CD = 'MSG002' AND (CD= CHAT_SNDG_RESL_CD OR ADTL_CD = CHAT_SNDG_RESL_CD)),'알림톡실패')
                  ELSE CASE WHEN CHAT_SNDG_RESL_CD = '1000' THEN '성공'
                            WHEN CHAT_SNDG_RESL_CD IS NOT NULL THEN '실패'
                            ELSE ''
                            END
                END CHAT_SNDG_RESL_NM
             , (SELECT D.TEAM_NM
                  FROM PS_WILLVI.TB_CONS_TEAM D
                 WHERE D.TEAM_CD = C.TEAM_CD) AS TEAM_NM
             , (SELECT D.TEAM_NM
                  FROM PS_WILLVI.TB_CONS_TEAM D
                 WHERE D.TEAM_CD = C.HGRN_TEAM_CD) AS HGRN_TEAM_NM
          FROM (SELECT ROWNUM AS PAGE_INDX
                     , B.*
                     , (SELECT C.TEAM_CD
                          FROM PS_WILLVI.TB_USER C
                         WHERE C.USER_ID = B.SNDG_CHPR_ID
                           AND C.CNTR_CD = B.CNTR_CD) AS TEAM_CD
                     , (SELECT D.HGRN_TEAM_CD
                          FROM PS_WILLVI.TB_USER C
                             , PS_WILLVI.TB_CONS_TEAM D
                         WHERE C.USER_ID = B.SNDG_CHPR_ID
                           AND C.CNTR_CD = B.CNTR_CD
                           AND C.TEAM_CD = D.TEAM_CD
                           AND C.CNTR_CD = D.CNTR_CD) AS HGRN_TEAM_CD
                  FROM (SELECT CNTR_CD, CHAT_SNDG_HSTR_ID, CELL, CHAT_SNDG_DIV_CD, CHAT_MSG_TITL
                             , CHAT_MSG_CNTN, MSG_TRNM_SCS_YN, MSG_TRNM_FALR_RSN
                             , TO_CHAR(SNDG_DTTM, 'YYYY-MM-DD HH24:MI') AS SNDG_DTTM
                             , SNDG_CHPR_ID
                             , RESR_YN, TO_CHAR(RESR_DTTM, 'YYYY-MM-DD HH24:MI') AS RESR_DTTM, CNTR_RPRS_TLNO, CONSNO, MEM_NO
                             , MEM_NM, CMPG_ID, TRGT_LIST_ID, TRGT_CUST_ID
                             , CHAT_SNDG_STAT_CD, CHAT_SNDG_RESL_CD
                             , RGSR_ID, RGSN_DTTM, AMND_ID, AMNT_DTTM
                             , (SELECT USER_NM
                                  FROM PS_WILLVI.TB_USER
                                 WHERE USER_ID = A.SNDG_CHPR_ID
                                   AND CNTR_CD = A.CNTR_CD) AS SNDG_CHPR_NM
                             , A.GUBUN
                          FROM (select TC.*, 'A' AS GUBUN from PS_WILLVI.TB_CHAT_SNDG_HSTR TC
                                union all
                                select TN.*, 'B' AS GUBUN from PS_WILLVI.TB_CHAT_SNDG_HSTR_NEW TN) A
                          <choose>
                             <when test = "chat_fg != null and chat_fg !='' and chat_fg.equalsIgnoreCase('Y')">
                                WHERE CNTR_CD = #{cntr_cd}
                                  AND (MEM_NO = #{mem_no} OR CELL = REPLACE(#{v_cell}, '-', ''))
                             </when>
                             <otherwise>
                                 <include refid="DlwNewTypeMainConsMap.selectCondition_fragment4"/>
                             </otherwise>
                          </choose>
                    <if test="orderBy != null and orderBy != ''">
                        ORDER BY ${orderBy} ${orderDirection}
                    </if>
                       ) B
               ) C
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
        <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
        ]]>
        </if>
    </select>
    
    <!-- 회원 상품 정보 조회 -->
    <select id="DlwNewTypeMainConsMap.getDlwConsProdList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id: sql-life.selectMemberList -->
		SELECT /*DlwNewTypeMainConsMap.getDlwConsProdList*/
		    PROD_NM,
		    ACCNT_NO,
		   CASE WHEN KSTBIT IN ('01','02') THEN 0 ELSE 1 END AS MEM_ORDER
		FROM
		(
		SELECT
		    MPA.ACCNT_NO,
		    MPA.JOIN_DT,
		    MPA.REG_DM,
		    PD.PROD_CD,
		    PD.PROD_NM,    
		    KSTBIT,
		    (SELECT STAT FROM HP_CALL WHERE ACCNT_NO = MPA.ACCNT_NO) AS STAT   
		FROM MEMBER_DAMO MB INNER JOIN 
		    MEM_PROD_ACCNT MPA ON MB.MEM_NO = MPA.MEM_NO AND MPA.DEL_FG = 'N' INNER JOIN
		    PRODUCT PD ON PD.PROD_CD = MPA.PROD_CD 
		WHERE 1=1
		AND MB.DEL_FG = 'N'
		AND MB.MEM_NO = #{mem_no}
		) MAIN
		ORDER BY CASE WHEN KSTBIT IN ('01','02') THEN 0 ELSE 1 END ASC, REG_DM DESC, ACCNT_NO DESC

    </select>
    
    <!-- 회원 상품 정보 조회 -->
    <select id="DlwNewTypeMainConsMap.getDlwConsProdListDtl" parameterType="map" resultType="resultMap">
    <!-- DM sql-id: sql-life.selectMemberList -->
		SELECT  /*DlwNewTypeMainConsMap.getDlwConsProdListDtl*/
		    MAIN.*,
		    CASE WHEN KSTBIT = '03' AND RESN_CL IN ('01','03') AND NVL(RESN_PROC_YN,'N') ='Y' THEN FN_COM_NM('64', MAIN.RESN_CL) 
                 WHEN KSTBIT = '03' AND RESN_CL IN ('01','03') AND NVL(RESN_PROC_YN,'N') ='N' THEN '해약미처리'
                 WHEN KSTBIT = '03' AND RESN_CL NOT IN ('01','03') THEN FN_COM_NM('64', MAIN.RESN_CL) 
		         WHEN KSTBIT = '04' THEN FN_COM_NM('02', MAIN.EVENT_CL)
		    ELSE '' 
		    END AS EVENT_DETAIL 
		   
		FROM
		(
		    SELECT 
		        MPA.ACCNT_NO,
		        MPA.MEM_NO,
		        MPA.EMPLE_NO,
		        EMP.EMPLE_NM,
		        MPA.PROD_CD,
		        PD.PROD_NM,    
		        PD.PROD_AMT,
		        PD.SECTION_THR,  
		        MPA.BEF_EMPLE_CD,
		        MPA.PROD_MODEL_KIND,
		        B_EMP.EMPLE_NM AS BEF_EMPLE_NM,
		        FN_DEPT_NM(EMP.DEPT_CD) AS EMPLE_DEPT_NM,
		        FN_DEPT_NM(B_EMP.DEPT_CD) AS BEF_EMPLE_DEPT_NM,    
		        TBL_PMD.MODEL_CD AS PROD_MODEL_CD,
		        (
		            SELECT 
		                FN_MODEL_CL_NM(PMM.PROD_KIND) 
		            FROM PRODUCT_MODEL_MST PMM
		            WHERE PMM.PROD_CD = MPA.PROD_CD
		            AND PMM.PROD_KIND = MPA.PROD_MODEL_KIND
		            AND PMM.DEL_FG = 'N'
		        ) AS PROD_MODEL_KIND_NM,   
		        NVL(TBL_PMD.MODEL_NM || CASE WHEN NVL(TBL_PMD.DISCONTINUED_DT, '99991231') >  TO_CHAR(SYSDATE, 'YYYYMMDD')  THEN '' ELSE '(단종)'  END ,'') PROD_MODEL_NM,    
		        MPA.PROD_KIND,       
		        (SELECT PROD_KIND_NM FROM PRODUCT_KIND WHERE MODEL_CL_CD = MPA.PROD_MODEL_KIND AND SEQ = MPA.PROD_KIND) AS PROD_KIND_NM,
		        (SELECT STAT FROM HP_CALL WHERE ACCNT_NO = MPA.ACCNT_NO ) AS HPCL_STAT_CD,
		        --해약금,
		        MPA.PAY_MTHD,
		        FN_COM_NM('01', MPA.PAY_MTHD) AS PAY_MTHD_NM,        
		        MPA.JOIN_DT,
		       -- TO_CHAR(ADD_MONTHS(MPA.JOIN_DT, PD.EXPR_NO - MPA.NEW_CHAN_GUNSU - 1 +
		       --                    NVL((SELECT 
		       --                            NVL(MME.EXT_PERIOD, 0) 
		       --                         FROM LF_DMUSER.TB_MEMBER_MANGI_EXT MME 
		       --                         WHERE 1=1 
		       --                         AND DEL_FG = 'N' 
		       --                         AND MME.ACCNT_NO = MPA.ACCNT_NO), 0) * 12 ),'YYYYMMDD') AS MAN_DAY,
		       --  (NVL((SELECT NVL(MME.EXT_PERIOD, 0) FROM LF_DMUSER.TB_MEMBER_MANGI_EXT MME WHERE 1=1 AND DEL_FG = 'N' AND MME.ACCNT_NO = MPA.ACCNT_NO), 0)) AS MANGI_PERIOD,
		        
		        FN_GET_MANDAY(MPA.ACCNT_NO, MPA.JOIN_DT, PD.EXPR_NO, MPA.NEW_CHAN_GUNSU,'NEW') AS MAN_DAY, 
	            FN_GET_MANSTAT(MPA.ACCNT_NO, MPA.JOIN_DT, PD.EXPR_NO, MPA.NEW_CHAN_GUNSU) AS MAN_STAT,
	            '' AS MANGI_PERIOD,
		        FN_EMPLE_NM(MPA.REG_MAN) AS CNSL_MAN,
		        NVL(MPA.JOIN_CL,'01') AS JOIN_CL,
		        MPA.NEW_CHAN_GUNSU,
		        
		        MPA.MAIN_CONTRACT,
		        FN_COM_NM('0194', MPA.MAIN_CONTRACT) AS MAIN_CONTRACT_NM,
		        MPA.B2B_COMP_CD,
		        NVL(( SELECT COM_NM FROM B2BCOMCD WHERE COM_CD = MPA.B2B_COMP_CD ),'') AS B2B_COMP_NM,
		        NVL(MPA.B2B_EMPLE_NO, '') AS B2B_EMPLE_NO,
		        NVL(MPA.B2B_EMPLE_CI, '') AS B2B_EMPLE_CI,
		        NVL(MPA.SM_SHOP_INFO, '') AS SM_SHOP_INFO,
		        NVL(FN_COM_NM('0184', MPA.SM_SHOP_INFO), '') AS SM_SHOP_NM,
		        NVL(MPA.INSPL_ZIP, '') AS INSPL_ZIP,
		        NVL(MPA.INSPL_ADDR, '') AS INSPL_ADDR,
		        NVL(MPA.INSPL_ADDR2, '') AS INSPL_ADDR2,
		        NVL(MPA.INSPL_PHONE, '') AS INSPL_PHONE,
		        NVL(MPA.KYDATE, '') AS KYDATE,
		        NVL(MPA.KSTBIT, '') AS KSTBIT,
		        NVL(MPA.ID_NO, '') AS ID_NO,
		        NVL(MPA.KB_NO, '') AS KB_NO,
		        NVL(MPA.ORDER_NUM, '') AS ORDER_NUM,
		        NVL(MPA.RESORT_NO, '') AS RESORT_NO,
		        FN_EMPLE_NM(MPA.REG_MAN) AS REG_MAN,
		        TO_CHAR(MPA.REG_DM,'YYYYMMDD') AS REG_DM,           
                RS.RESN_CL,
                RS.RESN_PROC_YN,
                EV.SORT AS EVENT_CL,
                EV.SEQ AS EVENT_SEQ,                
			    MPA.OCB_REG_YN,
				MB.CI_VAL,
				PD.PROD_CD_DBL,
				(SELECT ACCNT_NO_DBL FROM TB_ACCNT_DOUBLE WHERE ACCNT_NO = MPA.ACCNT_NO) AS ACCNT_NO_DBL,
				'' AS INSERT_CNT,
				NVL(PD.PROD_LONGTERM_YN,'N') AS PROD_LONGTERM_YN,				
		        NVL(TLM.LTI_PROD_PAY,'N') AS LTI_PROD_PAY,  
		        NVL(TLM.LTI_USE_YN,NVL(PD.PROD_LONGTERM_YN,'N')) AS LTI_USE_YN,
                (SELECT SPECIAL_BIT
                  FROM (SELECT CASE WHEN MES.SPECIAL_BIT = '01' THEN '특수고객 : 임의지정 ' || REQ_PAY_GUNSU || '건'
                                    WHEN MES.SPECIAL_BIT = '02' THEN '특수고객 : 격월납 '   || REQ_PAY_GUNSU || '건'
                                    WHEN MES.SPECIAL_BIT = '03' THEN '특수고객 : 산출취소 ' || REQ_PAY_GUNSU || '건'
                                    ELSE '' END SPECIAL_BIT
                               ,ACCNT_NO
                        FROM   TB_MEMBER_EXT_SPECIAL MES
                        WHERE  1=1
                        AND    MES.DEL_FG = 'N'
                        ORDER BY MES.REG_DM DESC
                        ) WHERE ACCNT_NO = MPA.ACCNT_NO
                          AND ROWNUM = 1) AS SPECIAL_BIT
		        --상조납입/결합납입/추가납입    
		        --OCB상태, OCB여부, 포인트산출, OCB발급일 		        
		        --CASE WHEN MPA.PAY_GUBUN = '' THEN '00' ELSE B.PAY_GUBUN END AS PAY_GUBUN, --리조트회원구분
		        --NVL(MPA.RESORT_MEM_NO, '') AS RESORT_MEM_NO,                              --리조트번호
		        --NVL(MPA.B.RESORT_MEM_NM, '') AS B.RESORT_MEM_NM,                          --리조트회원명
		        --NVL(RAND_NUM,'') AS RAND_NUM,                                             --중앙일보할인우대번호
		        --NVL(JA_SUBSCRPT_YN,'') AS JA_SUBSCRPT_YN,                                 --중앙일보구독여부
		        --NVL((SELECT FN_MEMBER_YEN_CHE(MPA.ACCNT_NO) FROM DUAL),'') AS PAY_STATE
		        --(TRUNC(MONTHS_BETWEEN(TO_CHAR(SYSDATE,'YYYYMM')||'01',SUBSTR(MPA.JOIN_DT,0,6) || '01')+1)) AS MONTH_CNT,
		        --(SELECT COUNT(*) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N') AS TRUE_CNT,
		        --(SELECT COUNT(*) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N') AS REL_CNT,
		        --(SELECT COUNT(*) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N') AS ADD_CNT 
		    FROM MEM_PROD_ACCNT_DAMO MPA INNER JOIN
		    MEMBER_DAMO MB ON MPA.MEM_NO = MB.MEM_NO AND MPA.DEL_FG = 'N' INNER JOIN
		    PRODUCT PD ON MPA.PROD_CD = PD.PROD_CD  LEFT OUTER JOIN 
		    TB_LTINSTALL_MNG TLM ON MPA.ACCNT_NO = TLM.ACCNT_NO AND TLM.DEL_FG = 'N' LEFT OUTER JOIN
            RESCISSION RS ON MPA.ACCNT_NO = RS.ACCNT_NO AND RS.DEL_FG = 'N' LEFT OUTER JOIN
            EVENT EV ON MPA.ACCNT_NO = EV.ACCNT_NO AND EV.DEL_FG = 'N' LEFT OUTER JOIN
            TB_MEMBER_MANGI_EXT MME ON MPA.ACCNT_NO = MME.ACCNT_NO AND MME.DEL_FG = 'N' LEFT OUTER JOIN
		    EMPLOYEE EMP ON MPA.EMPLE_NO = EMP.EMPLE_NO LEFT OUTER JOIN
		    EMPLOYEE B_EMP ON MPA.BEF_EMPLE_CD = B_EMP.EMPLE_NO LEFT OUTER JOIN
		    ( 
		        SELECT
		            PMM.PROD_CD, 
		            PMD.MODEL_CD, 
		            PMM.PROD_KIND, 
		            PMD.DISCONTINUED_DT, 
		            PMD.MODEL_NM
		        FROM PRODUCT_MODEL_DTL PMD
		        INNER JOIN PRODUCT_MODEL_MST PMM ON PMD.SEQ = PMM.SEQ AND PMM.DEL_FG = 'N'
		    ) TBL_PMD ON TBL_PMD.PROD_CD = MPA.PROD_CD AND TBL_PMD.MODEL_CD = MPA.PROD_MODEL_CD AND TBL_PMD.PROD_KIND = MPA.PROD_MODEL_KIND
		        WHERE 1=1
		        AND MB.DEL_FG = 'N'
		        AND MPA.ACCNT_NO = #{accnt_no}
		) MAIN 

    </select>    
    
    <select id="DlwNewTypeMainConsMap.getdeliveryCnt" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeMainConsMap.getdeliveryCnt */
               COUNT(*)
          FROM DELIVERY_INFO
          WHERE 1=1
        <if test="accnt_no != null and accnt_no != ''">
            AND ACCNT_NO = #{accnt_no}
        </if>

    </select>

    
    <!-- 회원 상품 정보 조회 - 해약금 -->
    <select id="DlwNewTypeMainConsMap.getProdInfoInqNew" parameterType="map" resultType="resultMap">
    <!-- DM sql-id: sql-task.prodInfoInq -->

        SELECT /* DlwNewTypeMainConsMap.getProdInfoInqNew */
               P.PROD_CD
             , P.PROD_NM
             , P.EXPR_NO
             , P.MON_PAY_AMT
             , P.PROD_AMT
             , (SELECT NVL(SUM(PAY_AMT),0)
                  FROM PAY_MNG
                 WHERE ACCNT_NO = #{accnt_no}
                   AND DEL_FG = 'N' ) PAY_AMT1
             , (SELECT NVL(SUM(PAY_AMT),0)
                  FROM PAY_MNG_DTL
                 WHERE ACCNT_NO = #{accnt_no}
                   AND DEL_FG = 'N' ) PAY_AMT2
             , (SELECT NVL(SUM(PAY_AMT),0)
                  FROM PAY_MNG_DTL1
                 WHERE ACCNT_NO = #{accnt_no}
                   AND DEL_FG = 'N' ) PAY_AMT3
             , NVL(B.PAY_AMT,0)AS PAY_AMT
             , (SELECT NVL(SUM(PAY_AMT),0)
                  FROM PAY_MNG
                 WHERE DEL_FG='N'
                   AND ACCNT_NO = #{accnt_no}) AS SANGJO_PAY_AMT
             , NVL(B.PAY_AMT_COUNT,0) AS PAY_AMT_COUNT
             , NVL(D.DC_AMT,0) AS DC_AMT
             , M.NEW_CHAN_GUNSU
             , M.JOIN_DT AS JOIN_DT
             , FN_YEN_CHE(M.ACCNT_NO) AS OVRD_MON
             <!-- [ 실 사용금액  = 사용금액 - 취소금액 ]    (2018.01.22) -->
             <!-- [ 메인화면 쇼핑몰 연동으로 인한 삭제 ]     (2018.01.30) 김찬영 -->

             <!-- , ( SELECT NVL(SUM(NVL(SUB_USE_AMT,0)) - SUM(NVL(SUB_CAN_AMT,0)) ,0) USE_AMT
                   FROM ( SELECT CASE WHEN TYPE = 'U' THEN SUM(AMT) ELSE 0 END AS SUB_USE_AMT
                               , CASE WHEN TYPE = 'C' THEN SUM(AMT) ELSE 0 END AS SUB_CAN_AMT
                            FROM CASH_HISTORY@TB_SHOPPING LINK_CH
                           WHERE 1=1
                             AND GOODS_ID =  #{accnt_no}
                           GROUP BY TYPE
                        )
               ) AS USE_AMT-->
             , 0 AS USE_AMT
          FROM MEM_PROD_ACCNT M
         INNER JOIN PRODUCT P
            ON M.PROD_CD = P.PROD_CD
          LEFT OUTER JOIN (SELECT ACCNT_NO
                                , SUM(PAY_AMT) AS PAY_AMT
                                , SUM(PAY_AMT_COUNT) AS PAY_AMT_COUNT
                             FROM (SELECT ACCNT_NO, NVL(SUM(PAY_AMT),0) AS PAY_AMT, NVL(COUNT(PAY_AMT),0) AS PAY_AMT_COUNT
                                     FROM PAY_MNG
                                    WHERE DEL_FG = 'N'
                                      AND ACCNT_NO = #{accnt_no}
                                 GROUP BY ACCNT_NO
                                UNION ALL
                                   SELECT ACCNT_NO, NVL(SUM(PAY_AMT),0)AS PAY_AMT, 0 AS PAY_AMT_COUNT
                                     FROM PAY_MNG_DTL
                                    WHERE DEL_FG = 'N'
                                      AND ACCNT_NO = #{accnt_no}
                                 GROUP BY ACCNT_NO
                                UNION ALL
                                   SELECT ACCNT_NO, NVL(SUM(PAY_AMT),0)AS PAY_AMT, 0 AS PAY_AMT_COUNT
                                     FROM PAY_MNG_DTL1
                                    WHERE DEL_FG = 'N'
                                      AND ACCNT_NO = #{accnt_no}
                                 GROUP BY ACCNT_NO) TEMP
                         GROUP BY ACCNT_NO)B
            ON M.ACCNT_NO = B.ACCNT_NO
          LEFT OUTER JOIN (SELECT ACCNT_NO, NVL(SUM(DC_AMT),0) AS DC_AMT
                             FROM DC_AMT_REG
                            GROUP BY ACCNT_NO) D
            ON M.ACCNT_NO = D.ACCNT_NO
         WHERE M.ACCNT_NO = #{accnt_no}
           AND M.DEL_FG = 'N'
    </select>
    
    <!-- 현재 회차 조회 - 해약금 -->
    <select id="DlwNewTypeMainConsMap.getNowMonthCount" parameterType="map" resultType="int">
    <!-- DM sql-id: sql-task.getNowMonthCount -->

        SELECT /* DlwNewTypeMainConsMap.getNowMonthCount */
               CASE WHEN (EXPR_NO - NEW_CHAN_GUNSU) = PAY_NO AND JOIN_NO >= PAY_NO THEN JOIN_NO
                    WHEN (EXPR_NO - NEW_CHAN_GUNSU) = PAY_NO THEN PAY_NO
                    ELSE PAY_NO
                END NMCOUNT
          FROM (SELECT FN_DIFF_MONTH(SYSDATE, JOIN_DT) + 1 AS JOIN_NO
                     , NEW_CHAN_GUNSU
                     , EXPR_NO
                     , NVL(COUNT(R.NO), 0) AS PAY_NO
                  FROM MEM_PROD_ACCNT M
                 INNER JOIN PRODUCT P
                    ON M.PROD_CD = P.PROD_CD
                  LEFT OUTER JOIN PAY_MNG R
                    ON M.ACCNT_NO = R.ACCNT_NO
                   AND R.DEL_FG = 'N'
                 WHERE M.ACCNT_NO = #{accnt_no}
              GROUP BY M.ACCNT_NO, M.JOIN_DT, NEW_CHAN_GUNSU, EXPR_NO
                ) T
    </select>
    
    <!-- 해약환급금 존재 정보 -->
    <select id="DlwNewTypeMainConsMap.getResnAmt" parameterType="map" resultType="int">
    <!-- DM sql-id: sql-task.getResnAmt_new -->
        SELECT /* DlwNewTypeMainConsMap.getResnAmt */
            TRUNC(NVL(FN_RESN_AMT_NEW(#{prod_cd},#{pay_cnt},#{join_dt}),0)) AS RESN_AMT
        FROM DUAL

        <!--
        SELECT /* DlwNewTypeMainConsMap.getResnAmt */
                    CASE WHEN RESN_AMT=0 AND #{pay_cnt} > 12
                         THEN (SELECT MAX(RESN_AMT) RESN_AMT
                                 FROM (SELECT TO_NUMBER(MAX(RESN_AMT)) AS RESN_AMT
                                         FROM RESNSTD_M M
                                   INNER JOIN RESNSTD_D D
                                           ON M.SEQ = D.MST_SEQ
                                        WHERE M.PROD_CD = #{prod_cd}
                                          AND M.MODEL_CL_CD = (SELECT PROD_MODEL_KIND
                                                                 FROM MEM_PROD_ACCNT
                                                                WHERE ACCNT_NO = #{accnt_no})
                                          AND D.NO <![CDATA[<]]> #{pay_cnt}
                                          AND M.APP_DAY = (SELECT MAX(APP_DAY)
                                                                                    FROM RESNSTD_M
                                                                                   WHERE USE_YN = 'Y'
                                                                                     AND APP_DAY <![CDATA[<=]]> #{join_dt}
                                                                                     AND PROD_CD = #{prod_cd})
                                     GROUP BY D.MST_SEQ
                                    UNION ALL
                                       SELECT - 1 AS RESN_AMT FROM DUAL)T
                               )
                          ELSE CAST(RESN_AMT AS NUMERIC)
                      END RESN_AMT
          FROM (SELECT MAX(RESN_AMT) RESN_AMT
                  FROM (SELECT NVL(MAX(D.RESN_AMT),0) AS RESN_AMT
                          FROM PRODUCT P
                             , RESNSTD_M M
                             , RESNSTD_D D
                         WHERE P.PROD_CD = M.PROD_CD
                           AND M.SEQ = D.MST_SEQ
                           AND M.MODEL_CL_CD = (SELECT PROD_MODEL_KIND
                                                  FROM MEM_PROD_ACCNT
                                                 WHERE ACCNT_NO = #{accnt_no})
                           AND M.PROD_CD = #{prod_cd}
                           AND D.NO = #{pay_cnt}
                           AND M.APP_DAY= (SELECT MAX(APP_DAY)
                                                                     FROM RESNSTD_M
                                                                    WHERE USE_YN = 'Y'
                                                                      AND APP_DAY <![CDATA[<=]]> TO_CHAR(#{join_dt})
                                                                      AND PROD_CD = #{prod_cd})

             UNION ALL
                SELECT -1 AS RESN_AMT FROM DUAL) AD
                 ) A

     -->
    </select>
    
    <!-- 해약 구분(해약/청약) -->
    <select id="DlwNewTypeMainConsMap.getResnGubn" parameterType="map" resultType="int">
    <!-- DM sql-id : sql-task.resnGubn -->


        SELECT /* DlwNewTypeMainConsMap.getResnGubn */
               COUNT(*)
          FROM MEM_PROD_ACCNT
         WHERE ACCNT_NO = #{accnt_no}
           AND DEL_FG = 'N'
            AND TRUNC(SYSDATE - TO_DATE(JOIN_DT)) <![CDATA[<]]> 14
    </select>
    
    <!-- 전자서명 상태값 [00(인증값)_00(상품계약서 상태값)] -->
    <select id="DlwNewTypeMainConsMap.getNiceAuthStat" parameterType="map" resultType="resultMap">
           SELECT /* DlwNewTypeMainConsMap.getNiceAuthStat */
            NICE_NO,
            AUTH_01,
            AUTH_02
            FROM ( SELECT NICE_NO
                          ,AUTH_01
                          ,AUTH_02
                          ,RANK() OVER (ORDER BY IDX_AUTH DESC) IDX_AUTH
                      FROM ( SELECT NICE_NO
                                ,AUTH_01
                                ,AUTH_02
                                ,RANK AS IDX_AUTH
                            FROM ( SELECT A.NICE_NO
                                          ,A.UPP_TX_TYPE AS AUTH_01 -- 01 02 03 완료
                                          ,'신규' AS AUTH_02
                                          ,RANK() OVER (ORDER BY NICE_NO DESC) RANK
                                      FROM LF_DMUSER.TB_MEMBER_NICE_INFO A
                                    WHERE CI_VAL = #{ci_val}
                                  )
                              WHERE RANK = 1

                            UNION ALL

                           SELECT B.NICE_NO
                               ,A.UPP_TX_TYPE AS AUTH_01
                               ,B.UPP_TX_TYPE AS AUTH_02
                               ,2 AS IDX_AUTH
                           FROM LF_DMUSER.TB_MEMBER_NICE_INFO A
                           LEFT OUTER JOIN LF_DMUSER.TB_MEMBER_NICE_INFO_SECOND B
                                   ON A.NICE_NO = B.NICE_NO
                          WHERE 1=1
                              AND B.DEL_FG = 'N'
                            AND B.ACCNT_NO = #{accnt_no}
                        ) TBL
               )
         WHERE IDX_AUTH = 1
    </select>
    
    <!-- 부가서비스 정보 카운트 -->
    <select id="DlwNewTypeMainConsMap.getProdSrvcHistForMPAS" parameterType="map" resultType="int">
    <!-- DM sql-id: sql-life.selectSvcHistForMPAS -->


        SELECT /* DlwNewTypeMainConsMap.getProdSrvcHistForMPAS */
               COUNT(*)
          FROM SVC_ISU_HIST
         WHERE ACCNT_NO = #{accnt_no}
           AND SEQ IN (SELECT SEQ
                         FROM MEM_PROD_ACCNT_SVC
                        WHERE ACCNT_NO = #{accnt_no})
    </select>
    
    <!-- 상품별 부가서비스 리스트 조회 -->
    <select id="DlwNewTypeMainConsMap.getProdSrvcMstList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id: sql-life.selectProdOptSvcMstList -->

        /* DlwNewTypeMainConsMap.getProdSrvcMstList */
        SELECT
               *
        FROM
        (
            SELECT
                   *
            FROM (SELECT POSM.SEQ, P.PROD_CD, P.PROD_NM, POSM.APP_NO, POSM.MEM_CL
                        , POSM.RESORT_MEM_CL, USE_YN, POSM.VITAL_SERVICE, POSM.ONLINE_APP_GUBUN
                        , FN_COM_NM('106',POSM.MEM_CL) AS MEM_CL_NM
                        , FN_GETPRODOPTSVCDTL_NM(POSM.SEQ) AS OPT_SVC_NM
                        , FN_GETPRODOPTSVCDTL_NM2(POSM.SEQ) AS OPT_SVC_NM_EX
                        , FN_GETPRODOPTSVCDTL_CD(POSM.SEQ) AS SVC_CD
                        , CASE WHEN POSM.USE_YN = 'Y' THEN '사용'
                               WHEN POSM.USE_YN ='N' THEN '중지'
                          ELSE '-' END AS USE_YN_NM
                        , CASE WHEN ((POSM.APP_NO IS NULL) OR (POSM.APP_NO=0)) THEN '후방'
                          ELSE '전방' END AS SVC_EVENT_BF_CL
                        , FN_EMPLE_NM(POSM.UPD_MAN) UPD_MAN
                        , FN_EMPLE_NM(POSM.REG_MAN) REG_MAN
                        , NVL(POSM.START_DT, '99991231') START_DT
                        , NVL(POSM.END_DT, '99991231') END_DT
                        , (CASE WHEN NVL(TBL.PSEQ, 0) <![CDATA[>]]> 0 THEN 'Y' ELSE 'N' END) ISU_YN
                        , DECODE(POSM.APP_NO,0,'후방',TO_CHAR(POSM.APP_NO)) AS APP_NO_NM
                     FROM PROD_OPT_SVC_MST POSM
               INNER JOIN PRODUCT P
                       ON POSM.PROD_CD = P.PROD_CD
              LEFT OUTER JOIN (SELECT POSMST.SEQ, COUNT(POSMST.SEQ) PSEQ
                                     FROM PROD_OPT_SVC_MST POSMST
                                        INNER JOIN PROD_OPT_SVC_DTL POSD ON POSMST.SEQ = POSD.SEQ AND POSD.OPT_SVC_CD = FN_GETPRODOPTSVCDTL_CD(POSMST.SEQ)
                                        INNER JOIN SVC_ISU_HIST SIH ON POSMST.SEQ = SIH.SEQ AND POSD.OPT_SVC_CD = SIH.OPTSVC_SEQ
                                        AND SIH.ACCNT_NO = #{accnt_no}
                                        GROUP BY POSMST.SEQ) TBL
                                        ON TBL.SEQ = POSM.SEQ ) TMP
             WHERE 1=1
               AND PROD_CD = #{prod_cd}
            <if test="use_yn != null and use_yn != ''">
                AND (nvl(TMP.END_DT, '99991231') <![CDATA[>=]]> to_char(SYSDATE, 'YYYYMMDD')  AND TMP.START_DT <![CDATA[<=]]> to_char(SYSDATE, 'YYYYMMDD'))
            </if>
            <if test="mem_cl != null and mem_cl != ''">
                AND MEM_CL = #{mem_cl}
            </if>
       )
       ORDER BY APP_NO_NM
    </select>
    
    <!-- 할인우대권 체크 -->
    <select id="DlwNewTypeMainConsMap.validateDiscntPassNo" parameterType="map" resultType="String">
    <!-- DM sql-id: sql-life.validateDiscntPassNo -->
        SELECT /* DlwNewTypeMainConsMap.validateDiscntPassNo */
               CASE WHEN (SELECT COUNT(*)
                            FROM MEM_PROD_ACCNT
                           WHERE RAND_NUM = DPD.RAND_NUM) <![CDATA[<=]]> 0
                         AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN TO_CHAR(DPM.ISSUE_DT, 'YYYYMMDD') AND TO_CHAR(DPM.VALID_DT, 'YYYYMMDD')
                    THEN 'Y'
                    WHEN (SELECT COUNT(*)
                            FROM MEM_PROD_ACCNT
                           WHERE RAND_NUM = DPD.RAND_NUM) <![CDATA[>]]> 0
                         AND
                         DPM.DUP_YN = 'Y'
                         AND TO_CHAR(SYSDATE, 'YYYYMMDD') BETWEEN TO_CHAR(DPM.ISSUE_DT, 'YYYYMMDD') AND TO_CHAR(DPM.VALID_DT, 'YYYYMMDD')
                    THEN 'Y'
                    ELSE 'N'
               END
          FROM DISCNT_PASS_MST DPM
               INNER JOIN DISCNT_PASS_DTL DPD
                       ON DPM.SEQ = DPD.SEQ
                      AND DPD.RAND_NUM = #{rand_num}
         WHERE DPM.DEL_FG = 'N'
    </select>
    
    <!-- 특별할인 -->
    <select id="DlwNewTypeMainConsMap.selectNewChanGunsuDPM" parameterType="map" resultType="String">
        <!-- DM sql-id: sql-life.selectNewChanGunsuDPM -->

        SELECT /* DlwNewTypeMainConsMap.selectNewChanGunsuDPM */
               NVL((SELECT LPAD(TO_CHAR(NVL(NEW_CHAN_GUNSU, 0)), 3, '0')
                         FROM DISCNT_PASS_MST
                        WHERE DEL_FG = 'N'
                          AND SEQ = (SELECT SEQ
                                       FROM DISCNT_PASS_DTL
                                      WHERE RAND_NUM = #{rand_num})), '000')
          FROM DUAL
    </select>
    
    <!-- 모델분류 -->
    <select id="DlwNewTypeMainConsMap.getDlwModlMstInfo" parameterType="map" resultType="resultMap">
    <!-- DM sql-id: sql-common.selectModelMstInfo -->


        SELECT /* DlwNewTypeMainConsMap.getDlwModlMstInfo */
               PROD_KIND
             , FN_MODEL_CL_NM(PROD_KIND) AS PROD_KIND_NM
          FROM PRODUCT_MODEL_MST
         WHERE PROD_CD = #{prod_cd}
           AND DEL_FG = 'N'
      ORDER BY PROD_CD
             , ORDR_TURN
             , PROD_KIND
    </select>
    
    <!-- 모델명 -->
    <select id="DlwNewTypeMainConsMap.getDlwModlDtlInfo" parameterType="map" resultType="resultMap">
    <!-- DM sql-id: sql-common.selectModelDtlInfo -->
        SELECT /* DlwNewTypeMainConsMap.getDlwModlDtlInfo */
               PMD.MODEL_NM || CASE WHEN NVL(PMD.DISCONTINUED_DT, '99991231') > TO_CHAR(SYSDATE, 'YYYYMMDD')
                                        THEN ''
                                   ELSE '(단종)'
                               END MODL_NM
             , TO_CHAR(PMD.MODEL_CD) MODL_CD
          FROM PRODUCT_MODEL_DTL PMD INNER JOIN PRODUCT_MODEL_MST PMM
                    ON PMD.SEQ = PMM.SEQ
                    AND PMM.DEL_FG = 'N'
         WHERE PMM.PROD_CD = #{prod_cd}
           AND PMM.PROD_KIND = #{prod_model_kind}
        <if test="continued != null and continued != ''">
            <if test="continued.equalsIgnoreCase('Y')">
                -- AND NVL(PMD.DISCONTINUED_DT, '99991231') > TO_CHAR(SYSDATE, 'YYYYMMDD')
            </if>
        </if>
      ORDER BY PMD.ORDR_TURN DESC, PMD.MODEL_NM
    </select>
    
    <!-- 상품종류 -->
    <select id="DlwNewTypeMainConsMap.getDlwProdKindList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id: sql-life.selectProdKindList -->
        SELECT /* DlwNewTypeMainConsMap.getDlwProdKindList */
               SEQ
             , PROD_KIND_NM
          FROM PRODUCT_KIND
         WHERE MODEL_CL_CD = #{prod_model_kind}
           AND (DEL_FG = 'N' OR DEL_FG IS NULL)
      ORDER BY SEQ
    </select>
    
    <!-- 리조트 정보 조회 -->
    <select id="DlwNewTypeMainConsMap.getResortInfo" parameterType="map" resultType="resultMap">
    <!-- DM sql-id: sql-life.selectResortInfo -->

    SELECT /* DlwNewTypeMainConsMap.getResortInfo */
           A.*
      FROM (SELECT MBR.MEM_NO
                 , MPA.PAY_GUBUN
                 , MPA.RESORT_MEM_NO
                 , MPA.RESORT_MEM_NM
              FROM MEMBER MBR
                    INNER JOIN MEM_PROD_ACCNT MPA
                        ON MPA.MEM_NO = MBR.MEM_NO AND MPA.DEL_FG = 'N'
             WHERE MBR.DEL_FG = 'N'
               AND (MPA.PAY_GUBUN IS NOT NULL
               AND MPA.PAY_GUBUN != '')
               AND MBR.MEM_NO = #{mem_no}
             ORDER BY MPA.JOIN_DT DESC
             ) A
     WHERE ROWNUM <![CDATA[<]]> 2
    </select>
    
    <!-- 회원 상품 정보 수정 시 체크 해야 할 사항 (청구중 or 두구좌 제한 등등) -->
    <select id="DlwNewTypeMainConsMap.getAccntCheck" parameterType="map" resultType="resultMap">
    <!-- DM sql-id: sql-life.getAccntCheck -->
		SELECT 
		    NVL((SELECT MAX(DEL_FG) FROM TB_MEMBER_WDRW_REQ WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG IN ('N','R')),'NONE') AS REQ_STAT
		FROM MEM_PROD_ACCNT MPA
		WHERE ACCNT_NO =  #{accnt_no}
		AND DEL_FG = 'N'
    </select>    
    
    <!-- 2구좌 가입 제한 확인 -->
    <select id="DlwNewTypeMainConsMap.getNoSaleAccnt" parameterType="map" resultType="String">
    <!-- DM sql-id: sql-life.selectNoSaleAccnt -->
        SELECT /* DlwNewTypeMainConsMap.getNoSaleAccnt */
               CASE WHEN SUBSTR(NVL((SELECT GRP_EMPLE_NO
                                        FROM EMPLOYEE
                                       WHERE EMPLE_NO = #{emple_no}), ''), 1, 1) = '7'
                                         AND (SELECT COUNT(ACCNT.ACCNT_NO)
                                                FROM EMPLOYEE EMP
                                          INNER JOIN MEM_PROD_ACCNT ACCNT
                                                  ON EMP.EMPLE_NO = ACCNT.EMPLE_NO
                                                 AND ACCNT.DEL_FG = 'N'
                                          INNER JOIN PRODUCT PROD
                                                  ON ACCNT.PROD_CD = PROD.PROD_CD
                                               WHERE EMP.EMPLE_NO = #{emple_no}
                                                 AND NVL(PROD.NO_SALE_ACCNT_PROD, 'N') = 'Y'
                                                 AND NVL(EMP.NO_SALE_ACCNT_EMP, 'Y') = 'Y'
                                                 AND NVL(FN_EVENT(ACCNT.ACCNT_NO), '') IN ('', '부활')) >= 2
                                                 AND NVL((SELECT NO_SALE_ACCNT_PROD
                                                               FROM PRODUCT
                                                              WHERE PROD_CD = #{prod_cd}), 'N') = 'Y'
                                                 AND NVL((SELECT NO_SALE_ACCNT_EMP
                                                               FROM EMPLOYEE
                                                              WHERE EMPLE_NO = #{emple_no}), 'Y') = 'Y'
                         THEN 'N'
                    ELSE 'Y'
                END
          FROM DUAL
    </select>
    
    <!-- 카드코드 조회 -->
    <select id="DlwNewTypeMainConsMap.getCardCode" parameterType="String" resultType="String">
    <!-- DM sql-id: sql-life.selectCardCode -->
        SELECT /* DlwNewTypeMainConsMap.getCardCode */
               MEMBERSHIP
          FROM PRODUCT
         WHERE PROD_CD = #{prod_cd}
    </select>
    
    <select id="DlwNewTypeMainConsMap.createAccntNo" parameterType="String" resultType="String">
        <!-- DM sql-id: sql-life.createAccntNo -->
        SELECT /* DlwNewTypeMainConsMap.createAccntNo */
               FN_CREATE_ACCNT_NO(#{prod_cd}, TO_CHAR(SYSDATE, 'YYYYMMDD')) AS ACCNT_NO
          FROM DUAL
    </select>
    
    <!-- 상품정보 등록 -->
    <!-- DM sql-id: sql-life.insertMemProdAccnt -->
    <insert id="DlwNewTypeMainConsMap.insertMemProdAccnt" parameterType="map">
        /* DlwNewTypeMainConsMap.insertMemProdAccnt */
        BEGIN			
			INSERT INTO MEM_PROD_ACCNT
			( 
			    ACCNT_NO, MEM_NO, PROD_CD, EMPLE_NO,
			    JOIN_DT, BEF_EMPLE_CD, PAY_MTHD,
			    POST_MTR_RCV, NEW_CHAN_GUNSU, 
			    DEL_FG, MEMBERSHIP_YN, RESORT_NO, 
			    BEFORE_DC_CNT, JOIN_CL, PAY_GUBUN,
			    B2B_COMP_CD,  B2B_EMPLE_NO, RECOMMEND_EMPLE_NO,
			    INSPL_ZIP, INSPL_ADDR,  INSPL_ADDR2, INSPL_PHONE,
			    JA_SUBSCRPT_YN, PROD_KIND, RAND_NUM, OCB_REG_YN, OCB_POINT_YN, 
			    ORDER_NUM, ID_NO, KB_NO, PROD_MODEL_KIND, 
			    PROD_MODEL_CD, SM_SHOP_INFO, KSTBIT, B2B_EMPLE_CI, MAIN_CONTRACT,
			    REG_DM, REG_MAN, UPD_DM, UPD_MAN
			)
			SELECT 
			    #{accnt_no}, #{mem_no}, #{prod_cd}, #{emple_no}, 
			    #{join_dt}, #{bef_emple_cd}, #{pay_mthd},
			    '02', TO_NUMBER(#{new_chan_gunsu}),   
			    'N', 'Y', (SELECT NVL(MAX(RESORT_NO) + 1, '1') FROM MEM_PROD_ACCNT),
			    #{before_dc_cnt}, #{join_cl}, '00',
			    #{b2b_comp_cd}, #{b2b_emple_no}, #{recommend_emple_no},
			    #{inspl_zip}, #{inspl_addr}, #{inspl_addr2}, #{inspl_phone},
			    NVL(#{ja_subscrpt_yn}, 'N'), #{prod_kind}, #{rand_num}, 'Y', 'Y',
			    #{order_num}, #{id_no}, #{kb_no}, #{prod_model_kind},
			    #{prod_model_cd}, #{sm_shop_info},'01',#{b2b_emple_ci},#{main_contract},
			    SYSDATE, #{rgsr_id}, SYSDATE, #{amnd_id}
			FROM DUAL ;
			        	
        	<!-- 부가서비스 상품 기초 데이터 INSERT -->
        	INSERT INTO MEM_PROD_ACCNT_SVC (ACCNT_NO,DTL_SEQ,SEQ,REG_MAN,REG_DT,DEL_FG)
        	SELECT 
			    #{accnt_no},
			    ROWNUM AS DTL_SEQ,
			    POSM.SEQ,
			    #{emple_no},
			    SYSDATE,
			    'N'
			FROM LF_DMUSER.PROD_OPT_SVC_MST POSM INNER JOIN
			    LF_DMUSER.PROD_OPT_SVC_DTL POSD ON POSM.SEQ = POSD.SEQ
			WHERE POSM.PROD_CD = #{prod_cd}
			AND NVL(POSM.USE_YN,'Y') = 'Y'
			AND MEM_CL = 'L' ;
			
			<!-- 상품 승인값 INSERT -->          			
			INSERT INTO HP_CALL (ACCNT_NO, EMPLE_NO, BEF_EMPLE_NO, STAT, ASSIGN_DM, REG_MAN, REG_DM, UPD_MAN, UPD_DM)
        	VALUES (#{accnt_no}, #{emple_no}, #{bef_emple_cd}, #{hpcl_stat_cd}, SYSDATE, #{rgsr_id}, SYSDATE, #{amnd_id} , SYSDATE) ;   	
        	
        	<!-- 버킷마켓 전송값 변경 -->     
        	UPDATE TB_DR_I_ORD_RST@DLCCSUB
        	SET REG_DT = SYSDATE
        	   ,REG_YN = 'Y'
        	WHERE ORD_MST_IDX = #{id_no};
		END;
    </insert>
    
    <!-- 해피콜 상태 체크 -->
    <select id="DlwNewTypeMainConsMap.getHpclAckdStatChk" parameterType="map" resultType="String">
        SELECT /* DlwNewTypeMainConsMap.getHpclAckdStatChk */
               CASE WHEN EXISTS (SELECT 'Y'
                                   FROM HP_CALL
                                  WHERE ACCNT_NO = #{accnt_no}
                                    AND STAT = #{hpcl_stat_cd})
                         THEN 'A'
                    WHEN EXISTS (SELECT 'Y'
                                   FROM HP_CALL
                                  WHERE ACCNT_NO = #{accnt_no})
                         THEN 'U'
                    ELSE 'I'
                END
          FROM DUAL
    </select>
    
    <!-- 해피콜 등록 -->
    <insert id="DlwNewTypeMainConsMap.insertHpclAckd" parameterType="map">
    <!-- DM sql-id: sql-life.insertHpCallByAllStat -->
        INSERT INTO /* DlwNewTypeMainConsMap.insertHpclAckd */
               HP_CALL
               (ACCNT_NO, EMPLE_NO, BEF_EMPLE_NO, STAT, ASSIGN_DM
              , REG_MAN, REG_DM, UPD_MAN, UPD_DM)
        VALUES (#{accnt_no}, #{rgsr_id}, '', #{hpcl_stat_cd}, SYSDATE
              , #{rgsr_id}, SYSDATE, #{amnd_id} , SYSDATE)
    </insert>
    
    <!-- 해피콜 승인 상태 변경 -->
    <update id="DlwNewTypeMainConsMap.updateHpclAckd" parameterType="map">
    <!-- DM sql-id: sql-life.updateHpCallStat -->
        UPDATE /* DlwNewTypeMainConsMap.updateHpclAckd */
               HP_CALL
           SET STAT = #{hpcl_stat_cd}
             , UPD_MAN = #{amnd_id}
             , UPD_DM = SYSDATE
         WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- 해피콜 이력 등록 -->
    <insert id="DlwNewTypeMainConsMap.insertHpclHist" parameterType="map">
    <!-- DM sql-id: sql-life.insertHpCallHist -->
        INSERT INTO /* DlwNewTypeMainConsMap.insertHpclHist*/
               HP_CALL_HIST
               (ACCNT_NO, SEQ, EMPLE_NO, STAT, NOTE
              , REG_DM, REG_MAN, UPD_DM, UPD_MAN )
        SELECT #{accnt_no}, NVL(MAX(SEQ),0) + 1, #{rgsr_id}, #{hpcl_stat_cd}, #{hpcl_note}
             , SYSDATE, #{rgsr_id}, SYSDATE, #{amnd_id}
          FROM HP_CALL_HIST
         WHERE ACCNT_NO = #{accnt_no}
    </insert>
    
    <!-- 리조트번호 조회 -->
    <select id="DlwNewTypeMainConsMap.getResortNo" parameterType="String" resultType="String">


        SELECT /* DlwNewTypeMainConsMap.getResortNo */
               RESORT_NO
          FROM MEM_PROD_ACCNT
         WHERE ACCNT_NO = #{accnt_no}
    </select>
    
    <!-- 스마트라이프 상담 등록 -->
    <insert id="DlwNewTypeMainConsMap.insertSmartLifeCnslMng" parameterType="map">
    <!-- DM sql-id: sql-life.insertSmartLifeCnslMng -->

        <selectKey keyProperty="cnsl_man" resultType="String" order="BEFORE">
                SELECT NVL((SELECT CNSL_MAN
                                              FROM SL_CNSL_MNG C
                                             WHERE ACCNT_NO = #{accnt_no}
                                               AND CNSL_STAT ='0004'
                                               AND SEQ = (SELECT MAX(SEQ)
                                                            FROM SL_CNSL_MNG
                                                           WHERE ACCNT_NO = C.ACCNT_NO
                                                             AND CNSL_STAT ='0004')
                                                         ) , #{rgsr_id})
                  FROM DUAL
        </selectKey>

        INSERT /* DlwNewTypeMainConsMap.insertSmartLifeCnslMng */
          INTO SL_CNSL_MNG
              ( SEQ
              , CNSL_SEQ
              , ACCNT_NO
              , CNSL_DT
              , CNSL_MAN
            <if test="imsi_card_no != null and imsi_card_no != ''">
              , IMSI_CARD_NO
            </if>
            <if test="sl_card_no != null and sl_card_no != ''">
              , SL_CARD_NO
            </if>
              , ISSUE_STAT, CNSL_STAT
            <if test="note != null and note != ''">
              , NOTE
            </if>
              , REG_MAN
              , REG_DM
              , UPD_MAN
              , UPD_DM
              )
        SELECT NVL(MAX(SEQ),0)+1
             , 1
             , #{accnt_no}
             , SYSDATE
             , #{cnsl_man}
            <if test="imsi_card_no != null and imsi_card_no != ''">
                , REPLACE((TO_CHAR(#{imsi_card_no})), ' ', '')
            </if>
            <if test="sl_card_no != null and sl_card_no != ''">
                , REPLACE((TO_CHAR(#{sl_card_no})), ' ', '')
            </if>
            , #{issue_stat}
            , #{cnsl_stat}
            <if test="note != null and note != ''">
            , #{note}
            </if>
            , #{rgsr_id}
            , SYSDATE
            , #{amnd_id}
            , SYSDATE
        FROM SL_CNSL_MNG
    </insert>
    
    <!-- 구좌별 부가서비스 상세 등록 -->
    <insert id="DlwNewTypeMainConsMap.insertMemProdAccntSvc" parameterType="map">
    <!-- DM sql-id: sql-life.insertMemProdAccntSvc -->
        INSERT /* DlwNewTypeMainConsMap.insertMemProdAccntSvc */
          INTO MEM_PROD_ACCNT_SVC
             ( ACCNT_NO
             , DTL_SEQ
             , SEQ  
             , REG_MAN
             , REG_DT
             )
        SELECT #{accnt_no}
             , NVL(MAX(TO_NUMBER(DTL_SEQ)),0)+1
             , #{seq}
             , #{rgsr_id}
             , SYSDATE
          FROM MEM_PROD_ACCNT_SVC
         WHERE ACCNT_NO = #{accnt_no}


    </insert>
    
    <insert id="DlwNewTypeMainConsMap.insertMemTwinAccnt1" parameterType="map">
        INSERT INTO /* DlwNewTypeMainConsMap.insertMemTwinAccnt1 */
                    LF_DMUSER.TB_MEM_TWIN_ACCNT (TWIN_SEQ, MEM_NO, ACCNT_NO, PROD_CD, NO_DEFNITE1, NO_DEFNITE2,
                                                 NO_DEFNITE3, NO_DEFNITE4, NO_DEFNITE5, RGSR_ID, RGSR_DTTM)
             VALUES ((SELECT NVL(MAX(TWIN_SEQ) , 0) + 1 FROM LF_DMUSER.TB_MEM_TWIN_ACCNT WHERE 1=1),
                     #{mem_no}, #{twin_accnt_no1}, #{prod_cd1},
                     #{no_definite1}, #{no_definite2}, #{no_definite3}, #{no_definite4}, #{no_definite5}, #{rgsr_id}, SYSDATE)
    </insert>

    <insert id="DlwNewTypeMainConsMap.insertMemTwinAccnt2" parameterType="map">
        INSERT INTO /* DlwNewTypeMainConsMap.insertMemTwinAccnt2 */
                    LF_DMUSER.TB_MEM_TWIN_ACCNT (TWIN_SEQ, MEM_NO, ACCNT_NO, PROD_CD, NO_DEFNITE1, NO_DEFNITE2,
                                                 NO_DEFNITE3, NO_DEFNITE4, NO_DEFNITE5, RGSR_ID, RGSR_DTTM)
             VALUES ((SELECT NVL(MAX(TWIN_SEQ) , 0) FROM LF_DMUSER.TB_MEM_TWIN_ACCNT WHERE 1=1),
                     #{mem_no}, #{twin_accnt_no2}, #{prod_cd2},
                     #{no_definite1}, #{no_definite2}, #{no_definite3}, #{no_definite4}, #{no_definite5}, #{rgsr_id}, SYSDATE)
    </insert>
    
    <!-- 스마트라이프 상담 수정 -->
    <update id="DlwNewTypeMainConsMap.updateMemProdAccnt" parameterType="map" timeout="3">
    <!-- DM sql-id: sql-life.updateMemProdAccnt -->
	    UPDATE /* DlwNewTypeMainConsMap.updateMemProdAccnt */
	        MEM_PROD_ACCNT
	    SET 
	        <if test="prod_cd_chk != null and prod_cd_chk != ''">        
	            PROD_CD 		= #{prod_cd},
	        </if>
	        <if test="main_contract_chk != null and main_contract_chk != ''">        
	            MAIN_CONTRACT   = #{main_contract},
	        </if>
	        <if test="emple_no_chk != null and emple_no_chk != ''">        
	            EMPLE_NO 		= #{emple_no},
	        </if>        
	        <if test="bef_emple_cd_chk != null and bef_emple_cd_chk != ''">        
	            BEF_EMPLE_CD 	= #{bef_emple_cd},
	        </if>
	        <if test="prod_model_kind_chk != null and prod_model_kind_chk != ''">        
	            PROD_MODEL_KIND = #{prod_model_kind},
	        </if>        
	        <if test="prod_model_cd_chk != null and prod_model_cd_chk != ''">        
	            PROD_MODEL_CD   = #{prod_model_cd}, 
	        </if>
	        <if test="prod_kind_chk != null and prod_kind_chk != ''">        
	            PROD_KIND       = #{prod_kind},
	        </if>
	        <if test="pay_mthd_chk != null and pay_mthd_chk != ''">                     
	            PAY_MTHD 		= #{pay_mthd},
	        </if>
	        <if test="join_cl_chk != null and join_cl_chk != ''">        
	            JOIN_CL         = #{join_cl},
	        </if>
	        <if test="new_chan_gunsu_chk != null and new_chan_gunsu_chk != ''">        
	            NEW_CHAN_GUNSU 	= TO_NUMBER(#{new_chan_gunsu}),
	        </if>
	        <if test="b2b_comp_cd_chk != null and b2b_comp_cd_chk != ''">        
	            B2B_COMP_CD		= #{b2b_comp_cd},
	        </if>
	        <if test="b2b_emple_no_chk != null and b2b_emple_no_chk != ''">        
	            B2B_EMPLE_NO	    = #{b2b_emple_no},
	        </if>
	        <if test="b2b_emple_ci_chk != null and b2b_emple_ci_chk != ''">        
	            B2B_EMPLE_CI     = #{b2b_emple_ci},
	        </if>
	        <if test="sm_shop_info_chk != null and sm_shop_info_chk != ''">        
	            SM_SHOP_INFO     = #{sm_shop_info},
	        </if>
	        <if test="inspl_zip_chk != null and inspl_zip_chk != ''">        
	            INSPL_ZIP 		= #{inspl_zip},
	        </if>
	        <if test="inspl_addr_chk != null and inspl_addr_chk != ''">        
	            INSPL_ADDR 		= #{inspl_addr},
	        </if>     
	        <if test="inspl_addr2_chk != null and inspl_addr2_chk != ''">        
	            INSPL_ADDR2   	= #{inspl_addr2},
	        </if>    
	        <if test="inspl_phone_chk != null and inspl_phone_chk != ''">        
	            INSPL_PHONE		= #{inspl_phone},
	        </if>    
	        <if test="order_num_chk != null and order_num_chk != ''">        
	            ORDER_NUM        = #{order_num},
	        </if>    
	        <if test="id_no_chk != null and id_no_chk != ''">        
	            ID_NO            = #{id_no},
	        </if>    
	        <if test="kb_no_chk != null and kb_no_chk != ''">        
	            KB_NO            = #{kb_no},
	        </if>                 
	        UPD_DM 			     = SYSDATE,
	        UPD_MAN 			 = #{amnd_id}
	    WHERE ACCNT_NO = #{accnt_no}
    </update>
    
    <!-- 구좌별 부가서비스 삭제 -->
    <delete id="DlwNewTypeMainConsMap.deleteMemProdAccntSvc" parameterType="map">
    <!-- DM sql-id: sql-life.insertMemProdAccntSvc -->
        DELETE /* DlwNewTypeMainConsMap.deleteMemProdAccntSvc */
          FROM MEM_PROD_ACCNT_SVC
         WHERE ACCNT_NO = #{accnt_no}
    </delete>
    
    <select id="DlwNewTypeMainConsMap.getHpCallCnt" parameterType="map" resultType="int">


        SELECT /* DlwNewTypeMainConsMap.getHpCallCnt */
               COUNT(*)
          FROM HP_CALL HP
             , MEM_PROD_ACCNT ACCNT
             , PRODUCT PROD
             , MEMBER  MEM
             , (SELECT A.ACCNT_NO
                     , (CASE WHEN A.POST_MTR_RCV = '01'
                                THEN CASE WHEN LENGTH(M.HOME_ADDR) = 0
                                                            THEN ('우)' || WRPL_ZIP)
                                                       ELSE (HOME_ZIP)
                                      END
                                        ELSE CASE WHEN LENGTH(M.WRPL_ADDR) = 0
                                                       THEN ( HOME_ZIP)
                                                  ELSE (WRPL_ZIP)
                                              END
                          END
                         ) AS POST
                     , (CASE WHEN A.POST_MTR_RCV = '01'
                                 THEN CASE WHEN LENGTH(M.HOME_ADDR) = 0
                                                THEN WRPL_ADDR
                                           ELSE HOME_ADDR
                                       END
                            ELSE CASE WHEN LENGTH(M.WRPL_ADDR) = 0
                                           THEN HOME_ADDR
                                      ELSE	WRPL_ADDR
                                  END
                         END
                        ) AS ADDR1
                     , (CASE WHEN A.POST_MTR_RCV = '01'
                                 THEN CASE WHEN LENGTH(M.HOME_ADDR) = 0
                                                THEN WRPL_ADDR2
                                           ELSE HOME_ADDR2
                                       END
                              ELSE CASE WHEN LENGTH(M.WRPL_ADDR) = 0
                                           THEN HOME_ADDR2
                                      ELSE	WRPL_ADDR2
                                   END
                        END
                        ) AS ADDR2
                  FROM MEM_PROD_ACCNT A
                     , MEMBER M
                 WHERE A.MEM_NO = M.MEM_NO) MT
         WHERE HP.ACCNT_NO = ACCNT.ACCNT_NO
           AND MEM.MEM_NO = ACCNT.MEM_NO
           AND ACCNT.PROD_CD = PROD.PROD_CD
           AND ACCNT.ACCNT_NO = MT.ACCNT_NO
        <if test="statcds != null and statcds != ''">
            AND HP.STAT IN (${statcds})
        </if>
        <if test="stat != null and stat != ''">
            AND HP.STAT = #{stat}
        </if>
        <if test="user_id != null and user_id != ''">
            AND HP.EMPLE_NO = #{user_id}
        </if>
        <if test="accnt_no != null and accnt_no != ''">
            AND HP.ACCNT_NO = #{accnt_no}
        </if>
        <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
            <if test="date_typ == 'JD'">
                AND ACCNT.JOIN_DT  BETWEEN REPLACE(#{stt_dt}, '-', '')  AND REPLACE(#{end_dt}, '-', '')
            </if>
            <if test="date_typ == 'HD'">
                AND TO_CHAR(HP.ASSIGN_DM,'YYYYMMDD')  BETWEEN REPLACE(#{stt_dt}, '-', '')  AND REPLACE(#{end_dt}, '-', '')
            </if>
            <if test="date_typ == 'CD'">
                AND ACCNT.REG_DM BETWEEN REPLACE(#{stt_dt}, '-', '')  AND REPLACE(#{end_dt}, '-', '')
            </if>
        </if>
        <if test="prod_cd != null and prod_cd != ''">
            AND PROD.PROD_CD = #{prod_cd}
        </if>
        <if test="emple_no != null and emple_no != ''">
            AND ACCNT.EMPLE_NO	= #{emple_no}
        </if>
           AND MEM.DEL_FG <![CDATA[<>]]> 'Y'
           AND ACCNT.DEL_FG <![CDATA[<>]]> 'Y'
           AND PROD.DEL_FG <![CDATA[<>]]> 'Y'
    </select>
    
    <!--발주목록설치장소 업데이트 -->
    <update id="DlwNewTypeMainConsMap.updatedelivery" parameterType="map" timeout="3">
    <!-- DM sql-id: sql-life.updatedelivery -->
        UPDATE /* DlwNewTypeMainConsMap.updatedelivery */
               DELIVERY_INFO
           SET UPDATE_ADDR 	= #{scaddr},
                  UPDATE_PADDR = UPDATE_ADDR
         WHERE ACCNT_NO = #{accnt_no}

    </update>
    
    <insert id="DlwNewTypeMainConsMap.mergeRecProdDtl" parameterType="map">
        <selectKey keyProperty="rec_prod_dtl_id" resultType="String" order="BEFORE">
            SELECT 'RPD' || TO_CHAR(SYSDATE, 'YYYYMMDD') || LPAD(PS_WILLVI.SEQ_CONS.NEXTVAL, 7, '0') FROM DUAL
        </selectKey>
        MERGE INTO /* DlwNewTypeMainConsMap.mergeRecConsDtl */
              PS_WILLVI.TB_REC_PROD_DTL A
        USING (SELECT #{cti_crnc_dtl_id} AS CTI_CRNC_DTL_ID
                    , #{accnt_no} AS ACCNT_NO
                 FROM DUAL) B
           ON (A.CTI_CRNC_DTL_ID = B.CTI_CRNC_DTL_ID
               AND A.ACCNT_NO = B.ACCNT_NO)
         WHEN MATCHED THEN
              UPDATE SET DSPS_TYP_CD	= #{dsps_typ_cd}
                       , PROD_CD        = #{prod_cd}
                       , PROD_NM        = #{prod_nm}
                       , EMPLE_NO       = #{emple_no}
                       , EMPLE_NM       = #{emple_nm}
                       , AMND_ID		= #{amnd_id}
                       , AMNT_DTTM  	= TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')
         WHEN NOT MATCHED THEN
              INSERT (CNTR_CD, REC_PROD_DTL_ID, CTI_CRNC_DTL_ID, ACCNT_NO, DSPS_TYP_CD
                    , RGSR_ID, RGSN_DTTM, AMND_ID, AMNT_DTTM, PROD_CD
                    , PROD_NM, EMPLE_NO, EMPLE_NM)
              VALUES (#{cntr_cd}, #{rec_prod_dtl_id}, #{cti_crnc_dtl_id}, #{accnt_no}, #{dsps_typ_cd}
                    , #{rgsr_id}, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), #{amnd_id}, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), #{prod_cd}
                    , #{prod_nm}, #{emple_no}, #{emple_nm})
    </insert>
    
    <!-- 카드 출금이체 신청중인지 체크 -->
    <select id="DlwNewTypeMainConsMap.getCardWdrwReqChk" parameterType="String" resultType="String">
    <!-- DM sql-id: sql-life.cardWdrwReqChk -->


         SELECT /* DlwNewTypeMainConsMap.getCardWdrwReqChk */
                MAX(ACCNT_NO)
          FROM CARD_WDRW_REQ WR
         WHERE WR.ACCNT_NO = #{accnt_no}
           AND WR.STAT IN ('01', '02')
    </select>
    
    <select id="DlwNewTypeMainConsMap.getPayChk" parameterType="String" resultType="String">
    <!-- DM sql-id: sql-life.payChk -->
        SELECT /* DlwNewTypeMainConsMap.getPayChk */
               CASE WHEN NVL(SUM(CNT),0) > 0 THEN
                        'N'
                    ELSE
                        'Y'
                    END
          FROM (SELECT COUNT(*) CNT
                  FROM PAY_MNG
                 WHERE DEL_FG = 'N'
                   AND ACCNT_NO = #{accnt_no}
                UNION ALL
                SELECT COUNT(*) CNT
                  FROM PAY_MNG_DTL
                 WHERE DEL_FG = 'N'
                   AND ACCNT_NO = #{accnt_no}
                UNION ALL
                SELECT COUNT(*) CNT
                  FROM PAY_MNG_DTL1
                 WHERE DEL_FG = 'N'
                   AND ACCNT_NO = #{accnt_no})
    </select>
    
    <!--부가정보 조회 -->
    <select id="DlwNewTypeMainConsMap.getBugaInfo" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-life.selectBugaInfo -->   
    SELECT
    	/* DlwNewTypeMainConsMap.getBugaInfo */
    	CASE WHEN RS_ACCNT != 'N' AND MRR_ACCNT = 'N' THEN 'Y' ELSE 'N' END RESN_YN
	FROM
	(
	    SELECT 
	        MPA.ACCNT_NO,
	        NVL(RS.ACCNT_NO,'N') AS RS_ACCNT,
	        NVL(MRR.ACCNT_NO,'N') AS MRR_ACCNT
	    FROM MEM_PROD_ACCNT_DAMO MPA LEFT OUTER JOIN
	        RESCISSION RS ON MPA.ACCNT_NO = RS.ACCNT_NO AND RS.DEL_FG= 'N' LEFT OUTER JOIN
	        TB_MEMBER_REQ_REFUND MRR ON MPA.ACCNT_NO = MRR.ACCNT_NO AND MRR.DEL_FG = 'N'
	    WHERE MPA.ACCNT_NO = #{accnt_no}
	    GROUP BY MPA.ACCNT_NO,RS.ACCNT_NO, MRR.ACCNT_NO
	)
				
    <!-- 
	     SELECT /* DlwCardMap.getBugaInfo */
	               THIS_MON_NO
	             , LAST_PAY
	             , NEW_CHAN_GUNSU_NO
	             , NO
	             , PAY_AMT
	             , CASE WHEN EVENT_NM = ''
	                    THEN FN_YEN_CHE(ACCNT_NO)
	                    ELSE ''
	                END AS YUNCHE
	             , APP_CL_NM
	             , WDRW_STAT_NM
	             , EVENT_NM
	             , EVENT_DAY
	             , RESN_YN
	             , PAY.MONTH_PAY_AMT
	             , PAY.ALLT_AMT
	             , PAY.ADD_AMT
	             , CARD_APP_CL_NM
	             , CARD_WDRW_STAT_NM
          	FROM (SELECT TO_CHAR(AA.THIS_MON_NO) || '회' AS THIS_MON_NO
                     , TO_CHAR(AA.NO) || '회 '|| TO_CHAR(ADD_MONTHS(TO_DATE(JOIN_DT), AA.NO-1), 'YYYY-MM') || '월분 ' AS LAST_PAY
                     , (AA.NO + NEW_CHAN_GUNSU) AS NEW_CHAN_GUNSU_NO
                     , AA.NO
                     , AA.PAY_AMT
                     , AA.ACCNT_NO
                     , '' AS APP_CL_NM
                     , '' AS WDRW_STAT_NM
                     , '' AS CARD_WDRW_STAT_NM
                     , CASE WHEN R.ACCNT_NO IS NOT NULL AND R.RESN_CL!='02' AND  NVL(R.RESN_PROC_YN,'N') = 'N' THEN '해약미처리'
                            ELSE FN_EVENT(AA.ACCNT_NO)
                       END AS EVENT_NM

                     , FN_EVENT_DAY(AA.ACCNT_NO) AS EVENT_DAY

                     , CASE WHEN R.ACCNT_NO IS NOT NULL AND MRR.ACCNT_NO IS NULL
                            THEN 'Y'
                            ELSE 'N'
                        END AS RESN_YN
                     , NVL(AA.PAY_AMT, 0) MONTH_PAY_AMT
                     , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = AA.ACCNT_NO AND DEL_FG = 'N'), 0) ALLT_AMT
                     , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = AA.ACCNT_NO AND DEL_FG = 'N'), 0) ADD_AMT
                     , '' AS CARD_APP_CL_NM

                  FROM (SELECT (FN_DIFF_MONTH(SYSDATE, TO_DATE(MPA.JOIN_DT)) + 1) AS THIS_MON_NO
                             , MPA.ACCNT_NO
                             , MPA.JOIN_DT
                             , P.PAY_NO NO
                             , P.PAY_AMT AS PAY_AMT
                             , MPA.JOIN_CL JOIN_CL
                             , MPA.PROD_CD
                             , MPA.NEW_CHAN_GUNSU
                             , PD.PAY_TYPE
                          FROM MEM_PROD_ACCNT MPA
                                JOIN PRODUCT PD ON MPA.PROD_CD=PD.PROD_CD
                                LEFT JOIN (SELECT ACCNT_NO
                                                , COUNT(NO) PAY_NO
                                                , SUM(PAY_AMT) AS PAY_AMT
                                             FROM PAY_MNG
                                            WHERE DEL_FG='N'
                                            GROUP BY ACCNT_NO
                                        ) P ON MPA.ACCNT_NO=P.ACCNT_NO
                    WHERE MPA.ACCNT_NO =  #{accnt_no}
                ) AA
                LEFT JOIN RESCISSION R ON AA.ACCNT_NO=R.ACCNT_NO AND R.DEL_FG='N'
                LEFT JOIN TB_MEMBER_REQ_REFUND MRR ON AA.ACCNT_NO = MRR.ACCNT_NO AND AA.NO = MRR.REQ_PAY_NO AND MRR.DEL_FG='N'
            ) PAY
     -->
          
    <!--  
        SELECT /* DlwNewTypeMainConsMap.getBugaInfo */
               THIS_MON_NO
             , LAST_PAY
             , NEW_CHAN_GUNSU_NO
             , NO
             , PAY_AMT
             , CASE WHEN EVENT_NM = ''
                    THEN FN_YEN_CHE(ACCNT_NO)
                    ELSE ''
                END AS YUNCHE
             , APP_CL_NM
             , WDRW_STAT_NM
             , EVENT_NM
             , EVENT_DAY
             , RESN_YN
             , PAY.MONTH_PAY_AMT
             , PAY.ALLT_AMT
             , PAY.ADD_AMT
             , CARD_APP_CL_NM
             , CARD_WDRW_STAT_NM
          FROM (SELECT TO_CHAR(AA.THIS_MON_NO) || '회' AS THIS_MON_NO
                     , TO_CHAR(AA.NO) || '회 '
                           || TO_CHAR(ADD_MONTHS(TO_DATE(JOIN_DT), AA.NO-1), 'YYYY-MM') || '월분 '
                           || TO_CHAR(PAY_DAY) AS LAST_PAY
                     , (AA.NO + NEW_CHAN_GUNSU) AS NEW_CHAN_GUNSU_NO
                     , AA.NO
                     , AA.PAY_AMT
                     , AA.ACCNT_NO
                     , (SELECT FN_COM_NM('17', APP_CL)
                        FROM NEW_CANCL_APP
                        WHERE ACCNT_NO = AA.ACCNT_NO
                        AND STAT = '04'
                        AND SEQ = (SELECT MAX(SEQ)
                                    FROM NEW_CANCL_APP
                                   WHERE ACCNT_NO = AA.ACCNT_NO)) AS APP_CL_NM
                     , (SELECT /*+INDEX(NEW_CANCL_APP INDEX1_NEW_CANCL_APP_ACCNT) */ FN_COM_NM('18', STAT) FROM WDRW_REQ WHERE ACCNT_NO = AA.ACCNT_NO
                               AND SEQ = (SELECT /*+INDEX(NEW_CANCL_APP INDEX1_NEW_CANCL_APP_ACCNT) */ MAX(SEQ) FROM WDRW_REQ WHERE ACCNT_NO = AA.ACCNT_NO)) AS WDRW_STAT_NM
                     , (SELECT FN_COM_NM('18', STAT) FROM CARD_WDRW_REQ WHERE ACCNT_NO = AA.ACCNT_NO
                               AND SEQ = (SELECT MAX(SEQ) FROM CARD_WDRW_REQ WHERE ACCNT_NO = AA.ACCNT_NO)) AS CARD_WDRW_STAT_NM
                     , CASE WHEN R.ACCNT_NO IS NOT NULL AND R.RESN_CL!='02' AND  NVL(R.RESN_PROC_YN,'N') = 'N' THEN '해약미처리'
                            ELSE FN_EVENT(AA.ACCNT_NO)
                       END AS EVENT_NM

                     , FN_EVENT_DAY(AA.ACCNT_NO) AS EVENT_DAY

                     , CASE WHEN R.ACCNT_NO IS NOT NULL AND MRR.ACCNT_NO IS NULL
                            THEN 'Y'
                            ELSE 'N'
                        END AS RESN_YN
                     , NVL(AA.PAY_AMT, 0) MONTH_PAY_AMT
                     , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = AA.ACCNT_NO AND DEL_FG = 'N'), 0) ALLT_AMT
                     , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = AA.ACCNT_NO AND DEL_FG = 'N'), 0) ADD_AMT
                     , (SELECT /*+INDEX(CARD_NEW_CANCL_APP INDEX_CARD_NEW_CANCL_APP_ACCNT) */ FN_COM_NM('17', APP_CL)
                        FROM CARD_NEW_CANCL_APP
                        WHERE ACCNT_NO = AA.ACCNT_NO
                        AND SEQ = (SELECT  /*+INDEX(CARD_NEW_CANCL_APP INDEX_CARD_NEW_CANCL_APP_ACCNT) */ MAX(SEQ)
                                   FROM CARD_NEW_CANCL_APP
                                   WHERE ACCNT_NO = AA.ACCNT_NO)) AS CARD_APP_CL_NM

                  FROM (SELECT (FN_DIFF_MONTH(SYSDATE, TO_DATE(MPA.JOIN_DT)) + 1) AS THIS_MON_NO
                             , MPA.ACCNT_NO
                             , MPA.JOIN_DT
                             , P.PAY_NO NO
                             , P.PAY_AMT AS PAY_AMT
                             , P.PAY_DAY
                             , MPA.JOIN_CL JOIN_CL
                             , MPA.PROD_CD
                             , MPA.NEW_CHAN_GUNSU
                             , PD.PAY_TYPE
                          FROM MEM_PROD_ACCNT MPA
                                JOIN PRODUCT PD ON MPA.PROD_CD=PD.PROD_CD
                                LEFT JOIN (SELECT ACCNT_NO
                                                , COUNT(NO) PAY_NO
                                                , MAX(PAY_DAY) PAY_DAY
                                                , SUM(PAY_AMT) PAY_AMT
                                             FROM PAY_MNG
                                            WHERE ACCNT_NO= #{accnt_no}
                                              AND DEL_FG='N'
                                            GROUP BY ACCNT_NO
                                        ) P ON MPA.ACCNT_NO=P.ACCNT_NO
                    WHERE MPA.ACCNT_NO = #{accnt_no}
                ) AA
                LEFT JOIN RESCISSION R ON AA.ACCNT_NO=R.ACCNT_NO AND R.DEL_FG='N'
                LEFT JOIN TB_MEMBER_REQ_REFUND MRR ON AA.ACCNT_NO = MRR.ACCNT_NO AND AA.NO = MRR.REQ_PAY_NO AND MRR.DEL_FG='N'
            ) PAY
	-->
    </select>
    
    <select id="DlwNewTypeMainConsMap.getDlwEmplList" parameterType="map" resultType="resultMap">


        SELECT /* DlwNewTypeMainConsMap.getDlwEmplList */
               B.*
          FROM (SELECT 	<choose>
                            <when test="orderBy != null and orderBy != ''">
                                ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX
                            </when>
                            <otherwise>
                                ROW_NUMBER() OVER(ORDER BY UPD_DM DESC) PAGE_INDX
                            </otherwise>
                        </choose>
                     , A.*
                  FROM (SELECT EMPLE_NO, DEPT_CD, EMPLE_NM
                             , FN_DEPT_NM(DEPT_CD) AS DEPT_NM
                             , CELL
                             , UPD_DM
                             , APPFORM_DAY
                          FROM EMPLOYEE EMP
                        <include refid="DlwEmplMap.selectCondition_fragment" />
                        ) A
                ) B
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            <![CDATA[
             WHERE PAGE_INDX >= #{startLine}
               AND PAGE_INDX < #{endLine}
            ]]>
        </if>
    </select>
    
    <select id="DlwNewTypeMainConsMap.getBugaSrvcMemChk" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeMainConsMap.getBugaSrvcMemChk */
               A.MEM_NO, A.ACCNT_NO
          FROM MEM_PROD_ACCNT A
          JOIN MEMBER B
               ON A.MEM_NO = B.MEM_NO
              AND B.DEL_FG = 'N'
          JOIN EMPLOYEE EMP
               ON EMP.EMPLE_NO = A.EMPLE_NO
         WHERE A.DEL_FG = 'N'
           AND A.ACCNT_NO = #{accnt_no}
        <if test="cmsfg != null and cmsfg != ''">
            AND A.ACCNT_NO NOT IN (SELECT ACCNT_NO
                                     FROM CMS_MEM
                                    WHERE DEL_FG = 'N'
                                      AND ACCNT_NO = #{accnt_no})
            AND A.ACCNT_NO NOT IN (SELECT ACCNT_NO
                                     FROM NEW_CANCL_APP
                                    WHERE STAT IN ('01', '02')
                                      AND ACCNT_NO = #{accnt_no})
        </if>
        <if test="cardfg != null and cardfg != ''">
            AND A.ACCNT_NO NOT IN (SELECT ACCNT_NO
                                     FROM CARD_MEM
                                    WHERE DEL_FG = 'N'
                                      AND ACCNT_NO = #{accnt_no})
        </if>
        <if test="nsfg != null and nsfg.equalsIgnoreCase('Y')">
            AND EMP.DEPT_CD = '1602'
        </if>
        <if test="dataAthrQury != null and dataAthrQury != ''">
            ${dataAthrQury}
        </if>
    </select>
    
    <!--
    *  ================================================================
    * 날짜 : 20180809
    * 이름 : 송준빈
    * 추가내용 : 최근 애큐온 인증 여부 Y/N
    * 대상 테이블 : TB_MEMBER_NICE_INFO
    * ================================================================
    -->
    <select id="DlwNewTypeMainConsMap.getAcuonLatelyAuth" parameterType="map" resultType="resultMap">
        SELECT NICE_NO || '_' || AUTH_01 || AUTH_02 AS AUTH
  		  FROM ( SELECT NICE_NO
               		   ,AUTH_01
               		   ,AUTH_02
               		   ,RANK() OVER (ORDER BY IDX_AUTH DESC) IDX_AUTH
           		   FROM ( SELECT NICE_NO
                        		,AUTH_01
                        		,AUTH_02
                        		,RANK AS IDX_AUTH
                    		FROM ( SELECT A.NICE_NO
                                 		 ,A.UPP_TX_TYPE AS AUTH_01 -- 01 02 03 완료
                                 		 ,'신규' AS AUTH_02
                                 		 ,RANK() OVER (ORDER BY NICE_NO DESC) RANK
                             		 FROM LF_DMUSER.TB_MEMBER_NICE_INFO A
                            		WHERE A.CI_VAL = 'h1Ji9pLj2qxYHVUxbrxd3NzFbzr3xamNzdAYnmn/4MYtcl8YnHIz6KkqrjVz+tjW7IXAnEOvM/ENRHSDHyO2Mg=='
                         		 )
                   		   WHERE RANK = 1

                  		  UNION ALL

                  		 SELECT B.NICE_NO
                               ,A.UPP_TX_TYPE AS AUTH_01
                               ,B.UPP_TX_TYPE AS AUTH_02
                               ,2 AS IDX_AUTH
                           FROM LF_DMUSER.TB_MEMBER_NICE_INFO A
                           LEFT OUTER JOIN LF_DMUSER.TB_MEMBER_NICE_INFO_SECOND B
                                   ON A.NICE_NO = B.NICE_NO
                          WHERE 1=1
                          	AND B.DEL_FG = 'N'
                            AND B.ACCNT_NO = #{accnt_no}
                        ) TBL
               )
         WHERE IDX_AUTH = 1
    </select>
    
    <select id="DlwNewTypeMainConsMap.selectSvcAccntNoHist" parameterType="map" resultType="resultMap">
        /* 저장되어 있는 회원번호별 부가서비스관리 이력 조회 */
        SELECT ACCNT_NO
             , DTL_SEQ
             , SEQ
             , OPTSVC_SEQ
          FROM SVC_ISU_HIST
         WHERE ACCNT_NO = #{accnt_no}
         ORDER BY DTL_SEQ
    </select>
    
    <select id="DlwNewTypeMainConsMap.selectMemProdAccntSvcTot" parameterType="map" resultType="resultMap">
        /* 저장되어 있는 회원번호별 전체 부가서비스 이력 조회 */
        SELECT  ACCNT_SVC.ACCNT_NO
                ,ACCNT_SVC.DTL_SEQ
                ,ACCNT_SVC.SEQ
                ,SVC_DTL.OPT_SVC_CD
        FROM MEM_PROD_ACCNT_SVC ACCNT_SVC
              ,PROD_OPT_SVC_DTL SVC_DTL
        WHERE ACCNT_SVC.SEQ = SVC_DTL.SEQ
        AND ACCNT_NO = #{accnt_no}
        ORDER BY ACCNT_SVC.DTL_SEQ
    </select>
    
    <update id="DlwNewTypeMainConsMap.updateCallCenterVatSvcHist" parameterType="map" >
        /* 부가서비스 이력 상담관리와 동기화 update */
        UPDATE SVC_ISU_HIST
           SET SEQ = #{seq}
         WHERE ACCNT_NO = #{accnt_no}
           AND DTL_SEQ = #{dtl_seq}
           AND OPTSVC_SEQ = #{optsvc_seq}
    </update>
    
    <!--
    * ================================================================
    * 날짜 : 20180221
    * 이름 : 송준빈
    * 추가내용 : 고객의 증서내용 조회 (2차 발송시 NICE 개별부로 보내지게 됨)
    * ================================================================
    -->
    <select id="DlwNewTypeMainConsMap.getCertfMng" parameterType="map" resultType="resultMap">
        SELECT DISTINCT MEM.MEM_NO
              ,ACCNT.ACCNT_NO
              ,LF_DMUSER.FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
              ,PROD.PROD_CL
              ,ACCNT.JOIN_DT AS JOIN_DT
              ,(CASE WHEN LENGTH(MEM.CELL)>5 THEN SUBSTR(MEM.CELL, 1, LENGTH(MEM.CELL)-4) || '****' ELSE ' ' END) CELL
              ,MEM.CELL CELL_FULL
              ,MEM.BRTH_MON_DAY
              ,MEM.HOME_ZIP
              ,MEM.HOME_ADDR
              ,MEM.HOME_ADDR2
              ,MEM.HOME_ADDR || ' ' || HOME_ADDR2 AS ADDR
              ,ACCNT.EMPLE_NO
              ,LF_DMUSER.FN_DEPT_NM((SELECT DEPT_CD FROM LF_DMUSER.EMPLOYEE EMPL WHERE EMPL.EMPLE_NO = ACCNT.EMPLE_NO))|| '/' || NVL(LF_DMUSER.FN_EMPLE_NM(ACCNT.EMPLE_NO),' ')  AS CHARGENM
              ,CASE WHEN PROD.PROD_CL='03' THEN CASE WHEN PROD.JOIN_TYPE ='0001' THEN TRIM(TO_CHAR(PROD_AMT,'999,999,999,999,999')) || ' 원' || (SELECT '(실납입금액 : ' || TRIM(TO_CHAR(SUM((MONTH_PAY_AMT) * (END_NO-ST_NO + 1)),'999,999,999,999,999')) || ' 원)'  FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND MONTH_PAY_AMT>0)
                    WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0001' THEN TRIM(TO_CHAR(PROD_AMT,'999,999,999,999,999')) || ' 원' || (SELECT '(실납입금액 : ' || TRIM(TO_CHAR(SUM((MONTH_PAY_AMT) * (END_NO-ST_NO + 1)),'999,999,999,999,999')) || ' 원)'  FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND MONTH_PAY_AMT>0)
                    ELSE TRIM(TO_CHAR(PROD_AMT,'999,999,999,999,999')) || ' 원'
               END
               ELSE TRIM(TO_CHAR(PROD_AMT,'999,999,999,999,999')) || ' 원'
               END PROD_AMT
              ,PROD.PROD_CD
              ,PROD.PROD_NM
              ,PROD.JOIN_TYPE
              ,(CASE WHEN NVL(PROD.JOIN_GIFT_CARD_SORT, ' ') = '0001' THEN 'Y' ELSE 'N' END) MOBILE_PROD
              ,NVL(CASE WHEN PROD.PROD_CL='03' THEN CASE  WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0002' THEN TRIM(TO_CHAR(PROD.MON_PAY_AMT,'999,999,999,999,999')) ||' 원'
                    ELSE LF_DMUSER.FN_CERTIF_EXCEPT(PROD.PROD_CD)
               END
               ELSE TRIM(TO_CHAR(PROD.MON_PAY_AMT,'999,999,999,999,999'))  ||' 원'
               END,' ') MON_PAY_AMT
              ,PROD.EXPR_NO
                ,LF_DMUSER.FN_COM_NM('01',ACCNT.PAY_MTHD) PAY_MTHD_NM
              ,CASE WHEN ACCNT.PAY_MTHD='04' THEN  CMSMEM.DEPR WHEN ACCNT.PAY_MTHD='06' THEN LF_DMUSER.FN_MEM_NM(ACCNT.MEM_NO) ELSE ' ' END DEPR
              ,CASE WHEN ACCNT.PAY_MTHD='06' THEN LF_DMUSER.FN_COM_NM('0120', CARDMEM.CARD_CD) ELSE LF_DMUSER.FN_COM_NM('63',CMSMEM.BANK_CD) END AS BANK_NM
              ,CASE WHEN ACCNT.PAY_MTHD='06' THEN ' ' ELSE LF_DMUSER.FN_COM_NM ('07', CMSMEM.RELTN) END AS RELTN_NM
              ,CASE WHEN ACCNT.PAY_MTHD='06' THEN SUBSTR( CARD_NO,1, 4) || '-' || SUBSTR(SUBSTR(CARD_NO,1, 8), -4) ||'-****-****'
                    ELSE SUBSTR(CMSMEM.BANK_ACCNT_NO,1,3) || '********'
               END AS BANK_ACCNT_NO
              ,CASE WHEN ACCNT.PAY_MTHD='04' THEN ICHAE_DT WHEN ACCNT.PAY_MTHD='06' THEN CARDMEM.PAY_DT ELSE ' ' END ICHAE_DT
              ,SUBSTR((CASE WHEN MEM.CONTC_TM_FROM=' ' OR MEM.CONTC_TM_FROM IS NULL THEN '00' ELSE MEM.CONTC_TM_FROM END), 1,2)  || ':' || SUBSTR((CASE WHEN MEM.CONTC_TM_FROM=' ' OR MEM.CONTC_TM_FROM IS NULL THEN '00' ELSE MEM.CONTC_TM_FROM END), -2)  || '~'
               || SUBSTR((CASE WHEN MEM.CONTC_TM_TO=' ' OR MEM.CONTC_TM_TO IS NULL THEN '00' ELSE MEM.CONTC_TM_TO END), 1,2)  || ':' || SUBSTR((CASE WHEN MEM.CONTC_TM_TO=' ' OR MEM.CONTC_TM_TO IS NULL THEN '00' ELSE MEM.CONTC_TM_TO END), -2) AS CONTC_TM
              ,CASE WHEN NVL(PMCC.PROD_PRT_NM,' ') = ' ' THEN PROD.PROD_NM ELSE PMCC.PROD_PRT_NM END  PROD_PRT_NM
              ,CASE WHEN PROD.PROD_CL='03' THEN PMCC.PROD_JOIN_PRT_NM ||
                    CASE WHEN NVL(ACCNT.PROD_MODEL_CD, 0) > 0 THEN (SELECT '(' ||PRODMD.MODEL_NM||')'
                                                                      FROM LF_DMUSER.PRODUCT_MODEL_MST PRODMM
                                                                      INNER JOIN LF_DMUSER.PRODUCT_MODEL_DTL PRODMD
                                                                              ON PRODMM.SEQ = PRODMD.SEQ
                                                                     WHERE PRODMM.PROD_CD = ACCNT.PROD_CD
                                                                       AND PRODMM.PROD_KIND = ACCNT.PROD_MODEL_KIND
                                                                       AND PRODMD.MODEL_CD = ACCNT.PROD_MODEL_CD
                                                                       AND PRODMM.DEL_FG ='N') ELSE ' '
                    END
               ELSE ' '
               END PROD_JOIN_PRT_NM
              ,NVL(CASE WHEN PROD.PROD_CL='03' THEN (SELECT TO_CHAR( SUM(END_NO-ST_NO + 1)) || '개월 할부매매계약(무이자)' FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND ALLT_AMT+ADD_AMT>0) ELSE ' ' END, ' ') CONTRACT_TYPE
              ,NVL(CASE WHEN PROD.PROD_CL='03' THEN (SELECT ALLT_AMT+ADD_AMT FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND SEQ =1) ELSE 0 END, 0) CONTRACT_MON_PAY
              ,NVL(CASE WHEN PROD.PROD_CL='03' THEN (SELECT '할부원금 ' || TO_CHAR( SUM(ALLT_AMT+ADD_AMT * (END_NO-ST_NO + 1)),'999,999,999,999,999') || '원(VAT포함)'  FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND ALLT_AMT+ADD_AMT>0) ELSE ' ' END, ' ') CONTRACT_AMT
              ,CASE WHEN PROD.PROD_CL='03' THEN (SELECT ('월'|| TO_CHAR( ALLT_AMT+ADD_AMT,'999,999,999,999,999') ||'원*') ||   TO_CHAR(END_NO-ST_NO+1) ||'회' FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD = 'S9' AND MONTH_PAY_AMT>0 AND SEQ =1)
                    ELSE ('월'|| TO_CHAR( PROD.MON_PAY_AMT,'999,999,999,999,999') || '원*' || TO_CHAR( PROD.EXPR_NO) || '회')
               END MONTH_PAY_AMT
              ,CASE WHEN PROD.PROD_CL='03' THEN (SELECT TO_CHAR( SUM(END_NO-ST_NO+1))||'회'
                                                   FROM LF_DMUSER.PRODUCT_DTL
                                                  WHERE PROD_CD = PROD.PROD_CD
                                                    AND MONTH_PAY_AMT > 0)
               ELSE TO_CHAR(PROD.EXPR_NO)|| '회'
               END PAY_EXPR_NO
              ,CASE WHEN PROD.PROD_CL='03' THEN '할부이자율 : 무이자' ELSE ' ' END ETC
              ,CASE WHEN PROD.PROD_CL='03' THEN (SELECT '월'||TRIM(TO_CHAR(MAX(MONTH_PAY_AMT+ALLT_AMT),'999,999,999,999,999'))||'원' || (CASE WHEN ACCNT.PAY_MTHD = '06' THEN '(카드결제)' ELSE ' ' END) || '*' || TO_CHAR(SUM(END_NO-ST_NO+1))||'회' FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD AND MONTH_PAY_AMT>0)
                    ELSE ('월'|| TRIM(TO_CHAR(PROD.MON_PAY_AMT,'999,999,999,999,999')) || '원' || (CASE WHEN ACCNT.PAY_MTHD = '06' THEN '(카드결제)' ELSE ' ' END) || '*' || TO_CHAR(PROD.EXPR_NO) || '회')  END PROD1_PAY_INFO
              ,CASE WHEN PROD.PROD_CL = '03' AND (ACCNT.RECOMMEND_EMPLE_NO IS NOT NULL AND ACCNT.RECOMMEND_EMPLE_NO != '') THEN LF_DMUSER.FN_DEPT_NM((SELECT DEPT_CD FROM LF_DMUSER.EMPLOYEE EMPL WHERE EMPL.EMPLE_NO = ACCNT.RECOMMEND_EMPLE_NO))|| '/' || NVL(LF_DMUSER.FN_EMPLE_NM(ACCNT.RECOMMEND_EMPLE_NO),' ')
                    WHEN PROD.PROD_CL = '03' AND (ACCNT.RECOMMEND_EMPLE_NO IS NULL OR ACCNT.RECOMMEND_EMPLE_NO = '') THEN ' '
                    ELSE LF_DMUSER.FN_DEPT_NM((SELECT DEPT_CD FROM LF_DMUSER.EMPLOYEE EMPL WHERE EMPL.EMPLE_NO = ACCNT.EMPLE_NO)) || '/' || NVL(LF_DMUSER.FN_EMPLE_NM(ACCNT.EMPLE_NO),' ')
               END DEPT_EMPLE_NM
              ,ACCNT.PAY_MTHD
              ,CASE WHEN PROD.JOIN_GIFT_CARD_AMT IS NOT NULL THEN TRIM(TO_CHAR(NVL(PROD.JOIN_GIFT_CARD_AMT, 0),'999,999,999,999,999')) || '원' ELSE ' ' END COMB_VAL
              ,NVL((SELECT END_NO-ST_NO+1 FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD AND SEQ = 1), 0) COMB_NO
              ,SUBSTR(SUBSTR(ACCNT.JOIN_DT,1, 4),-2) JOIN_YEAR
              ,SUBSTR(SUBSTR(ACCNT.JOIN_DT,1, 6), -2) JOIN_MONTH
              ,SUBSTR(ACCNT.JOIN_DT, -2) JOIN_DAY

              /* 증서정보 */
              ,NVL(CM.COFFIN1,' ') COFFIN1
              ,NVL(CM.COFFIN2,' ') COFFIN2
              ,NVL(CM.SHROUD_M1,' ') SHROUD_M1
              ,NVL(CM.SHROUD_M2,' ') SHROUD_M2
              ,NVL(CM.SHROUD_D1,' ') SHROUD_D1
              ,NVL(CM.SHROUD_D2,' ') SHROUD_D2
              ,NVL(CM.COFFIN_GDS1,' ') COFFIN_GDS1
              ,NVL(CM.COFFIN_GDS2,' ') COFFIN_GDS2
              ,NVL(CM.COFFIN_GDS3,' ') COFFIN_GDS3
              ,NVL(CM.MORTUARY_GDS1,' ')MORTUARY_GDS1
              ,NVL(CM.MORTUARY_GDS2,' ') MORTUARY_GDS2
              ,NVL(CM.MORTUARY_GDS3,' ') MORTUARY_GDS3
              ,NVL(CM.CAR1,' ') CAR1
              ,NVL(CM.CAR2,' ') CAR2
              ,NVL(CM.CAR3,' ') CAR3
              ,NVL(CM.FLOWER_M1,' ') FLOWER_M1
              ,NVL(CM.FLOWER_M2,' ') FLOWER_M2
              ,NVL(CM.FLOWER_M3,' ') FLOWER_M3
              ,NVL(CM.FLOWER_D1,' ') FLOWER_D1
              ,NVL(CM.FLOWER_D2,' ') FLOWER_D2
              ,NVL(CM.FLOWER_D3,' ') FLOWER_D3
              ,NVL(CM.FUNERAL_CLOTHES1,' ') FUNERAL_CLOTHES1
              ,NVL(CM.FUNERAL_CLOTHES2,' ') FUNERAL_CLOTHES2
              ,NVL(CM.FUNERAL_CLOTHES3,' ') FUNERAL_CLOTHES3
              ,NVL(CM.HELPER_M1,' ') HELPER_M1
              ,NVL(CM.HELPER_M2,' ') HELPER_M2
              ,NVL(CM.HELPER_M3,' ') HELPER_M3
              ,NVL(CM.HELPER_D1,' ') HELPER_D1
              ,NVL(CM.HELPER_D2,' ') HELPER_D2
              ,NVL(CM.HELPER_D3,' ') HELPER_D3
              ,REPLACE(REPLACE(CM.TERMS_SVC,<![CDATA['<BR>']]>, '\N'  ),CHR(13),'') TERMS_SVC
              ,REPLACE(REPLACE(CM.TERMS_DTL,<![CDATA['<BR>']]>, '\N'  ),CHR(13),'') TERMS_DTL
              ,REPLACE(REPLACE(CM.CONSM_NT,<![CDATA['<BR>']]>, '\N'  ),CHR(13),'') CONSM_NT
              ,REPLACE(REPLACE(CM.REFUND_NT,<![CDATA['<BR>']]>, '\N'  ),CHR(13),'') REFUND_NT
              ,REPLACE(REPLACE(CM.CONSM_AMT_MNG,<![CDATA['<BR>']]>, '\N'  ),CHR(13),'') CONSM_AMT_MNG
              ,REPLACE(REPLACE(CM.REFUND_MATH1,<![CDATA['<BR>']]>, '\N'  ),CHR(13),'') REFUND_MATH1
              ,REPLACE(REPLACE(CM.REFUND_MATH2,<![CDATA['<BR>']]>, '\N' ),CHR(13),'') REFUND_MATH2
              ,REPLACE(REPLACE((CASE WHEN (ACCNT.PROD_CD = '19' AND ACCNT.PROD_MODEL_KIND = '0356') THEN (SELECT RESN_AMT_INFO FROM LF_DMUSER.CERTF_MNG WHERE PROD_CD = '19' AND TO_CHAR(UPD_DM,'YYYYMMDD') = '20170926' )
                                ELSE CM.RESN_AMT_INFO END),<![CDATA['<BR>']]>, '\N'),CHR(13),'') RESN_AMT_INFO
              ,REPLACE(CM.REFUND_AMT,CHR(13),'') REFUND_AMT
              ,REPLACE(CM.ASSET,CHR(13),'') ASSET
              ,REPLACE(CM.REFUND_MATH3,CHR(13),'') REFUND_MATH3
              ,REPLACE(CM.ETC  ,CHR(13),'') CMETC
              ,REPLACE(REPLACE(CM.ETC_VAL,<![CDATA['<BR>']]>, '\N' ),CHR(13),'')  ETC_VAL
              ,CASE WHEN PROD.PROD_CL='03' AND PROD.SECTION_F = '0001' THEN '계약금액'  ELSE ' '  END AS PROD_BUGA_LBL2
              ,CASE WHEN PROD.PROD_CL='03' THEN
                   CASE WHEN PROD.JOIN_TYPE ='0001' THEN '월납입금'
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0001' THEN '회차별납입액'
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0002' THEN '계약유형'
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0003' THEN '회차별납입액'
                   ELSE ' '
                    END
               ELSE ' '
                END PROD_BUGA_LBL3
              ,CASE WHEN PROD.PROD_CL='03' THEN
                   CASE WHEN PROD.JOIN_TYPE ='0001' THEN '계약유형'
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0001' THEN '계약유형'
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0002' THEN '기타사항'
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0003' THEN '계약유형'
                   ELSE ' '
                   END
               ELSE ' '
                END PROD_BUGA_LBL4
              ,CASE WHEN PROD.PROD_CL='03' THEN
                   CASE WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0001' THEN (SELECT TRIM(TO_CHAR(SUM((ALLT_AMT+ADD_AMT) * (END_NO-ST_NO + 1)),'999,999,999,999,999')) ||'원' FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND ALLT_AMT+ADD_AMT>0)
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0002' THEN (SELECT '할부원금 ' || TRIM(TO_CHAR(SUM((ALLT_AMT+ADD_AMT) * (END_NO-ST_NO + 1)),'999,999,999,999,999')) || '원'  FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND ALLT_AMT+ADD_AMT>0)
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0003' THEN (SELECT TRIM(TO_CHAR(SUM((ALLT_AMT+ADD_AMT) * (END_NO-ST_NO + 1)),'999,999,999,999,999')) ||'원' FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND ALLT_AMT+ADD_AMT>0)
                   ELSE (SELECT CASE WHEN NVL(SUM((ALLT_AMT+ADD_AMT) * (END_NO-ST_NO + 1)),0) > 0 THEN '할부원금 ' || TRIM(TO_CHAR(SUM((ALLT_AMT+ADD_AMT) * (END_NO-ST_NO + 1)),'999,999,999,999,999')) || '원(VAT포함)' ELSE ' ' END FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND ALLT_AMT+ADD_AMT>0)
                   END
               ELSE ' '
                END PROD_BUGA_VAL2
              ,CASE WHEN PROD.PROD_CL='03' THEN
                   CASE WHEN PROD.JOIN_TYPE ='0001' THEN (SELECT ('월'||TRIM(TO_CHAR(ALLT_AMT+ADD_AMT,'999,999,999,999,999'))||'원*')|| TO_CHAR((END_NO-ST_NO+1))||'회' FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD AND MONTH_PAY_AMT>0 AND SEQ =1)
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0001' THEN (SELECT ('월'|| TRIM(TO_CHAR(ALLT_AMT+ADD_AMT,'999,999,999,999,999')) ||'원*')||TO_CHAR((END_NO-ST_NO+1))||'회' FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD AND MONTH_PAY_AMT>0 AND SEQ =1)
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0002' THEN (SELECT TO_CHAR( SUM(END_NO-ST_NO + 1)) || '개월 할부매매계약'  FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND ALLT_AMT+ADD_AMT>0)
                        WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0003' THEN (SELECT ('월'|| TRIM(TO_CHAR(ALLT_AMT+ADD_AMT,'999,999,999,999,999'))||'원*')|| TO_CHAR((END_NO-ST_NO+1))||'회' FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD AND MONTH_PAY_AMT>0 AND SEQ =1)
                   ELSE (SELECT CASE WHEN NVL(SUM((ALLT_AMT+ADD_AMT) * (END_NO-ST_NO + 1)),0) > 0 THEN  '할부원금 ' || TO_CHAR(SUM((ALLT_AMT+ADD_AMT) * (END_NO-ST_NO + 1)))|| '원(VAT포함)' ELSE ' ' END FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND ALLT_AMT+ADD_AMT>0)
                   END
               ELSE ' '
                END PROD_BUGA_VAL3
              ,CASE WHEN PROD.PROD_CL='03' THEN
                   CASE  WHEN PROD.JOIN_TYPE ='0001' THEN (SELECT TO_CHAR( SUM(END_NO-ST_NO + 1)) || '개월 할부매매계약(무이자)'  FROM LF_DMUSER.PRODUCT_DTL WHERE PROD_CD=PROD.PROD_CD AND ALLT_AMT+ADD_AMT>0)
                         WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0001' THEN '이용구매계약'
                         WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0002' THEN '할부이자율 : 무이자'
                         WHEN PROD.JOIN_TYPE ='0002' AND PROD.JOIN_GIFT_CARD_SORT ='0003' THEN '구매 및 충전 계약'
                   ELSE ' '
                   END
               ELSE ' '
                END PROD_BUGA_VAL4
              ,CARDMEM.EXPIRE_DATE
              /* 2018.04.10 토탈라이프서비스, 실 해약환급내용 추가 */
              ,REPLACE(REPLACE(CM.TERMS_SVC,<![CDATA['<BR>']]>, '\n'),chr(13),'') AS TERMS_SVC  /*INFO_40*/
              ,REPLACE(REPLACE((CASE WHEN (ACCNT.PROD_CD = '19' AND ACCNT.PROD_MODEL_KIND = '0356') THEN
                                          ( SELECT RESN_AMT_INFO FROM LF_DMUSER.CERTF_MNG WHERE PROD_CD = '19' AND TO_CHAR(UPD_DM,'YYYYMMDD') = '20170926' )
                                     ELSE CM.RESN_AMT_INFO END),<![CDATA['<BR>']]>, '\N'),CHR(13),'') AS RESN_AMT_INFO /* INFO_41*/
          FROM LF_DMUSER.MEM_PROD_ACCNT ACCNT
          INNER JOIN LF_DMUSER.PRODUCT PROD
                  ON PROD.PROD_CD = ACCNT.PROD_CD
          INNER JOIN LF_DMUSER.PRODUCT_MODEL_CL_CD PMCC
                  ON ACCNT.PROD_MODEL_KIND = PMCC.MODEL_CL_CD
          INNER JOIN LF_DMUSER.MEMBER MEM
                  ON ACCNT.MEM_NO = MEM.MEM_NO
          LEFT OUTER JOIN LF_DMUSER.CMS_MEM CMSMEM
                  ON CMSMEM.ACCNT_NO = ACCNT.ACCNT_NO
                 AND CMSMEM.DEL_FG='N'
          LEFT OUTER JOIN LF_DMUSER.CARD_MEM CARDMEM
                  ON CARDMEM.ACCNT_NO = ACCNT.ACCNT_NO
                 AND CARDMEM.DEL_FG='N'
          LEFT OUTER JOIN ( SELECT A.*  ,  NVL( LF_DMUSER.FN_CERTF_MNG_APP_DM(A.PROD_CD,A.APP_DM) , '9999/12/31')  MIN_APP_DM FROM LF_DMUSER.CERTF_MNG A WHERE A.DEL_FG = 'N') CM
                  ON CM.PROD_CD = ACCNT.PROD_CD
                 AND CM.DEL_FG='N'
                 AND SUBSTR(ACCNT.JOIN_DT, 1,8) BETWEEN SUBSTR( CM.APP_DM, 1,8) AND REPLACE(CM.MIN_APP_DM,'/','')
         WHERE ACCNT.DEL_FG = 'N'
           AND MEM.DEL_FG='N'
           AND ACCNT.ACCNT_NO IN #{accnt_no}
        ORDER BY PROD.PROD_NM, ACCNT.ACCNT_NO
    </select>
    
    <!--
    * ================================================================
    * 날짜 : 20180221
    * 이름 : 송준빈
    * 추가내용 : 고객의 해약율과 해약금 조회 (2차 발송시 NICE 개별부로 보내지게 됨)
    * ================================================================
    -->
    <select id="DlwNewTypeMainConsMap.getResnAmt2" parameterType="map" resultType="resultMap">
        SELECT NVL(NO,0) NO
              ,PROD_CD
              ,ACCNT_NO
              ,ROUND(RESN_AMT,0) RESN_AMT
              ,CASE WHEN PROD_CD IN ('I7','I8','BI','W4','AM') THEN
                    CASE WHEN NO <![CDATA[<=]]> EXPR_NO AND NVL(TMTAMT,0) <![CDATA[>]]> 0 THEN TO_CHAR((SELECT PCT FROM LF_DMUSER.PRODUCT_NO_DATA WHERE PROD_CD = TMP.PROD_CD AND NO = TMP.NO))
                        WHEN NO > EXPR_NO THEN '100%'
                        ELSE ''
                    END
                ELSE
                CASE WHEN PROD_CD = '19' THEN
                    CASE WHEN NO <![CDATA[<=]]> EXPR_NO AND NVL(TMTAMT,0) <![CDATA[>]]> 0 THEN TO_CHAR((SELECT PCT FROM LF_DMUSER.PRODUCT_NO_DATA WHERE PROD_CD = '^9' AND NO = TMP.NO)) || '%'
                        WHEN NO > EXPR_NO THEN '100%'
                        ELSE ''
                    END
                WHEN PROD_CD = 'M1' THEN
                    CASE WHEN NO <![CDATA[<=]]> EXPR_NO AND NVL(TMTAMT,0) <![CDATA[>]]> 0 THEN TO_CHAR((SELECT PCT FROM LF_DMUSER.PRODUCT_NO_DATA WHERE PROD_CD = '^1' AND NO = TMP.NO)) || '%'
                        WHEN NO > EXPR_NO THEN '100%'
                        ELSE ''
                    END
                ELSE
                    CASE WHEN NO <![CDATA[<=]]> EXPR_NO AND NVL(TMTAMT,0) <![CDATA[>]]> 0 THEN NVL( TO_NUMBER(ROUND( TO_NUMBER(RESN_AMT) /  ((SELECT SUM(AMT) FROM LF_DMUSER.PRODUCT_NO_DATA WHERE PROD_CD = TMP.PROD_CD AND NO <![CDATA[<=]]> TMP.NO) ) * 100,0)),100) ||'%'
                        WHEN NO > EXPR_NO THEN '100%'
                        ELSE ''
                    END
                END
               END PCT
              ,TMTAMT
              ,PROD_NM
          FROM( SELECT D.NO
                      ,TM.SEQ
                      ,P.PROD_NM
                      ,P.PROD_CD
                      ,ACCNT.ACCNT_NO
                      ,D.RESN_AMT
                      ,P.EXPR_NO
                      ,TM.REAL_EXPR_NO
                      ,LF_DMUSER.FN_PROD_NO_AMT(P.PROD_CD,'01',D.NO)  AS TMTAMT
                  FROM (SELECT M.ACCNT_NO
                              ,T.SEQ
                              ,(P.EXPR_NO-NVL(M.NEW_CHAN_GUNSU,0)) REAL_EXPR_NO
                          FROM LF_DMUSER.MEM_PROD_ACCNT M
                          JOIN LF_DMUSER.PRODUCT P
                            ON M.PROD_CD =P.PROD_CD
                          LEFT JOIN LF_DMUSER.TMP_RESN_NO  T
                            ON 1=1
                         WHERE ACCNT_NO IN (#{accnt_no})
                       ) TM
                  JOIN LF_DMUSER.MEM_PROD_ACCNT ACCNT
                    ON TM.ACCNT_NO = ACCNT.ACCNT_NO
                  JOIN LF_DMUSER.PRODUCT P
                    ON ACCNT.PROD_CD = P.PROD_CD
                  LEFT JOIN LF_DMUSER.RESNSTD_M M
                    ON ACCNT.PROD_CD=M.PROD_CD
                   AND M.USE_YN = 'Y'
                   AND M.MODEL_CL_CD = ACCNT.PROD_MODEL_KIND
                   AND M.SEQ = LF_DMUSER.FN_RESNSTD_M_SEQ(ACCNT.PROD_CD,ACCNT.PROD_MODEL_KIND, ACCNT.JOIN_DT)
                  LEFT JOIN LF_DMUSER.RESNSTD_D D ON M.SEQ = D.MST_SEQ  AND D.NO = TM.SEQ
                   AND ACCNT.ACCNT_NO IN (#{accnt_no})
                ) TMP
        ORDER BY TMP.PROD_NM, ACCNT_NO, SEQ
    </select>
    
    <!--
    * ================================================================
    * 날짜 : 20180809
    * 이름 : 송준빈
    * 추가내용 : NICE 전자서명 2차대상 고객 저장
    * 대상 테이블 : TB_MEMBER_NICE_INFO_SECOND
    * ================================================================
    -->
    <insert id="DlwNewTypeMainConsMap.insertMemberNiceInfoSecond" parameterType="map">
        	BEGIN
	        	UPDATE LF_DMUSER.TB_MEMBER_NICE_INFO_SECOND
	        	SET DEL_FG = 'Y'
	        	WHERE ACCNT_NO = #{accnt_no};

	     		INSERT INTO LF_DMUSER.TB_MEMBER_NICE_INFO_SECOND( JOIN_SEQ, NICE_NO, NICE_NO2, MEM_NO, ACCNT_NO
															 ,NCCS_STAT, UPP_TX_TYPE, IMG_FILE_NM, IMG_FILE_PATH
															 ,RGSR_ID, RGSN_DTTM, UPDT_DTTM, FINISH_FLAG, DEL_FG )
				 VALUES ( (SELECT NVL(MAX(JOIN_SEQ) , 0) + 1 FROM LF_DMUSER.TB_MEMBER_NICE_INFO_SECOND WHERE 1=1)
				         ,#{nice_no}, '', #{mem_no}, #{accnt_no}, '', '', '', '', #{rgsr_id}, SYSDATE, SYSDATE, '1Y', 'N');
			END;
    </insert>
    
    <!--
    * ================================================================
    * 날짜 : 20180221
    * 이름 : 송준빈
    * 추가내용 : 고객 타켓리스트 정보 조회
    * 대상 테이블 : TB_TRGT_CUST_DTPT
    * ================================================================
    -->
    <select id="DlwNewTypeMainConsMap.getMemberNiceRetrieve2" parameterType="map" resultType="resultMap">
        SELECT JOIN_SEQ      AS JOIN_SEQ
			  ,NICE_NO       AS NICE_NO
			  ,NICE_NO2      AS NICE_NO2
			  ,MEM_NO        AS MEM_NO
			  ,ACCNT_NO      AS ACCNT_NO
			  ,NCCS_STAT     AS NCCS_STAT
			  ,UPP_TX_TYPE   AS UPP_TX_TYPE
			  ,IMG_FILE_NM   AS IMG_FILE_NM
			  ,IMG_FILE_PATH AS IMG_FILE_PATH
		 	  ,RGSR_ID       AS RGSR_ID
			  ,RGSN_DTTM     AS RGSN_DTTM
			  ,UPDT_DTTM     AS UPDT_DTTM
			  ,FINISH_FLAG   AS FINISH_FLAG
	      FROM LF_DMUSER.TB_MEMBER_NICE_INFO_SECOND
	     WHERE 1=1
	     AND DEL_FG = 'N'
	     <if test="app_no != null and app_no != ''">
             AND ACCNT_NO = #{app_no}
         </if>
	     <if test="accnt_no != null and accnt_no != ''">
             AND ACCNT_NO = #{accnt_no}
         </if>
    </select>
    
    <!-- ================================================================
     * 날짜 : 20181022
     * 이름 : 송준빈
     * 추가내용 : 특정회원의 청구 여부 확인
     * 대상 테이블 : LF_DMUSER.TB_MEMBER_WDRW_REQ
     * ================================================================
     * -->
    <select id="DlwNewTypeMainConsMap.getWdrwReqAccntConfirm" parameterType="String" resultType="int">
        SELECT /* DlwNewTypeMainConsMap.getWdrwReqAccntConfirm */
               COUNT(*) AS ACCNT_CNT
          FROM ( SELECT ACCNT_NO          /* 회원번호                                                                 */
                       ,PROD_CD           /* 상품코드                                                                 */
                       ,PAY_MTHD          /* 산출구분(CMS:04, CARD:06)                                                */
                       ,REQ_BIT           /* 산출상세구분(01:정기, 02:미출금, 03:임의 ,04:연체, 05:임시, 06:고객센터) */
                       ,STAT              /* 상태                                                                     */
                       ,KSTBIT            /* 회원상태(01:대기, 02:가입, 03:해약, 04:행사, 09:만기)                    */
                       ,TRUE_CNT          /* 실납입회수                                                               */
                       ,REQ_PAY_NO        /* 산출청구회차                                                             */
                       ,PAY_BIT           /* 산출비트                                                                 */
                       ,ICHAE_NO          /* 이체번호(계좌 혹은 BID)                                                  */
                       ,ICHAE_CD          /* 이체코드(은행, 카드사)                                                   */
                       ,REQ_DAY           /* 청구일                                                                   */
                       ,BANK_FILIN_BRKDN  /* 통장기재내역                                                             */
                       ,PAY_AMT           /* 청구금액                                                                 */
                       ,REG_DM            /* 등록일                                                                   */
                       ,REG_MAN           /* 등록자                                                                   */
                       ,ICHAE_DT          /* 정기건 및 연체건 이체일                                                  */
                       ,REQ_PAY_GUNSU     /* 산출청구건수                                                             */
                       ,UPD_DM            /* 수정일                                                                   */
                       ,UPD_MAN           /* 수정자                                                                   */
                       ,DEL_FG            /* 청구여부(N:청구전 Y:삭제 R:청구 C:완료(변환/입금) F:완료(실패))          */
                       ,BIRTH             /* 생년월일(CMS용)                                                          */
                       ,BILL_GUBUN        /* 36회 카드사 전달 구분값                                                  */
                       ,RESULT_KEY        /* 카드/CMS결과KEY(실시간포함)                                              */
                       ,RESULT_KIND       /* 01:파일, 02:실시간, 03:자유,04:기타                                      */
                       ,MONTH_CNT         /* 당월회차                                                                 */
                   FROM LF_DMUSER.TB_MEMBER_WDRW_REQ
                  WHERE 1=1
                    AND DEL_FG IN ('N', 'R')
                    AND ACCNT_NO = #{accnt_no}
               ) A
         WHERE 1=1
    </select>
    
    <!-- ================================================================
     * 날짜 : 20181022
     * 이름 : 송준빈
     * 추가내용 : 출금이체의뢰내역(산출, 청구(행사, 해약)) 조회
     * 대상 테이블 : LF_DMUSER.TB_MEMBER_WDRW_REQ
     * ================================================================
     * -->
    <select id="DlwNewTypeMainConsMap.getWdrwReqAccntEventConfirm" parameterType="String" resultType="resultMap">
        SELECT /* DlwNewTypeMainConsMap.getWdrwReqAccntEventConfirm */
               *
          FROM ( SELECT ACCNT_NO          /* 회원번호                                                                 */
                       ,PROD_CD           /* 상품코드                                                                 */
                       ,PAY_MTHD          /* 산출구분(CMS:04, CARD:06)                                                */
                       ,REQ_BIT           /* 산출상세구분(01:정기, 02:미출금, 03:임의 ,04:연체, 05:임시, 06:고객센터) */
                       ,STAT              /* 상태                                                                     */
                       ,KSTBIT            /* 회원상태(01:대기, 02:가입, 03:해약, 04:행사, 09:만기)                    */
                       ,TRUE_CNT          /* 실납입회수                                                               */
                       ,REQ_PAY_NO        /* 산출청구회차                                                             */
                       ,PAY_BIT           /* 산출비트                                                                 */
                       ,ICHAE_NO          /* 이체번호(계좌 혹은 BID)                                                  */
                       ,ICHAE_CD          /* 이체코드(은행, 카드사)                                                   */
                       ,REQ_DAY           /* 청구일                                                                   */
                       ,BANK_FILIN_BRKDN  /* 통장기재내역                                                             */
                       ,PAY_AMT           /* 청구금액                                                                 */
                       ,REG_DM            /* 등록일                                                                   */
                       ,REG_MAN           /* 등록자                                                                   */
                       ,ICHAE_DT          /* 정기건 및 연체건 이체일                                                  */
                       ,REQ_PAY_GUNSU     /* 산출청구건수                                                             */
                       ,UPD_DM            /* 수정일                                                                   */
                       ,UPD_MAN           /* 수정자                                                                   */
                       ,DEL_FG            /* 청구여부(N:청구전 Y:삭제 R:청구 C:완료(변환/입금) F:완료(실패))          */
                       ,BIRTH             /* 생년월일(CMS용)                                                          */
                       ,BILL_GUBUN        /* 36회 카드사 전달 구분값                                                  */
                       ,RESULT_KEY        /* 카드/CMS결과KEY(실시간포함)                                              */
                       ,RESULT_KIND       /* 01:파일, 02:실시간, 03:자유,04:기타                                      */
                       ,MONTH_CNT         /* 당월회차                                                                 */
                   FROM LF_DMUSER.TB_MEMBER_WDRW_REQ
                  WHERE 1=1
                    AND DEL_FG IN ('N', 'R')
                    AND ACCNT_NO = #{accnt_no}
               ) A
         WHERE 1=1
    </select>
    
    <!-- ================================================================
     * 날짜 : 20190103
     * 이름 : 송준빈
     * 추가내용 : 만기연장 관리회원 등록 여부 데이터 조회 (메인화면에서 사용함)
     * 대상 테이블 : LF_DMUSER.TB_MEMBER_MANGI_EXT
     * ================================================================
     * -->
    <select id="DlwNewTypeMainConsMap.getMemberMangiExtConfirmList" parameterType="map" resultType="resultMap">
		SELECT 
		    /* DlwNewTypeMainConsMap.getMemberMangiExtConfirmList */
		    /* 만기연장(FF) 만기연장 등록이 안된 회원은 그냥 가입일자기준 만기  
		     * 만기연장(A,B) 과거 모든이에 만기연장 등록한 사람은 가입일자에 연장연수 ADD      
		     * 만기연장(C) 만기방어로 등록된 회원으로 현재 만기방어 일자 기준으로 연장연수 ADD
		    */
		   MAIN_TBL.*,  
		   CASE WHEN INSERT_GBN = 'FF' THEN (TO_CHAR(ADD_MONTHS(JOIN_DT, CAL_MAN),'YYYYMMDD'))
		        WHEN INSERT_GBN IN ('A','B') THEN (TO_CHAR(ADD_MONTHS(JOIN_DT, CAL_MAN + (NVL(EXT_PERIOD, 0) * 12)),'YYYYMMDD'))
		   ELSE (TO_CHAR(ADD_MONTHS(EXT_DAY, (NVL(EXT_PERIOD, 0) * 12)),'YYYYMMDD'))  
		   END AS MAN_DAY,
		   CASE WHEN INSERT_GBN = 'FF' AND TODAY >= (TO_CHAR(ADD_MONTHS(JOIN_DT, CAL_MAN),'YYYYMMDD')) THEN 'MAN'
		        WHEN INSERT_GBN = 'C' AND EXT_PERIOD = 0 THEN 'VIP00'
		        WHEN INSERT_GBN = 'C' AND EXT_PERIOD = 2 THEN 'VIP02'
		        WHEN INSERT_GBN = 'C' AND EXT_PERIOD = 4 THEN 'VIP04'
		        WHEN INSERT_GBN = 'C' AND EXT_PERIOD = 6 THEN 'VIP06'
		        WHEN INSERT_GBN = 'C' AND EXT_PERIOD = 8 THEN 'VIP08'
		    ELSE 'NOR'
		    END AS MAN_STAT,
		    (TO_CHAR(ADD_MONTHS(JOIN_DT, CAL_MAN),'YYYYMMDD')) AS OLD_MAN_DAY    
		FROM ( 
		        SELECT 
		            MPA.ACCNT_NO
		            ,NVL(MME.CELL,MB.CELL) AS CELL
		            ,NVL(MME.ZIP_CODE, MB.HOME_ZIP) AS ZIP_CODE
		            ,NVL(MME.ADRESS, (MB.HOME_ADDR || ' ' || MB.HOME_ADDR2)) AS ADRESS
		            ,MME.EXT_YN
		            ,MME.EXT_PERIOD
		            ,TO_CHAR(MME.EXT_DAY,'YYYYMMDD') AS EXT_DAY
		            ,NVL(MME.INSERT_GBN,'FF') AS INSERT_GBN
		            ,MME.TX_ETC
		            ,MME.DEL_FG
		            ,MME.REG_DM
		            ,MME.CANCEL_DT   
		            ,MPA.JOIN_DT
		            ,TO_CHAR(SYSDATE,'YYYYMMDD') AS TODAY            
		            --,(PD.EXPR_NO - MPA.NEW_CHAN_GUNSU - 1) + (NVL(MME.EXT_PERIOD, 0) * 12) AS CAL_MAN
		            ,(PD.EXPR_NO - MPA.NEW_CHAN_GUNSU - 1) AS CAL_MAN
		       FROM MEM_PROD_ACCNT MPA INNER JOIN
		        MEMBER MB ON MPA.MEM_NO = MB.MEM_NO AND MB.DEL_FG = 'N' LEFT OUTER JOIN
		        TB_MEMBER_MANGI_EXT MME ON MPA.ACCNT_NO = MME.ACCNT_NO AND MME.DEL_FG = 'N' INNER JOIN
		        PRODUCT PD ON MPA.PROD_CD = PD.PROD_CD
		       WHERE 1=1   
                    AND MPA.ACCNT_NO = #{accnt_no} 
               ) MAIN_TBL
         WHERE 1=1
    </select>
    
    <select id="DlwNewTypeMainConsMap.getDlwCardCsmmCount" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeMainConsMap.getDlwCardCsmmCount */
               COUNT(*)
          FROM CARD_MEM A
             , MEM_PROD_ACCNT B
             , MEMBER M
             , EMPLOYEE C
         WHERE A.ACCNT_NO = B.ACCNT_NO
           AND B.MEM_NO = M.MEM_NO
           AND C.EMPLE_NO = B.EMPLE_NO
           AND B.DEL_FG = 'N'
       <if test="srch_vl != null and srch_vl != ''">
           <if test="srch_typ == 'all'">
               AND (A.ACCNT_NO LIKE '%' || #{srch_vl} || '%'
                OR  B.MEM_NO LIKE '%' || #{srch_vl} || '%'
                OR  M.MEM_NM LIKE '%' || #{srch_vl} || '%')
           </if>
           <if test="srch_typ == 'mem_nm'">
               AND M.MEM_NM LIKE '%' || #{srch_vl} || '%'
           </if>
           <if test="srch_typ == 'accnt_no'">
               AND A.ACCNT_NO = #{srch_vl}
           </if>
           <if test="srch_typ == 'mem_no'">
               AND B.MEM_NO = #{srch_vl}
           </if>
       </if>
       <if test="srch_prodCd != null and srch_prodCd != ''">
           AND B.PROD_CD = #{srch_prodCd}
       </if>
       <if test="srch_deptCd != null and srch_deptCd != ''">
           AND C.DEPT_CD = #{srch_deptCd}
       </if>
       <if test="srch_ackdSttDt != null and srch_ackdSttDt != '' and srch_ackdEndDt != null and srch_ackdEndDt != ''">
           AND A.CARD_JOIN_DT BETWEEN #{srch_ackdSttDt} AND #{srch_ackdEndDt}
       </if>
       <if test="srch_cardNo != null and srch_cardNo != ''">
           AND A.CARD_NO LIKE '%' ||#{srch_cardNo} || '%'
       </if>
    </select>
    
    <select id="DlwNewTypeMainConsMap.getDlwCardCsmm" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectCardMemByGun -->

        SELECT /* DlwNewTypeMainConsMap.getDlwCardCsmm */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*, CARD_JOIN_DT AS RGSN_DT
                  FROM (SELECT B.MEM_NO, 'card' AS BUGA_SRVC_TYP
                             , A.ACCNT_NO AS ACCNT_NO
                             , A.CARD_JOIN_DT AS CARD_JOIN_DT
                             , FN_MEM_NM (B.MEM_NO) MEM_NM
                             , FN_PROD_NM (B.PROD_CD) PROD_NM
                             , (SELECT PROD_AMT FROM PRODUCT WHERE PROD_CD = B.PROD_CD) PROD_AMT
                             , FN_EMPLE_NM(B.EMPLE_NO) EMPLE_NM
                             , FN_COM_NM('0120', A.CARD_CD) CARD_NM
                             , A.CARD_CD
                             , A.CARD_NO CARD_NO
                             , A.CARD_BIRTH IDN_NO
                             , CASE WHEN LENGTH(A.CARD_BIRTH) = 10
                                         THEN 'Y'
                                    ELSE 'N'
                                END AS BUSINESS_YN
                             , A.PAY_DT
                             , A.EXPIRE_DATE
                             , FN_DEPT_NM(C.DEPT_CD) DEPT_NM
                             , A.DEL_FG
                             , PAY_DAY_FIX_YN
                             , PRE_PAY_YN
                             , PRE_PAY_GUNSU
                             , YEN_CHE_PRE_PAY_YN
                             , YEN_CHE_PRE_PAY_GUNSU
                             , A.BID
                             , NVL((SELECT MODEL_CL_NM FROM PRODUCT_MODEL_CL_CD WHERE MODEL_CL_CD = B.PROD_MODEL_KIND), ' ') MODEL_CL_NM
                          FROM CARD_MEM A
                             , MEM_PROD_ACCNT B
                             , MEMBER M
                             , EMPLOYEE C
                         WHERE A.ACCNT_NO = B.ACCNT_NO
                           AND B.MEM_NO = M.MEM_NO
                           AND C.EMPLE_NO = B.EMPLE_NO
                           AND B.DEL_FG = 'N'
                       <if test="srch_vl != null and srch_vl != ''">
                           <if test="srch_typ == 'all'">
                               AND (A.ACCNT_NO LIKE '%' || #{srch_vl} || '%'
                                OR  B.MEM_NO LIKE '%' || #{srch_vl} || '%'
                                OR  M.MEM_NM LIKE '%' || #{srch_vl} || '%')
                           </if>
                           <if test="srch_typ == 'mem_nm'">
                               AND M.MEM_NM LIKE '%' || #{srch_vl} || '%'
                           </if>
                           <if test="srch_typ == 'accnt_no'">
                               AND A.ACCNT_NO = #{srch_vl}
                           </if>
                           <if test="srch_typ == 'mem_no'">
                               AND B.MEM_NO = #{srch_vl}
                           </if>
                       </if>
                       <if test="srch_prodCd != null and srch_prodCd != ''">
                           AND B.PROD_CD = #{srch_prodCd}
                       </if>
                       <if test="srch_deptCd != null and srch_deptCd != ''">
                           AND C.DEPT_CD = #{srch_deptCd}
                       </if>
                       <if test="srch_ackdSttDt != null and srch_ackdSttDt != '' and srch_ackdEndDt != null and srch_ackdEndDt != ''">
                           AND A.CARD_JOIN_DT BETWEEN #{srch_ackdSttDt} AND #{srch_ackdEndDt}
                       </if>
                       <if test="srch_cardNo != null and srch_cardNo != ''">
                           AND A.CARD_NO LIKE '%' ||#{srch_cardNo} || '%'
                       </if>
                  ) X
                ) Z
     <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
         <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
         ]]>
     </if>
    </select>
    
    <select id="DlwNewTypeMainConsMap.getDlwCmsCsmmCount" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeMainConsMap.getDlwCmsCsmmCount */
               COUNT(*)
               FROM CMS_MEM A
          left outer join ( select MEM_PROD_ACCNT.*,mb.mem_nm from MEM_PROD_ACCNT
                            left outer join member mb on MEM_PROD_ACCNT.mem_no=mb.mem_no
                            left outer join EMPLOYEE C on C.EMPLE_NO = MEM_PROD_ACCNT.EMPLE_NO )
                 B on A.ACCNT_NO = B.ACCNT_NO
         WHERE
            B.DEL_FG = 'N'
           <if test="srch_vl != null and srch_vl != ''">
               <if test="srch_typ == 'all'">
                   AND (A.ACCNT_NO LIKE '%' || #{srch_vl} || '%'
                    OR A.MEM_NO LIKE '%' || #{srch_vl} || '%'
                    OR b.mem_nm LIKE '%' || #{srch_vl} || '%'
                    OR A.BIRTH LIKE '%' || #{srch_vl} || '%'
                    OR A.BANK_ACCNT_NO LIKE '%' || #{srch_vl} || '%')
               </if>
               <if test="srch_typ == 'mem_nm'">
                   AND b.mem_nm LIKE '%' || #{srch_vl} || '%'
               </if>
               <if test="srch_typ == 'accnt_no'">
                   AND A.ACCNT_NO = #{srch_vl}
               </if>
               <if test="srch_typ == 'mem_no'">
                   AND A.MEM_NO = #{srch_vl}
               </if>
               <if test="srch_typ == 'birth'">
                   AND A.BIRTH LIKE '%' || #{srch_vl} || '%'
               </if>
               <if test="srch_typ == 'bank_accnt_no'">
                   AND A.BANK_ACCNT_NO LIKE '%' || #{srch_vl} || '%'
               </if>
               <if test="srch_typ == 'depr'">
                   AND A.DEPR LIKE '%' || #{srch_vl} || '%'
               </if>
           </if>
           <if test="srch_typ == 'ichae_dt'">
               AND A.ICHAE_DT <![CDATA[>=]]> replace(#{ichae_stt_dt},'/','')
               AND A.ICHAE_DT <![CDATA[<=]]> replace(#{ichae_end_dt},'/','')
           </if>
    </select>
    
    <select id="DlwNewTypeMainConsMap.getDlwCmsCsmm" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectCMSMemberByGun -->


        SELECT /* DlwNewTypeMainConsMap.getDlwCmsCsmm */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*, CMS_JOIN_DT AS RGSN_DT
                    FROM (SELECT A.MEM_NO, 'cms' AS BUGA_SRVC_TYP
                               , A.ACCNT_NO AS ACCNT_NO
                               , A.CMS_JOIN_DT CMS_JOIN_DT
                               , FN_MEM_NM (A.MEM_NO) MEM_NM
                               , FN_PROD_NM (B.PROD_CD) PROD_NM
                               , (SELECT PROD_AMT FROM PRODUCT WHERE PROD_CD = B.PROD_CD) PROD_AMT
                               , (SELECT MON_PAY_AMT FROM PRODUCT WHERE PROD_CD = B.PROD_CD) MON_PAY_AMT
                               , B.EMPLE_NO MANAGER_NO
                               , FN_EMPLE_NM(B.EMPLE_NO) MANAGER_NM
                               , A.DEPR
                               , CASE WHEN LENGTH(A.BIRTH) = 10
                                           THEN 'Y'
                                      ELSE 'N'
                                  END AS BUSINESS_YN
                               , A.BIRTH IDN_NO
                               , A.RELTN
                               , FN_COM_NM ('07', A.RELTN) RELTN_NM
                               , A.BANK_CD
                               , FN_COM_NM('63',A.BANK_CD) BANK_NM
                               , A.BANK_ACCNT_NO BANK_ACCNT_NO
                               , A.ICHAE_DT
                               , A.ICHAE_LIMIT_GUNSU
                               , FN_COM_NM('09',A.ACPT_MTHD) ACPT_NM
                               , FN_DEPT_NM(B.DEPT_CD) DEPT_NM
                               , A.DEPR_CELL
                               , A.DEL_FG
                               , A.CNSL_DT CNSL_DT
                               , PAY_DAY_FIX_YN
                               , PRE_PAY_YN
                               , PRE_PAY_GUNSU
                               , YEN_CHE_PRE_PAY_YN
                               , YEN_CHE_PRE_PAY_GUNSU
                               , NVL((SELECT MODEL_CL_NM FROM PRODUCT_MODEL_CL_CD WHERE MODEL_CL_CD = B.PROD_MODEL_KIND), ' ') MODEL_CL_NM
                          FROM CMS_MEM A
                                    left outer join ( select MEM_PROD_ACCNT.*,mb.mem_nm,C.DEPT_CD from MEM_PROD_ACCNT
                                    left outer join member mb on MEM_PROD_ACCNT.mem_no=mb.mem_no
                                    left outer join EMPLOYEE C on C.EMPLE_NO = MEM_PROD_ACCNT.EMPLE_NO )  B on A.ACCNT_NO = B.ACCNT_NO
                         WHERE  B.DEL_FG = 'N'
                         <if test="srch_vl != null and srch_vl != ''">
                             <if test="srch_typ == 'all'">
                                 AND (A.ACCNT_NO LIKE '%' || #{srch_vl} || '%'
                                  OR A.MEM_NO LIKE '%' || #{srch_vl} || '%'
                                  OR B.MEM_NM LIKE '%' || #{srch_vl} || '%'
                                  OR A.BIRTH LIKE '%' || #{srch_vl} || '%'
                                  OR  A.BANK_ACCNT_NO  LIKE '%' || #{srch_vl} || '%')
                             </if>
                             <if test="srch_typ == 'mem_nm'">
                                 AND B.MEM_NM LIKE  '%' || #{srch_vl} || '%'
                             </if>
                             <if test="srch_typ == 'accnt_no'">
                                 AND A.ACCNT_NO = #{srch_vl}
                             </if>
                             <if test="srch_typ == 'memno'">
                                 AND A.MEM_NO = #{srch_vl}
                             </if>
                             <if test="srch_typ == 'birth'">
                                 AND A.BIRTH LIKE '%' || #{srch_vl} || '%'
                             </if>
                             <if test="srch_typ == 'bank_accnt_no'">
                                 AND  A.BANK_ACCNT_NO LIKE '%' || #{srch_vl} || '%'
                             </if>
                             <if test="srch_typ == 'depr'">
                                 AND A.DEPR LIKE '%' || #{srch_vl} || '%'
                             </if>
                         </if>
                         <if test="srch_typ == 'ichae_dt'">
                             AND A.ICHAE_DT <![CDATA[>=]]> REPLACE(#{ichae_stt_dt},'/','')
                             AND A.ICHAE_DT <![CDATA[<=]]> REPLACE(#{ichae_end_dt},'/','')
                         </if>
                       ) X
                ) Z
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            <![CDATA[
            WHERE PAGE_INDX >= #{startLine}
              AND PAGE_INDX < #{endLine}
            ]]>
        </if>
    </select>
    
    <!-- 발주정보 조회 -->
    <select id="DlwNewTypeMainConsMap.getOdrgInfo" parameterType="map" resultType="resultMap">
    <!-- DM sql-id: sql-life.selectSSOrderInfo -->


        SELECT /* DlwNewTypeMainConsMap.getOdrgInfo */
               ACCNT_NO
             , CONFIRM_DT CONFIRM_DT
             ,  DELIVERY_DT DELIVERY_DT
             ,  ORDER_DT ORDER_DT
          FROM DELIVERY_INFO
         WHERE ACCNT_NO = #{accnt_no}
    </select>
    
    <select id="DlwNewTypeMainConsMap.getDlvList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeMainConsMap.getDlvList */
               A.*
          FROM (SELECT <choose>
                          <when test="orderBy != null and orderBy != ''">
                            ROW_NUMBER() OVER (ORDER BY ${orderBy} ${orderDirection}) AS PAGE_INDX
                          </when>
                          <otherwise>
                            ROW_NUMBER() OVER (ORDER BY DLV_ID DESC) AS PAGE_INDX
                          </otherwise>
                       </choose>
                     , A.*
                     , SNDG_KIND_NM || '(' || DLV_TYPE_NM || '_' || DLV_STAT_NM || ') ' || DLV_DSPS_DT  || ' : ' || DLV_NO AS DLV_NM
                  FROM (SELECT A.*
                               , ( SELECT CD_NM
                                     FROM PS_WILLVI.TB_CD
                                     WHERE TB_CD.CD    = A.SNDG_KIND_CD
                                     AND TB_CD.CD_SET_CD = 'CHL120'
                                   AND TB_CD.CNTR_CD  =  A.CNTR_CD) AS SNDG_KIND_NM
                               , ( SELECT CD_NM
                                     FROM PS_WILLVI.TB_CD
                                     WHERE TB_CD.CD    = A.DLV_TYPE_CD
                                     AND TB_CD.CD_SET_CD = 'CHL080'
                                   AND TB_CD.CNTR_CD  =  A.CNTR_CD) AS DLV_TYPE_NM
                               , ( SELECT CD_NM
                                     FROM PS_WILLVI.TB_CD
                                     WHERE TB_CD.CD    = A.DLV_STAT_CD
                                     AND TB_CD.CD_SET_CD = 'CHL090'
                                   AND TB_CD.CNTR_CD  =  A.CNTR_CD) AS DLV_STAT_NM
                              , ( SELECT CD_NM
                                     FROM PS_WILLVI.TB_CD
                                     WHERE TB_CD.CD    = A.DSPS_MTHD_CD
                                     AND TB_CD.CD_SET_CD = 'CHL100'
                                   AND TB_CD.CNTR_CD  =  A.CNTR_CD) AS DSPS_MTHD_NM
                              , ( SELECT CD_NM
                                     FROM PS_WILLVI.TB_CD
                                     WHERE TB_CD.CD    = A.DLV_DSPS_RSN_CD
                                     AND TB_CD.CD_SET_CD = 'CHL110'
                                   AND TB_CD.CNTR_CD  =  A.CNTR_CD) AS DLV_DSPS_RSN_NM
                              , ( SELECT CD_NM
                                     FROM PS_WILLVI.TB_CD
                                     WHERE TB_CD.CD    = A.DSPS_RSN_CD
                                     AND TB_CD.CD_SET_CD = (SELECT ADTL_CD
                                                             FROM PS_WILLVI.TB_CD
                                                            WHERE CD_SET_CD='CHL100'
                                                              AND CD = A.DSPS_MTHD_CD
                                                              AND CNTR_CD = A.CNTR_CD)
                                   AND TB_CD.CNTR_CD  =  A.CNTR_CD) AS DSPS_RSN_NM
                             , (SELECT USER_NM
                                  FROM PS_WILLVI.TB_USER
                                 WHERE USER_ID = A.RGSR_ID
                                   AND CNTR_CD = A.CNTR_CD) AS RGSR_NM
                             , (SELECT USER_NM
                                  FROM PS_WILLVI.TB_USER C
                                 WHERE USER_ID = A.AMND_ID
                                   AND CNTR_CD = A.CNTR_CD) AS AMND_NM
           			FROM (
                         SELECT A.DLV_ID,
                               A.ACCNT_NO,
                               MB.MEM_NO,
                               MB.MEM_NM ,
								MB.CELL AS CELL,
								(MB.HOME_ZIP || ') ' || MB.HOME_ADDR || ' ' || MB.HOME_ADDR2) AS HOME_ZIP,
                               MPA.RESORT_NO AS CSMM_PRFL_NO,
                               A.SNDG_KIND_CD,
                               A.DLV_TYPE_CD ,
                               B.DLV_NO,
                               B.SQNC_NO,
                               B.DLV_STAT_CD,
                               B.DLV_STAT_CD AS OLD_DLV_STAT_CD ,
                               B.DSPS_MTHD_CD,
                               B.DSPS_RSN_CD,
                               B.DLV_DSPS_DT,
                               B.DLV_DSPS_RSN_CD ,
                               A.CNTR_CD,
                               A.RGSR_ID,
                               A.RGSN_DTTM,
                               B.AMND_ID,
                               B.AMNT_DTTM
                         FROM
                          (SELECT A.*
                           FROM PS_WILLVI.TB_DLV A ) A INNER JOIN
                            (SELECT B.* FROM
                                (
                                    SELECT ROW_NUMBER() OVER (PARTITION BY DLV_ID ORDER BY DLV_ID ASC, SQNC_NO DESC) AS DLV_INDEX ,
                                           DLV_ID, DLV_NO, SQNC_NO, DLV_STAT_CD, DSPS_MTHD_CD, DSPS_RSN_CD, DLV_DSPS_DT, DLV_DSPS_RSN_CD, AMND_ID, AMNT_DTTM
                                    FROM PS_WILLVI.TB_DLV_DTL
                                 ) B
                                WHERE B.DLV_INDEX = 1) B ON A.DLV_ID = B.DLV_ID INNER JOIN
                              LF_DMUSER.MEM_PROD_ACCNT MPA ON A.ACCNT_NO = MPA.ACCNT_NO INNER JOIN
                              LF_DMUSER.MEMBER MB ON MPA.MEM_NO = MB.MEM_NO AND MPA.DEL_FG = 'N'
                        	) A

                         <!-- 20170216수정
                          FROM (SELECT A.DLV_ID, A.ACCNT_NO, A.MEM_NO, A.MEM_NM
                                     , A.CSMM_PRFL_NO, A.SNDG_KIND_CD, A.DLV_TYPE_CD
                                     , B.DLV_NO, B.SQNC_NO, B.DLV_STAT_CD, B.DLV_STAT_CD AS OLD_DLV_STAT_CD
                                     , B.DSPS_MTHD_CD, B.DSPS_RSN_CD, B.DLV_DSPS_DT, B.DLV_DSPS_RSN_CD
                                     , A.CNTR_CD, A.RGSR_ID, A.RGSN_DTTM, B.AMND_ID, B.AMNT_DTTM
                                  FROM (SELECT A.*
                                          FROM TB_DLV A
                                       ) A
                                 INNER JOIN
                                       (SELECT A.*
                                          FROM (SELECT ROW_NUMBER() OVER (PARTITION BY DLV_ID ORDER BY DLV_ID ASC, SQNC_NO DESC) AS DLV_INDEX
                                                     , A.*
                                                  FROM TB_DLV_DTL A
                                               ) A
                                         WHERE A.DLV_INDEX = 1
                                       ) B
                                    ON A.DLV_ID = B.DLV_ID
                               ) A
                         -->
                      <include refid="DlwNewTypeMainConsMap.selectCondition_fragment5" />
                       ) A
               ) A
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
        <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
        ]]>
        </if>

    </select>
    
    <!-- 입금전표조회 - 납입내역(상조부금) -->
    <select id="DlwNewTypeMainConsMap.getDlwPayMngList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-life.selectPayMngList -->

        SELECT /* DlwNewTypeMainConsMap.getDlwPayMngList */
               A.*,
            <choose>
                <when test="orderBy != null and orderBy != ''">
                    ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) AS PAGE_INDX
                </when>
                <otherwise>
                    ROW_NUMBER() OVER(ORDER BY A.NO DESC) AS PAGE_INDX
                </otherwise>
            </choose>
         FROM (<![CDATA[
                SELECT A.ACCNT_NO, A.SEQ, A.NO, A.PAY_AMT, A.PAY_MTHD
                    , A.STAT, A.DC_AMT_SEQ, C.DC_AMT, A.RC_STAT
                    , '상조부금' AS PYIN_TYP
                    , nvl(A.PAY_DAY,'') AS PAY_DAY
                    , FN_COM_NM('01', A.PAY_MTHD) AS PAY_MTHD_NM
                    , CASE WHEN A.STAT = 0
                                THEN '정상'
                           ELSE (CASE WHEN A.STAT = '1'
                                           THEN '선납'
                                      ELSE '연체'
                                  END)
                        END AS STAT_NM
                    , substr( add_months(B.JOIN_DT, -1),0,7)  AS MON_NO
                    , CASE WHEN A.PAY_MTHD ='04'
                                THEN CASE WHEN A.WDRW_INV_DT IS NULL
                                               THEN WR.APP_DT
                                          ELSE A.WDRW_INV_DT
                                      END
                           WHEN A.PAY_MTHD ='06'
                                THEN CASE WHEN A.WDRW_INV_DT IS NULL
                                               THEN CWR.APP_DT
                                          ELSE  A.WDRW_INV_DT
                                      END
                           ELSE ''
                       END AS APP_DT
                    , CASE WHEN (substr(A.PAY_DAY,1, 6) = NVL((SELECT CM.CLOSE_DT
                                                                                       FROM CLOSE_MNG CM
                                                                                      WHERE CM.DEL_FG = 'N'
                                                                                        AND substr((A.PAY_DAY), 1,4)||'/'||substr((A.PAY_DAY), 5,2) =CM.CLOSE_DT),''))
                            AND (substr((A.PAY_DAY), 1,4)||'/'||substr((A.PAY_DAY), 5,2) NOT IN (SELECT  CER.CLOSE_DT
                                                                                     FROM CLOSE_EDT_REQ CER
                                                                                    WHERE CER.ACCNT_NO = A.ACCNT_NO
                                                                                      AND CER.CLOSE_CL = '0001'
                                                                                      AND CER.EDT_YN = 'Y'
                                                                                      AND CER.DEL_FG = 'N'
                                                                                 GROUP BY CER.CLOSE_DT))
                           THEN 'N'
                           ELSE 'Y'
                      END EDT_YN
                 FROM PAY_MNG A
                INNER JOIN MEM_PROD_ACCNT B
                           ON A.ACCNT_NO = B.ACCNT_NO
           LEFT OUTER JOIN DC_AMT_REG C
                           ON A.ACCNT_NO = C.ACCNT_NO
                          AND A.DC_AMT_SEQ = C.SEQ
                          AND C.DEL_FG = 'N'
                          AND A.NO = (SELECT MAX(NO)
                                        FROM PAY_MNG
                                       WHERE ACCNT_NO = A.ACCNT_NO
                                         AND DC_AMT_SEQ = C.SEQ)
                 LEFT OUTER JOIN (


                           select a.accnt_no , a.inv_no , max(b.inv_dt) app_dt , max(b.inv_no) prev_inv_no from
                           (select /*+INDEX(wdrw_req IDX_WDRW_REQ_ACCNT_STAT) */ * from wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) a left outer join
                           (select /*+INDEX(wdrw_req IDX_WDRW_REQ_ACCNT_STAT) */ * from wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) b on a.inv_no > b.inv_no
                           group by a.accnt_no , a.inv_no


                          ) WR
                           ON WR.ACCNT_NO = B.ACCNT_NO
                          AND (A.NO <= WR.INV_NO
                               AND A.NO > WR.PREV_INV_NO)
                          AND A.DEL_FG = 'N'
                 LEFT outer JOIN (

                                select a.accnt_no , a.inv_no , max(b.inv_dt) app_dt , max(b.inv_no) prev_inv_no from
                               (select /*+INDEX(card_wdrw_req IDX_CARD_WDRW_REQ_ACCNT_STAT) */ * from card_wdrw_req where accnt_no = '201202000960' and stat = '04' ) a left outer join
                               (select /*+INDEX(card_wdrw_req IDX_CARD_WDRW_REQ_ACCNT_STAT) */ * from card_wdrw_req where accnt_no = '201202000960' and stat = '04' ) b on a.inv_no > b.inv_no
                               group by a.accnt_no , a.inv_no

                          ) CWR
                           ON CWR.ACCNT_NO = B.ACCNT_NO
                          AND (A.NO <= CWR.INV_NO
                               AND A.NO > CWR.PREV_INV_NO)
                WHERE A.DEL_FG = 'N'
                  AND A.ACCNT_NO = #{accnt_no}
               ]]>
               ) A
    </select>
    
    <!-- 입금전표조회 - 납입내역(결합상품할부원금) -->
    <select id="DlwNewTypeMainConsMap.getDlwPayMngDtlList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-life.selectPayMngDtlList -->


        SELECT /* DlwNewTypeMainConsMap.getDlwPayMngDtlList */
               A.*,
            <choose>
                <when test="orderBy != null and orderBy != ''">
                    ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) AS PAGE_INDX
                </when>
                <otherwise>
                    ROW_NUMBER() OVER(ORDER BY A.NO DESC) AS PAGE_INDX
                </otherwise>
            </choose>
          FROM (<![CDATA[
               SELECT A.ACCNT_NO, A.SEQ, A.NO, A.PAY_AMT, A.PAY_MTHD
                    , A.STAT, '결합상품할부원금' AS PYIN_TYP
                    , CONVERT(VARCHAR,A.PAY_DAY,112) AS PAY_DAY
                    , FN_COM_NM('01', A.PAY_MTHD) AS PAY_MTHD_NM
                    , CASE WHEN A.STAT = 0
                                THEN '정상'
                           ELSE (CASE WHEN A.STAT = '1'
                                           THEN '선납'
                                      ELSE '연체'
                                  END)
                        END AS STAT_NM
                    , SUBSTRING(CONVERT(VARCHAR,DATEADD(MM, NO-1, B.JOIN_DT),112), 0,7) AS MON_NO
                    , CASE WHEN A.PAY_MTHD ='04'
                                THEN CASE WHEN A.WDRW_INV_DT IS NULL
                                               THEN WR.APP_DT
                                          ELSE CONVERT(VARCHAR, A.WDRW_INV_DT, 112)
                                      END
                           WHEN A.PAY_MTHD ='06'
                                THEN CASE WHEN A.WDRW_INV_DT IS NULL
                                               THEN CWR.APP_DT
                                          ELSE CONVERT(VARCHAR, A.WDRW_INV_DT, 112)
                                      END
                                ELSE ''
                            END AS APP_DT
                    , CASE WHEN (LEFT(CONVERT(VARCHAR, A.PAY_DAY, 111), 7) = nvl((SELECT CM.CLOSE_DT
                                                                                       FROM CLOSE_MNG CM
                                                                                      WHERE CM.DEL_FG = 'N'
                                                                                        AND LEFT(CONVERT(VARCHAR, A.PAY_DAY, 111), 7) = CM.CLOSE_DT), ''))
                            AND (LEFT(CONVERT(VARCHAR, A.PAY_DAY, 111), 7) NOT IN (SELECT CER.CLOSE_DT
                                                                                     FROM CLOSE_EDT_REQ CER
                                                                                    WHERE CER.ACCNT_NO = A.ACCNT_NO
                                                                                      AND CER.CLOSE_CL = '0001'
                                                                                      AND CER.EDT_YN = 'Y'
                                                                                      AND CER.DEL_FG = 'N'
                                                                                 GROUP BY CER.CLOSE_DT))
                           THEN 'N'
                           ELSE 'Y'
                       END EDT_YN
                 FROM PAY_MNG_DTL A
                INNER JOIN MEM_PROD_ACCNT B
                           ON A.ACCNT_NO = B.ACCNT_NO
                 LEFT JOIN (SELECT ACCNT_NO, INV_NO, MAX(CONVERT(VARCHAR, INV_DT, 112)) AS APP_DT
                                 , ISNULL((SELECT MAX(B.INV_NO)
                                             FROM WDRW_REQ B
                                            WHERE B.ACCNT_NO = A.ACCNT_NO
                                              AND B.INV_NO < A.INV_NO
                                              AND STAT ='04'), 0) PREV_INV_NO
                              FROM WDRW_REQ A
                             WHERE ACCNT_NO = #{accnt_no}
                               AND STAT = '04'
                          GROUP BY ACCNT_NO, INV_NO) WR
                           ON WR.ACCNT_NO = B.ACCNT_NO
                          AND (A.NO <= WR.INV_NO
                               AND A.NO > WR.PREV_INV_NO)
                 LEFT JOIN (SELECT ACCNT_NO, INV_NO, MAX(CONVERT(VARCHAR, INV_DT, 112)) AS APP_DT
                                 , nvl((SELECT MAX(B.INV_NO)
                                             FROM CARD_WDRW_REQ B
                                            WHERE B.ACCNT_NO = A.ACCNT_NO
                                              AND B.INV_NO < A.INV_NO
                                              AND STAT ='04'), 0) PREV_INV_NO
                              FROM CARD_WDRW_REQ A
                             WHERE ACCNT_NO = #{accnt_no}
                               AND STAT = '04'
                          GROUP BY ACCNT_NO, INV_NO) CWR
                           ON CWR.ACCNT_NO = B.ACCNT_NO
                          AND (A.NO <= CWR.INV_NO
                               AND A.NO > CWR.PREV_INV_NO)
                WHERE  A.DEL_FG = 'N'
                  AND A.ACCNT_NO = #{accnt_no}
               ]]>
               ) A
    </select>
    
    <!-- 입금전표조회 - 납입내역(결합상품추가부담금) -->
    <select id="DlwNewTypeMainConsMap.getDlwPayMngDtl1List" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-life.selectPayMngDtl1List -->


        SELECT /* DlwNewTypeMainConsMap.getDlwPayMngDtl1List */
               A.*,
            <choose>
                <when test="orderBy != null and orderBy != ''">
                    ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) AS PAGE_INDX
                </when>
                <otherwise>
                    ROW_NUMBER() OVER(ORDER BY A.NO DESC) AS PAGE_INDX
                </otherwise>
            </choose>
          FROM (<![CDATA[
                SELECT A.ACCNT_NO, A.SEQ, A.NO, A.PAY_AMT, A.PAY_MTHD
                     , A.STAT, '결합상품추가부담금' AS PYIN_TYP
                     , CONVERT(VARCHAR,A.PAY_DAY,112) AS PAY_DAY
                     , FN_COM_NM('01', A.PAY_MTHD) AS PAY_MTHD_NM
                     , CASE WHEN A.STAT = 0
                                 THEN '정상'
                            ELSE (CASE WHEN A.STAT = '1'
                                            THEN '선납'
                                       ELSE '연체'
                             END)
                        END AS STAT_NM
                     , SUBSTRING(CONVERT(VARCHAR,DATEADD(MM, NO-1, B.JOIN_DT),112), 0,7) AS MON_NO
                     , CASE WHEN A.PAY_MTHD ='04'
                                 THEN CASE WHEN A.WDRW_INV_DT IS NULL
                                                THEN WR.APP_DT
                                           ELSE CONVERT(VARCHAR, A.WDRW_INV_DT, 112)
                                       END
                            WHEN A.PAY_MTHD ='06'
                                 THEN CASE WHEN A.WDRW_INV_DT IS NULL
                                                THEN CWR.APP_DT
                                           ELSE CONVERT(VARCHAR, A.WDRW_INV_DT, 112)
                                       END
                            ELSE ''
                       END AS APP_DT
                     , CASE WHEN (LEFT(CONVERT(VARCHAR, A.PAY_DAY, 111), 7) = ISNULL((SELECT CM.CLOSE_DT
                                                                                        FROM CLOSE_MNG CM
                                                                                       WHERE CM.DEL_FG = 'N'
                                                                                         AND LEFT(CONVERT(VARCHAR, A.PAY_DAY, 111), 7) = CM.CLOSE_DT), ''))
                             AND (LEFT(CONVERT(VARCHAR, A.PAY_DAY, 111), 7) NOT IN (SELECT CER.CLOSE_DT
                                                                                      FROM CLOSE_EDT_REQ CER
                                                                                     WHERE CER.ACCNT_NO = A.ACCNT_NO
                                                                                       AND CER.CLOSE_CL = '0001'
                                                                                       AND CER.EDT_YN = 'Y'
                                                                                       AND CER.DEL_FG = 'N'
                                                                                  GROUP BY CER.CLOSE_DT))
                                 THEN 'N'
                            ELSE 'Y'
                        END EDT_YN
                  FROM PAY_MNG_DTL1 A
                 INNER JOIN MEM_PROD_ACCNT B
                       ON A.ACCNT_NO = B.ACCNT_NO
                  LEFT JOIN (SELECT ACCNT_NO, INV_NO, MAX(CONVERT(VARCHAR, INV_DT, 112)) AS APP_DT
                                  , ISNULL((SELECT MAX(B.INV_NO)
                                              FROM WDRW_REQ B
                                             WHERE B.ACCNT_NO = A.ACCNT_NO
                                               AND B.INV_NO < A.INV_NO
                                               AND STAT ='04'), 0) PREV_INV_NO
                               FROM WDRW_REQ A
                              WHERE ACCNT_NO = #{accnt_no}
                                AND STAT ='04'
                           GROUP BY ACCNT_NO, INV_NO) WR
                       ON WR.ACCNT_NO = B.ACCNT_NO
                      AND (A.NO <= WR.INV_NO
                      AND A.NO > WR.PREV_INV_NO)
                  LEFT JOIN (SELECT ACCNT_NO, INV_NO, MAX(CONVERT(VARCHAR, INV_DT, 112)) AS APP_DT
                                  , ISNULL((SELECT MAX(B.INV_NO)
                                              FROM CARD_WDRW_REQ B
                                             WHERE B.ACCNT_NO = A.ACCNT_NO
                                               AND B.INV_NO < A.INV_NO
                                               AND STAT ='04'), 0) PREV_INV_NO
                               FROM CARD_WDRW_REQ A
                              WHERE ACCNT_NO = #{accnt_no}
                                AND STAT ='04'
                           GROUP BY ACCNT_NO, INV_NO) CWR
                       ON CWR.ACCNT_NO = B.ACCNT_NO
                      AND (A.NO <= CWR.INV_NO
                           AND A.NO > CWR.PREV_INV_NO)
                 WHERE  A.DEL_FG = 'N'
                   AND A.ACCNT_NO = #{accnt_no}
               ]]>
               ) A
    </select>
    
    <!-- 입금전표조회 - 납입내역(상조부금 + 결합상품할부원금 + 결합상품추가부담금) -->
    <select id="DlwNewTypeMainConsMap.getDlwPayMngAllList" parameterType="map" resultType="resultMap">


        SELECT /* DlwNewTypeMainConsMap.getDlwPayMngAllList */
               A.*,
            <choose>
                <when test="orderBy != null and orderBy != ''">
                    ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) AS PAGE_INDX
                </when>
                <otherwise>
                    ROW_NUMBER() OVER(ORDER BY NO DESC, PAY_DAY DESC) AS PAGE_INDX
                </otherwise>
            </choose>
          FROM (SELECT NO, MON_NO, PAY_DAY
                     , nvl(SUM(CASE WHEN PMT_GB = 'A' THEN PAY_AMT ELSE 0 END), 0) AS TRUE_PAY_AMT
                     , nvl(SUM(CASE WHEN PMT_GB = 'B' THEN PAY_AMT ELSE 0 END), 0) AS RELAT_PAY_AMT
                     , nvl(SUM(CASE WHEN PMT_GB = 'C' THEN PAY_AMT ELSE 0 END), 0) AS ADD_PAY_AMT
                     , nvl(SUM(PAY_AMT), 0) AS TOT_AMT
                     , PAY_MTHD
                     , FN_COM_NM('01', PAY_MTHD) AS PAY_MTHD_NM
                     , STAT
                     , (CASE WHEN STAT = 0
                             THEN '정상'
                             WHEN STAT = 1
                             THEN '선납'
                             ELSE '연체'
                        END) AS STAT_NM
                     , APP_DT
        <![CDATA[
                  FROM (SELECT 'A' AS PMT_GB
                              ,a.no
                              ,a.pay_day
                              ,a.pay_amt
                              ,a.pay_mthd
                              ,a.stat
                          /*    ,substring(convert(varchar,dateadd(mm, no-1, b.join_dt),120), 0,8) as mon_no  */
                              ,  to_char(ADD_MONTHS(b.join_dt, no -1),'YYYYMMDD') as MON_NO
                              , CASE WHEN a.pay_mthd ='04' then case when a.wdrw_inv_dt is null then wr.app_dt else a.wdrw_inv_dt end
                                  WHEN a.pay_mthd ='06' then case when a.wdrw_inv_dt is null then cwr.app_dt else a.wdrw_inv_dt end
                                  ELSE null
                                  END as app_dt
                        FROM   PAY_MNG a
                              INNER JOIN MEM_PROD_ACCNT b  ON a.ACCNT_NO = b.ACCNT_NO
                              LEFT OUTER JOIN DC_AMT_REG c ON a.ACCNT_NO = c.ACCNT_NO
                              AND a.DC_AMT_SEQ = c.SEQ   AND c.DEL_FG = 'N'
                              AND a.NO = (select max(no) from PAY_MNG where accnt_no = a.ACCNT_NO and dc_amt_seq = c.SEQ)
                              LEFT OUTER JOIN
                              (
                               select a.accnt_no , a.inv_no , max(b.inv_dt) app_dt , max(b.inv_no) prev_inv_no from
                               (select /*+INDEX(wdrw_req IDX_WDRW_REQ_ACCNT_STAT) */ * from wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) a left outer join
                               (select /*+INDEX(wdrw_req IDX_WDRW_REQ_ACCNT_STAT) */ * from wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) b on a.inv_no > b.inv_no
                               group by a.accnt_no , a.inv_no
                               )wr on wr.accnt_no=b.accnt_no and (a.no <= wr.inv_no and a.no > wr.prev_inv_no)  AND a.DEL_FG = 'N'
                              LEFT OUTER JOIN
                              (
                              select a.accnt_no , a.inv_no , max(b.inv_dt) app_dt , max(b.inv_no) prev_inv_no from
                               (select /*+INDEX(card_wdrw_req IDX_CARD_WDRW_REQ_ACCNT_STAT) */ * from card_wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) a left outer join
                               (select /*+INDEX(card_wdrw_req IDX_CARD_WDRW_REQ_ACCNT_STAT) */ * from card_wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) b on a.inv_no > b.inv_no
                               group by a.accnt_no , a.inv_no
                            )
                               cwr on cwr.accnt_no=b.accnt_no and (a.no <= cwr.inv_no and a.no > cwr.prev_inv_no)
                        WHERE  a.del_fg = 'N'
                              and a.accnt_no = #{accnt_no}

                        UNION ALL

                        SELECT 'B' AS PMT_GB
                              ,a.no
                              ,a.pay_day
                              ,a.pay_amt
                              ,a.pay_mthd
                              ,a.stat
                            /*  ,substring(convert(varchar,dateadd(mm, no-1, b.join_dt),120), 0,8) as mon_no */
                              , TO_CHAR(ADD_MONTHS(b.join_dt,no -1),'YYYYMMDD') as MON_NO
                              , CASE WHEN a.pay_mthd ='04' then case when a.wdrw_inv_dt is null then wr.app_dt else a.wdrw_inv_dt end
                                  WHEN a.pay_mthd ='06' then case when a.wdrw_inv_dt is null then cwr.app_dt else a.wdrw_inv_dt end
                                  ELSE null
                                  END as app_dt
                        FROM  PAY_MNG_DTL a
                              INNER JOIN MEM_PROD_ACCNT b
                              ON a.ACCNT_NO = b.ACCNT_NO
                              LEFT OUTER JOIN
                              (
                                  select a.accnt_no , a.inv_no , max(b.inv_dt) app_dt , max(b.inv_no) prev_inv_no from
                                   (select /*+INDEX(wdrw_req IDX_WDRW_REQ_ACCNT_STAT) */ * from wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) a left outer join
                                   (select /*+INDEX(wdrw_req IDX_WDRW_REQ_ACCNT_STAT) */ * from wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) b on a.inv_no > b.inv_no
                                   group by a.accnt_no , a.inv_no
                               )wr on wr.accnt_no=b.accnt_no and (a.no <= wr.inv_no and a.no > wr.prev_inv_no)
                              LEFT OUTER JOIN
                              (
                                   select a.accnt_no , a.inv_no , max(b.inv_dt) app_dt , max(b.inv_no) prev_inv_no from
                                   (select /*+INDEX(card_wdrw_req IDX_CARD_WDRW_REQ_ACCNT_STAT) */ * from card_wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) a left outer join
                                   (select /*+INDEX(card_wdrw_req IDX_CARD_WDRW_REQ_ACCNT_STAT) */ * from card_wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) b on a.inv_no > b.inv_no
                                   group by a.accnt_no , a.inv_no
                               )cwr on cwr.accnt_no=b.accnt_no and (a.no <= cwr.inv_no and a.no > cwr.prev_inv_no)
                        WHERE  a.del_fg = 'N'
                              and a.accnt_no = #{accnt_no}

                        UNION ALL

                        SELECT 'C' AS PMT_GB
                              ,a.no
                              ,a.pay_day
                              ,a.pay_amt
                              ,a.pay_mthd
                              ,a.stat
                               /* ,substring(convert(varchar,dateadd(mm, no-1, b.join_dt),120), 0,8) as mon_no */

                              ,TO_CHAR(ADD_MONTHS(b.join_dt,no -1), 'YYYYMMDD') as MON_NO
                              , CASE WHEN a.pay_mthd ='04' then case when a.wdrw_inv_dt is null then wr.app_dt else a.wdrw_inv_dt end
                                  WHEN a.pay_mthd ='06' then case when a.wdrw_inv_dt is null then cwr.app_dt else a.wdrw_inv_dt end
                                  ELSE null
                                  END as app_dt
                        FROM  PAY_MNG_DTL1 a
                              INNER JOIN MEM_PROD_ACCNT b
                              ON a.ACCNT_NO = b.ACCNT_NO
                              LEFT OUTER JOIN
                              (
                               select a.accnt_no , a.inv_no , max(b.inv_dt) app_dt , max(b.inv_no) prev_inv_no from
                                   (select /*+INDEX(wdrw_req IDX_WDRW_REQ_ACCNT_STAT) */ * from wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) a left outer join
                                   (select /*+INDEX(wdrw_req IDX_WDRW_REQ_ACCNT_STAT) */ * from wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) b on a.inv_no > b.inv_no
                                   group by a.accnt_no , a.inv_no
                                )wr on wr.accnt_no=b.accnt_no  and (a.no <= wr.inv_no and a.no > wr.prev_inv_no)
                              LEFT JOIN
                              (
                                  select a.accnt_no , a.inv_no , max(b.inv_dt) app_dt , max(b.inv_no) prev_inv_no from
                                   (select /*+INDEX(card_wdrw_req IDX_CARD_WDRW_REQ_ACCNT_STAT) */ * from card_wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) a left outer join
                                   (select /*+INDEX(card_wdrw_req IDX_CARD_WDRW_REQ_ACCNT_STAT) */ * from card_wdrw_req where accnt_no = #{accnt_no} and stat = '04' ) b on a.inv_no > b.inv_no
                                   group by a.accnt_no , a.inv_no
                               )cwr on cwr.accnt_no=b.accnt_no and (a.no <= cwr.inv_no and a.no > cwr.prev_inv_no)
                        WHERE  a.del_fg = 'N'
                              and a.accnt_no = #{accnt_no}
                       ) A
                 GROUP BY NO, MON_NO, PAY_DAY, PAY_MTHD, STAT, APP_DT
               ) A
        ]]>
    </select>
    
    <!-- 해약정보 조회 - SEQ TOP 1 -->
    <select id="DlwNewTypeMainConsMap.getDlwResnAmtList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-system.selectResnAmtList -->

     SELECT * FROM
        (SELECT /* DlwNewTypeMainConsMap.getDlwResnAmtList */
               SEQ, M.PROD_CD, P.PROD_NM, M.MODEL_CL_CD
             , FN_MODEL_CL_NM(M.MODEL_CL_CD) MODEL_CL_NM
             , M.APP_DAY AS APP_DAY
             , P.PROD_AMT, P.EXPR_NO
             , CASE WHEN P.SALE_CL ='Y'
                         THEN '판매중'
                    ELSE '판매중지'
                END SALE_CL
             , CASE WHEN M.USE_YN ='Y'
                         THEN '사용'
                    ELSE '미사용'
                END USE_YN
          FROM RESNSTD_M M
               INNER JOIN PRODUCT P
                       ON M.PROD_CD = P.PROD_CD
                     WHERE P.DEL_FG ='N'
                       AND M.PROD_CD = #{prod_cd}
                       AND M.APP_DAY <![CDATA[<=]]> #{join_dt} <!-- 가입일자보다 적용일이 작거나 같아야 한다. -->
              ORDER BY APP_DAY DESC
          )
          WHERE ROWNUM = 1
    </select>
    
    <!-- 해약환급금 D 목록 -->
    <select id="DlwNewTypeMainConsMap.getResnAmtDetailList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-system.xml : selectResnAmtDetailList -->


        SELECT /* DlwNewTypeMainConsMap.getResnAmtDetailList */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY to_number(${orderBy}) ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           ROW_NUMBER() OVER(ORDER BY NO ASC) PAGE_INDX,
                       </if>
                       X.*
                  FROM (SELECT M.PROD_CD
                             , D.NO AS RESN_SEQ
                             , ROUND(TO_NUMBER(RESN_AMT),0) AS RESN_AMT
                             , D.NO
                          /*   , ISNULL(CONVERT(DECIMAL(10,0), ROUND(CONVERT(NUMERIC, RESN_AMT) / (SELECT SUM(AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = P.PROD_CD AND NO <![CDATA[<=]]>  D.NO) * 100,1,1)), 100.0) AS AMT_PER  */
                          /* , nvl( TO_NUMBER(round( TO_NUMBER(RESN_AMT) /  ((SELECT SUM(AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = P.PROD_CD AND NO   <![CDATA[<=]]>   D.NO) )* 100,0)),100) AS AMT_PER */
                          /* 2017.09.26 상품코드 : 19, 상품분류 : 0356 일경우 추가 */
                           , (CASE WHEN M.PROD_CD = '19' AND #{model_cl_cd} = '0356' THEN
                                         (SELECT TO_NUMBER(PCT) FROM PRODUCT_NO_DATA WHERE PROD_CD = '^9' AND NO = D.NO)
                         /* 2017.10.23 상품코드 : M1 일경우 추가 */
                                   WHEN M.PROD_CD = 'M1' THEN
                                         (SELECT TO_NUMBER(PCT) FROM PRODUCT_NO_DATA WHERE PROD_CD = '^1' AND NO = D.NO)
                                    ELSE
                                         NVL(TO_NUMBER(round( TO_NUMBER(RESN_AMT) /  ((SELECT SUM(AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = P.PROD_CD AND NO <![CDATA[<=]]> D.NO) )* 100,0)),100)
                               END) AMT_PER
                        FROM RESNSTD_D D
                       INNER JOIN RESNSTD_M M
                          ON M.SEQ = D.MST_SEQ
                        LEFT OUTER JOIN PRODUCT_NO_DATA P
                          ON P.PROD_CD = M.PROD_CD
                         AND P.NO = D.NO
                       WHERE D.MST_SEQ = #{mst_seq}
                       ) X
                ) Z
     <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
         <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
         ]]>
     </if>
    </select>
    
    <!-- 결제정보 : 개별목록 신청내역 (CMS+Card) -->
    <select id="DlwNewTypeMainConsMap.getDlwPymnHstrList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-cms.selectCMSRegHistoryByGun -->
    <!-- DM sql-id : sql-cms.selectCardRegHistoryByGun -->
    
    SELECT
    	/* DlwNewTypeMainConsMap.getDlwPymnHstrList */     
    	*
	FROM
	(
	    SELECT 
	        CMS.ACCNT_NO AS CMS_ACCNT,
	        SUBSTR(CMS.APP_DT,1,8) APP_DT,
            TO_CHAR(UPD_DM,'YYYYMMDD') REG_DT,
	        CMS.APP_CL,
	        LF_DMUSER.FN_COM_NM('17',CMS.APP_CL) ||'(CMS)' APP_CL_NM,
	        CMS.BANK_CD,
	        '('|| CMS.BANK_CD ||') ' || LF_DMUSER.FN_COM_NM('63',CMS.BANK_CD) BANK_NM,
	        BANK_ACCNT_NO,
	        CMS.INV_TG_DT,
	        NVL(CMS.BIRTH,'') IDN_NO,    
	        '' AS EXPIRE_DATE,
	        (SELECT ICHAE_DT FROM LF_DMUSER.CMS_MEM WHERE 1=1 AND DEL_FG = 'N' AND ACCNT_NO = CMS.ACCNT_NO) AS ICHAE_DT,
	        UPD_DM 
	    FROM LF_DMUSER.NEW_CANCL_APP CMS
	    WHERE 1=1
	    AND CMS.ACCNT_NO =  #{accnt_no}
	
	    UNION ALL 
	
	    SELECT 
	        CARD.ACCNT_NO AS CMS_ACCNT,
	        SUBSTR(CARD.APP_DT,1,8) AS APP_DT,   
            TO_CHAR(UPD_DM,'YYYYMMDD') REG_DT,
	        CARD.APP_CL, 
	        LF_DMUSER.FN_COM_NM('17',CARD.APP_CL) || '(Card)' APP_CL_NM,
	        CARD.CARD_CD,
	        LF_DMUSER.FN_COM_NM('0120',CARD.CARD_CD) AS CARD_NM,
	        CARD_NO,    
	        CARD.INV_TG_DT,
	        CARD.CARD_BIRTH,
	        CARD.EXPIRE_DATE,
	        (SELECT PAY_DT FROM LF_DMUSER.CARD_MEM WHERE 1=1 AND ACCNT_NO = CARD.ACCNT_NO AND DEL_FG = 'N' ) AS ICHAE_DT,
	        UPD_DM 
	    FROM LF_DMUSER.CARD_NEW_CANCL_APP CARD
	    WHERE 1=1
	    AND CARD.ACCNT_NO =  #{accnt_no}
	
	    UNION ALL
	
	    SELECT 
	        CMS.ACCNT_NO AS CMS_ACCNT,
	        SUBSTR(CMS.APP_DT,1,8) APP_DT,
            TO_CHAR(UPD_DM,'YYYYMMDD') REG_DT,
	        CMS.APP_CL,
	        LF_DMUSER.FN_COM_NM('17',CMS.APP_CL) ||'(CMS)' APP_CL_NM,
	        CMS.BANK_CD,
	        '('|| CMS.BANK_CD ||') ' || LF_DMUSER.FN_COM_NM('63',CMS.BANK_CD) BANK_NM,
	        BANK_ACCNT_NO,
	        CMS.INV_TG_DT,
	        NVL(CMS.BIRTH,'') IDN_NO,    
	        '' AS EXPIRE_DATE,
	        (SELECT ICHAE_DT FROM LF_DMUSER.CMS_MEM WHERE 1=1 AND DEL_FG = 'N' AND ACCNT_NO = CMS.ACCNT_NO) AS ICHAE_DT,
	        UPD_DM 
	    FROM LF_DMUSER.NEW_CANCL_APP CMS
	    WHERE 1=1
	    AND CMS.ACCNT_NO IN (SELECT ACCNT_NO_DBL  FROM LF_DMUSER.TB_ACCNT_DOUBLE WHERE ACCNT_NO =  #{accnt_no})
	
	    UNION ALL 
	
	    SELECT 
	        CARD.ACCNT_NO AS CMS_ACCNT,
	        SUBSTR(CARD.APP_DT,1,8) AS APP_DT, 
            TO_CHAR(UPD_DM,'YYYYMMDD') REG_DT,
	        CARD.APP_CL, 
	        LF_DMUSER.FN_COM_NM('17',CARD.APP_CL) || '(Card)' APP_CL_NM,
	        CARD.CARD_CD,
	        LF_DMUSER.FN_COM_NM('0120',CARD.CARD_CD) AS CARD_NM,
	        CARD_NO,    
	        CARD.INV_TG_DT,
	        CARD.CARD_BIRTH,
	        CARD.EXPIRE_DATE,
	        (SELECT PAY_DT FROM LF_DMUSER.CARD_MEM WHERE 1=1 AND ACCNT_NO = CARD.ACCNT_NO AND DEL_FG = 'N' ) AS ICHAE_DT,
	        UPD_DM 
	    FROM LF_DMUSER.CARD_NEW_CANCL_APP CARD
	    WHERE 1=1
	    AND CARD.ACCNT_NO IN (SELECT ACCNT_NO_DBL  FROM LF_DMUSER.TB_ACCNT_DOUBLE WHERE ACCNT_NO =  #{accnt_no})
	)
	ORDER BY UPD_DM DESC 

	<!-- 
    SELECT /* DlwNewTypeMainConsMap.getDlwPymnHstrList */
           A.*,
        <choose>
            <when test="orderBy != null and orderBy != ''">
                ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) AS PAGE_INDX
            </when>
            <otherwise>
                ROW_NUMBER() OVER(ORDER BY A.UPD_DM DESC) PAGE_INDX
            </otherwise>
        </choose>
      FROM (SELECT SEQ, ACCNT_NO
                 , substr(APP_DT,1,8) APP_DT
                 ,   TO_CHAR(UPD_DM,'YYYYMMDD') REG_DT
                 , APP_CL, FN_COM_NM('17',APP_CL) ||'(CMS)' APP_CL_NM
                 , BANK_CD, '('|| BANK_CD ||') ' || FN_COM_NM('63',BANK_CD) BANK_NM
               /*  ,  CONVERT(VARCHAR(MAX), DECRYPTBYKEYAUTOCERT( CERT_ID('CertKeyProtect'), NULL, BANK_ACCNT_NO)) BANK_ACCNT_NO */
                 , BANK_ACCNT_NO  BANK_ACCNT_NO
                 , INV_TG_DT, NVL(BIRTH,'') IDN_NO, UPD_DM
              FROM NEW_CANCL_APP
             WHERE ACCNT_NO = #{accnt_no}
               AND STAT = '04'

         UNION ALL

            SELECT SEQ, A.ACCNT_NO, substr(APP_DT,1,8) APP_DT
                 , TO_CHAR(UPD_DM,'YYYYMMDD') REG_DT
                 , APP_CL, FN_COM_NM('17',APP_CL) || '(Card)' APP_CL_NM
                 , CARD_CD, FN_COM_NM('0120',CARD_CD) CARD_NM
                 /*, CONVERT(VARCHAR(MAX), DECRYPTBYKEYAUTOCERT( CERT_ID('CertKeyProtect'), NULL, CARD_NO)) CARD_NO   */
                 , CARD_NO  CARD_NO
                 , INV_TG_DT, CARD_BIRTH, UPD_DM
              FROM CARD_NEW_CANCL_APP A
             INNER JOIN (SELECT MPA.ACCNT_NO
                              , MEM.BRTH_MON_DAY BRTHMONDAY
                             /* , ISNULL(CONVERT(VARCHAR(MAX), DECRYPTBYKEYAUTOCERT( CERT_ID('CertKeyProtect'), NULL, IDN_NO)), '') IDNNO */
                             , IDN_NO  IDN_NO
                           FROM MEM_PROD_ACCNT MPA
                          INNER JOIN MEMBER MEM
                                ON MPA.MEM_NO = MEM.MEM_NO
                          WHERE MPA.ACCNT_NO = #{accnt_no}) TBL
                   ON A.ACCNT_NO = TBL.ACCNT_NO) A
 	-->                   
    </select>
    
    <!-- 청구내역 : 개별목록 청구내역 (CMS+Card) -->
    <select id="DlwNewTypeMainConsMap.getDlwAskHstrList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-cms.selectCMSWdrwHistoryByGun -->
    <!-- DM sql-id : sql-cms.selectCardWdrwHistoryByGun -->


    SELECT /* DlwNewTypeMainConsMap.getDlwAskHstrList */
           A.*,
        <choose>
            <when test="orderBy != null and orderBy != ''">
                ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) AS PAGE_INDX
            </when>
            <otherwise>
                ROW_NUMBER() OVER(ORDER BY A.INV_DT2 DESC) PAGE_INDX
            </otherwise>
        </choose>
      FROM (SELECT  /*+INDEX(wdrw_req IDX_WDRW_REQ_ACCNT_STAT) */ INV_DT INV_DT
                 , INV_GUNSU, WDRW_REQ_AMT, STAT
                 , CASE WHEN STAT = '03'  THEN '불능(' || FN_COM_NM('15',IMPS_CD) ||')'
                        WHEN STAT =  '05' THEN '취소'
                        WHEN STAT =  '04' THEN '완료'
                        WHEN STAT =  '01' THEN '신청전'
                        WHEN STAT =  '02' THEN '신청중'
                    END AS STAT_NM
                 , IMPS_CD, FN_COM_NM('15',IMPS_CD) IMPS_NM
                 , '(CMS)' || BANK_FILIN_BRKDN AS BANK_FILIN_BRKDN
                 , INV_DT INV_DT2
              FROM WDRW_REQ
             WHERE ACCNT_NO = #{accnt_no}

         UNION ALL

            SELECT /*+INDEX(wdrw_req IDX_WDRW_REQ_ACCNT_STAT) */ INV_DT INV_DT
                 , INV_GUNSU, WDRW_REQ_AMT, STAT
                 , FN_COM_NM('18',STAT) STATNM
                 , IMPS_CD
                 , CASE WHEN EXP_FG = 'F'
                             AND (IMPS_CD = ''
                                  OR IMPS_CD IS NULL)
                             AND STAT = '04'
                             THEN '카드결제 성공'
                        ELSE (CASE WHEN INV_DT <![CDATA[<]]> '20140213'
                                        THEN  FN_COM_NM('0121',IMPS_CD)
                                   ELSE FN_COM_NM('0166',IMPS_CD)
                               END)
                    END IMPS_NM
                  , '(Card)' || BANK_FILIN_BRKDN AS BANK_FILIN_BRKDN
                  , INV_DT INV_DT2
               FROM CARD_WDRW_REQ C
              WHERE ACCNT_NO = #{accnt_no}) A
    </select>
    
    <!-- ================================================================
     * 날짜 : 20181113
     * 이름 : 송준빈
     * 추가내용 : 회원고객정보 탭 (청구이력)
     * 대상 테이블 : LF_DMUSER.TB_MEMBER_WDRW_REQ, LF_DMUSER.TB_MEMBER_WDRW_RESULT
     * ================================================================
     * -->
    <select id="DlwNewTypeMainConsMap.getMainWdrwLogList" parameterType="map" resultType="resultMap">


        SELECT /* DlwNewTypeMainConsMap.getMainWdrwLogList */
               *
          FROM (SELECT ROW_NUMBER() OVER(ORDER BY REQ_DAY DESC, REG_DM DESC, ACCNT_NO) PAGE_INDX,
                       X.*
                  FROM (
          SELECT REQ.ACCNT_NO,
                                   REQ.MEM_NO,
                                   REQ_BIT,
                                   TRUE_CNT,                                            /* 실납입횟수 */
                                   REQ.REQ_PAY_NO,                                          /* 청구회차 */
                                     (SELECT MAX(REQ_PAY_NO) FROM TB_MEMBER_WDRW_REQ WHERE 1=1 AND ACCNT_NO = REQ.ACCNT_NO AND DEL_FG  !=  'Y' AND REQ_PAY_NO != 999) AS MAX_REQ_PAY_NO,                                 /* 회원번호 기준 MAX 청구회차 */                                 /* 회원번호 기준 MAX 청구회차 */
                                   TO_CHAR(RST.REG_DM, 'YYYYMMDDHH24MISS') AS REG_DM,   /* 결과입력시간*/
                                   ( SELECT TO_CHAR(MAX(REG_DM), 'YYYYMMDDHH24MISS')    /* 회원번호 기준 MAX 결과입력시간 */
                                     FROM TB_MEMBER_WDRW_RESULT
                                    WHERE 1=1
                                      AND ACCNT_NO = REQ.ACCNT_NO
                                   ) AS MAX_REG_DM,
                                   PAY_BIT,
                                   REQ.ICHAE_NO,
                                   REQ.REQ_DAY,
                                   PAY_AMT,
                                   REQ.RESULT_KEY,
                                   RST.TID,
                                   RST.PAY_KIND AS RESULT_KIND,
                                   RST.RESULT_CD,
                                   AUTH_DT,
                                   AUTH_CD,
                                   REQ.ICHAE_CD,
                                   TO_CHAR(RFD.CANCEL_DT, 'YYYYMMDD') AS CANCEL_DT,
                                   RST.ETC,
                                   REQ.DEL_FG,
                                     REQ.PAY_MTHD,
                                   CASE WHEN REQ.PAY_MTHD = '04'  THEN FN_COM_NM('15', RST.RESULT_CD)
                                        WHEN REQ.PAY_MTHD = '06'  THEN RST.RESULT_MSG
                                   ELSE '' END AS RESULT_MSG
                              FROM TB_MEMBER_WDRW_REQ REQ LEFT OUTER JOIN
                                TB_MEMBER_WDRW_RESULT RST ON REQ.PAY_MTHD = RST.PAY_MTHD AND REQ.REQ_DAY = RST.REQ_DAY AND REQ.RESULT_KEY = RST.RESULT_KEY LEFT OUTER JOIN
                                TB_MEMBER_REQ_REFUND RFD ON REQ.PAY_MTHD = RFD.PAY_MTHD AND REQ.REQ_DAY = RFD.REQ_DAY AND REQ.RESULT_KEY = RFD.RESULT_KEY  AND RFD.DEL_FG = 'N'
                             WHERE 1=1
                                 AND REQ.ACCNT_NO = #{accnt_no}
                                 AND REQ.DEL_FG != 'Y'
                    ) X
                ) Z
    </select>
    
    <select id="DlwNewTypeMainConsMap.getCustBasiConsInfo" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeMainConsMap.getCustBasiConsInfo */
               MEM_NO
             , MEM_NM
             , EMAIL
             , SEX
             , CI_VAL
             , CREDIT_RATING
             , HOME_ADDR
             , HOME_ADDR2
             , RGSR_ID
             , RGSN_DTTM
             , AMND_ID
             , AMNT_DTTM
             , ACCNT_NO
             , EMPLE_NO
             , EMPLE_NM
             , DEPT_CD
             , NOTE
             , OCB_YN
             , MARKT_AGR_YN
             , BRTH_MON_DAY
             , JOIN_DT
             , REPLACE(CELL, '-', '') AS CELL
             , REPLACE(HOME_TEL, '-', '') AS HOME_TEL
             , REPLACE(WRPL_TEL, '-', '') AS WRPL_TEL
             , CRDT_MNG_NO
             , DEL_FG
             , REPLACE(HOME_ZIP, '-', '') AS HOME_ZIP
             , (SELECT E.EMPLE_NM
                  FROM EMPLOYEE E
                 WHERE E.EMPLE_NO = C.RGSR_ID) AS RGSR_NM
             , (SELECT E.EMPLE_NM
                  FROM EMPLOYEE E
                 WHERE E.EMPLE_NO = C.AMND_ID) AS AMND_NM
             , CASE WHEN LENGTH(IDN_NO) = 10
                    THEN 'Y'
                    ELSE 'N'
                END AS BUSINESS_YN
          FROM (SELECT A.MEM_NO
                     , A.MEM_NM
                     , A.BRTH_MON_DAY
                     , A.CELL
                     , A.HOME_TEL
                     , A.EMAIL
                     , A.SEX
                     , A.CI_VAL
                     , A.CREDIT_RATING
                     , A.WRPL_TEL
                     , A.CRDT_MNG_NO
                     , A.DEL_FG
                     , A.HOME_ZIP
                     , A.HOME_ADDR
                     , A.HOME_ADDR2
                     , A.REG_MAN AS RGSR_ID
                     , A.REG_DM AS RGSN_DTTM
                     , A.UPD_MAN AS AMND_ID
                     , A.UPD_DM AS AMNT_DTTM
                     , A.NOTE
                     , A.OCB_YN
                     , A.MARKT_AGR_YN
                     , B.ACCNT_NO
                     , B.JOIN_DT
                     , B.EMPLE_NO
                     , EMP.DEPT_CD
                     , EMP.EMPLE_NM
                     , NVL(A.BLACK_CONSUMER,'N') BLACK_CONSUMER
                     , A.IDN_NO AS IDN_NO
                  FROM (SELECT A.*
                          FROM MEMBER A
                         WHERE A.DEL_FG = 'N'
                           AND A.MEM_NO = #{mem_no}
                       ) A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B
                    ON B.MEM_NO = A.MEM_NO
                   AND B.DEL_FG = 'N'
                <if test="accnt_no != null and accnt_no != ''">
                   AND B.ACCNT_NO = #{accnt_no}
                </if>
                  LEFT OUTER JOIN EMPLOYEE EMP
                    ON EMP.EMPLE_NO = B.EMPLE_NO
                   AND EMP.DEL_FG = 'N'
                 ) C
           WHERE ROWNUM = 1
           ORDER BY JOIN_DT DESC
    </select>
    
    <insert id="DlwNewTypeMainConsMap.insertCons" parameterType="map">
        <selectKey keyProperty="consno" resultType="String" order="BEFORE">
            SELECT 'CSL' || TO_CHAR(SYSDATE, 'YYYYMMDD') || LPAD(PS_WILLVI.SEQ_CONS.NEXTVAL, 7, '0') FROM DUAL
        </selectKey>

        INSERT /* DlwNewTypeMainConsMap.insertCons */
          INTO PS_WILLVI.TB_CONS
               (CONSNO, CONSNO_GROP_NO, CONSNO_SQNO, ARS_SRVC_ADDR, INCO_TLNO
              , CALL_ID, MEM_NO, ACPG_CHNL_CD, ACPG_DTTM, ACTP_ID
              , CLNT_NM, CONS_TYP1_CD, CONS_TYP2_CD, CONS_TYP3_CD, CONS_STAT_CD
              , CONS_DSPSMDDL_DTPT_CD, RSPS_DEPT_CD, CHPR_ID, CONC_YN, CONS_MEMO_CNTN
              , MST_KEY, DTPT_KEY, ACCNT_NO, CTI_CRNC_DTL_ID

              , MEM_NM, SEX, BRTH_MON_DAY, CI_VAL, IDN_NO
              , HOME_TEL, CELL, WRPL_TEL, HOME_ZIP, HOME_ADDR
              , HOME_ADDR2, CREDIT_RATING, CRDT_MNG_NO, EMAIL, EMPLE_NO
              , EMPLE_NM, JOIN_DT, DEPT_CD, NOTE
        <if test="totl_cons_hr != null and totl_cons_hr != ''">
              , TOTL_CONS_HR
        </if>
        <if test="cons_stat_cd == '30'">
              , CONS_DSPS_DTTM
        </if>
              , CNTR_CD, RGSR_ID, RGSN_DTTM, AMND_ID, AMNT_DTTM)
        VALUES (#{consno}, NVL(#{consno_grop_no}, #{consno}), #{consno_sqno}, #{ars_srvc_addr}, REPLACE(#{inco_tlno}, '-', '')
              , #{call_id}, #{mem_no}, #{acpg_chnl_cd}, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), #{actp_id}
              , #{clnt_nm}, #{cons_typ1_cd}, #{cons_typ2_cd}, #{cons_typ3_cd}, #{cons_stat_cd}
              , #{cons_dspsmddl_dtpt_cd}, #{rsps_dept_cd}, #{chpr_id}, NVL(#{conc_yn}, 'N'), #{cons_memo_cntn}
              , #{mst_key}, #{dtpt_key}, #{accnt_no}, #{cti_crnc_dtl_id}

<!--
    2018.05.11 PS_WILLVI.TB_CONS 테이블 개인정보는 빈값으로....
              , #{mem_nm}, #{sex}, REPLACE(#{brth_mon_day}, '-', ''), #{ci_val}, #{idn_no}
              , REPLACE(#{home_tel}, '-', ''), REPLACE(#{cell}, '-', ''), REPLACE(#{wrpl_tel}, '-', ''), REPLACE(#{home_zip}, '-', ''), #{home_addr}
              , #{home_addr2}, #{credit_rating}, #{crdt_mng_no}, #{email}, #{emple_no}
-->

              , '', #{sex}, REPLACE(#{brth_mon_day}, '-', ''), '', #{idn_no}
              , '', '', '', '', ''
              , '', #{credit_rating}, #{crdt_mng_no}, '', #{emple_no}
              , #{emple_nm}, REPLACE(#{join_dt}, '-', ''), #{dept_cd}, #{note}
        <if test="totl_cons_hr != null and totl_cons_hr != ''">
              , #{totl_cons_hr}
        </if>
        <if test="cons_stat_cd == '30'">
              , TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS')
        </if>
              , #{cntr_cd}, #{rgsr_id}, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'), #{amnd_id}, TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS'))
    </insert>
    
    <insert id="DlwNewTypeMainConsMap.insertConsHstr" parameterType="map">
        INSERT /* DlwNewTypeMainConsMap.insertConsHstr */
          INTO PS_WILLVI.TB_CONS_HSTR
               (CNTR_CD, CONSNO, CHNG_DTTM, ARS_SRVC_ADDR, INCO_TLNO
             , CALL_ID, MEM_NO, ACPG_CHNL_CD, ACPG_DTTM, ACTP_ID
             , TOTL_CONS_HR, CLNT_NM, CONS_TYP1_CD, CONS_TYP2_CD, CONS_TYP3_CD
             , CONS_STAT_CD, CONS_DSPSMDDL_DTPT_CD, CONS_DSPS_DTTM, RSPS_DEPT_CD, CHPR_ID
             , ADMR_AMNT_YN, ADMR_ID, ADMR_AMNT_DTTM, RGSR_ID, RGSN_DTTM
             , AMND_ID, AMNT_DTTM, CONC_YN, CONS_MEMO_CNTN, CONSNO_GROP_NO
             , CONSNO_SQNO, MST_KEY, DTPT_KEY, ACCNT_NO, CTI_CRNC_DTL_ID
             , MEM_NM, SEX, BRTH_MON_DAY, CI_VAL, IDN_NO, HOME_TEL
             , CELL, WRPL_TEL, HOME_ZIP, HOME_ADDR, HOME_ADDR2
             , CREDIT_RATING, CRDT_MNG_NO, EMAIL, EMPLE_NO, EMPLE_NM
             , JOIN_DT, DEPT_CD, NOTE)
        SELECT CNTR_CD, CONSNO, SYSTIMESTAMP, ARS_SRVC_ADDR, INCO_TLNO
             , CALL_ID, MEM_NO, ACPG_CHNL_CD, ACPG_DTTM, ACTP_ID
             , TOTL_CONS_HR, CLNT_NM, CONS_TYP1_CD, CONS_TYP2_CD, CONS_TYP3_CD
             , CONS_STAT_CD, CONS_DSPSMDDL_DTPT_CD, CONS_DSPS_DTTM, RSPS_DEPT_CD, CHPR_ID
             , ADMR_AMNT_YN, ADMR_ID, ADMR_AMNT_DTTM, RGSR_ID, RGSN_DTTM
             , AMND_ID, AMNT_DTTM, CONC_YN, CONS_MEMO_CNTN, CONSNO_GROP_NO
             , CONSNO_SQNO, MST_KEY, DTPT_KEY, ACCNT_NO, CTI_CRNC_DTL_ID
             , MEM_NM, SEX, BRTH_MON_DAY, CI_VAL, IDN_NO, HOME_TEL
             , CELL, WRPL_TEL, HOME_ZIP, HOME_ADDR, HOME_ADDR2
             , CREDIT_RATING, CRDT_MNG_NO, EMAIL, EMPLE_NO, EMPLE_NM
             , JOIN_DT, DEPT_CD, NOTE
          FROM PS_WILLVI.TB_CONS
         WHERE CONSNO = #{consno}
    </insert>
    
    <select id="DlwNewTypeMainConsMap.getConsGroup" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeMainConsMap.getConsGroup */
               A.CONSNO, A.CONSNO_GROP_NO, A.CONSNO_SQNO, A.ARS_SRVC_ADDR, A.INCO_TLNO
             , A.CALL_ID, A.MEM_NO, A.ACPG_CHNL_CD, A.ACPG_DTTM, A.ACTP_ID
             , A.TOTL_CONS_HR, A.CLNT_NM, A.CONS_TYP1_CD, A.CONS_TYP2_CD, A.CONS_TYP3_CD
             , A.CONS_MEMO_CNTN, A.CONS_STAT_CD, A.CONS_DSPSMDDL_DTPT_CD, A.CONS_DSPS_DTTM, A.RSPS_DEPT_CD
             , A.CHPR_ID, A.ADMR_AMNT_YN, A.ADMR_ID, A.ADMR_AMNT_DTTM, A.CONS_DSPSMDDL_DTPT_CD AS OLD_CONS_DSPSMDDL_DTPT_CD
             , A.CNTR_CD, A.RGSR_ID, A.RGSN_DTTM, A.AMND_ID, A.AMNT_DTTM
             , A.CONC_YN, A.MST_KEY, A.DTPT_KEY, A.ACCNT_NO, A.CTI_CRNC_DTL_ID

<!--
    2018.05.11 TB_CONS 테이블 개인정보는 MEMBER 테이블에서...
             , A.MEM_NM, A.SEX, A.BRTH_MON_DAY, A.CI_VAL, A.IDN_NO
             , A.HOME_TEL, A.CELL, A.WRPL_TEL, A.HOME_ZIP, A.HOME_ADDR
             , A.HOME_ADDR2, A.CREDIT_RATING, A.CRDT_MNG_NO, A.EMAIL, A.DEPT_CD
             , A.EMPLE_NO, A.EMPLE_NM, A.JOIN_DT, A.NOTE
             , PS_WILLVI.GETCODENM('CNS010', A.ACPG_CHNL_CD, A.CNTR_CD) AS ACPG_CHNL_NM
             , PS_WILLVI.GETCODENM('CNS030', A.CONS_STAT_CD, A.CNTR_CD) AS CONS_STAT_NM
             , (SELECT C.CONS_TYP_NM
                  FROM TB_CONS_TYP_CD C
                 WHERE C.CONS_TYP_CD = A.CONS_TYP1_CD
                   AND C.CNTR_CD = A.CNTR_CD) AS CONS_TYP1_NM
             , (SELECT C.CONS_TYP_NM
                  FROM TB_CONS_TYP_CD C
                 WHERE C.CONS_TYP_CD = A.CONS_TYP2_CD
                   AND C.CNTR_CD = A.CNTR_CD) AS CONS_TYP2_NM
             , (SELECT C.CONS_TYP_NM
                  FROM TB_CONS_TYP_CD C
                 WHERE C.CONS_TYP_CD = A.CONS_TYP3_CD
                   AND C.CNTR_CD = A.CNTR_CD) AS CONS_TYP3_NM
             , (SELECT C.USER_NM
                  FROM TB_USER C
                 WHERE C.USER_ID = A.ACTP_ID
                   AND C.CNTR_CD = A.CNTR_CD) AS ACTP_NM
             , (SELECT C.USER_NM
                  FROM TB_USER C
                 WHERE C.USER_ID = A.CHPR_ID
                   AND C.CNTR_CD = A.CNTR_CD) AS CHPR_NM
             , (SELECT C.USER_NM
                  FROM TB_USER C
                 WHERE C.USER_ID = A.AMND_ID
                   AND C.CNTR_CD = A.CNTR_CD) AS AMND_NM
          FROM TB_CONS A
-->
             , MEM.MEM_NM, A.SEX, A.BRTH_MON_DAY, MEM.CI_VAL, A.IDN_NO
             , MEM.HOME_TEL, MEM.CELL, MEM.WRPL_TEL, MEM.HOME_ZIP, MEM.HOME_ADDR
             , MEM.HOME_ADDR2, A.CREDIT_RATING, A.CRDT_MNG_NO, MEM.EMAIL, A.DEPT_CD
             , A.EMPLE_NO, A.EMPLE_NM, A.JOIN_DT, A.NOTE
             , PS_WILLVI.GETCODENM('CNS010', A.ACPG_CHNL_CD, A.CNTR_CD) AS ACPG_CHNL_NM
             , PS_WILLVI.GETCODENM('CNS030', A.CONS_STAT_CD, A.CNTR_CD) AS CONS_STAT_NM
             , (SELECT C.CONS_TYP_NM
                  FROM PS_WILLVI.TB_CONS_TYP_CD C
                 WHERE C.CONS_TYP_CD = A.CONS_TYP1_CD
                   AND C.CNTR_CD = A.CNTR_CD) AS CONS_TYP1_NM
             , (SELECT C.CONS_TYP_NM
                  FROM PS_WILLVI.TB_CONS_TYP_CD C
                 WHERE C.CONS_TYP_CD = A.CONS_TYP2_CD
                   AND C.CNTR_CD = A.CNTR_CD) AS CONS_TYP2_NM
             , (SELECT C.CONS_TYP_NM
                  FROM PS_WILLVI.TB_CONS_TYP_CD C
                 WHERE C.CONS_TYP_CD = A.CONS_TYP3_CD
                   AND C.CNTR_CD = A.CNTR_CD) AS CONS_TYP3_NM
             , (SELECT C.USER_NM
                  FROM PS_WILLVI.TB_USER C
                 WHERE C.USER_ID = A.ACTP_ID
                   AND C.CNTR_CD = A.CNTR_CD) AS ACTP_NM
             , (SELECT C.USER_NM
                  FROM PS_WILLVI.TB_USER C
                 WHERE C.USER_ID = A.CHPR_ID
                   AND C.CNTR_CD = A.CNTR_CD) AS CHPR_NM
             , (SELECT C.USER_NM
                  FROM PS_WILLVI.TB_USER C
                 WHERE C.USER_ID = A.AMND_ID
                   AND C.CNTR_CD = A.CNTR_CD) AS AMND_NM
          FROM PS_WILLVI.TB_CONS A
               LEFT OUTER JOIN
               LF_DMUSER.MEMBER MEM
               ON A.MEM_NO = MEM.MEM_NO
         WHERE CONSNO_GROP_NO = #{consno_grop_no}
      ORDER BY CONSNO_SQNO ASC
    </select>
    
    <select id="DlwNewTypeMainConsMap.getConsCount" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeMainConsMap.getConsCount */
               COUNT(*)
          FROM PS_WILLVI.TB_CONS A
          LEFT OUTER JOIN			<!--  2018.05.11 TB_CONS 테이블 개인정보는 MEMBER 테이블에서... -->

               LF_DMUSER.MEMBER MEM
            ON A.MEM_NO = MEM.MEM_NO
         WHERE 1 = 1
        <include refid="DlwNewTypeMainConsMap.selectCondition_fragment6"/>
    </select>
    
    <select id="DlwNewTypeMainConsMap.getDlwConsCount" parameterType="map" resultType="int">


        SELECT /* DlwNewTypeMainConsMap.getDlwConsCount */
               COUNT(*)
          FROM CNSL_MNG A
          LEFT OUTER JOIN MEM_PROD_ACCNT ACCNT
            ON A.ACCNT_NO = ACCNT.ACCNT_NO
         WHERE A.MEM_NO = #{mem_no}
           AND NVL(ACCNT.DEL_FG, 'N') = 'N'
        <if test="accnt_no != null and accnt_no != ''">
           AND A.ACCNT_NO = #{accnt_no}
        </if>
    </select>

    <select id="DlwNewTypeMainConsMap.getDlwConsList" parameterType="map" resultType="resultMap">


        SELECT /* DlwNewTypeMainConsMap.getDlwConsList */
               A.*,
            <choose>
                <when test="orderBy != null and orderBy != ''">
                    ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) AS PAGE_INDX
                </when>
                <otherwise>
                    ROW_NUMBER() OVER(CNSL_DT DESC) AS PAGE_INDX
                </otherwise>
            </choose>
         FROM (SELECT A.SEQ
                    , A.MEM_NO
                    , A.ACCNT_NO
                    , (CASE WHEN A.ACCNT_NO = '00000'
                            THEN '기타문의'
                            ELSE (FN_PROD_NM((SELECT PROD_CD FROM MEM_PROD_ACCNT WHERE MEM_PROD_ACCNT.ACCNT_NO = A.ACCNT_NO)))
                       END) AS PROD_NM
                    , A.CNSL_DT AS CNSL_DT
                    , REPLACE(A.CNSL_CON, CHR(13), '') AS CNSL_CON
                    , (SELECT (SELECT GRP_NM
                                 FROM COM_CD_GRP
                                WHERE GRP_CD = GUBN
                                  AND CON LIKE '%상담구분%')
                         FROM CNSL_DTL
                        WHERE MEM_NO = A.MEM_NO
                          AND SEQ = A.SEQ
                          AND CNSL_SEQ = A.CNSL_SEQ
                          AND ROWNUM = 1) AS GUBN_NM
                    , A.CNSL_MAN
                    , A.CALL_TEL
                    , A.REC_PATH
                    , A.REC_FILE
                    , FN_EMPLE_NM(A.CNSL_MAN) AS CNSL_MAN_NM
                    , (SELECT DEPT_NM
                              FROM DEPARTMENT
                             WHERE DEPT_CD = (SELECT DEPT_CD
                                                FROM EMPLOYEE
                                               WHERE EMPLOYEE.EMPLE_NO = CNSL_MAN)) AS CNSL_MAN_DEPT_NM
                    , A.CNSL_SEQ
                    , CASE WHEN REG_CL = '02' AND (CD.CNSL_CON NOT LIKE '%주소:%' AND
                                                        CD.CNSL_CON NOT LIKE '%휴대폰:%' AND
                                                        CD.CNSL_CON NOT LIKE '%전화:%' AND
                                                        CD.CNSL_CON NOT LIKE '%비고:%')
                         THEN A.CNSL_CON
                           ELSE  CD.CNSL_CON
                      END CNSL_CON_SHOW
                 FROM CNSL_MNG A
                 LEFT OUTER JOIN MEM_PROD_ACCNT ACCNT
                   ON A.ACCNT_NO = ACCNT.ACCNT_NO
                    left outer join CNSL_DTL cd on cd.MEM_NO = A.MEM_NO  AND cd.SEQ = A.SEQ AND cd.CNSL_SEQ = A.CNSL_SEQ
                WHERE A.MEM_NO = #{mem_no}
                  AND NVL(ACCNT.DEL_FG, 'N') = 'N'
              <if test="accnt_no != null and accnt_no != ''">
                  AND A.ACCNT_NO = #{accnt_no}
              </if>
               ) A
    </select>
    
    <!--대명 홈페이지 이력 건수 -->
    <select id="DlwNewTypeMainConsMap.getDlwlifeweyCount" parameterType="map" resultType="int">


        SELECT /* DlwNewTypeMainConsMap.getDlwlifeweyCount */
               COUNT(*)
          from MB_MEM_CHNG_PTC@DMWEB A1
    		 LEFT OUTER JOIN  MB_MEM_MST@DMWEB B1  ON A1.ID=B1.ID
   
  			where   B1.UNQ_NO='2012035263'
        <if test="mem_no != null and mem_no != ''">
           AND B1.UNQ_NO = #{mem_no}
        </if>
  	</select>
  	  
    <!--대명 홈페이지 이력  -->
    <select id="DlwNewTypeMainConsMap.getDlwlifeweyList" parameterType="map" resultType="resultMap">


        SELECT /* DlwNewTypeMainConsMap.getDlwlifeweyList */
               A.*,
            <choose>
                <when test="orderBy != null and orderBy != ''">
                    ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) AS PAGE_INDX
                </when>
                <otherwise>
                    ROW_NUMBER() OVER(A.REG_DM DESC) AS PAGE_INDX
                </otherwise>
            </choose>
         FROM ( select  UNQ_NO mem_no ,  A1.reg_id REG_man  ,A1.reg_dtm REG_DM,
			           CASE WHEN BFR_NAME <![CDATA[<>  ]]>  AFT_NAME  THEN '[회원명]:' || BFR_NAME || '>' ||  AFT_NAME ELSE '' END  || 
			           CASE WHEN BFR_EMAIL <![CDATA[<>  ]]>  AFT_EMAIL  THEN ' [E-MAIL]:' || BFR_EMAIL || '>' ||  AFT_EMAIL ELSE '' END ||
			           CASE WHEN BFR_HP <![CDATA[<>  ]]>  AFT_HP  THEN ' [핸드폰]:' || BFR_HP || '>' ||  AFT_HP ELSE '' END ||
			           CASE WHEN BFR_TEL <![CDATA[<>  ]]>  AFT_TEL  THEN ' [전화]:' || BFR_TEL || '>' ||  AFT_TEL ELSE '' END ||
			           CASE WHEN BFR_ZIPCD <![CDATA[<>  ]]>  AFT_ZIPCD  THEN ' [우편번호]:' || BFR_ZIPCD || '>' ||  AFT_ZIPCD ELSE '' END ||
			           CASE WHEN BFR_ADR <![CDATA[<>  ]]>  AFT_ADR  THEN ' [주소]:' || BFR_ADR || '>' ||  AFT_ADR ELSE '' END ||
			           CASE WHEN BFR_ADR_DTL <![CDATA[<>  ]]>  AFT_ADR_DTL  THEN ' [상세주소]:' || BFR_ADR_DTL || '>' ||  AFT_ADR_DTL ELSE '' END  BIGO
			            
               from MB_MEM_CHNG_PTC@DMWEB A1
  						 LEFT OUTER JOIN  MB_MEM_MST@DMWEB B1  ON A1.ID=B1.ID
                WHERE  B1.UNQ_NO= #{mem_no}
               ) A
    </select>
    
    <select id="DlwNewTypeMainConsMap.getDlwProductList" parameterType="map" resultType="resultMap">
		SELECT /* DlwNewTypeMainConsMap.getDlwProductList*/ 			
			*
		FROM PRODUCT
		WHERE 1=1
		<if test="prod_cd != null and prod_cd != ''">
			AND PROD_CD = #{prod_cd}
		</if>
		<if test="prod_nm != null and prod_nm != ''">
			AND PROD_NM LIKE '%' || #{prod_nm} || '%'
		</if>
		<if test="sale_cl != null and sale_cl != '' and sale_cl.equalsIgnoreCase('Y')">
            AND SALE_CL IN ('Y', 'N')
        </if>
        <if test="sale_cl != null and sale_cl != '' and sale_cl.equalsIgnoreCase('N')">
            AND SALE_CL = 'Y'
        </if>
    </select>
    
    <insert id="DlwNewTypeMainConsMap.insertMemberCredit" parameterType="map">
                        
        /* DlwNewTypeMainConsMap.insertMemberCredit */
		INSERT INTO TB_MEMBER_CREDIT_LIST
         ( MEM_NO, CREDIT_POINT, REG_DM, REG_MAN )
         VALUES
         (
           #{mem_no}, #{credit_point}, sysdate, #{rgsr_id}
         )
         
    </insert>
	
    <!-- LMS 문자메세지를 전송한다.(LMS) -->
    <insert id="DlwNewTypeMainConsMap.insertSmsSend" parameterType="map">
        <selectKey keyProperty="mt_pr" resultType="String" order="BEFORE">
            SELECT EM_USER.SQ_EM_MMT_TRAN_01.NEXTVAL FROM DUAL
        </selectKey>
        INSERT /* DlwNewTypeMainConsMap.insertSmsSend */
          INTO EM_USER.EM_MMT_TRAN
              (
               MT_PR                                 /* sequence */
             , DATE_CLIENT_REQ                       /* 클라이언트의 전송 요청 시간 */
             , SUBJECT                               /* 메시지제목 */
             , CONTENT                               /* 전송메시지 */
             , CALLBACK                              /* 발신번호 */
             , SERVICE_TYPE                          /* 메시지전송타입 */
             , RECIPIENT_NUM                         /* 수신번호 */
              )
        SELECT #{mt_pr}                              /* sequence */
             , SYSDATE                               /* 클라이언트의 전송 요청 시간 */
             , CASE WHEN MARKT_AGR_YN = 'Y' THEN '마케팅수신동의'
                    ELSE '마케팅수신미동의' END      /* 메시지제목 */
             , CASE WHEN MARKT_AGR_YN = 'Y' THEN '안녕하십니까. ㈜대명스테이션입니다.' || CHR(10) ||
                                                 '『정보통신망 이용촉진 및 정보보호 등에 관한 법률 제50조(영리목적의 광고성 정보 전송 제한)』에 의거하여, 광고성 정보 수신 동의 여부를 확인하기 위해 발송되었습니다.' || CHR(10) ||
                                                 MEM_NM || '고객님은 아래와 같이 광고성 정보 수신에 동의하셨습니다.' || CHR(10) ||
                                                 '수신 동의일 : ' || TO_CHAR(SYSDATE, 'YYYY.MM.DD') || CHR(10) ||
                                                 '수신 동의채널 : 콜센터 / 홈페이지 / App 등' || CHR(10) || CHR(10) ||
                                                 '* 광고성 정보 수신 동의 철회 방법' || CHR(10) ||
                                                 '- 나의 아임레디 > 회원정보 관리 > 개인정보 변경 > 마케팅 수신 동의 철회' || CHR(10) ||
                                                 '- 컨텍센터(1588-8511)를 통한 마케팅 수신 동의 철회' || CHR(10) ||
                                                 '별도의 의사표시가 없을 경우, 광고성 정보의 수신 동의가 그대로 유지됩니다.' || CHR(10) ||
                                                 '감사합니다.'
                    ELSE '안녕하십니까. ㈜대명스테이션입니다.' || CHR(10) ||
                         '『정보통신망 이용촉진 및 정보보호 등에 관한 법률 제50조(영리목적의 광고성 정보 전송 제한)』에 의거하여, 광고성 정보 수신 동의 여부를 확인하기 위해 발송되었습니다.' || CHR(10) ||
                         MEM_NM || '고객님은 아래와 같이 광고성 정보 수신에 미동의하셨습니다.' || CHR(10) ||
                         '수신 미동의일 : ' || TO_CHAR(SYSDATE, 'YYYY.MM.DD') || CHR(10) ||
                         '수신 미동의채널 : 콜센터 / 홈페이지 / App 등' || CHR(10) || CHR(10) ||
                         '* 광고성 정보 수신 동의 철회 방법' || CHR(10) ||
                         '- 나의 아임레디 > 회원정보 관리 > 개인정보 변경 > 마케팅 수신 동의 철회' || CHR(10) ||
                         '- 컨텍센터(1588-8511)를 통한 마케팅 수신 동의 철회' || CHR(10) ||
                         '별도의 의사표시가 없을 경우, 광고성 정보의 수신 미동의가 그대로 유지됩니다.' || CHR(10) ||
                         '감사합니다.' END           /* 전송메시지 */             
             , '15888511'                            /* 발신번호 */
             , '3'                                   /* 메시지전송타입 */
             , CELL1    /* 수신번호 */
        FROM MEMBER
        WHERE MEM_NO = #{mem_no}
        
    </insert>
    
    <insert id="DlwNewTypeMainConsMap.insertChatSndgHstr" parameterType="map">
        <selectKey keyProperty="chat_sndg_hstr_id" resultType="String" order="BEFORE">
            SELECT 'CSH' || TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') || LPAD(PS_WILLVI.SEQ_COMMON.NEXTVAL, 7, '0') FROM DUAL
        </selectKey>

        INSERT /* DlwNewTypeMainConsMap.insertChatSndgHstr */
          INTO PS_WILLVI.TB_CHAT_SNDG_HSTR
             (
               CNTR_CD		            /* 센터 코드 */
            ,  CHAT_SNDG_HSTR_ID		/* 문자 발송 이력 ID */
            ,  CELL		                /* 휴대번호(수신) */
            ,  CHAT_SNDG_DIV_CD		    /* 문자 발송 구분 코드 */
            ,  CHAT_MSG_TITL		    /* 문자 메시지 제목 */
            ,  CHAT_MSG_CNTN		    /* 문자 메시지 내용 */
            ,  MSG_TRNM_SCS_YN		    /* 메시지 전송 성공 여부 */
            ,  SNDG_DTTM		        /* 발송 일시 */
            ,  SNDG_CHPR_ID		        /* 발송 담당자 ID */
            ,  RESR_YN		            /* 예약 여부 */
            ,  RESR_DTTM		        /* 예약 일시 */
            ,  CNTR_RPRS_TLNO		    /* 센터 대표 전화번호 */
            ,  MEM_NO		            /* 대명고객 번호 */
            ,  MEM_NM		            /* 대명고객 명 */

            ,  SNDG_NO		            /* 발송 번호 */
            ,  SNDG_SQNC		        /* 발송 순서 */
            ,  CHAT_SNDG_STAT_CD		/* 문자 발송 상태 코드 */
            ,  RGSR_ID		            /* 등록자 ID */
            ,  RGSN_DTTM		        /* 등록 일시 */
            ,  AMND_ID		            /* 수정자 ID */
            ,  AMNT_DTTM		        /* 수정 일시 */
             )
    SELECT 'CCA'	                                      /* 센터 코드 */
            ,  #{chat_sndg_hstr_id}		                  /* 문자 발송 이력 ID */
            ,  CELL1                                          /* 휴대번호(수신) */
            , CASE WHEN MARKT_AGR_YN = 'Y' THEN '마케팅수신동의'
                    ELSE '마케팅수신미동의' END               /* 문자 메시지 제목 */
            , CASE WHEN MARKT_AGR_YN = 'Y' THEN '안녕하십니까. ㈜대명스테이션입니다.' || CHR(10) ||
                                                 '『정보통신망 이용촉진 및 정보보호 등에 관한 법률 제50조(영리목적의 광고성 정보 전송 제한)』에 의거하여, 광고성 정보 수신 동의 여부를 확인하기 위해 발송되었습니다.' || CHR(10) ||
                                                 MEM_NM || '고객님은 아래와 같이 광고성 정보 수신에 동의하셨습니다.' || CHR(10) ||
                                                 '수신 동의일 : ' || TO_CHAR(SYSDATE, 'YYYY.MM.DD') || CHR(10) ||
                                                 '수신 동의채널 : 콜센터 / 홈페이지 / App 등' || CHR(10) || CHR(10) ||
                                                 '* 광고성 정보 수신 동의 철회 방법' || CHR(10) ||
                                                 '- 나의 아임레디 > 회원정보 관리 > 개인정보 변경 > 마케팅 수신 동의 철회' || CHR(10) ||
                                                 '- 컨텍센터(1588-8511)를 통한 마케팅 수신 동의 철회' || CHR(10) ||
                                                 '별도의 의사표시가 없을 경우, 광고성 정보의 수신 동의가 그대로 유지됩니다.' || CHR(10) ||
                                                 '감사합니다.'
                    ELSE '안녕하십니까. ㈜대명스테이션입니다.' || CHR(10) ||
                         '『정보통신망 이용촉진 및 정보보호 등에 관한 법률 제50조(영리목적의 광고성 정보 전송 제한)』에 의거하여, 광고성 정보 수신 동의 여부를 확인하기 위해 발송되었습니다.' || CHR(10) ||
                         MEM_NM || '고객님은 아래와 같이 광고성 정보 수신에 미동의하셨습니다.' || CHR(10) ||
                         '수신 미동의일 : ' || TO_CHAR(SYSDATE, 'YYYY.MM.DD') || CHR(10) ||
                         '수신 미동의채널 : 콜센터 / 홈페이지 / App 등' || CHR(10) || CHR(10) ||
                         '* 광고성 정보 수신 동의 철회 방법' || CHR(10) ||
                         '- 나의 아임레디 > 회원정보 관리 > 개인정보 변경 > 마케팅 수신 동의 철회' || CHR(10) ||
                         '- 컨텍센터(1588-8511)를 통한 마케팅 수신 동의 철회' || CHR(10) ||
                         '별도의 의사표시가 없을 경우, 광고성 정보의 수신 미동의가 그대로 유지됩니다.' || CHR(10) ||
                         '감사합니다.' END                        /* 문자 메시지 내용 */ 
            ,  'Y'          		                              /* 메시지 전송 성공 여부 */
            ,  SYSDATE		                                      /* 발송 일시 */
            ,  #{rgsr_id}		                                  /* 발송 담당자 ID */
            ,  'N'                                                /* 예약 여부 */
            ,  ''                                                 /* 예약 일시 */
            ,  '15888511'                    		              /* 센터 대표 전화번호(발신번호) */
            ,  MEM_NO   		            /* 대명고객 번호 */
            ,  MEM_NM    		            /* 대명고객 명 */
            ,  #{sndg_no}		            /* 발송 번호 */
            ,  NVL(#{sndg_sqnc}, 0)		    /* 발송 순서 */
            ,  '1'		                    /* 문자 발송 상태 코드(전송대기) */
            ,  #{rgsr_id}		                                  /* 등록자 ID */
            ,  SYSDATE		                                      /* 등록 일시 */
            ,  #{rgsr_id}		                                  /* 수정자 ID */
            ,  SYSDATE                                            /* 수정 일시 */
          FROM MEMBER
          WHERE MEM_NO = #{mem_no}
    </insert>	   
    
    <select id="DlwNewTypeMainConsMap.getDlwMarketingInfoList" parameterType="map" resultType="resultMap">
    	SELECT 
    		/* DlwNewTypeMainConsMap.getDlwMarketingInfoList */ 
            MEM_NO,
            MAX(MARKT_YN) AS MARKT_YN,
            MAX(MARKT_DT) AS MARKT_DT,
            MAX(DM_YN) AS DM_YN,
            MAX(DM_DT) AS DM_DT,
            MAX(EM_YN) AS EM_YN,
            MAX(EM_DT) AS EM_DT            
        FROM
        (
            SELECT 
                MEM_NO,
                CASE WHEN MARKT_INFO_GBN = '01' AND DEL_FG = 'N' THEN 'Y' ELSE 'N' END AS MARKT_YN,
                CASE WHEN MARKT_INFO_GBN = '01' AND DEL_FG = 'N' THEN TO_CHAR(MARKT_DATE,'YYYY-MM-DD') ELSE NULL END AS MARKT_DT,
                CASE WHEN MARKT_INFO_GBN = '02' AND DEL_FG = 'N' THEN 'Y' ELSE 'N' END AS DM_YN,
                CASE WHEN MARKT_INFO_GBN = '02' AND DEL_FG = 'N' THEN TO_CHAR(MARKT_DATE,'YYYY-MM-DD') ELSE NULL END AS DM_DT,
                CASE WHEN MARKT_INFO_GBN = '03' AND DEL_FG = 'N' THEN 'Y' ELSE 'N' END AS EM_YN,
                CASE WHEN MARKT_INFO_GBN = '03' AND DEL_FG = 'N' THEN TO_CHAR(MARKT_DATE,'YYYY-MM-DD') ELSE NULL END AS EM_DT
            FROM LF_DMUSER.TB_MEMBER_MKT_INFO
            WHERE 1=1
                AND MEM_NO =  #{mem_no} 
            UNION ALL
            SELECT 
                 #{mem_no}  AS MEM_NO,   
                '' AS MARKT_YN,
                NULL AS MARKT_DT,
                '' AS DM_YN,
                NULL AS DM_DT,
                '' AS EM_YN,
                NULL AS EM_DT
            FROM DUAL
        )
        GROUP BY MEM_NO
    		
   </select>
   
   <update id="DlwNewTypeMainConsMap.updateMktInfo" parameterType="map" timeout="10">
        /* DlwNewTypeMainConsMap.updateMktInfo */                
		 UPDATE TB_MEMBER_MKT_INFO
		 SET DEL_FG = 'Y', UPD_DM = SYSDATE, UPD_MAN = #{rgsr_id}
		 WHERE 1=1
			 AND MEM_NO =  #{mem_no} 
			 AND MARKT_INFO_GBN = #{gubun} 	 	 
    </update>
    
    <insert id="DlwNewTypeMainConsMap.insertMktInfo" parameterType="map" timeout="10">
        /* DlwNewTypeMainConsMap.insertMktInfo */   
         INSERT INTO TB_MEMBER_MKT_INFO(
         	MEM_NO, MARKT_INFO_GBN, MARKT_DATE, DEL_FG, REG_DM, REG_MAN 
         )        
         VALUES (
         	#{mem_no} , #{gubun}, SYSDATE, 'N', SYSDATE, #{rgsr_id}
         )     	 
    </insert> 
    
    <select id="DlwNewTypeMainConsMap.getDlwMarketinghstrList" parameterType="map" resultType="resultMap">
    
		SELECT
			/* DlwNewTypeMainConsMap.getDlwMarketinghstrList */
		    MEM_NO,
		    DECODE(MARKT_INFO_GBN,'01','마케팅','02','DM','EM') AS MARKT_INFO_GBN,
		    DEL_FG,
		    CASE WHEN DEL_FG = 'N' THEN REG_MAN ELSE UPD_MAN END AS REG_MAN,
		    TO_CHAR(CASE WHEN DEL_FG = 'N' THEN MARKT_DATE ELSE UPD_DM END,'YYYYMMDD') AS REG_DM
		FROM
		(
		    SELECT
		        MEM_NO,
		        MARKT_INFO_GBN,        
		        MARKT_DATE,
		        DEL_FG,
		        REG_MAN,
		        UPD_MAN,
		        UPD_DM
		    FROM LF_DMUSER.TB_MEMBER_MKT_INFO
		    WHERE MEM_NO = #{mem_no} 
		    ORDER BY MARKT_DATE DESC
		)
    		
	</select>
	
    <select id="DlwNewTypeMainConsMap.getDlwMarketGroup" parameterType="map" resultType="resultMap">
    
		SELECT
			/* DlwNewTypeMainConsMap.getDlwMarketGroup */
	    	MEM_NO
                 ,DECODE(SUM(DECODE(MARKT_INFO_GBN, '01', CNT)), '1', 'Y', 'N') AS MKT_YN
                 ,DECODE(SUM(DECODE(MARKT_INFO_GBN, '02', CNT)), '1', 'Y', 'N') AS DM_YN
                 ,DECODE(SUM(DECODE(MARKT_INFO_GBN, '03', CNT)), '1', 'Y', 'N') AS EM_YN
        FROM (
               SELECT MEM_NO, MARKT_INFO_GBN, COUNT(*) CNT
               FROM TB_MEMBER_MKT_INFO
               WHERE MEM_NO LIKE #{mem_no}
               AND DEL_FG = 'N'
               GROUP BY MEM_NO, MARKT_INFO_GBN
             )
        GROUP BY MEM_NO
    		
	</select>
	
    <update id="DlwNewTypeMainConsMap.mergeMktInfo" parameterType="map" timeout="10">
         /* DlwNewTypeMainConsMap.mergeMktInfo */                
		 MERGE INTO (SELECT *
                     FROM TB_MEMBER_MKT_INFO
                     WHERE DEL_FG = 'N') A
	     USING (SELECT #{mem_no} AS MEM_NO, #{mkt_gubun} AS GUBUN
	            FROM DUAL) B
	        ON (A.MEM_NO = B.MEM_NO AND A.MARKT_INFO_GBN = B.GUBUN)
	     WHEN MATCHED THEN
	          UPDATE SET DEL_FG = 'Y', UPD_DM = SYSDATE, UPD_MAN = #{rgsr_id}
	     WHEN NOT MATCHED THEN
	          INSERT (MEM_NO, MARKT_INFO_GBN, MARKT_DATE, DEL_FG, REG_DM, REG_MAN ) 
	          VALUES (#{mem_no} , #{mkt_gubun}, SYSDATE, 'N', SYSDATE, #{rgsr_id})
    </update>
    
    <update id="DlwNewTypeMainConsMap.updateMemberMkt" parameterType="map" timeout="3">
        /* DlwNewTypeMainConsMap.updateMemberMkt */
        UPDATE MEMBER 
        SET 
        	<if test="markt_agr_yn != null and markt_agr_yn != ''">        
            	MARKT_AGR_YN = #{markt_agr_yn},
            </if>
            <if test="dm_yn != null and dm_yn != ''">        
            	DM_YN = #{dm_yn},
            </if>
            <if test="email_yn != null and email_yn != ''">        
            	EMAIL_YN = #{email_yn},
            </if>
            UPD_DM = SYSDATE,
            UPD_MAN = #{rgsr_id}            
        WHERE MEM_NO = #{mem_no}
    </update>
</mapper>
