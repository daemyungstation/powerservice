<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="DlwCondMap">

    <sql id="DlwCondMap.selectCondition_fragment">
        <if test="rntm != null and rntm != ''">
            <choose>
                <when test="rntm.equalsIgnoreCase('all')">
                    AND FN_MON_COUNT - FN_MON_PAY_COUNT_TRU <![CDATA[>]]> 0
                </when>
                <when test="rntm.equalsIgnoreCase('one_year')">
                    AND (FN_MON_COUNT - FN_MON_PAY_COUNT_TRU  <![CDATA[>]]> 12 AND FN_MON_COUNT - FN_MON_PAY_COUNT_TRU  <![CDATA[<]]> 25)
                </when>
                <when test="rntm.equalsIgnoreCase('two_year')">
                    AND (FN_MON_COUNT - FN_MON_PAY_COUNT_TRU  <![CDATA[>]]> 24 AND FN_MON_COUNT - FN_MON_PAY_COUNT_TRU  <![CDATA[<]]> 37)
                </when>
                <when test="rntm.equalsIgnoreCase('three_year')">
                    AND FN_MON_COUNT - FN_MON_PAY_COUNT_TRU  <![CDATA[>=]]> 37
                </when>
                <otherwise>
                    AND FN_MON_COUNT - FN_MON_PAY_COUNT_TRU = #{rntm}
                </otherwise>
            </choose>
        </if>
    </sql>

    <select id="DlwCondMap.getInqCondQry" parameterType="map" resultType="String">
        <!-- DM sql-id : selectInqCondQry -->

        /* DlwCondMap.getInqCondQry */
        SELECT NVL(FN_INQ_COND_GEN(#{menu_cd}, #{cl_cd}), '') FROM DUAL
    </select>

    <select id="DlwCondMap.getClList" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectClList -->


        /* DlwCondMap.getClList */
        WITH CTE(MENU_CD, CL_CD, HIGH_CL_CD, CL_NM, LVL, SORT_COL, ORDER_TURN) AS
        (SELECT SUBSTR( #{menu_cd},0,3)
              , SUBSTR( 0000,0,3)
              , TO_CHAR('      ')
              , TO_CHAR('메뉴')
              , 0
              , TO_CHAR('0000')
              , 0 ORDR_TURN  FROM DUAL

         UNION ALL

         SELECT A.MENU_CD
              , A.CL_CD
              , A.HIGH_CL_CD
              , A.CL_NM
              , B.LVL + 1 LVL
              , TO_CHAR( B.SORT_COL || ' ' || LPAD(TO_CHAR(A.LVL), 4, '0') || ' ' || LPAD(TO_CHAR(A.ORDR_TURN), 4, '0')) AS SORT_COL
              , A.ORDR_TURN
           FROM CL_CD A
                INNER JOIN CTE B On A.HIGH_CL_CD = B.CL_CD
          WHERE A.MENU_CD = #{menu_cd}
            AND A.DEL_FG = 'N'
        )

        SELECT A.MENU_CD AS MENU_CD, A.CL_CD, A.HIGH_CL_CD, A.CL_NM, A.LVL LVL
             , A.SORT_COL SORTCOL
             <!--
             , CONVERT(VARCHAR, DENSE_RANK() OVER(ORDER BY A.HIGH_CL_CD)) GRPRANK -->

             , CASE WHEN A.HIGH_CL_CD = '0000'
                    THEN 'N'
                    ELSE NVL((SELECT SUMMRY_YN
                                   FROM CL_CD
                                  WHERE MENU_CD = A.MENU_CD
                                    AND CL_CD = A.HIGH_CL_CD), 'N') END AS SUMYN
             , A.ORDER_TURN
             , (SELECT SUM_INCLUD_YN FROM CL_CD WHERE MENU_CD = A.MENU_CD AND CL_CD = A.CL_CD) AS SUMINCLUDYN
          FROM CTE A
         WHERE (SELECT COUNT(*) FROM CL_CD WHERE MENU_CD = A.MENU_CD AND HIGH_CL_CD = A.CL_CD) <![CDATA[<=]]> 0
         ORDER BY SORT_COL
    </select>

    <!-- 종합 회원 현황 건수-->
    <select id="DlwCondMap.getCondMemCount" parameterType="map" resultType="int">


        <if test="dept_cd != null and dept_cd != ''">
            WITH CTE (DEPT_CD, DEPT_NM, HIGH_DEPT_CD)
              AS (SELECT DEPT_CD, DEPT_NM, HIGH_DEPT_CD
                    FROM DEPARTMENT
                   WHERE DEPT_CD = #{dept_cd}
                   UNION ALL
                  SELECT A.DEPT_CD, A.DEPT_NM, A.HIGH_DEPT_CD
                    FROM DEPARTMENT A, CTE B
                   WHERE A.HIGH_DEPT_CD = B.DEPT_CD
                  )
        </if>
        SELECT COUNT(*)
          FROM (SELECT ACCNT.ACCNT_NO
                     , KSTBIT AS ACCNT_STAT
                     , DEP.LOC_CD
                     , DEP.DEPT_KIND
                     , EMP.DEPT_CD
                     , MEM.MEM_NM
                     , MEM.MEM_NO
                     , FN_COM_NM('06', EMP.POSN_CD) AS POSN_NM
                     , EMP.EMPLE_NM
                     , EMP.EMPLE_NO
                     , FN_EMPLE_NM(ACCNT.BEF_EMPLE_CD) AS BEF_EMPLE_NM
                     , ACCNT.BEF_EMPLE_CD
                     , FN_EMPLE_NM(EMP.RENF_MAN_ID) AS RENF_MAN_NM
                     , FN_DEPT_NM(EMP.DEPT_CD) AS DEPT_NM
                     , ACCNT.JOIN_DT AS JOIN_DT
                     , TO_CHAR(ACCNT.REG_DM,'YYYY/MM/DD') AS REG_DM
                     , PROD.PROD_NM
                     , PROD.PROD_CD
                     , ACCNT.NEW_CHAN_GUNSU
                     ,CEIL(MONTHS_BETWEEN(TO_DATE(REPLACE(#{now_dm},'/','')|| '01','YYYYMMDD') , TO_DATE(JOIN_DT, 'YYYYMMDD')))+1  NO_COUNT


                     ,(SELECT nvl(MAX(NO),0) FROM PAY_MNG
                              WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N' AND
                                  SUBSTR( PAY_DAY,1, 6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')) + ACCNT.NEW_CHAN_GUNSU AS NO_COUNT

                     , (SELECT NVL(MAX(NO),0) FROM PAY_MNG WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N' AND SUBSTR( PAY_DAY,1, 6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')) AS EXPR_NO
                     , (SELECT PAY_DAY AS PAY_DAY
                        FROM PAY_MNG
                        WHERE ACCNT_NO =ACCNT.ACCNT_NO  AND DEL_FG = 'N' AND
                              NO = (SELECT  MAX(NO)
                                    FROM PAY_MNG
                                    WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG='N' AND SUBSTR( PAY_DAY,1, 6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')  )) AS PAY_DAY
                     , FN_YEN_CHE_APP_DT(ACCNT.ACCNT_NO,TO_CHAR(ADD_MONTHS(to_date( REPLACE(#{now_dm},'/','') || '01'),1) -1,'YYYYMMDD') ) YEN_CHE
                     , FN_YEN_CHE_APP_DT2(ACCNT.ACCNT_NO, TO_CHAR(ADD_MONTHS(to_date( REPLACE(#{now_dm},'/','') || '01'),1) -1,'YYYYMMDD')) YEN_CHE2
                     , FN_COM_NM('01', ACCNT.PAY_MTHD) PAY_MTHD_NM
                 <!--작업     ,(SELECT NOTE FROM (SELECT  REPLACE(REPLACE(REPLACE(NOTE,'             ', ' '),'          ', ' '), '         ', ' ') AS NOTE
                                              FROM HP_CALL_HIST
                                              WHERE ACCNT_NO =ACCNT.ACCNT_NO AND
                                              TO_CHAR( REG_DM, 'YYYYMM') <![CDATA[<=]]> REPLACE(#{now_dm},'/','')
                                              ORDER BY SEQ DESC ) WHERE ROWNUM=1
                                              ) AS HP_NOTE -->
                     ,' ' AS HP_NOTE
                     , CASE WHEN ACCNT.PAY_MTHD = '04'
                            THEN (SELECT ICHAE_DT FROM CMS_MEM WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N')
                            WHEN ACCNT.PAY_MTHD = '06'
                            THEN (SELECT PAY_DT FROM CARD_MEM WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N')
                            ELSE (SELECT ICHAE_DT FROM CMS_MEM WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N')
                       END ICHAE_DT
                     , NVL((SELECT
                                     CASE
                                          WHEN PAY_MTHD = '01' THEN '손수'
                                          WHEN PAY_MTHD = '03' THEN '자동이체'
                                          WHEN PAY_MTHD = '04' THEN 'CMS'
                                          WHEN PAY_MTHD = '05' THEN '무통장'
                                          WHEN PAY_MTHD = '06' THEN '카드'
                                          WHEN PAY_MTHD = '09' THEN '전환대체'
                                          WHEN PAY_MTHD = '19' THEN '가수대체'
                                          WHEN PAY_MTHD = '99' THEN '신규대체'
                                     END
                               FROM PAY_MNG WHERE ACCNT_NO = ACCNT.ACCNT_NO AND NO = 1 AND DEL_FG='N' AND   SUBSTR(PAY_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','') ), '미납') AS MTHD_STAT
                     , CASE WHEN MEM.CONTC_TM = '0' THEN '휴대폰'
                                    WHEN MEM.CONTC_TM = '1' THEN '자택'
                                    WHEN MEM.CONTC_TM = '2' THEN '직장'
                               END CONTC_T
                     , SUBSTR(MEM.CONTC_TM_FROM,1,2) ||':'|| SUBSTR(MEM.CONTC_TM_FROM,3,4) || '-' || SUBSTR(MEM.CONTC_TM_TO,1,2) ||':'|| SUBSTR(MEM.CONTC_TM_FROM,3,4) AS CONTC_TI
                     , PROD.EXPR_NO - ACCNT.NEW_CHAN_GUNSU - (SELECT NVL(MAX(NO),0) FROM PAY_MNG WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG='N' AND SUBSTR(PAY_DAY, 1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')) AS REMAIN_NO
                     , EMP.DEL_FG
                     , PROD.MON_PAY_AMT * ACCNT.NEW_CHAN_GUNSU AS NEW_CHAN_AMT
                     , MEM.CELL
                     <!--
                     , REPLACE(REPLACE(REPLACE(CASE WHEN ACCNT.POST_MTR_RCV = '01' THEN '우 ' + MEM.HOME_ZIP + ') '+ MEM.HOME_ADDR+ ' ' + MEM.HOME_ADDR2
                                ELSE '우 ' + MEM.WRPL_ZIP + ') '+ MEM.WRPL_ADDR + ' ' + MEM.WRPL_ADDR2
                         END, CHAR(13), ' '), CHAR(10), ' '), CHAR(9), ' ') AS HOME_ADDR
                      -->
                     , REPLACE(REPLACE(REPLACE(REPLACE(REPLACE((CASE WHEN ACCNT.POST_MTR_RCV = '02'  THEN MEM.WRPL_ZIP
                             ELSE  MEM.HOME_ZIP
                        END) || ')' ||
                       (CASE     WHEN ACCNT.POST_MTR_RCV = '02'  THEN MEM.WRPL_ADDR || ' ' ||  MEM.WRPL_ADDR2
                             ELSE  MEM.HOME_ADDR || ' ' ||  MEM.HOME_ADDR2
                        END), '          ', ' '), '             ', ' '),'         ', ' '), '   ', ' '), '  ', ' ') AS HOME_ADDR
                     , CASE WHEN ACCNT.POST_MTR_RCV = '01' THEN  MEM.HOME_ADDR
                                ELSE MEM.WRPL_ADDR
                         END AS HOME_ADDR_ETC
                  <!--작업   , CASE  WHEN HOME_ADDR != '' THEN FN_SPLITSTRING(HOME_ADDR,' ',0)
                             WHEN WRPL_ADDR != '' THEN FN_SPLITSTRING(WRPL_ADDR,' ',0)
                             ELSE  ''
                         END AS LOC  -->
                       , '' AS  LOC
                <!--작업      , NVL(( SELECT
                                   CASE    WHEN AGE / 10 = 0 THEN '영유아'
                                           WHEN AGE / 10 = 1 THEN '10대'
                                           WHEN AGE / 10 = 2 THEN '20대'
                                           WHEN AGE / 10 = 3 THEN '30대'
                                           WHEN AGE / 10 = 4 THEN '40대'
                                           WHEN AGE / 10 = 5 THEN '50대'
                                           WHEN AGE / 10 = 6 THEN '60대'
                                           WHEN AGE / 10 = 7 THEN '70대'
                                           WHEN AGE / 10 = 8 THEN '80대'
                                           WHEN AGE / 10 = 9 THEN '90대'
                                           WHEN AGE / 10 = 10 THEN '100대'
                                           ELSE '기타'
                                       END
                                   FROM (SELECT  TRUNC(( ( SYSDATE - to_date(MBR.BRTH_MON_DAY))  /365.254) +1) AGE
                                           FROM MEMBER MBR
                                          WHERE MBR.MEM_NO =MEM.MEM_NO
                                            AND NVL(LENGTH(FN_DECRYPT_TEMP(IDN_NO)),0) != 10 )  A
                                             ),'') AGE
                                              -->
                      ,' ' AS AGE
                     , FN_COM_NM('113',NVL(ACCNT.JOIN_CL,'01')) AS JOIN_CL
                     , REPLACE(REPLACE(REPLACE(MEM.NOTE,'             ', ' '),'          ', ' '),'         ', ' ') AS NOTE
                     ,  REPLACE(REPLACE(REPLACE(CASE WHEN ACCNT.INSPL_ZIP IS NOT NULL THEN ('우 ' || ACCNT.INSPL_ZIP || ') '|| ACCNT.INSPL_ADDR || ' ' || ACCNT.INSPL_ADDR2)
                                                    ELSE ''
                                                END, '             ', ' '), '          ', ' '), '         ', ' ') INSPL_ADDR
                     , FN_EMPLE_NM(RECOMMEND_EMPLE_NO) RECOMNM
                     , NVL(ACCNT.B2B_EMPLE_NO, '') B2B_EMPLE_NO
                     , NVL(( SELECT COM_NM FROM  B2BCOMCD WHERE COM_CD = ACCNT.B2B_COMP_CD ), '') AS B2B_COMP_NM
                     , ACCNT.RECOMMEND_EMPLE_NO
                     , NVL((SELECT AFFL_YN FROM B2BCOMCD WHERE COM_CD = ACCNT.B2B_COMP_CD), '') AFFL_YN
                     , NVL(FN_COM_NM('0125', (SELECT SALE_TYPE FROM B2BCOMCD WHERE COM_CD = ACCNT.B2B_COMP_CD)), '') SALE_TYPE
                     , (SELECT SALE_TYPE FROM B2BCOMCD WHERE COM_CD = ACCNT.B2B_COMP_CD) SALE_CL
                     , NVL(ACCNT.JA_SUBSCRPT_YN, 'N') JA_SUBSCRPT_YN
                     , NVL((SELECT MODEL_CL_NM FROM PRODUCT_MODEL_CL_CD WHERE MODEL_CL_CD = ACCNT.PROD_MODEL_KIND), '') MODEL_CL_NM
            <!-- 작업   , NVL((SELECT PMD.MODEL_NM
                         FROM PRODUCT_MODEL_MST PMM
                              INNER JOIN DBO.PRODUCT_MODEL_DTL PMD ON PMM.SEQ = PMD.SEQ
                                                                  AND PMD.MODEL_CD = ACCNT.PROD_MODEL_CD
                        WHERE PMM.PROD_KIND = ACCNT.PROD_MODEL_KIND
                          AND PMM.PROD_CD = ACCNT.PROD_CD
                          AND PMM.DEL_FG='N'
                          ), '') MODEL_NM   */   -->
                     , '' AS   MODEL_NM
                     , NVL((SELECT PROD_KIND_NM FROM PRODUCT_KIND
                                WHERE MODEL_CL_CD = ACCNT.PROD_MODEL_KIND AND SEQ = ACCNT.PROD_KIND), '') PROD_KIND_NM
             <!--/*작업       , CASE WHEN LENTH(EMP.GRP_EMPLE_NO) <![CDATA[>]]> 0 THEN EMP.GRP_EMPLE_NO
                         ELSE
                         (
                           CASE WHEN (SELECT LENTH(GRP_EMPLE_NO) FROM EMPLOYEE WHERE EMPLE_NO=ACCNT.RECOMMEND_EMPLE_NO ) <![CDATA[>]]> 0 THEN
                               (SELECT GRP_EMPLE_NO FROM EMPLOYEE WHERE EMPLE_NO=ACCNT.RECOMMEND_EMPLE_NO )
                               ELSE
                               ( CASE WHEN (SELECT LEN(GRP_EMPLE_NO) FROM EMPLOYEE WHERE EMPLE_NO= EMP.RENF_MAN_ID ) <![CDATA[>]]> 0 THEN
                                   (SELECT GRP_EMPLE_NO FROM EMPLOYEE WHERE EMPLE_NO= EMP.RENF_MAN_ID )
                                   ELSE
                                   (
                                     CASE WHEN (SELECT LEN(GRP_EMPLE_NO) FROM EMPLOYEE WHERE
                                               EMPLE_NO = (SELECT RENF_MAN_ID FROM EMPLOYEE WHERE EMPLE_NO=ACCNT.RECOMMEND_EMPLE_NO)
                                             ) <![CDATA[>]]> 0  THEN (SELECT GRP_EMPLE_NO FROM EMPLOYEE WHERE
                                               EMPLE_NO = (SELECT RENF_MAN_ID FROM EMPLOYEE WHERE EMPLE_NO=ACCNT.RECOMMEND_EMPLE_NO)
                                             )
                                      ELSE '' END
                                    )
                                   END
                               ) END
                          )END AS GRP_EMPLE_NO */  -->
                     ,   ''  AS  GRP_EMPLE_NO
                     , ( SELECT NVL(PROG_SEQ,0) FROM ALOW_DTL_PROGS PROGS WHERE PROGS.ACCNT_NO = ACCNT.ACCNT_NO AND PROGS.PAY_NO = 1 ) AS F_PROG_SEQ
                     , ( SELECT  MAX(NVL(PROG_SEQ,0)) FROM ALOW_DTL_PROGS PROGS WHERE PROGS.ACCNT_NO = ACCNT.ACCNT_NO ) AS L_PROG_SEQ
                     , FN_EMPLE_NM(ACCNT.REG_MAN) REGMAN
                     , MEM.CREDIT_RATING CREDITRATING
                     , FN_COM_NM('0153', MEM.CREDIT_RATING) CREDITRATINGNM
                     , MEM.BRTH_MON_DAY AS BRTH_MON_DAY
                     , MEM.CRDT_MNG_NO
                     , NVL(ACCNT.INSPL_PHONE, '') INSPL_PHONE
                     , FN_COM_NM('0123', MEM.SEX) SEXNM
                     , CASE WHEN RESN.ACCNT_NO IS NULL THEN ''
                            WHEN RESN.RESN_CL = '02' THEN '미대상'
                               WHEN NVL(RESN.RESN_PROC_YN, '') = 'Y' THEN '처리'
                               ELSE '미처리'
                          END RESN_PROC_YN
                     , ACCNT.ID_NO
                     , ACCNT.ORDER_NUM
                     , NVL(FN_COM_NM('0173', ACCNT.LG_SHOP_INFO), '') LGSHOPNM
                        FROM MEMBER MEM
                           , MEM_PROD_ACCNT ACCNT
                             LEFT OUTER JOIN RESCISSION RESN ON RESN.ACCNT_NO = ACCNT.ACCNT_NO AND RESN.DEL_FG = 'N'
                           , PRODUCT PROD , EMPLOYEE EMP  ,DEPARTMENT DEP
                        WHERE MEM.MEM_NO = ACCNT.MEM_NO
                        AND  ACCNT.EMPLE_NO = EMP.EMPLE_NO
                        AND  ACCNT.PROD_CD = PROD.PROD_CD
                        AND  DEP.DEPT_CD = EMP.DEPT_CD
                        AND ACCNT.DEL_FG= 'N'
                        <if test="dataAthrQury != null and dataAthrQury != ''">
                            ${dataAthrQury}
                        </if>
                        <if test="prod_cl != null and prod_cl != ''">
                            AND PROD.PROD_CL = #{prod_cl}
                        </if>
                         <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                            AND JOIN_DT BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
                         </if>
                         <if test="(stt_dt == null or stt_dt == '') and (end_dt != null and end_dt != '')">
                             AND JOIN_DT <![CDATA[<=]]> REPLACE(#{end_dt},'/','')
                         </if>
                ) A
            <if test="dept_cd != null and dept_cd != ''">
                INNER JOIN CTE C  ON A.DEPT_CD  = C.DEPT_CD
            </if>
             LEFT OUTER JOIN RESCISSION R  ON A.ACCNT_NO = R.ACCNT_NO AND R.DEL_FG='N' AND SUBSTR(R.RESN_PROC_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')
             LEFT OUTER JOIN EVENT E  ON A.ACCNT_NO=E.ACCNT_NO AND E.DEL_FG='N' AND SUBSTR(E.EVENT_REG_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm} ,'/','')
             LEFT JOIN
             (
                <!-- 수정 : 결합상품 수정(추가금 따로 저장)에 따른 조회 쿼리 수정 BY LBK_2012_11_29 -->
                SELECT ACCNT_NO
                    , SUM(PAY_AMT) PAY_AMT
                    , SUM(PAY_AMT_DTL) ALLT_AMT
                    , SUM(PAY_AMT_DTL1) ADD_AMT
                 FROM (SELECT P.ACCNT_NO
                            , P.NO
                            , P.PAY_AMT
                            , 0 PAY_AMT_DTL
                            , 0 PAY_AMT_DTL1
                            , P.PAY_DAY  AS PAY_DAY
                            , P.PAY_MTHD
                         FROM PAY_MNG P
                        WHERE P.DEL_FG= 'N'
                          AND SUBSTR( P.PAY_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')

                        UNION ALL

                        SELECT PD.ACCNT_NO
                             , PD.NO
                             , 0 PAY_AMT
                             , PD.PAY_AMT PAY_AMT_DTL
                             , 0 PAY_AMT_DTL1
                             , PD.PAY_DAY AS PAY_DAY
                             , PD.PAY_MTHD
                          FROM PAY_MNG_DTL PD
                         WHERE PD.DEL_FG= 'N'
                           AND SUBSTR( PD.PAY_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')

                         UNION ALL

                        SELECT PD1.ACCNT_NO
                             , PD1.NO
                             , 0 PAY_AMT
                             , 0 PAY_AMT_DTL
                             , PD1.PAY_AMT PAY_AMT_DTL1
                             , PD1.PAY_DAY AS PAY_DAY
                             , PD1.PAY_MTHD
                          FROM PAY_MNG_DTL1 PD1
                         WHERE PD1.DEL_FG= 'N'
                           AND SUBSTR( PD1.PAY_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')
                )A
                GROUP BY ACCNT_NO
            )TMP ON TMP.ACCNT_NO = A.ACCNT_NO

            WHERE 1=1
             AND SUBSTR(A.JOIN_DT,1,6) <![CDATA[<=]]>  REPLACE(#{now_dm},'/','')
             <if test="sale_typ != null and sale_typ != ''">
                 AND A.SALE_CL = #{sale_typ}
             </if>
             <if test="dept_kind != null and dept_kind != ''">
                 AND A.DEPT_KIND = #{dept_kind}
             </if>

             <if test="ress_chk.equalsIgnoreCase('N')">
             <!-- <if test="ress_chk == 'N'"> -->
                 AND  A.ACCNT_STAT  not in ('03')
             </if>
             <if test="event_chk.equalsIgnoreCase('N')">
             <!-- <if test="event_chk == 'N'"> -->
                   AND  A.ACCNT_STAT  not in ('04')
             </if>
             <if test="newamt_chk.equalsIgnoreCase('N')">
             <!-- <if test="newamt_chk == 'N'"> -->
                 AND NEW_CHAN_AMT <![CDATA[>]]> 0
             </if>
             <if test="exno_chk.equalsIgnoreCase('N')">
             <!-- <if test="exno_chk == 'N'"> -->
                 AND REMAIN_NO = 0
             </if>
             <if test="exno_chk.equalsIgnoreCase('Y') and expiry_chk.equalsIgnoreCase('N')">
             <!-- <if test="exno_chk == 'Y' and expiry_chk == 'N'"> -->
                 AND REMAIN_NO <![CDATA[>]]> 0
             </if>
             <if test="mem_stat == '01'"> <!-- 손수 정상 -->
                 AND MTHD_STAT = '손수'
             </if>
             <if test="mem_stat == '03'"> <!-- 자동이체 -->
                 AND MTHD_STAT = '자동이체'
             </if>
             <if test="mem_stat == '04'"> <!-- CMS 정상 -->
                 AND MTHD_STAT = 'CMS'
             </if>
             <if test="mem_stat == '05'"> <!-- 무통장 정상 -->
                 AND MTHD_STAT = '무통장'
             </if>
             <if test="mem_stat == '06'"> <!-- 카드 정상 -->
                 AND MTHD_STAT = '카드'
             </if>
             <if test="mem_stat == '09'"> <!-- 전환 대체 -->
                 AND MTHD_STAT = '전환대체'
             </if>
             <if test="mem_stat == '19'"> <!-- 가수 대체-->
                 AND MTHD_STAT = '가수대체'
             </if>
             <if test="mem_stat == '99'"> <!-- 신규 대체 -->
                 AND MTHD_STAT = '신규대체'
             </if>
             <if test="mem_stat == '9999'"> <!-- 미납 -->
                 AND MTHD_STAT = '미납'
             </if>
             <if test="prod_cd != null and prod_cd != ''">
                 AND PROD_CD = #{prod_cd}
             </if>
             <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                AND JOIN_DT BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
             </if>
             <if test="(stt_dt == null or stt_dt == '') and (end_dt != null and end_dt != '')">
                 AND JOIN_DT <![CDATA[<=]]> REPLACE(#{end_dt},'/','')
             </if>
             <if test="emple_no != null and emple_no != ''">
                 <!-- 사원 인트라넷에서 담당자, 모집자 다 보기 위해 추가 -->
                 <if test="emple_gbn == '00'">
                     AND (A.EMPLE_NO = #{emple_no} OR A.BEF_EMPLE_CD = #{emple_no})
                 </if>
                 <if test="emple_gbn == '01'">
                     AND A.EMPLE_NO  = #{emple_no}
                 </if>
                 <if test="emple_gbn == '02'">
                     AND A.BEF_EMPLE_CD  = #{emple_no}
                 </if>
                 <if test="emple_gbn == null or emple_gbn == ''">
                     AND A.EMPLE_NO  = #{emple_no}
                 </if>
             </if>
             <if test="recom_emple_no != null and recom_emple_no != ''">
                 AND A.RECOMMEND_EMPLE_NO = #{recom_emple_no}
             </if>
    </select>


    <!-- -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- -->
    <!-- -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- -->
    <!-- -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- -->
    <!-- -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- -->
    <!-- -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- -->
    <!-- -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*- -->

    <!-- 종합 회원 현황 -->
    <select id="DlwCondMap.getCondMemList" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectCondMemList -->


        <if test="dept_cd != null and dept_cd != ''">
            WITH CTE (DEPT_CD, DEPT_NM, HIGH_DEPT_CD)
              AS (SELECT DEPT_CD, DEPT_NM, HIGH_DEPT_CD
                    FROM DEPARTMENT
                   WHERE DEPT_CD = #{dept_cd}
                   UNION ALL
                  SELECT A.DEPT_CD, A.DEPT_NM, A.HIGH_DEPT_CD
                    FROM DEPARTMENT A, CTE B
                   WHERE A.HIGH_DEPT_CD = B.DEPT_CD
                  )
        </if>
        SELECT *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*
                  FROM (SELECT E.EVENT_REG_DAY
                             , CASE WHEN R.RESN_CL = '01' THEN '해약'
                                    WHEN R.RESN_CL = '02' THEN '청약철회'
                                    WHEN R.RESN_CL = '03' THEN '무환급해약'
                                    WHEN NVL(E.ACCNT_NO,'00') != '00' THEN '행사'
                                    ELSE CASE WHEN REMAIN_NO = 0 THEN '만기'
                                              ELSE '미만기'
                                          END
                                END JOIN_STAT
                             , CASE WHEN NVL(R.RESN_CL, '00') = '01' OR NVL(R.RESN_CL, '00') = '02' OR NVL(R.RESN_CL, '00') = '03' OR NVL(E.ACCNT_NO,'00') != '00' THEN ''
                                    ELSE A.YEN_CHE_TMP
                                END YEN_CHE
                             , CASE WHEN REMAIN_NO = 0 THEN 0
                                    ELSE NO_CNT_TMP
                                END NO_CNT
                             , A.*
                             , NVL(TMP.PAY_AMT,0) AS TOTAL
                             , NVL(TMP.ALLT_AMT,0) AS ALLT_AMT
                             , NVL(TMP.ADD_AMT,0) AS ADD_AMT
                          FROM (SELECT ACCNT.ACCNT_NO
                                     , KSTBIT AS ACCNT_STAT
                                     , DEP.LOC_CD
                                     , DEP.DEPT_KIND
                                     , EMP.DEPT_CD
                                     , MEM.MEM_NM
                                     , MEM.MEM_NO
                                     , FN_COM_NM('06', EMP.POSN_CD) AS POSN_NM
                                     , EMP.EMPLE_NM
                                     , EMP.EMPLE_NO
                                     , FN_EMPLE_NM(ACCNT.BEF_EMPLE_CD) AS BEF_EMPLE_NM
                                     , ACCNT.BEF_EMPLE_CD
                                     , FN_EMPLE_NM(EMP.RENF_MAN_ID) AS RENF_MAN_NM
                                     , FN_DEPT_NM(EMP.DEPT_CD) AS DEPT_NM
                                     , ACCNT.JOIN_DT AS JOIN_DT
                                     , TO_CHAR(ACCNT.REG_DM,'YYYY/MM/DD') AS REG_DM
                                     , PROD.PROD_NM
                                     , PROD.PROD_CD
                                     , ACCNT.NEW_CHAN_GUNSU
                                     ,CEIL(MONTHS_BETWEEN(TO_DATE(REPLACE(#{now_dm},'/','')|| '01','YYYYMMDD') , TO_DATE(JOIN_DT, 'YYYYMMDD')))+1  NO_CNT_TMP


                                     ,(SELECT nvl(MAX(NO),0) FROM PAY_MNG
                                              WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N' AND
                                                  SUBSTR( PAY_DAY,1, 6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')) + ACCNT.NEW_CHAN_GUNSU AS NO_COUNT

                                     , (SELECT NVL(MAX(NO),0) FROM PAY_MNG WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N' AND SUBSTR( PAY_DAY,1, 6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')) AS EXPR_NO
                                     , (SELECT PAY_DAY AS PAY_DAY
                                        FROM PAY_MNG
                                        WHERE ACCNT_NO =ACCNT.ACCNT_NO  AND DEL_FG = 'N' AND
                                              NO = (SELECT  MAX(NO)
                                                    FROM PAY_MNG
                                                    WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG='N' AND SUBSTR( PAY_DAY,1, 6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')  )) AS PAY_DAY
                                     , FN_YEN_CHE_APP_DT(ACCNT.ACCNT_NO,TO_CHAR(ADD_MONTHS(to_date( REPLACE(#{now_dm},'/','') || '01'),1) -1,'YYYYMMDD') ) YEN_CHE_TMP
                                     , FN_YEN_CHE_APP_DT2(ACCNT.ACCNT_NO, TO_CHAR(ADD_MONTHS(to_date( REPLACE(#{now_dm},'/','') || '01'),1) -1,'YYYYMMDD')) YEN_CHE2
                                     , FN_COM_NM('01', ACCNT.PAY_MTHD) PAY_MTHD_NM
                                 <!--작업     ,(SELECT NOTE FROM (SELECT  REPLACE(REPLACE(REPLACE(NOTE,'             ', ' '),'          ', ' '), '         ', ' ') AS NOTE
                                                              FROM HP_CALL_HIST
                                                              WHERE ACCNT_NO =ACCNT.ACCNT_NO AND
                                                              TO_CHAR( REG_DM, 'YYYYMM') <![CDATA[<=]]> REPLACE(#{now_dm},'/','')
                                                              ORDER BY SEQ DESC ) WHERE ROWNUM=1
                                                              ) AS HP_NOTE -->
                                     ,' ' AS HP_NOTE
                                     , CASE WHEN ACCNT.PAY_MTHD = '04'
                                            THEN (SELECT ICHAE_DT FROM CMS_MEM WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N')
                                            WHEN ACCNT.PAY_MTHD = '06'
                                            THEN (SELECT PAY_DT FROM CARD_MEM WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N')
                                            ELSE (SELECT ICHAE_DT FROM CMS_MEM WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N')
                                       END ICHAE_DT
                                     , NVL((SELECT
                                                     CASE
                                                          WHEN PAY_MTHD = '01' THEN '손수'
                                                          WHEN PAY_MTHD = '03' THEN '자동이체'
                                                          WHEN PAY_MTHD = '04' THEN 'CMS'
                                                          WHEN PAY_MTHD = '05' THEN '무통장'
                                                          WHEN PAY_MTHD = '06' THEN '카드'
                                                          WHEN PAY_MTHD = '09' THEN '전환대체'
                                                          WHEN PAY_MTHD = '19' THEN '가수대체'
                                                          WHEN PAY_MTHD = '99' THEN '신규대체'
                                                     END
                                               FROM PAY_MNG WHERE ACCNT_NO = ACCNT.ACCNT_NO AND NO = 1 AND DEL_FG='N' AND   SUBSTR(PAY_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','') ), '미납') AS MTHD_STAT
                                     , CASE WHEN MEM.CONTC_TM = '0' THEN '휴대폰'
                                                    WHEN MEM.CONTC_TM = '1' THEN '자택'
                                                    WHEN MEM.CONTC_TM = '2' THEN '직장'
                                               END CONTC_T
                                     , SUBSTR(MEM.CONTC_TM_FROM,1,2) ||':'|| SUBSTR(MEM.CONTC_TM_FROM,3,4) || '-' || SUBSTR(MEM.CONTC_TM_TO,1,2) ||':'|| SUBSTR(MEM.CONTC_TM_FROM,3,4) AS CONTC_TI
                                     , PROD.EXPR_NO - ACCNT.NEW_CHAN_GUNSU - (SELECT NVL(MAX(NO),0) FROM PAY_MNG WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG='N' AND SUBSTR(PAY_DAY, 1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')) AS REMAIN_NO
                                     , EMP.DEL_FG
                                     , PROD.MON_PAY_AMT * ACCNT.NEW_CHAN_GUNSU AS NEW_CHAN_AMT
                                     , MEM.CELL
                                     <!--
                                     , REPLACE(REPLACE(REPLACE(CASE WHEN ACCNT.POST_MTR_RCV = '01' THEN '우 ' + MEM.HOME_ZIP + ') '+ MEM.HOME_ADDR+ ' ' + MEM.HOME_ADDR2
                                                ELSE '우 ' + MEM.WRPL_ZIP + ') '+ MEM.WRPL_ADDR + ' ' + MEM.WRPL_ADDR2
                                         END, CHAR(13), ' '), CHAR(10), ' '), CHAR(9), ' ') AS HOME_ADDR
                                      -->
                                     , REPLACE(REPLACE(REPLACE(REPLACE(REPLACE((CASE WHEN ACCNT.POST_MTR_RCV = '02'  THEN MEM.WRPL_ZIP
                                             ELSE  MEM.HOME_ZIP
                                        END) || ')' ||
                                       (CASE     WHEN ACCNT.POST_MTR_RCV = '02'  THEN MEM.WRPL_ADDR || ' ' ||  MEM.WRPL_ADDR2
                                             ELSE  MEM.HOME_ADDR || ' ' ||  MEM.HOME_ADDR2
                                        END), '          ', ' '), '             ', ' '),'         ', ' '), '   ', ' '), '  ', ' ') AS HOME_ADDR
                                     , CASE WHEN ACCNT.POST_MTR_RCV = '01' THEN  MEM.HOME_ADDR
                                                ELSE MEM.WRPL_ADDR
                                         END AS HOME_ADDR_ETC
                                  <!--작업   , CASE  WHEN HOME_ADDR != '' THEN FN_SPLITSTRING(HOME_ADDR,' ',0)
                                             WHEN WRPL_ADDR != '' THEN FN_SPLITSTRING(WRPL_ADDR,' ',0)
                                             ELSE  ''
                                         END AS LOC  -->
                                       , '' AS  LOC
                                <!--작업      , NVL(( SELECT
                                                   CASE    WHEN AGE / 10 = 0 THEN '영유아'
                                                           WHEN AGE / 10 = 1 THEN '10대'
                                                           WHEN AGE / 10 = 2 THEN '20대'
                                                           WHEN AGE / 10 = 3 THEN '30대'
                                                           WHEN AGE / 10 = 4 THEN '40대'
                                                           WHEN AGE / 10 = 5 THEN '50대'
                                                           WHEN AGE / 10 = 6 THEN '60대'
                                                           WHEN AGE / 10 = 7 THEN '70대'
                                                           WHEN AGE / 10 = 8 THEN '80대'
                                                           WHEN AGE / 10 = 9 THEN '90대'
                                                           WHEN AGE / 10 = 10 THEN '100대'
                                                           ELSE '기타'
                                                       END
                                                   FROM (SELECT  TRUNC(( ( SYSDATE - to_date(MBR.BRTH_MON_DAY))  /365.254) +1) AGE
                                                           FROM MEMBER MBR
                                                          WHERE MBR.MEM_NO =MEM.MEM_NO
                                                            AND NVL(LENGTH(FN_DECRYPT_TEMP(IDN_NO)),0) != 10 )  A
                                                             ),'') AGE
                                                              -->
                                      ,' ' AS AGE
                                     , FN_COM_NM('113',NVL(ACCNT.JOIN_CL,'01')) AS JOIN_CL
                                     , REPLACE(REPLACE(REPLACE(MEM.NOTE,'             ', ' '),'          ', ' '),'         ', ' ') AS NOTE
                                     ,  REPLACE(REPLACE(REPLACE(CASE WHEN ACCNT.INSPL_ZIP IS NOT NULL THEN ('우 ' || ACCNT.INSPL_ZIP || ') '|| ACCNT.INSPL_ADDR || ' ' || ACCNT.INSPL_ADDR2)
                                                                    ELSE ''
                                                                END, '             ', ' '), '          ', ' '), '         ', ' ') INSPL_ADDR
                                     , FN_EMPLE_NM(RECOMMEND_EMPLE_NO) RECOMNM
                                     , NVL(ACCNT.B2B_EMPLE_NO, '') B2B_EMPLE_NO
                                     , NVL(( SELECT COM_NM FROM  B2BCOMCD WHERE COM_CD = ACCNT.B2B_COMP_CD ), '') AS B2B_COMP_NM
                                     , ACCNT.RECOMMEND_EMPLE_NO
                                     , NVL((SELECT AFFL_YN FROM B2BCOMCD WHERE COM_CD = ACCNT.B2B_COMP_CD), '') AFFL_YN
                                     , NVL(FN_COM_NM('0125', (SELECT SALE_TYPE FROM B2BCOMCD WHERE COM_CD = ACCNT.B2B_COMP_CD)), '') SALE_TYPE
                                     , (SELECT SALE_TYPE FROM B2BCOMCD WHERE COM_CD = ACCNT.B2B_COMP_CD) SALE_CL
                                     , NVL(ACCNT.JA_SUBSCRPT_YN, 'N') JA_SUBSCRPT_YN
                                     , NVL((SELECT MODEL_CL_NM FROM PRODUCT_MODEL_CL_CD WHERE MODEL_CL_CD = ACCNT.PROD_MODEL_KIND), '') MODEL_CL_NM
                            <!-- 작업   , NVL((SELECT PMD.MODEL_NM
                                         FROM PRODUCT_MODEL_MST PMM
                                              INNER JOIN DBO.PRODUCT_MODEL_DTL PMD ON PMM.SEQ = PMD.SEQ
                                                                                  AND PMD.MODEL_CD = ACCNT.PROD_MODEL_CD
                                        WHERE PMM.PROD_KIND = ACCNT.PROD_MODEL_KIND
                                          AND PMM.PROD_CD = ACCNT.PROD_CD
                                          AND PMM.DEL_FG='N'
                                          ), '') MODEL_NM   */   -->
                                     , '' AS   MODEL_NM
                                     , NVL((SELECT PROD_KIND_NM FROM PRODUCT_KIND
                                                WHERE MODEL_CL_CD = ACCNT.PROD_MODEL_KIND AND SEQ = ACCNT.PROD_KIND), '') PROD_KIND_NM
                             <!--/*작업       , CASE WHEN LENTH(EMP.GRP_EMPLE_NO) <![CDATA[>]]> 0 THEN EMP.GRP_EMPLE_NO
                                         ELSE
                                         (
                                           CASE WHEN (SELECT LENTH(GRP_EMPLE_NO) FROM EMPLOYEE WHERE EMPLE_NO=ACCNT.RECOMMEND_EMPLE_NO ) <![CDATA[>]]> 0 THEN
                                               (SELECT GRP_EMPLE_NO FROM EMPLOYEE WHERE EMPLE_NO=ACCNT.RECOMMEND_EMPLE_NO )
                                               ELSE
                                               ( CASE WHEN (SELECT LEN(GRP_EMPLE_NO) FROM EMPLOYEE WHERE EMPLE_NO= EMP.RENF_MAN_ID ) <![CDATA[>]]> 0 THEN
                                                   (SELECT GRP_EMPLE_NO FROM EMPLOYEE WHERE EMPLE_NO= EMP.RENF_MAN_ID )
                                                   ELSE
                                                   (
                                                     CASE WHEN (SELECT LEN(GRP_EMPLE_NO) FROM EMPLOYEE WHERE
                                                               EMPLE_NO = (SELECT RENF_MAN_ID FROM EMPLOYEE WHERE EMPLE_NO=ACCNT.RECOMMEND_EMPLE_NO)
                                                             ) <![CDATA[>]]> 0  THEN (SELECT GRP_EMPLE_NO FROM EMPLOYEE WHERE
                                                               EMPLE_NO = (SELECT RENF_MAN_ID FROM EMPLOYEE WHERE EMPLE_NO=ACCNT.RECOMMEND_EMPLE_NO)
                                                             )
                                                      ELSE '' END
                                                    )
                                                   END
                                               ) END
                                          )END AS GRP_EMPLE_NO */  -->
                                     ,   ''  AS  GRP_EMPLE_NO
                                     , ( SELECT NVL(PROG_SEQ,0) FROM ALOW_DTL_PROGS PROGS WHERE PROGS.ACCNT_NO = ACCNT.ACCNT_NO AND PROGS.PAY_NO = 1 ) AS F_PROG_SEQ
                                     , ( SELECT  MAX(NVL(PROG_SEQ,0)) FROM ALOW_DTL_PROGS PROGS WHERE PROGS.ACCNT_NO = ACCNT.ACCNT_NO ) AS L_PROG_SEQ
                                     , FN_EMPLE_NM(ACCNT.REG_MAN) REGMAN
                                     , MEM.CREDIT_RATING CREDITRATING
                                     , FN_COM_NM('0153', MEM.CREDIT_RATING) CREDITRATINGNM
                                     , MEM.BRTH_MON_DAY AS BRTH_MON_DAY
                                     , MEM.CRDT_MNG_NO
                                     , NVL(ACCNT.INSPL_PHONE, '') INSPL_PHONE
                                     , FN_COM_NM('0123', MEM.SEX) SEXNM
                                     , CASE WHEN RESN.ACCNT_NO IS NULL THEN ''
                                            WHEN RESN.RESN_CL = '02' THEN '미대상'
                                               WHEN NVL(RESN.RESN_PROC_YN, '') = 'Y' THEN '처리'
                                               ELSE '미처리'
                                          END RESN_PROC_YN
                                     , ACCNT.ID_NO
                                     , ACCNT.ORDER_NUM
                                     , NVL(FN_COM_NM('0173', ACCNT.LG_SHOP_INFO), '') LGSHOPNM
                                        FROM MEMBER MEM
                                           , MEM_PROD_ACCNT ACCNT
                                             LEFT OUTER JOIN RESCISSION RESN ON RESN.ACCNT_NO = ACCNT.ACCNT_NO AND RESN.DEL_FG = 'N'
                                           , PRODUCT PROD , EMPLOYEE EMP  ,DEPARTMENT DEP
                                        WHERE MEM.MEM_NO = ACCNT.MEM_NO
                                        AND  ACCNT.EMPLE_NO = EMP.EMPLE_NO
                                        AND  ACCNT.PROD_CD = PROD.PROD_CD
                                        AND  DEP.DEPT_CD = EMP.DEPT_CD
                                        AND ACCNT.DEL_FG= 'N'
                                        <if test="dataAthrQury != null and dataAthrQury != ''">
                                            ${dataAthrQury}
                                        </if>
                                        <if test="prod_cl != null and prod_cl != ''">
                                            AND PROD.PROD_CL = #{prod_cl}
                                        </if>
                                         <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                            AND JOIN_DT BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
                                         </if>
                                         <if test="(stt_dt == null or stt_dt == '') and (end_dt != null and end_dt != '')">
                                             AND JOIN_DT <![CDATA[<=]]> REPLACE(#{end_dt},'/','')
                                         </if>
                                ) A
                            <if test="dept_cd != null and dept_cd != ''">
                                INNER JOIN CTE C  ON A.DEPT_CD  = C.DEPT_CD
                            </if>
                             LEFT OUTER JOIN RESCISSION R  ON A.ACCNT_NO = R.ACCNT_NO AND R.DEL_FG='N' AND SUBSTR(R.RESN_PROC_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')
                             LEFT OUTER JOIN EVENT E  ON A.ACCNT_NO=E.ACCNT_NO AND E.DEL_FG='N' AND SUBSTR(E.EVENT_REG_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm} ,'/','')
                             LEFT JOIN
                             (
                                <!-- 수정 : 결합상품 수정(추가금 따로 저장)에 따른 조회 쿼리 수정 BY LBK_2012_11_29 -->
                                SELECT ACCNT_NO
                                        , SUM(PAY_AMT) PAY_AMT
                                        , SUM(PAY_AMT_DTL) ALLT_AMT
                                        , SUM(PAY_AMT_DTL1) ADD_AMT
                                     FROM (SELECT P.ACCNT_NO
                                                , P.NO
                                                , P.PAY_AMT
                                                , 0 PAY_AMT_DTL
                                                , 0 PAY_AMT_DTL1
                                                , P.PAY_DAY  AS PAY_DAY
                                                , P.PAY_MTHD
                                             FROM PAY_MNG P
                                            WHERE P.DEL_FG= 'N'
                                              AND SUBSTR( P.PAY_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')

                                            UNION ALL

                                            SELECT PD.ACCNT_NO
                                                 , PD.NO
                                                 , 0 PAY_AMT
                                                 , PD.PAY_AMT PAY_AMT_DTL
                                                 , 0 PAY_AMT_DTL1
                                                 , PD.PAY_DAY AS PAY_DAY
                                                 , PD.PAY_MTHD
                                              FROM PAY_MNG_DTL PD
                                             WHERE PD.DEL_FG= 'N'
                                               AND SUBSTR( PD.PAY_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')

                                             UNION ALL

                                            SELECT PD1.ACCNT_NO
                                                 , PD1.NO
                                                 , 0 PAY_AMT
                                                 , 0 PAY_AMT_DTL
                                                 , PD1.PAY_AMT PAY_AMT_DTL1
                                                 , PD1.PAY_DAY AS PAY_DAY
                                                 , PD1.PAY_MTHD
                                              FROM PAY_MNG_DTL1 PD1
                                             WHERE PD1.DEL_FG= 'N'
                                               AND SUBSTR( PD1.PAY_DAY,1,6) <![CDATA[<=]]> REPLACE(#{now_dm},'/','')
                                    )A
                                    GROUP BY ACCNT_NO
                                )TMP ON TMP.ACCNT_NO = A.ACCNT_NO

                                WHERE 1=1
                                 AND SUBSTR(A.JOIN_DT,1,6) <![CDATA[<=]]>  REPLACE(#{now_dm},'/','')
                                 <if test="sale_typ != null and sale_typ != ''">
                                     AND A.SALE_CL = #{sale_typ}
                                 </if>
                                 <if test="dept_kind != null and dept_kind != ''">
                                     AND A.DEPT_KIND = #{dept_kind}
                                 </if>
                                 <if test="ress_chk.equalsIgnoreCase('N')">
                                 <!-- <if test="ress_chk == 'N'"> -->
                                     AND  A.ACCNT_STAT  not in ('03')
                                 </if>
                                 <if test="event_chk.equalsIgnoreCase('N')">
                                 <!-- <if test="event_chk == 'N'"> -->
                                       AND  A.ACCNT_STAT  not in ('04')
                                 </if>
                                 <if test="newamt_chk.equalsIgnoreCase('N')">
                                 <!-- <if test="newamt_chk == 'N'"> -->
                                     AND NEW_CHAN_AMT <![CDATA[>]]> 0
                                 </if>
                                 <if test="exno_chk.equalsIgnoreCase('N')">
                                 <!-- <if test="exno_chk == 'N'"> -->
                                     AND REMAIN_NO = 0
                                 </if>
                                 <if test="exno_chk.equalsIgnoreCase('Y') and expiry_chk.equalsIgnoreCase('N')">
                                 <!-- <if test="exno_chk == 'Y' and expiry_chk == 'N'"> -->
                                     AND REMAIN_NO <![CDATA[>]]> 0
                                 </if>
                                 <if test="mem_stat == '01'"> <!-- 손수 정상 -->
                                     AND MTHD_STAT = '손수'
                                 </if>
                                 <if test="mem_stat == '03'"> <!-- 자동이체 -->
                                     AND MTHD_STAT = '자동이체'
                                 </if>
                                 <if test="mem_stat == '04'"> <!-- CMS 정상 -->
                                     AND MTHD_STAT = 'CMS'
                                 </if>
                                 <if test="mem_stat == '05'"> <!-- 무통장 정상 -->
                                     AND MTHD_STAT = '무통장'
                                 </if>
                                 <if test="mem_stat == '06'"> <!-- 카드 정상 -->
                                     AND MTHD_STAT = '카드'
                                 </if>
                                 <if test="mem_stat == '09'"> <!-- 전환 대체 -->
                                     AND MTHD_STAT = '전환대체'
                                 </if>
                                 <if test="mem_stat == '19'"> <!-- 가수 대체-->
                                     AND MTHD_STAT = '가수대체'
                                 </if>
                                 <if test="mem_stat == '99'"> <!-- 신규 대체 -->
                                     AND MTHD_STAT = '신규대체'
                                 </if>
                                 <if test="mem_stat == '9999'"> <!-- 미납 -->
                                     AND MTHD_STAT = '미납'
                                 </if>
                                 <if test="prod_cd != null and prod_cd != ''">
                                     AND PROD_CD = #{prod_cd}
                                 </if>
                                 <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                    AND JOIN_DT BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
                                 </if>
                                 <if test="(stt_dt == null or stt_dt == '') and (end_dt != null and end_dt != '')">
                                     AND JOIN_DT <![CDATA[<=]]> REPLACE(#{end_dt},'/','')
                                 </if>
                                 <if test="emple_no != null and emple_no != ''">
                                     <!-- 사원 인트라넷에서 담당자, 모집자 다 보기 위해 추가 -->
                                     <if test="emple_gbn == '00'">
                                         AND (A.EMPLE_NO = #{emple_no} OR A.BEF_EMPLE_CD = #{emple_no})
                                     </if>
                                     <if test="emple_gbn == '01'">
                                         AND A.EMPLE_NO  = #{emple_no}
                                     </if>
                                     <if test="emple_gbn == '02'">
                                         AND A.BEF_EMPLE_CD  = #{emple_no}
                                     </if>
                                     <if test="emple_gbn == null or emple_gbn == ''">
                                         AND A.EMPLE_NO  = #{emple_no}
                                     </if>
                                 </if>
                                 <if test="recom_emple_no != null and recom_emple_no != ''">
                                     AND A.RECOMMEND_EMPLE_NO = #{recom_emple_no}
                                 </if>
                       ) X
                ) Z
     <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
         <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
         ]]>
     </if>
    </select>

    <!-- 입금현황 건수 -->
    <select id="DlwCondMap.getPayCount" parameterType="map" resultType="int">
        /* DlwCondMap.getPayCount */


        <if test="dept_cd != null and dept_cd != ''">
        WITH CTE (DEPT_CD, DEPT_NM, HIGH_DEPT_CD)
        AS
        (
            SELECT  DEPT_CD, DEPT_NM, HIGH_DEPT_CD
              FROM  DEPARTMENT
             WHERE  DEPT_CD = #{dept_cd}

            UNION ALL

            SELECT  A.DEPT_CD, A.DEPT_NM, A.HIGH_DEPT_CD
              FROM  DEPARTMENT A, CTE B
             WHERE  A.HIGH_DEPT_CD = B.DEPT_CD
        )
        </if>
        SELECT COUNT(*)
          FROM DBO.MEM_PROD_ACCNT MPA
         INNER JOIN DBO.MEMBER MBR  ON MPA.MEM_NO = MBR.MEM_NO AND MBR.DEL_FG = 'N'
         INNER JOIN EMPLOYEE EMP  ON MPA.EMPLE_NO = EMP.EMPLE_NO
         INNER JOIN DBO.DEPARTMENT DEPT  ON DEPT.DEPT_CD = EMP.DEPT_CD AND DEPT.USE_YN = 'Y'
         INNER JOIN DBO.PRODUCT P  ON P.PROD_CD = MPA.PROD_CD
         <if test="dept_cd != null and dept_cd != ''">
         INNER JOIN CTE  ON CTE.DEPT_CD = EMP.DEPT_CD
         </if>
          LEFT OUTER JOIN dbo.RESCISSION R  ON MPA.ACCNT_NO = R.ACCNT_NO AND R.DEL_FG = 'N'
          LEFT JOIN EVENT ev  ON ev.accnt_no = MPA.accnt_no and ev.del_fg='N'
          LEFT OUTER JOIN OCB_HIST O  ON MPA.ACCNT_NO = O.ACCNT_NO AND O.USE_YN = 'Y' AND O.STAT = '01' AND O.OCB_CD != ''
         INNER JOIN (
                   SELECT TBL.ACCNT_NO
                            , TBL.NO
                            , TBL.PAY_AMT
                            , TBL.ALLT_AMT
                            , TBL.ADD_AMT
                            , TBL.PAY_MTHD
                            , TBL.PAY_DAY
                            , CASE WHEN TBL.NO = 1 AND (TBL.PAY_AMT != 0 OR TBL.ALLT_AMT != 0 OR TBL.ADD_AMT != 0) THEN 1 ELSE 0 END NEW_STAT
                            , TBL.GASU_AMT
                            , TBL.NEW_YN
                     FROM (
                        SELECT PM.ACCNT_NO
                             , CASE WHEN CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                    THEN PM.PAY_AMT
                                    ELSE 0
                               END PAY_AMT
                             , CASE
                                    WHEN PMD.PAY_DAY IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD.PAY_AMT
                                    ELSE 0
                               END ALLT_AMT
                             , CASE
                                    WHEN PMD1.PAY_DAY IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD1.PAY_AMT
                                    ELSE 0
                               END ADD_AMT
                             , CASE
                                    WHEN (CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PM.NO
                                    ELSE CASE WHEN PMD.NO IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                              THEN PMD.NO
                                              WHEN PMD1.NO IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                              THEN PMD1.NO
                                              ELSE PM.NO
                                         END
                               END NO
                             , CASE
                                    WHEN (CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PM.PAY_MTHD
                                    ELSE CASE WHEN PMD.PAY_MTHD IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                              THEN PMD.PAY_MTHD
                                              WHEN PMD1.PAY_MTHD IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                              THEN PMD1.PAY_MTHD
                                              ELSE PM.PAY_MTHD
                                         END
                               END PAY_MTHD
                             , CASE
                                    WHEN (CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PM.STAT
                                    ELSE CASE WHEN PMD.STAT IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                              THEN PMD.STAT
                                              WHEN PMD1.STAT IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                              THEN PMD1.STAT
                                              ELSE PM.STAT
                                         END
                               END STAT
                             , CASE WHEN CONVERT(VARCHAR, PM.PAY_DAY, 112) IS NOT NULL AND (CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PM.PAY_DAY
                                    WHEN CONVERT(VARCHAR, PMD.PAY_DAY, 112) IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD.PAY_DAY
                                    WHEN CONVERT(VARCHAR, PMD1.PAY_DAY, 112) IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD1.PAY_DAY
                                    ELSE ''
                               END PAY_DAY
                             , 0 GASU_AMT
                             , PM.NEW_YN
                          FROM PAY_MNG PM
                               LEFT OUTER JOIN PAY_MNG_DTL PMD  ON PM.ACCNT_NO = PMD.ACCNT_NO AND PMD.DEL_FG = 'N' AND PM.NO = PMD.NO
                               LEFT OUTER JOIN PAY_MNG_DTL1 PMD1  ON PMD.ACCNT_NO = PMD1.ACCNT_NO AND PMD1.DEL_FG = 'N' AND PM.NO = PMD1.NO
                         WHERE 1 = 1
                           AND PM.DEL_FG = 'N'
                           AND (
                                CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                OR
                                CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                OR
                                CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                               )

                        UNION ALL

                        SELECT PMD.ACCNT_NO
                             , 0 PAY_AMT
                             , PMD.PAY_AMT ALLT_AMT
                             , CASE
                                    WHEN (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD1.PAY_AMT
                                    ELSE 0
                               END ADD_AMT
                             , CASE
                                    WHEN (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD.NO
                                    WHEN (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD1.NO
                                    ELSE PMD.NO
                               END NO
                             , CASE
                                    WHEN (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD.PAY_MTHD
                                    WHEN (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD1.PAY_MTHD
                                    ELSE PMD.PAY_MTHD
                               END PAY_MTHD
                             , CASE
                                    WHEN (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD.STAT
                                    WHEN (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD1.STAT
                                    ELSE PMD.STAT
                               END STAT
                             , CASE WHEN PMD.PAY_DAY IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD.PAY_DAY
                                    WHEN PMD1.PAY_DAY IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                    THEN PMD1.PAY_DAY
                                    ELSE ''
                               END PAY_DAY
                             , 0 GASU_AMT
                             , '미대상' NEW_YN
                          FROM PAY_MNG_DTL PMD
                               LEFT OUTER JOIN PAY_MNG PM  ON PM.ACCNT_NO = PMD.ACCNT_NO AND PM.DEL_FG = 'N' AND PM.NO = PMD.NO
                               LEFT OUTER JOIN PAY_MNG_DTL1 PMD1  ON PMD.ACCNT_NO = PMD1.ACCNT_NO AND PMD1.DEL_FG = 'N' AND PMD.NO = PMD1.NO
                         WHERE 1 = 1
                           AND PMD.DEL_FG = 'N'
                           AND PM.ACCNT_NO IS NULL
                           AND (
                                CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                OR
                                CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                               )

                        UNION ALL

                        SELECT PMD1.ACCNT_NO
                             , 0 PAY_AMT
                             , 0 ALLT_AMT
                             , PMD1.PAY_AMT
                             , PMD1.NO
                             , PMD1.PAY_MTHD
                             , PMD1.STAT
                             , CASE WHEN PMD1.PAY_DAY IS NOT NULL THEN PMD1.PAY_DAY
                                    WHEN PM.PAY_DAY IS NOT NULL THEN PM.PAY_DAY
                                    WHEN PMD.PAY_DAY IS NOT NULL THEN PMD.PAY_DAY
                                    ELSE ''
                               END PAY_DAY
                             , 0 GASU_AMT
                             , '미대상' NEW_YN
                          FROM PAY_MNG_DTL1 PMD1
                               LEFT OUTER JOIN PAY_MNG PM  ON PM.ACCNT_NO = PMD1.ACCNT_NO AND PM.DEL_FG = 'N' AND PM.NO = PMD1.NO
                               LEFT OUTER JOIN PAY_MNG_DTL PMD  ON PMD.ACCNT_NO = PMD1.ACCNT_NO AND PMD.DEL_FG = 'N' AND PMD.NO = PMD1.NO
                         WHERE 1 = 1
                           AND PMD1.DEL_FG = 'N'
                           AND PM.ACCNT_NO IS NULL
                           AND PMD.ACCNT_NO IS NULL
                           AND CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}

                        UNION ALL

                        SELECT GAR.ACCNT_NO
                             , 0 PAY_AMT
                             , 0 ALLT_AMT
                             , 0 ADD_AMT
                             , GAR.PAY_NO NO
                             , GAR.PAY_MTHD
                             , '' STAT
                             , GAR.PAY_DAY
                             , ISNULL(GAR.GASU_AMT, 0) + ISNULL(GAR.GASU_ALLT_AMT, 0) + ISNULL(GAR.GASU_ADD_AMT, 0) GASU_AMT
                             , '미대상' NEW_YN
                          FROM DBO.GASU_AMT_REG GAR
                         WHERE GAR.DEL_FG = 'N'
                           AND CONVERT(VARCHAR, GAR.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                   ) TBL
             WHERE (TBL.PAY_AMT != 0 OR TBL.ALLT_AMT != 0 OR TBL.ADD_AMT != 0 OR TBL.GASU_AMT != 0)
               ) PM ON PM.ACCNT_NO = MPA.ACCNT_NO
         WHERE 1=1
           AND MPA.DEL_FG = 'N'
           <if test="dataAthrQury != null and dataAthrQury != ''">
               ${dataAthrQury}
           </if>
           <if test="accnt_no != null and accnt_no != ''">
           AND MPA.ACCNT_NO = #{accnt_no}
           </if>
           <if test="prod_cd != null and prod_cd != ''">
           AND MPA.PROD_CD = #{prod_cd}
           </if>
           <if test="dept_kind != null and dept_kind != ''">
           AND DEPT.DEPT_KIND = #{dept_kind}
           </if>
           <if test="ocb_gubn.equalsIgnoreCase('Y')">
           AND CASE WHEN (P.MEMBERSHIP IS NOT NULL OR P.MEMBERSHIP != '')
                         AND
                         CONVERT(INT, LEFT(CONVERT(VARCHAR, GETDATE(), 112), 4)) - CONVERT(INT, LEFT(CONVERT(VARCHAR, ISNULL(MBR.BRTH_MON_DAY, '1900/01/01'), 112), 4)) -
                         (CASE WHEN CONVERT(INT, RIGHT(CONVERT(VARCHAR, GETDATE(), 112), 4)) <![CDATA[>=]]> CONVERT(INT, RIGHT(REPLACE(CONVERT(VARCHAR, ISNULL(MBR.BRTH_MON_DAY, '1900/01/01'), 112), '/', ''), 4))
                               THEN 0
                               ELSE 1
                          END) <![CDATA[>=]]>  14
                         AND
                         LEN(ISNULL(MBR.CI_VAL, '')) = 88
                    THEN 'OCB'
                    ELSE ''
               END = 'OCB'
           </if>
           <if test="ocb_gubn.equalsIgnoreCase('N')">
           AND CASE WHEN (P.MEMBERSHIP IS NOT NULL OR P.MEMBERSHIP != '')
                         AND
                         CONVERT(INT, LEFT(CONVERT(VARCHAR, GETDATE(), 112), 4)) - CONVERT(INT, LEFT(CONVERT(VARCHAR, ISNULL(MBR.BRTH_MON_DAY, '1900/01/01'), 112), 4)) -
                         (CASE WHEN CONVERT(INT, RIGHT(CONVERT(VARCHAR, GETDATE(), 112), 4)) <![CDATA[>=]]> CONVERT(INT, RIGHT(REPLACE(CONVERT(VARCHAR, ISNULL(MBR.BRTH_MON_DAY, '1900/01/01'), 112), '/', ''), 4))
                               THEN 0
                               ELSE 1
                          END) <![CDATA[>=]]> 14
                         AND
                         LEN(ISNULL(MBR.CI_VAL, '')) = 88
                    THEN 'OCB'
                    ELSE ''
               END = ''
           </if>
           <if test="emple_no != null and emple_no != ''">
           AND MPA.EMPLE_NO = #{emple_no}
           </if>
           <if test="dept_cd != null and dept_cd != ''">
                <if test="dept_cd == '0101'">
                AND ( E.DEPT_CD = #{dept_cd} OR E.HIGH_DEPT_CD = #{dept_cd} )
                </if>
           </if>
           <if test="pay_mthd != null and pay_mthd != ''">
           AND PM.PAY_MTHD = #{pay_mthd}
           </if>
           <if test="affl_yn.equalsIgnoreCase('Y')">
           AND ISNULL((SELECT AFFL_YN FROM B2BCOMCD WHERE COM_CD = MPA.B2B_COMP_CD), '') = 'Y'
           </if>
           <if test="affl_yn.equalsIgnoreCase('N')">
           AND ISNULL((SELECT AFFL_YN FROM B2BCOMCD WHERE COM_CD = MPA.B2B_COMP_CD), '') != 'Y'
           </if>
           <if test="recom_emple_no != null and recom_emple_no != ''">
               AND MPA.recommend_emple_no = #{recom_emple_no}
           </if>
           <if test="b2b_comp_cd != null and b2b_comp_cd != ''">
           AND MPA.B2B_COMP_CD = #{b2b_comp_cd}
           </if>
    </select>

    <!-- 입금현황 -->
    <select id="DlwCondMap.getPayList" parameterType="map" resultType="resultMap">
    <!-- sql-cond.xml : payList -->
        /* DlwCondMap.getPayList */


        <if test="dept_cd != null and dept_cd != ''">
        WITH CTE (DEPT_CD, DEPT_NM, HIGH_DEPT_CD)
        AS
        (
            SELECT  DEPT_CD, DEPT_NM, HIGH_DEPT_CD
              FROM  DEPARTMENT
             WHERE  DEPT_CD = #{dept_cd}

            UNION ALL

            SELECT  A.DEPT_CD, A.DEPT_NM, A.HIGH_DEPT_CD
              FROM  DEPARTMENT A, CTE B
             WHERE  A.HIGH_DEPT_CD = B.DEPT_CD
        )
        </if>
        SELECT *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*
                  FROM (SELECT MPA.ACCNT_NO
                             , CONVERT(VARCHAR, MPA.JOIN_DT, 112) AS JOIN_DT
                             , DBO.FN_COM_NM('01', PM.PAY_MTHD) AS PAY_MTHD
                             , MBR.MEM_NM
                             , EMP.EMPLE_NM
                             , DBO.FN_EMPLE_NM(MPA.BEF_EMPLE_CD) AS BEF_EMPLE_NM
                             , (SELECT DBO.FN_DEPT_NM(DEPT.DEPT_CD)) AS DEPT_NM
                             , '0' AS DC_AMT
                             , DBO.FN_YEN_CHE(MPA.ACCNT_NO) AS STAT
                             <!-- , CASE WHEN PM.NEW_STAT = 1 THEN '신규' WHEN PM.NEW_STAT > 1 THEN MNTN_COUNT ELSE '' END NEW_STAT -->
                             , DATEDIFF(MONTH, MPA.JOIN_DT, GETDATE()) + 1 AS NEW_STAT
                             , DBO.FN_EVENT(MPA.ACCNT_NO) AS EVENT_STAT
                             , CASE WHEN EV.EVENT_PROC_DAY IS NOT NULL THEN CONVERT(VARCHAR, EV.EVENT_PROC_DAY,112)
                                    WHEN R.RESN_ACPT_DAY IS NOT NULL THEN CONVERT(VARCHAR, R.RESN_ACPT_DAY,112)
                                    ELSE ''
                                END AS EVENT_STAT_DT
                             , DBO.FN_PROD_NM(MPA.PROD_CD) AS PROD_NM
                             , CASE WHEN (P.MEMBERSHIP IS NOT NULL OR P.MEMBERSHIP != '')
                                         AND
                                         CONVERT(INT, LEFT(CONVERT(VARCHAR, GETDATE(), 112), 4)) - CONVERT(INT, LEFT(CONVERT(VARCHAR, ISNULL(MBR.BRTH_MON_DAY, '1900/01/01'), 112), 4)) -
                                         (CASE WHEN CONVERT(INT, RIGHT(CONVERT(VARCHAR, GETDATE(), 112), 4)) <![CDATA[>=]]> CONVERT(INT, RIGHT(REPLACE(CONVERT(VARCHAR, ISNULL(MBR.BRTH_MON_DAY, '1900/01/01'), 112), '/', ''), 4))
                                               THEN 0
                                               ELSE 1
                                          END) <![CDATA[>=]]> 14
                                         AND
                                         LEN(ISNULL(MBR.CI_VAL, '')) = 88
                                    THEN 'OCB'
                                    ELSE ''
                                END AS MEMBERSHIP
                             , CASE WHEN O.ACCNT_NO IS NOT NULL
                                         OR
                                         MPA.OCB_GUBN = '00'
                                    THEN '발급완료'
                                    ELSE CASE WHEN ISNULL((SELECT TOP 1 CONVERT(FLOAT, OCB_POINT)
                                                            FROM DBO.OCB_CARD_CODE_MNG
                                                           WHERE CONVERT(VARCHAR, GETDATE(), 111) <![CDATA[>]]> CONVERT(VARCHAR, APP_DT, 111)
                                                             AND CARD_CODE = P.MEMBERSHIP
                                                             AND DEL_FG = 'N'
                                                           ORDER BY ROW_NUMBER()OVER(PARTITION BY CARD_CODE ORDER BY APP_DT DESC)), 0) <![CDATA[>]]> 0
                                              THEN '미발급'
                                              ELSE '미대상'
                                          END
                                END AS OCB_GUBUN
                             , PM.NO
                             , CONVERT(VARCHAR, PM.PAY_DAY, 112) AS PAY_DAY
                             , PM.PAY_AMT
                             , ALLT_AMT
                             , ADD_AMT
                             , MPA.NEW_CHAN_GUNSU
                             , ISNULL((SELECT AFFL_YN FROM B2BCOMCD WHERE COM_CD = MPA.B2B_COMP_CD), '') AS AFFL_YN
                             , DBO.FN_EMPLE_NM(MPA.RECOMMEND_EMPLE_NO) AS RECOMMEND_EMPLE_NM
                             , DBO.FN_DEPT_NM_BY_EMPLE_NO(MPA.RECOMMEND_EMPLE_NO) AS RECOM_DEPT_NM
                             , ( SELECT ISNULL(PROG_SEQ,0) FROM ALOW_DTL_PROGS PROGS WHERE PROGS.ACCNT_NO = MPA.ACCNT_NO AND PROGS.PAY_NO = 1 ) AS F_PROG_SEQ
                             , ( SELECT TOP 1 ISNULL(PROG_SEQ,0) FROM ALOW_DTL_PROGS PROGS WHERE PROGS.ACCNT_NO = MPA.ACCNT_NO ORDER BY PROG_SEQ DESC ) AS L_PROG_SEQ
                             , PM.GASU_AMT
                             , MPA.DED_NO
                             , CASE WHEN PM.NEW_YN = 'Y'
                                    THEN '미전송'
                                    WHEN PM.NEW_YN = 'N'
                                    THEN '전송'
                                    ELSE PM.NEW_YN
                                END AS NEW_YN
                             , CASE WHEN EV.ACCNT_NO IS NOT NULL AND (PM.PAY_DAY <![CDATA[>=]]> ISNULL(EV.EVENT_PROC_DAY, '9999/12/31'))
                                    THEN '행사후입금'
                                    ELSE ''
                                END AS PAY_AFTER_EVT
                          FROM DBO.MEM_PROD_ACCNT MPA
                         INNER JOIN DBO.MEMBER MBR  ON MPA.MEM_NO = MBR.MEM_NO AND MBR.DEL_FG = 'N'
                         INNER JOIN EMPLOYEE EMP  ON MPA.EMPLE_NO = EMP.EMPLE_NO
                         INNER JOIN DBO.DEPARTMENT DEPT  ON DEPT.DEPT_CD = EMP.DEPT_CD AND DEPT.USE_YN = 'Y'
                         INNER JOIN DBO.PRODUCT P  ON P.PROD_CD = MPA.PROD_CD
                         <if test="dept_cd != null and dept_cd != ''">
                         INNER JOIN CTE  ON CTE.DEPT_CD = EMP.DEPT_CD
                         </if>
                          LEFT OUTER JOIN dbo.RESCISSION R  ON MPA.ACCNT_NO = R.ACCNT_NO AND R.DEL_FG = 'N'
                          LEFT JOIN EVENT ev  ON ev.accnt_no = MPA.accnt_no and ev.del_fg='N'
                          LEFT OUTER JOIN OCB_HIST O  ON MPA.ACCNT_NO = O.ACCNT_NO AND O.USE_YN = 'Y' AND O.STAT = '01' AND O.OCB_CD != ''
                         INNER JOIN (
                                   SELECT TBL.ACCNT_NO
                                            , TBL.NO
                                            , TBL.PAY_AMT
                                            , TBL.ALLT_AMT
                                            , TBL.ADD_AMT
                                            , TBL.PAY_MTHD
                                            , TBL.PAY_DAY
                                            , CASE WHEN TBL.NO = 1 AND (TBL.PAY_AMT != 0 OR TBL.ALLT_AMT != 0 OR TBL.ADD_AMT != 0) THEN 1 ELSE 0 END NEW_STAT
                                            , TBL.GASU_AMT
                                            , TBL.NEW_YN
                                     FROM (
                                        SELECT PM.ACCNT_NO
                                             , CASE WHEN CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                                    THEN PM.PAY_AMT
                                                    ELSE 0
                                               END PAY_AMT
                                             , CASE
                                                    WHEN PMD.PAY_DAY IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD.PAY_AMT
                                                    ELSE 0
                                               END ALLT_AMT
                                             , CASE
                                                    WHEN PMD1.PAY_DAY IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD1.PAY_AMT
                                                    ELSE 0
                                               END ADD_AMT
                                             , CASE
                                                    WHEN (CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PM.NO
                                                    ELSE CASE WHEN PMD.NO IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                              THEN PMD.NO
                                                              WHEN PMD1.NO IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                              THEN PMD1.NO
                                                              ELSE PM.NO
                                                         END
                                               END NO
                                             , CASE
                                                    WHEN (CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PM.PAY_MTHD
                                                    ELSE CASE WHEN PMD.PAY_MTHD IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                              THEN PMD.PAY_MTHD
                                                              WHEN PMD1.PAY_MTHD IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                              THEN PMD1.PAY_MTHD
                                                              ELSE PM.PAY_MTHD
                                                         END
                                               END PAY_MTHD
                                             , CASE
                                                    WHEN (CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PM.STAT
                                                    ELSE CASE WHEN PMD.STAT IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                              THEN PMD.STAT
                                                              WHEN PMD1.STAT IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                              THEN PMD1.STAT
                                                              ELSE PM.STAT
                                                         END
                                               END STAT
                                             , CASE WHEN CONVERT(VARCHAR, PM.PAY_DAY, 112) IS NOT NULL AND (CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PM.PAY_DAY
                                                    WHEN CONVERT(VARCHAR, PMD.PAY_DAY, 112) IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD.PAY_DAY
                                                    WHEN CONVERT(VARCHAR, PMD1.PAY_DAY, 112) IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD1.PAY_DAY
                                                    ELSE ''
                                               END PAY_DAY
                                             , 0 GASU_AMT
                                             , PM.NEW_YN
                                          FROM PAY_MNG PM
                                               LEFT OUTER JOIN PAY_MNG_DTL PMD  ON PM.ACCNT_NO = PMD.ACCNT_NO AND PMD.DEL_FG = 'N' AND PM.NO = PMD.NO
                                               LEFT OUTER JOIN PAY_MNG_DTL1 PMD1  ON PMD.ACCNT_NO = PMD1.ACCNT_NO AND PMD1.DEL_FG = 'N' AND PM.NO = PMD1.NO
                                         WHERE 1 = 1
                                           AND PM.DEL_FG = 'N'
                                           AND (
                                                CONVERT(VARCHAR, PM.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                                OR
                                                CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                                OR
                                                CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                               )

                                        UNION ALL

                                        SELECT PMD.ACCNT_NO
                                             , 0 PAY_AMT
                                             , PMD.PAY_AMT ALLT_AMT
                                             , CASE
                                                    WHEN (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD1.PAY_AMT
                                                    ELSE 0
                                               END ADD_AMT
                                             , CASE
                                                    WHEN (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD.NO
                                                    WHEN (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD1.NO
                                                    ELSE PMD.NO
                                               END NO
                                             , CASE
                                                    WHEN (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD.PAY_MTHD
                                                    WHEN (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD1.PAY_MTHD
                                                    ELSE PMD.PAY_MTHD
                                               END PAY_MTHD
                                             , CASE
                                                    WHEN (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD.STAT
                                                    WHEN (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD1.STAT
                                                    ELSE PMD.STAT
                                               END STAT
                                             , CASE WHEN PMD.PAY_DAY IS NOT NULL AND (CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD.PAY_DAY
                                                    WHEN PMD1.PAY_DAY IS NOT NULL AND (CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt})
                                                    THEN PMD1.PAY_DAY
                                                    ELSE ''
                                               END PAY_DAY
                                             , 0 GASU_AMT
                                             , '미대상' NEW_YN
                                          FROM PAY_MNG_DTL PMD
                                               LEFT OUTER JOIN PAY_MNG PM  ON PM.ACCNT_NO = PMD.ACCNT_NO AND PM.DEL_FG = 'N' AND PM.NO = PMD.NO
                                               LEFT OUTER JOIN PAY_MNG_DTL1 PMD1  ON PMD.ACCNT_NO = PMD1.ACCNT_NO AND PMD1.DEL_FG = 'N' AND PMD.NO = PMD1.NO
                                         WHERE 1 = 1
                                           AND PMD.DEL_FG = 'N'
                                           AND PM.ACCNT_NO IS NULL
                                           AND (
                                                CONVERT(VARCHAR, PMD.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                                OR
                                                CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                               )

                                        UNION ALL

                                        SELECT PMD1.ACCNT_NO
                                             , 0 PAY_AMT
                                             , 0 ALLT_AMT
                                             , PMD1.PAY_AMT
                                             , PMD1.NO
                                             , PMD1.PAY_MTHD
                                             , PMD1.STAT
                                             , CASE WHEN PMD1.PAY_DAY IS NOT NULL THEN PMD1.PAY_DAY
                                                    WHEN PM.PAY_DAY IS NOT NULL THEN PM.PAY_DAY
                                                    WHEN PMD.PAY_DAY IS NOT NULL THEN PMD.PAY_DAY
                                                    ELSE ''
                                               END PAY_DAY
                                             , 0 GASU_AMT
                                             , '미대상' NEW_YN
                                          FROM PAY_MNG_DTL1 PMD1
                                               LEFT OUTER JOIN PAY_MNG PM  ON PM.ACCNT_NO = PMD1.ACCNT_NO AND PM.DEL_FG = 'N' AND PM.NO = PMD1.NO
                                               LEFT OUTER JOIN PAY_MNG_DTL PMD  ON PMD.ACCNT_NO = PMD1.ACCNT_NO AND PMD.DEL_FG = 'N' AND PMD.NO = PMD1.NO
                                         WHERE 1 = 1
                                           AND PMD1.DEL_FG = 'N'
                                           AND PM.ACCNT_NO IS NULL
                                           AND PMD.ACCNT_NO IS NULL
                                           AND CONVERT(VARCHAR, PMD1.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}

                                        UNION ALL

                                        SELECT GAR.ACCNT_NO
                                             , 0 PAY_AMT
                                             , 0 ALLT_AMT
                                             , 0 ADD_AMT
                                             , GAR.PAY_NO NO
                                             , GAR.PAY_MTHD
                                             , '' STAT
                                             , GAR.PAY_DAY
                                             , ISNULL(GAR.GASU_AMT, 0) + ISNULL(GAR.GASU_ALLT_AMT, 0) + ISNULL(GAR.GASU_ADD_AMT, 0) GASU_AMT
                                             , '미대상' NEW_YN
                                          FROM DBO.GASU_AMT_REG GAR
                                         WHERE GAR.DEL_FG = 'N'
                                           AND CONVERT(VARCHAR, GAR.PAY_DAY, 112) BETWEEN #{stt_dt} AND #{end_dt}
                                   ) TBL
                             WHERE (TBL.PAY_AMT != 0 OR TBL.ALLT_AMT != 0 OR TBL.ADD_AMT != 0 OR TBL.GASU_AMT != 0)
                               ) PM ON PM.ACCNT_NO = MPA.ACCNT_NO
                         WHERE 1=1
                           AND MPA.DEL_FG = 'N'
                           <if test="dataAthrQury != null and dataAthrQury != ''">
                               ${dataAthrQury}
                           </if>
                           <if test="accnt_no != null and accnt_no != ''">
                           AND MPA.ACCNT_NO = #{accnt_no}
                           </if>
                           <if test="prod_cd != null and prod_cd != ''">
                           AND MPA.PROD_CD = #{prod_cd}
                           </if>
                           <if test="dept_kind != null and dept_kind != ''">
                           AND DEPT.DEPT_KIND = #{dept_kind}
                           </if>
                           <if test="ocb_gubn.equalsIgnoreCase('Y')">
                           AND CASE WHEN (P.MEMBERSHIP IS NOT NULL OR P.MEMBERSHIP != '')
                                         AND
                                         CONVERT(INT, LEFT(CONVERT(VARCHAR, GETDATE(), 112), 4)) - CONVERT(INT, LEFT(CONVERT(VARCHAR, ISNULL(MBR.BRTH_MON_DAY, '1900/01/01'), 112), 4)) -
                                         (CASE WHEN CONVERT(INT, RIGHT(CONVERT(VARCHAR, GETDATE(), 112), 4)) <![CDATA[>=]]> CONVERT(INT, RIGHT(REPLACE(CONVERT(VARCHAR, ISNULL(MBR.BRTH_MON_DAY, '1900/01/01'), 112), '/', ''), 4))
                                               THEN 0
                                               ELSE 1
                                          END) <![CDATA[>=]]>  14
                                         AND
                                         LEN(ISNULL(MBR.CI_VAL, '')) = 88
                                    THEN 'OCB'
                                    ELSE ''
                               END = 'OCB'
                           </if>
                           <if test="ocb_gubn.equalsIgnoreCase('N')">
                           AND CASE WHEN (P.MEMBERSHIP IS NOT NULL OR P.MEMBERSHIP != '')
                                         AND
                                         CONVERT(INT, LEFT(CONVERT(VARCHAR, GETDATE(), 112), 4)) - CONVERT(INT, LEFT(CONVERT(VARCHAR, ISNULL(MBR.BRTH_MON_DAY, '1900/01/01'), 112), 4)) -
                                         (CASE WHEN CONVERT(INT, RIGHT(CONVERT(VARCHAR, GETDATE(), 112), 4)) <![CDATA[>=]]> CONVERT(INT, RIGHT(REPLACE(CONVERT(VARCHAR, ISNULL(MBR.BRTH_MON_DAY, '1900/01/01'), 112), '/', ''), 4))
                                               THEN 0
                                               ELSE 1
                                          END) <![CDATA[>=]]> 14
                                         AND
                                         LEN(ISNULL(MBR.CI_VAL, '')) = 88
                                    THEN 'OCB'
                                    ELSE ''
                               END = ''
                           </if>
                           <if test="emple_no != null and emple_no != ''">
                           AND MPA.EMPLE_NO = #{emple_no}
                           </if>
                           <if test="dept_cd != null and dept_cd != ''">
                                <if test="dept_cd == '0101'">
                                AND ( E.DEPT_CD = #{dept_cd} OR E.HIGH_DEPT_CD = #{dept_cd} )
                                </if>
                           </if>
                           <if test="pay_mthd != null and pay_mthd != ''">
                           AND PM.PAY_MTHD = #{pay_mthd}
                           </if>
                           <if test="affl_yn.equalsIgnoreCase('Y')">
                           AND ISNULL((SELECT AFFL_YN FROM B2BCOMCD WHERE COM_CD = MPA.B2B_COMP_CD), '') = 'Y'
                           </if>
                           <if test="affl_yn.equalsIgnoreCase('N')">
                           AND ISNULL((SELECT AFFL_YN FROM B2BCOMCD WHERE COM_CD = MPA.B2B_COMP_CD), '') != 'Y'
                           </if>
                           <if test="recom_emple_no != null and recom_emple_no != ''">
                               AND MPA.recommend_emple_no = #{recom_emple_no}
                           </if>
                           <if test="b2b_comp_cd != null and b2b_comp_cd != ''">
                           AND MPA.B2B_COMP_CD = #{b2b_comp_cd}
                           </if>
                       ) X
                ) Z
     <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
         <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
         ]]>
     </if>
    </select>

    <!-- 증서출력 구분 -->
    <select id="DlwCondMap.getCertfCond" parameterType="map" resultType="resultMap">
    <!-- sql-cond.xml : selectCertfCond -->


        SELECT /* DlwCondMap.getCertfCond */
               CL_CD AS CD
             , CL_NM AS CD_NM
          FROM CL_CD
         WHERE MENU_CD = #{menu_cd}
           AND DEL_FG = 'N'
           AND LVL = #{lvl}
           <if test="high_cl_cd != null and high_cl_cd != ''">
           AND HIGH_CL_CD = #{high_cl_cd}
           </if>
        ORDER BY ORDR_TURN
    </select>

    <!-- 연체현황 - 상품구분기준 -->
    <select id="DlwCondMap.getDelayPayByProd" parameterType="map" resultType="resultMap">

SELECT X.* FROM (
    /* DlwCondMap.getDelayPayByProd */
    <!-- SDP 연체구좌 및 월 연체금액 -->
    SELECT 'SDP' AS PROD_GBN,
          COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0010'
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL

    <!-- 대교 임직원 연체구좌 및 월 연체금액 -->
    SELECT '대교임직원' AS PROD_GBN,
          COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0018'
     AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>


     UNION ALL

    <!-- GS(가전) 연체구좌 및 월 연체금액 -->
    SELECT 'GS(가전)' AS PROD_GBN,
           COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0006'
     AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL

    <!-- GS(팝카드) 연체구좌 및 월 연체금액 -->
    SELECT 'GS(팝카드)' AS PROD_GBN,
             COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0019'
      AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>


     UNION ALL

    <!-- 결합L 연체구좌 및 월 연체금액 -->
    SELECT '결합L' AS PROD_GBN,
              COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0001'
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL

    <!-- LGU 연체구좌 및 월 연체금액 -->
    SELECT 'LGU' AS PROD_GBN,
            COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0008'
     AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL

    <!-- SKT 연체구좌 및 월 연체금액 -->
    SELECT 'SKT' AS PROD_GBN,
             COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0011'
      AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL

    <!--  S(홈쇼핑) 연체구좌 및 월 연체금액 -->
    SELECT 'S(홈쇼핑)' AS PROD_GBN,
        COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0002' AND NVL(SALE_TYPE,'') IN ('0027','0012')
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL

    <!--  S(기타) 연체구좌 및 월 연체금액 -->
    SELECT 'S(기타)' AS PROD_GBN,
          COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0002' AND NVL(SALE_TYPE,'') NOT IN ('0027','0012')
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL

    <!--  S(16 임직원) 연체구좌 및 월 연체금액 -->
    SELECT 'S(16 임직원)' AS PROD_GBN,
          COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0015'
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL

    <!--  L(16 임직원) 연체구좌 및 월 연체금액 -->
    SELECT 'L(16 임직원)' AS PROD_GBN,
          COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0014'
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL

    <!--  일반상품 외 연체구좌 및 월 연체금액 -->
    SELECT '일반상품 외' AS PROD_GBN,
            COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR IN ('0005','0004','0003','0016','0017')
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>
     UNION ALL

    <!--  LGB 연체구좌 및 월 연체금액 -->
    SELECT 'LGB' AS PROD_GBN,
           COUNT(ACCNT_NO) AS YEN_TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS YEN_REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS YEN_REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS YEN_REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE  SECTION_THR = '0007'
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR( REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND REPLACE(FN_EVENT_DAY,'/','') <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL

    <!--  후불제 연체구좌 및 월 연체금액 -->
    SELECT '후불제' AS PROD_GBN,
           0 AS YEN_TOT_ACCNT,
           0 AS YEN_REAL_PAY_TRU,
           0 AS YEN_REAL_PAY_REL,
           0 AS YEN_REAL_PAY_ADD,
           0 AS DELAY_PAY_TRU,
           0 AS DELAY_PAY_REL,
           0 AS DELAY_PAY_ADD,
           0 AS TOT_RESN_AMT
           FROM DUAL
)  X
    </select>





    <!-- 연체현황 - 전체실적(실납입) -->
    <select id="DlwCondMap.getRealPay" parameterType="map" resultType="resultMap">


    /* DlwCondMap.getRealPay */
    <!-- SDP 세부실적 -->
    SELECT 'SDP' AS PROD_GBN,
           COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0010'
       AND APP_MONTH =  SUBSTR(#{bas_dt},1,7)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!-- 대교 임직원 세부실적 -->
    SELECT '대교임직원' AS PROD_GBN,
             COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0018'
       AND APP_MONTH =  SUBSTR(#{bas_dt},1,7)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))


     UNION ALL

    <!--  GS(가전) 세부실적 -->
    SELECT 'GS(가전)' AS PROD_GBN,
            COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0006'
        AND APP_MONTH =  SUBSTR(#{bas_dt},1,7)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!--  GS(팝카드) 세부실적 -->
    SELECT 'GS(팝카드)' AS PROD_GBN,
            COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0019'
      AND APP_MONTH =  SUBSTR(#{bas_dt},1,7)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!--  결합L 세부실적 -->
    SELECT '결합L' AS PROD_GBN,
           COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0001'
       AND APP_MONTH =  SUBSTR(#{bas_dt},1,7)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!--  LGU 세부실적 -->
     SELECT 'LGU' AS PROD_GBN,
         COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0008'
        AND REPLACE(APP_MONTH,'/','') =  SUBSTR(REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!--  SKT 세부실적 -->
    SELECT 'SKT' AS PROD_GBN,
            COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0011'
        AND REPLACE(APP_MONTH,'/','') =  SUBSTR(REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!--  S(홈쇼핑) 세부실적 -->
    SELECT 'S(홈쇼핑)' AS PROD_GBN,
            COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0002' AND NVL(SALE_TYPE,'') IN ('0027','0012')
        AND REPLACE(APP_MONTH,'/','') =  SUBSTR(REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!--  S(기타) 세부실적 -->
    SELECT 'S(기타)' AS PROD_GBN,
           COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0002' AND NVL(SALE_TYPE,'') NOT IN ('0027','0012')
         AND REPLACE(APP_MONTH,'/','') =  SUBSTR(REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))


    UNION ALL

    <!--  S(16 임직원) 세부실적 -->
    SELECT 'S(16 임직원)' AS PROD_GBN,
          COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0015'
      AND REPLACE(APP_MONTH,'/','') =  SUBSTR(REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!--  L(16 임직원) 세부실적 -->
    SELECT 'L(16 임직원)' AS PROD_GBN,
           COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR = '0014'
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR(REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!--  일반상품 외 세부실적 -->
    SELECT '일반상품 외' AS PROD_GBN,
           COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_THR IN ('0005','0004','0003','0016','0017')
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR(REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!--  LGB 세부실적 -->
    SELECT 'LGB' AS PROD_GBN,
          COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE  SECTION_THR = '0007'
       AND REPLACE(APP_MONTH,'/','') =  SUBSTR(REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))

     UNION ALL

    <!--  후불제 세부실적 -->
    SELECT '후불제' AS PROD_GBN,
           COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(PROD_AMT),0) AS TOT_CONTR_AMT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD
      FROM TB_USER_PROD_INFO_MONTH
     WHERE  SECTION_THR = '0013'
      AND REPLACE(APP_MONTH,'/','') =  SUBSTR(REPLACE(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> REPLACE(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> REPLACE(#{bas_dt},'/','')))
    </select>

    <!-- 연체현황 - 채권구분기준 -->
    <select id="DlwCondMap.getDelayPayByBond" parameterType="map" resultType="resultMap">


    /* DlwCondMap.getDelayPayByBond */
    SELECT '채권' AS PROD_GBN,
           COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_T = '0002'
       AND replace(APP_MONTH,'/','') =  substr(replace(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> replace(#{bas_dt},'/','')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND replace( FN_EVENT_DAY,'') <![CDATA[>=]]> replace(#{bas_dt},'/','') ))
       <include refid="DlwCondMap.selectCondition_fragment"/>

     UNION ALL


    SELECT '비채권' AS PROD_GBN,
           COUNT(ACCNT_NO) AS TOT_ACCNT,
           NVL(SUM(FN_MON_PAY_AMT_TRU),0) AS REAL_PAY_TRU,
           NVL(SUM(FN_MON_PAY_AMT_REL),0) AS REAL_PAY_REL,
           NVL(SUM(FN_MON_PAY_AMT_ADD),0) AS REAL_PAY_ADD,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_TRU),0) AS DELAY_PAY_TRU,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_REL),0) AS DELAY_PAY_REL,
           NVL(SUM(FN_NO_PAY_AMT_ACCNTNO_ADD),0) AS DELAY_PAY_ADD,
           NVL(SUM(FN_GET_RESN_AMT),0) AS TOT_RESN_AMT
      FROM TB_USER_PROD_INFO_MONTH
     WHERE SECTION_T = '0001'
       AND replace(APP_MONTH,'/','') =  substr(replace(#{bas_dt},'/',''),1,6)
       AND JOIN_DT <![CDATA[>=]]> '20110101'
       AND JOIN_DT <![CDATA[<]]> replace(#{bas_dt},'')
       AND TRUE_COUNT <![CDATA[>]]> 0
       AND (ACC_STAT = '미만기' OR (ACC_STAT <![CDATA[<>]]> '미만기' AND FN_EVENT_DAY <![CDATA[>=]]> replace(#{bas_dt},'/','') ))
       <include refid="DlwCondMap.selectCondition_fragment"/>
    </select>

    <!-- 실적현황 -->
    <select id="DlwCondMap.getAcrsProd" parameterType="map" resultType="resultMap">


    /* DlwCondMap.getAcrsProd */

    DECLARE @SDATE VARCHAR(10)
    DECLARE @EDATE VARCHAR(10)

    SET @SDATE = #{stt_dt}
    SET @EDATE = #{end_dt}

    SELECT 'SDP' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0010')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0010')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0010'

     UNION ALL

    SELECT '대교 임직원' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0018')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0018')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0018'

     UNION ALL

    SELECT 'GS(가전)' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0006')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0006')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0006'

     UNION ALL

    SELECT 'GS(팝카드)' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0019')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0019')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0019'

     UNION ALL

    SELECT '결합L' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0001')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0001')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0001'

     UNION ALL

    SELECT 'LGU' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0008')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0008')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0008'

     UNION ALL

    SELECT 'SKT' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0011')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0011')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0011'

     UNION ALL

    SELECT 'S(홈쇼핑)' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0002')
                 AND ACCNT_NO IN (SELECT ACCNT_NO FROM dbo.USERNPRODUCT_VIEW WHERE ISNULL(SALE_TYPE,'') IN ('0027','0012'))) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0002')
                 AND ACCNT_NO IN (SELECT ACCNT_NO FROM dbo.USERNPRODUCT_VIEW WHERE ISNULL(SALE_TYPE,'') IN ('0027','0012'))) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0002'
       AND ISNULL(SALE_TYPE,'') IN ('0027','0012')

     UNION ALL

    SELECT 'S(기타)' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0002')
                 AND ACCNT_NO IN (SELECT ACCNT_NO FROM dbo.USERNPRODUCT_VIEW WHERE ISNULL(SALE_TYPE,'') NOT IN ('0027','0012'))) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0002')
                 AND ACCNT_NO IN (SELECT ACCNT_NO FROM dbo.USERNPRODUCT_VIEW WHERE ISNULL(SALE_TYPE,'') NOT IN ('0027','0012'))) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0002'
       AND ISNULL(SALE_TYPE,'')  NOT IN ('0027','0012')

     UNION ALL

    SELECT 'S(16 임직원)' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0015')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0015')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0015'

     UNION ALL

    SELECT 'L(16 임직원)' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0014')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0014')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0014'

     UNION ALL

    SELECT '일반상품외' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR IN ('0005','0004','0003','0016','0017'))) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR IN ('0005','0004','0003','0016','0017'))) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR IN ('0005','0004','0003','0016','0017', '0012')

     UNION ALL

    SELECT 'LGB' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0007')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0007')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0007'

     UNION ALL

    SELECT '후불제' AS PROD_GBN
         , COUNT(ACCNT_NO) AS TOT_ACCNT
         , ISNULL(SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT <![CDATA[<>]]> 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT = '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0013')) AS EVT_COUNT
         , (SELECT COUNT(ACCNT_NO)
              FROM DBO.EVENT
             WHERE EVENT_COMP_DAY <![CDATA[>=]]> @SDATE AND EVENT_COMP_DAY <![CDATA[<]]> @EDATE
               AND DEL_FG = 'N' AND SORT <![CDATA[<>]]> '01' AND SUBSTRING(ACCNT_NO,5,2) IN (SELECT PROD_CD FROM dbo.PRODUCT WHERE SECTION_THR = '0013')) AS CHG_COUNT
         , SUM(CASE WHEN TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT IN ('Y','E') AND PAY_STATE IN ('정상','당월미납','1회 연체','2회 연체','만기') THEN 1 ELSE 0 END) AS MNTN_COUNT
         , #{mon_gbn} AS MON_GBN
      FROM DBO.USERNPRODUCT_VIEW
     WHERE REG_DM<![CDATA[>=]]>@SDATE AND REG_DM<![CDATA[<]]>@EDATE
       AND SECTION_THR = '0013'
    </select>
    
    <!-- ================================================================
     * 날짜 : 20200805
     * 이름 : 김주용
     * 추가내용 : 실적현황 월별엑셀 다운로드
     * 대상 테이블 : 
     * ================================================================
     * -->
    <select id="DlwCondMap.getAcrsProdByBatchExcelCount" parameterType="map" resultType="int">
        SELECT /* DlwPayMap.getMemberMangiExtDataListCount */
               54 AS ICNT
          FROM DUAL
    </select>

<!-- 실적현황 - batch 데이터 -->
<select id="DlwCondMap.getAcrsProdByBatch" parameterType="map" resultType="resultMap">

     /* DlwCondMap.getAcrsProdByBatch */
     SELECT 'LGU' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0008'
	 
	 UNION ALL
	 
	 SELECT 'LGU 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0008'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT 'LGU 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0008'
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '결합S(기타)' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0002'
	 AND NVL(SALE_TYPE,'9999') NOT IN ('0046','0027', '0012')
	 
	 UNION ALL
	 
	 SELECT '결합S(기타) 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0002'
	 AND NVL(SALE_TYPE,'9999') NOT IN ('0046','0027', '0012')
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '결합S(기타) 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0002'
	 AND NVL(SALE_TYPE,'9999') NOT IN ('0046','0027', '0012')
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '결합L(기타)' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0001'
	 AND NVL(SALE_TYPE,'9999') != '0046'
	 
	 UNION ALL
	 
	 SELECT '결합L(기타) 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0001'
	 AND NVL(SALE_TYPE,'9999') != '0046'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '결합L(기타) 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0001'
	 AND NVL(SALE_TYPE,'9999') != '0046'
	 AND SECTION_T = '0002'
	    
	 UNION ALL
	 
	 SELECT 'SDP' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0010'
	 
	 UNION ALL
	 
	 SELECT 'SDP 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0010'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT 'SDP 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0010'
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '한샘' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0022'
	 
	 UNION ALL
	 
	 SELECT '한샘 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0022'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '한샘 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0022'
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '여행' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR IN ('0023','0024')
	 
	 UNION ALL
	 
	 SELECT '여행 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR IN ('0023','0024')
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '여행 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR IN ('0023','0024')
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '홈쇼핑' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND ( SECTION_THR = '0020' OR ( SECTION_THR = '0002' AND NVL(SALE_TYPE,'9999') IN ('0027','0012')))
	 
	 UNION ALL
	 
	 SELECT '홈쇼핑 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND ( SECTION_THR = '0020' OR ( SECTION_THR = '0002' AND NVL(SALE_TYPE,'9999') IN ('0027','0012')))
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '홈쇼핑 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND ( SECTION_THR = '0020' OR ( SECTION_THR = '0002' AND NVL(SALE_TYPE,'9999') IN ('0027','0012')))
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT 'POM' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND ( SECTION_THR = '0021' OR ( SECTION_THR IN ('0001', '0002') AND NVL(SALE_TYPE,'9999') = '0046' ))
	 
	 UNION ALL
	 
	 SELECT 'POM 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND ( SECTION_THR = '0021' OR ( SECTION_THR IN ('0001', '0002') AND NVL(SALE_TYPE,'9999') = '0046' ))
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT 'POM 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND ( SECTION_THR = '0021' OR ( SECTION_THR IN ('0001', '0002') AND NVL(SALE_TYPE,'9999') = '0046' ))
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '일반상품외' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR IN ('0005','0012')
	 
	 UNION ALL
	 
	 SELECT '일반상품외 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR IN ('0005','0012')
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '일반상품외 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR IN ('0005','0012')
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT 'LGB' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0007'
	 
	 UNION ALL
	 
	 SELECT 'LGB 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0007'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT 'LGB 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0007'
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '기타결합' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR IN ('0017','0018','0006')
	 
	 UNION ALL
	 
	 SELECT '기타결합 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR IN ('0017','0018','0006')
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '기타결합 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR IN ('0017','0018','0006')
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '후불제' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0013'
	 
	 UNION ALL
	 
	 SELECT '후불제 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0013'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '후불제 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0013'
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '더원라이프' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0028'
	 
	 UNION ALL
	 
	 SELECT '더원라이프 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0028'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '더원라이프 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0028'
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '스페셜라이프' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0029'
	 
	 UNION ALL
	 
	 SELECT '스페셜라이프 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0029'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '스페셜라이프 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0029'
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '다이렉트' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0027'
	 
	 UNION ALL
	 
	 SELECT '다이렉트 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0027'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '다이렉트 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0027'
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '기타_비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0030'
	 
	 UNION ALL
	 
	 SELECT '기타_비채권 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0030'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '기타_비채권 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0030'
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '기타_채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0031'
	 
	 UNION ALL
	 
	 SELECT '기타_채권 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0031'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '기타_채권 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0031'
	 AND SECTION_T = '0002'
	 
	 UNION ALL
	 
	 SELECT '기타_온오프' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'Y' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0032'
	 
	 UNION ALL
	 
	 SELECT '기타_온오프 비채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0032'
	 AND SECTION_T = '0001'
	 
	 UNION ALL
	 
	 SELECT '기타_온오프 채권' AS PROD_GBN
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','') THEN 1 ELSE 0 END), 0) AS TOT_ACCNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND TRUE_COUNT <![CDATA[>]]> 0 AND ACC_STAT != 'C' THEN 1 ELSE 0 END),0) AS TOT_WHDR_ACCNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') = '01' THEN 1 ELSE 0 END),0) AS EVT_COUNT
	        , NVL(SUM(CASE WHEN EVENT_COMP_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'E' AND NVL(EVENT_CL,'XX') != '01' THEN 1 ELSE 0 END),0) AS CHG_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT = 'C' AND RESN_CL = '02' THEN 1 ELSE 0 END),0) AS RETR_COUNT
	        , NVL(SUM(CASE WHEN RESN_PROC_DAY BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ( ACC_STAT = 'R' OR ( ACC_STAT = 'C' AND RESN_CL = '04' ) ) AND NVL(RESN_PROC_YN,'N') = 'Y' THEN 1 ELSE 0 END),0) AS RESN_COUNT
	        , NVL(SUM(CASE WHEN TO_CHAR(REG_DM,'YYYYMMDD') BETWEEN REPLACE(#{stt_dt},'/','') AND REPLACE(#{end_dt},'/','')
	                       AND ACC_STAT != 'C' AND NVL(RESN_PROC_YN,'N') = 'N' AND TRUE_COUNT <![CDATA[>]]> 0 AND SUBSTR(PAY_STATE,-2,2) = '연체' AND TO_NUMBER(NVL(REPLACE(PAY_STATE,'회 연체',''), 0)) <![CDATA[>]]> 2 THEN 1 ELSE 0 END),0) AS YENCHE_COUNT
	        , #{mon_gbn} AS MON_GBN
	        , 'N' AS FONT_YN
	 FROM TB_USER_PROD_INFO
	 WHERE 1=1
	 AND SECTION_THR = '0032'
	 AND SECTION_T = '0002'

</select>

<!-- 실적 데이터 삽입 -->
<insert id="DlwCondMap.insertUserProdInfoMonth" parameterType="map" timeout="1200">
    /* DlwCondMap.insertUserProdInfoMonth */



    DECLARE
            STT_DATE   VARCHAR2(20);
            BAS_DATE   VARCHAR2(20);

BEGIN
     STT_DATE := '2011/01/01' ;
     SELECT TO_CHAR(SYSDATE,'YYYY/MM')||'/01' INTO BAS_DATE  from DUAL ;



    <!-- 데이터 삽입 -->
    INSERT INTO TB_USER_PROD_INFO_MONTH (APP_MONTH, ACCNT_NO, ACC_STAT, REG_DM, JOIN_DT, PROD_CD, PROD_MODEL_KIND, SECTION_THR, SECTION_T, SALE_TYPE, PAY_STATE, PROD_AMT, TRUE_COUNT
                                           , FN_MON_PAY_COUNT_TRU, FN_MON_COUNT
                                           , FN_MON_PAY_AMT_TRU, FN_MON_PAY_AMT_REL, FN_MON_PAY_AMT_ADD
                                           , FN_NO_PAY_AMT_ACCNTNO_TRU, FN_NO_PAY_AMT_ACCNTNO_REL,FN_NO_PAY_AMT_ACCNTNO_ADD
                                           , FN_EVENT_DAY, FN_GET_RESN_AMT)
    SELECT TO_CHAR(SYSDATE,'YYYY/MM')
         , ACCNT_NO
         , ACC_STAT
         , REG_DM
         , JOIN_DT
         , PROD_CD
         , PROD_MODEL_KIND
         , SECTION_THR
         , SECTION_T
         , SALE_TYPE
         , (CASE WHEN ACC_STAT <![CDATA[<>]]> '미만기' THEN '-' ELSE FN_YEN_CHE(ACCNT_NO) END) AS PAY_STATE
         , PROD_AMT
         , (SELECT COUNT(SEQ) AS Expr1
              FROM PAY_MNG  PAY_MNG_3
             WHERE (ACCNT_NO = TBL_2.ACCNT_NO) AND (DEL_FG = 'N')) AS TRUE_COUNT
         , FN_MON_PAY_COUNT_TRU
         , FN_MON_COUNT(ACCNT_NO,BAS_DATE) AS FN_MON_COUNT
         , FN_MON_PAY_AMT(ACCNT_NO,STT_DATE,BAS_DATE,'TRU') as FN_MON_PAY_AMT_TRU
         , FN_MON_PAY_AMT(ACCNT_NO,STT_DATE,BAS_DATE,'REL') as FN_MON_PAY_AMT_REL
         , FN_MON_PAY_AMT(ACCNT_NO,STT_DATE,BAS_DATE,'ADD') as FN_MON_PAY_AMT_ADD
         , FN_NO_PAY_AMT_ACCNTNO(ACCNT_NO,PROD_CD,FN_MON_COUNT(ACCNT_NO,BAS_DATE),STT_DATE,BAS_DATE,'TRU') AS FN_NO_PAY_AMT_ACCNTNO_TRU
         , FN_NO_PAY_AMT_ACCNTNO(ACCNT_NO,PROD_CD,FN_MON_COUNT(ACCNT_NO,BAS_DATE),STT_DATE,BAS_DATE,'REL') AS FN_NO_PAY_AMT_ACCNTNO_REL
         , FN_NO_PAY_AMT_ACCNTNO(ACCNT_NO,PROD_CD,FN_MON_COUNT(ACCNT_NO,BAS_DATE),STT_DATE,BAS_DATE,'ADD') AS FN_NO_PAY_AMT_ACCNTNO_ADD
         , FN_EVENT_DAY(ACCNT_NO) AS FN_EVENT_DAY
         , FN_GET_RESN_AMT(PROD_MODEL_KIND, PROD_CD, FN_MON_PAY_COUNT_TRU, JOIN_DT ) AS FN_GET_RESN_AMT
      FROM (SELECT ACCNT_NO
                 , REG_DM
                 , JOIN_DT
                 , PROD_CD
                 , PROD_MODEL_KIND
                 , SECTION_THR
                 , SECTION_T
                 , SALE_TYPE
                 , PROD_AMT
                 , (CASE WHEN FN_EVENT(ACCNT_NO) = ' ' THEN '미만기' ELSE FN_EVENT(ACCNT_NO) END) AS ACC_STAT
                 , FN_MON_PAY_COUNT(ACCNT_NO,STT_DATE,BAS_DATE,'TRU') AS FN_MON_PAY_COUNT_TRU
              FROM (SELECT A.ACCNT_NO
                         , A.REG_DM
                         , A.JOIN_DT
                         , A.PROD_CD
                         , A.PROD_MODEL_KIND
                         , C.SECTION_THR
                         , C.SECTION_T
                         , E.SALE_TYPE
                         , C.PROD_AMT
                      FROM MEM_PROD_ACCNT  A
                     INNER JOIN MEMBER  B ON A.MEM_NO = B.MEM_NO
                      LEFT OUTER JOIN B2BCOMCD  E ON A.B2B_COMP_CD = E.COM_CD
                     INNER JOIN PRODUCT  C ON A.PROD_CD = C.PROD_CD
                      LEFT OUTER JOIN HP_CALL  D ON A.ACCNT_NO = D.ACCNT_NO
                     WHERE (A.DEL_FG = 'N')
                       AND (B.DEL_FG = 'N')
                    )  TBL_1
            )  TBL_2 ;

          end;
    </insert>

    <!-- 실적 데이터 삽입 -->
    <insert id="DlwCondMap.insertUserProdInfo" parameterType="map">
    /* DlwCondMap.insertUserProdInfo */

    <!-- 전체 데이터 삭제 -->
    BEGIN
        DELETE FROM TB_USER_PROD_INFO ;

        INSERT INTO TB_USER_PROD_INFO (ACCNT_NO, ACC_STAT, REG_DM, JOIN_DT, PROD_CD, PROD_MODEL_KIND, SECTION_THR, SECTION_T, SALE_TYPE, PAY_STATE, PROD_AMT, TRUE_COUNT,
                RESN_CL,
                RESN_PROC_DAY,
                RESN_PROC_YN,
                EVENT_CL,
                EVENT_COMP_DAY
        )
        SELECT ACCNT_NO,
            ACC_STAT,
            REG_DM,
            JOIN_DT,
            PROD_CD,
            PROD_MODEL_KIND,
            SECTION_THR,
            SECTION_T,
            SALE_TYPE,
            PAY_STAT,
            PROD_AMT,
            TRUE_COUNT,
            RESN_CL,
            RESN_PROC_DAY,
            RESN_PROC_YN,
            SORT,
            EVENT_COMP_DAY
        FROM
        (
            SELECT MPA.ACCNT_NO,
                FN_ACCNT_STAT(MPA.ACCNT_NO) AS ACC_STAT,
                MPA.REG_DM,
                MPA.JOIN_DT,
                MPA.PROD_CD,
                MPA.PROD_MODEL_KIND,
                PD.SECTION_THR,
                PD.SECTION_T,
                B2B.SALE_TYPE,
                FN_YEN_CHE(MPA.ACCNT_NO) AS PAY_STAT,
                PD.PROD_AMT,
                (SELECT MAX(NO) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N') AS TRUE_COUNT,
                RESN_CL,
                RESN_PROC_DAY,
                RESN_PROC_YN,
                SORT,
                EVENT_COMP_DAY
            FROM MEM_PROD_ACCNT MPA INNER JOIN
                MEMBER MB ON MPA.MEM_NO = MB.MEM_NO AND MPA.DEL_FG = 'N' INNER JOIN
                PRODUCT PD ON MPA.PROD_CD = PD.PROD_CD AND PD.DEL_FG = 'N' LEFT OUTER JOIN
                B2BCOMCD B2B ON MPA.B2B_COMP_CD = B2B.COM_CD LEFT OUTER JOIN
                RESCISSION RS ON RS.ACCNT_NO = MPA.ACCNT_NO AND RS.DEL_FG = 'N' LEFT OUTER JOIN
                EVENT EVT ON EVT.ACCNT_NO = MPA.ACCNT_NO AND EVT.DEL_FG = 'N'
          ) TBL ;

      END ;

    <!-- 데이터 삽입 -->
    <!--
    INSERT INTO TB_USER_PROD_INFO (ACCNT_NO, ACC_STAT, REG_DM, JOIN_DT, PROD_CD, PROD_MODEL_KIND, SECTION_THR, SECTION_T, SALE_TYPE, PAY_STATE, PROD_AMT, TRUE_COUNT)
    SELECT ACCNT_NO
         , ACC_STAT
         , REG_DM
         , JOIN_DT
         , PROD_CD
         , PROD_MODEL_KIND
         , SECTION_THR
         , SECTION_T
         , SALE_TYPE
         , (CASE WHEN ACC_STAT <![CDATA[<>]]> '미만기' THEN '-' ELSE dbo.FN_YEN_CHE(ACCNT_NO) END) AS PAY_STATE
         , PROD_AMT
         , (SELECT COUNT(SEQ)
              FROM PAY_MNG
             WHERE (ACCNT_NO = TBL_2.ACCNT_NO) AND (DEL_FG = 'N')) AS TRUE_COUNT
      FROM (SELECT ACCNT_NO
                 , REG_DM
                 , JOIN_DT
                 , PROD_CD
                 , PROD_MODEL_KIND
                 , SECTION_THR
                 , SECTION_T
                 , SALE_TYPE
                 , PROD_AMT
                 , (CASE WHEN [dmlife].[dbo].[FN_EVENT](ACCNT_NO) = '' THEN '미만기' ELSE [dmlife].[dbo].[FN_EVENT](ACCNT_NO) END) AS ACC_STAT
              FROM (SELECT A.ACCNT_NO
                         , A.REG_DM
                         , A.JOIN_DT
                         , A.PROD_CD
                         , A.PROD_MODEL_KIND
                         , C.SECTION_THR
                         , C.SECTION_T
                         , E.SALE_TYPE
                         , C.PROD_AMT
                      FROM dbo.MEM_PROD_ACCNT AS A
                     INNER JOIN dbo.MEMBER AS B ON A.MEM_NO = B.MEM_NO
                      LEFT OUTER JOIN dbo.B2BCOMCD AS E ON A.B2B_COMP_CD = E.COM_CD
                     INNER JOIN dbo.PRODUCT AS C ON A.PROD_CD = C.PROD_CD
                      LEFT OUTER JOIN dbo.HP_CALL AS D ON A.ACCNT_NO = D.ACCNT_NO
                     WHERE (A.DEL_FG = 'N')
                       AND (B.DEL_FG = 'N')
                    ) AS TBL_1
            ) AS TBL_2
    -->
    </insert>

    <select id="DlwCondMap.getBasMonth" parameterType="map" resultType="resultMap">


        SELECT /* DlwCondMap.getBasMonth */
               APP_MONTH AS CD ,APP_MONTH AS CD_NM
          FROM TB_USER_PROD_INFO_MONTH
         GROUP BY APP_MONTH
         ORDER BY APP_MONTH DESC
    </select>

    <!-- 입금현황(new) - 회차별 Count -->
    <select id="DlwCondMap.getPayMonthCount" parameterType="map" resultType="int">
    <!-- sql-cond.xml : payListmonth -->


        SELECT /* DlwCondMap.getPayMonthCount */
               COUNT(TBL.ACCNT_NO)
          FROM (SELECT MPA.ACCNT_NO
                     , MEM.MEM_NM
                     , MEM.MEM_NO
                     , PROD.PROD_NM
                     , EMP.DEPT_CD
                     , EMP.EMPLE_NM
                     , MPA.BEF_EMPLE_CD
                     , MPA.JOIN_DT JOIN_DT
                     , MPA.DED_NO
                     , CASE WHEN EVT.ACCNT_NO IS NOT NULL THEN '행사'
                            WHEN RESN.ACCNT_NO IS NOT NULL THEN FN_COM_NM('64',RESN.RESN_CL)
                            WHEN TP.ACCNT_NO IS NOT NULL THEN '세무'
                            ELSE '정상'
                        END AS EVENT_STAT
                     , CASE WHEN EVT.ACCNT_NO IS NOT NULL THEN NVL(EVT.EVENT_PROC_DAY, ' ')
                            WHEN RESN.ACCNT_NO IS NOT NULL THEN NVL(RESN.RESN_PROC_DAY, ' ')
                            ELSE ' '
                        END AS EVENT_DAY
                     , CASE WHEN NVL(RESN.RESN_PROC_YN,' ') ='Y' THEN '처리'
                            WHEN NVL(RESN.RESN_PROC_YN,' ') ='N' THEN '미처리'
                            ELSE '미대상'
                        END AS EVENT_PROC
                     , NVL((SELECT MODEL_CL_NM FROM PRODUCT_MODEL_CL_CD WHERE MODEL_CL_CD = MPA.PROD_MODEL_KIND), '') AS MODEL_CL_NM
                     , TRUNC(MONTHS_BETWEEN(to_char(SYSDATE,'YYYYMM')||'01',substr(MPA.join_dt,1,6)||'01')) + 1 AS NEW_STAT
                     , EMP.EMPLE_NO
                     , NVL((SELECT COM_NM FROM B2BCOMCD WHERE COM_CD = MPA.B2B_COMP_CD), '') AS B2B_COMP_NM
                     , NVL(FN_COM_NM('0125', (SELECT SALE_TYPE FROM B2BCOMCD WHERE COM_CD = MPA.B2B_COMP_CD)), '') AS SALE_TYPE
                  FROM MEM_PROD_ACCNT MPA
                 INNER JOIN MEMBER MEM ON MEM.MEM_NO = MPA.MEM_NO
                        <if test="mem_nm != null and mem_nm != ''">
                            AND MEM.MEM_NM = #{mem_nm}
                        </if>
                 INNER JOIN PRODUCT PROD ON MPA.PROD_CD = PROD.PROD_CD
                        <if test="prod_cd != null and prod_cd != ''">
                            AND PROD.PROD_CD = #{prod_cd}
                        </if>
                        <if test="prod_cl != null and prod_cl != ''">
                            AND PROD.PROD_CL = #{prod_cl}
                        </if>
                 INNER JOIN EMPLOYEE EMP ON EMP.EMPLE_NO = MPA.EMPLE_NO
                        <if test="emple_no != null and emple_no != ''">
                            AND EMP.EMPLE_NO = #{emple_no}
                        </if>
                        <if test="dept_cd != null and dept_cd != ''">
                            AND EMP.DEPT_CD = #{dept_cd}
                        </if>
                 INNER JOIN DEPARTMENT DEPT ON DEPT.DEPT_CD = EMP.DEPT_CD
                        <if test="dept_kind != null and dept_kind != ''">
                            AND DEPT.DEPT_KIND = #{dept_kind}
                        </if>
                  LEFT OUTER JOIN EVENT EVT ON EVT.DEL_FG = 'N' AND EVT.ACCNT_NO = MPA.ACCNT_NO
                  LEFT OUTER JOIN RESCISSION RESN ON RESN.DEL_FG = 'N' AND RESN.ACCNT_NO = MPA.ACCNT_NO
                  LEFT OUTER JOIN TAXT_PROC TP ON TP.ACCNT_NO = MPA.ACCNT_NO AND TP.DEL_FG = 'N' AND TP.REVL_DAY IS NULL
                 WHERE MPA.DEL_FG = 'N'
                 <if test="accnt_no != null and accnt_no != ''">
                     AND MPA.ACCNT_NO = #{accnt_no}
                 </if>
                 <if test="dataAthrQury != null and dataAthrQury != ''">
                     ${dataAthrQury}
                 </if>
                 <if test="ocb_gubn != null and ocb_gubn != ''">
                     <if test="ocb_gubn.equalsIgnoreCase('N')">
                          AND CASE WHEN (PROD.MEMBERSHIP IS NOT NULL OR PROD.MEMBERSHIP != '')
                                        AND
                                                   TO_NUMBER(SUBSTR(TO_CHAR(SYSDATE,'YYYYMMDD'),1,4))) - TO_NUMBER(SUBSTR( NVL(MEM.BRTH_MON_DAY, '19000101'),1,4)) -
                                                       (CASE WHEN TO_NUMBER( SUB_STR(TO_CHAR(SYSDATE,'YYYYMMDD'),5, 4))) <![CDATA[>=]]>
                                                       TO_NUMBER(SUBSTR(REPLACE(TO_CHAR(NVL(MEM.BRTH_MON_DAY, '19000101'))  , '/', ''),5,4  ) )
                                                             THEN 0
                                                             ELSE 1
                                                         END) <![CDATA[>=]]> 14
                                                       AND  LENGHT(MEM.IDN_NO) != 10
                                                      <!--  AND LEN(CONVERT(VARCHAR(MAX), DecryptByKeyAutoCert( cert_ID('CertKeyProtect'), NULL, MEM.IDN_NO))) != 10  -->
                                                      AND
                                               THEN 'OCB'
                                               ELSE ' '
                                         END = ' '
                     </if>
                 </if>
                 <if test="b2b_comp_cd != null and b2b_comp_cd != ''">
                     AND MPA.B2B_COMP_CD = #{b2b_comp_cd}
                 </if>
               ) TBL
           INNER JOIN (SELECT TBL.ACCNT_NO
                            , TBL.NO
                            , TBL.PAY_AMT
                            , TBL.PAY_DTL_AMT
                            , TBL.PAY_DTL1_AMT
                            , TBL.GASU_AMT
                            , CASE WHEN TBL.PAY_AMT != 0 THEN TBL.PAY_DAY
                                   WHEN TBL.PAY_DTL_AMT != 0 THEN TBL.PAY_DTL_DAY
                                   WHEN TBL.PAY_DTL1_AMT != 0 THEN TBL.PAY_DTL1_DAY
                                   WHEN TBL.GASU_AMT != 0 THEN TBL.GASU_DAY
                               END AS PAY_DAY
                            , CASE WHEN TBL.PAY_AMT != 0 THEN TBL.PAY_MTHD
                                   WHEN TBL.PAY_DTL_AMT != 0 THEN TBL.PAY_DTL_MTHD
                                   WHEN TBL.PAY_DTL1_AMT != 0 THEN TBL.PAY_DTL1_MTHD
                                   WHEN TBL.GASU_AMT != 0 THEN TBL.GASU_PAY_MTHD
                               END AS PAY_MTHD
                            , TBL.NEW_YN
                         FROM (SELECT TBL.ACCNT_NO
                                    , TBL.NO
                                    , SUM(TBL.PAY_AMT) AS PAY_AMT
                                    , SUM(TBL.PAY_DTL_AMT) AS PAY_DTL_AMT
                                    , SUM(TBL.PAY_DTL1_AMT) AS PAY_DTL1_AMT
                                    , SUM(TBL.GASU_AMT) AS GASU_AMT
                                    , MAX(TBL.PAY_DAY) AS PAY_DAY
                                    , MAX(TBL.PAY_DTL_DAY) AS PAY_DTL_DAY
                                    , MAX(TBL.PAY_DTL1_DAY) AS PAY_DTL1_DAY
                                    , MAX(TBL.GASU_DAY) AS GASU_DAY
                                    , MAX(TBL.PAY_MTHD) AS PAY_MTHD
                                    , MAX(TBL.PAY_DTL_MTHD) AS PAY_DTL_MTHD
                                    , MAX(TBL.PAY_DTL1_MTHD) AS PAY_DTL1_MTHD
                                    , MAX(TBL.GASU_PAY_MTHD) AS GASU_PAY_MTHD
                                    , MAX(TBL.NEW_YN) AS NEW_YN
                                 FROM (SELECT PM.ACCNT_NO
                                            , PM.NO
                                            , PM.PAY_AMT
                                            , 0 PAY_DTL_AMT
                                            , 0 PAY_DTL1_AMT
                                            , 0 GASU_AMT
                                            , PM.PAY_DAY PAY_DAY
                                            , ' ' PAY_DTL_DAY
                                            , ' ' PAY_DTL1_DAY
                                            , ' ' GASU_DAY
                                            , PM.PAY_MTHD PAY_MTHD
                                            , ' ' PAY_DTL_MTHD
                                            , ' ' PAY_DTL1_MTHD
                                            , ' ' GASU_PAY_MTHD
                                            , PM.NEW_YN
                                         FROM PAY_MNG PM
                                      <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                          LEFT OUTER JOIN EVENT EVT ON PM.ACCNT_NO = EVT.ACCNT_NO AND EVT.DEL_FG = 'N'
                                      </if>
                                         WHERE PM.DEL_FG = 'N'
                                         <if test="in_stt_dt != null and in_stt_dt != '' and in_end_dt != null and in_end_dt != ''">
                                             AND PM.PAY_DAY BETWEEN #{in_stt_dt} AND #{in_end_dt}
                                         </if>
                                         <if test="accnt_no != null and accnt_no != ''">
                                             AND PM.ACCNT_NO = #{accnt_no}
                                         </if>
                                         <if test="pay_mthd != null and pay_mthd != ''">
                                             AND PM.PAY_MTHD = #{pay_mthd}
                                         </if>
                                         <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                             AND PM.PAY_DAY <![CDATA[<]]> NVL(EVT.EVENT_PROC_DAY, '9999/12/31')
                                         </if>

                                        UNION ALL

                                        SELECT PM.ACCNT_NO
                                            , PM.NO
                                            , 0 PAY_AMT
                                            , PM.PAY_AMT PAY_DTL_AMT
                                            , 0 PAY_DTL1_AMT
                                            , 0 GASU_AMT
                                            , ' ' PAY_DAY
                                            , PM.PAY_DAY PAY_DTL_DAY
                                            , ' ' PAY_DTL1_DAY
                                            , ' ' GASU_DAY
                                            , ' ' PAY_MTHD
                                            , PM.PAY_MTHD PAY_DTL_MTHD
                                            , ' ' PAY_DTL1_MTHD
                                            , ' ' GASU_PAY_MTHD
                                            , ' ' NEW_YN
                                          FROM PAY_MNG_DTL PM
                                      <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                          LEFT OUTER JOIN EVENT EVT ON PM.ACCNT_NO = EVT.ACCNT_NO AND EVT.DEL_FG = 'N'
                                      </if>
                                         WHERE PM.DEL_FG = 'N'
                                         <if test="in_stt_dt != null and in_stt_dt != '' and in_end_dt != null and in_end_dt != ''">
                                             AND PM.PAY_DAY BETWEEN #{in_stt_dt} AND #{in_end_dt}
                                         </if>
                                         <if test="accnt_no != null and accnt_no != ''">
                                             AND PM.ACCNT_NO = #{accnt_no}
                                         </if>
                                         <if test="pay_mthd != null and pay_mthd != ''">
                                             AND PM.PAY_MTHD = #{pay_mthd}
                                         </if>
                                         <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                             AND PM.PAY_DAY <![CDATA[<]]> NVL(EVT.EVENT_PROC_DAY, '9999/12/31')
                                         </if>

                                        UNION ALL

                                        SELECT PM.ACCNT_NO
                                            , PM.NO
                                            , 0 PAY_AMT
                                            , 0 PAY_DTL_AMT
                                            , PM.PAY_AMT PAY_DTL1_AMT
                                            , 0 GASU_AMT
                                            , ' ' PAY_DAY
                                            , ' ' PAY_DTL_DAY
                                            , PM.PAY_DAY PAY_DTL1_DAY
                                            , ' ' GASU_DAY
                                            , ' ' PAY_MTHD
                                            , ' ' PAY_DTL_MTHD
                                            , PM.PAY_MTHD PAY_DTL1_MTHD
                                            , ' ' GASU_PAY_MTHD
                                            , ' ' NEW_YN
                                          FROM PAY_MNG_DTL1 PM
                                      <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                          LEFT OUTER JOIN EVENT EVT  ON PM.ACCNT_NO = EVT.ACCNT_NO AND EVT.DEL_FG = 'N'
                                      </if>
                                         WHERE PM.DEL_FG = 'N'
                                         <if test="in_stt_dt != null and in_stt_dt != '' and in_end_dt != null and in_end_dt != ''">
                                             AND PM.PAY_DAY BETWEEN #{in_stt_dt} AND #{in_end_dt}
                                         </if>
                                         <if test="accnt_no != null and accnt_no != ''">
                                             AND PM.ACCNT_NO = #{accnt_no}
                                         </if>
                                         <if test="pay_mthd != null and pay_mthd != ''">
                                             AND PM.PAY_MTHD = #{pay_mthd}
                                         </if>
                                         <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                             AND PM.PAY_DAY <![CDATA[<]]> NVL(EVT.EVENT_PROC_DAY, '9999/12/31')
                                         </if>

                                        UNION ALL

                                        SELECT ACCNT_NO
                                            , PAY_NO NO
                                            , 0 PAY_AMT
                                            , 0 PAY_DTL_AMT
                                            , 0 PAY_DTL1_AMT
                                            , NVL(GASU_AMT, 0) + NVL(GASU_ALLT_AMT, 0) + NVL(GASU_ADD_AMT, 0) GASU_AMT
                                            , ' ' PAY_DAY
                                            , ' ' PAY_DTL_DAY
                                            , ' ' PAY_DTL1_DAY
                                            , PAY_DAY GASU_DAY
                                            , ' ' PAY_MTHD
                                            , ' ' PAY_DTL_MTHD
                                            , ' ' PAY_DTL1_MTHD
                                            , PAY_MTHD GASU_PAY_MTHD
                                            , ' ' NEW_YN
                                          FROM GASU_AMT_REG
                                        WHERE DEL_FG = 'N'

                                         <if test="in_stt_dt != null and in_stt_dt != '' and in_end_dt != null and in_end_dt != ''">
                                             AND PAY_DAY BETWEEN #{in_stt_dt} AND #{in_end_dt}
                                         </if>
                                         <if test="accnt_no != null and accnt_no != ''">
                                             AND ACCNT_NO = #{accnt_no}
                                         </if>
                                         <if test="pay_mthd != null and pay_mthd != ''">
                                             AND PM.PAY_MTHD = #{pay_mthd}
                                         </if>
                                      ) TBL
                                  GROUP BY TBL.ACCNT_NO, TBL.NO
                               ) TBL
                       ) PM ON TBL.ACCNT_NO = PM.ACCNT_NO
               <if test="join_stat != 'ALL'">
                   WHERE TBL.EVENT_STAT = #{join_stat}
               </if>
    </select>

    <!-- 입금현황(new) - 회차별 -->
    <select id="DlwCondMap.getPayMonthList" parameterType="map" resultType="resultMap">
    <!-- sql-cond.xml : payListmonth -->


        SELECT *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*
                  FROM (
                        SELECT /* DlwCondMap.getPayMonthList */
                               TBL.*
                             , FN_DEPT_NM(TBL.DEPT_CD) AS DEPT_NM
                             , FN_EMPLE_NM(TBL.BEF_EMPLE_CD) AS BEF_EMPLE_NM
                             , PM.STAT AS STAT
                             , PM.PAY_DAY PAY_DAY
                             , PM.NO
                             , (PM.PAY_AMT + PM.PAY_DTL_AMT + PM.PAY_DTL1_AMT) PAY
                             , FN_COM_NM('01', PM.PAY_MTHD) AS PAY_MTHD
                             , PM.PAY_AMT AS PAY_AMT
                             , PM.PAY_DTL_AMT AS ALLT_AMT
                             , PM.PAY_DTL1_AMT AS ADD_AMT
                             , PM.GASU_AMT
                             , CASE WHEN PM.NEW_YN = 'N' THEN '신고'
                                    ELSE '미신고'
                                END NEW_YN
                          FROM (SELECT MPA.ACCNT_NO
                                     , MEM.MEM_NM
                                     , MEM.MEM_NO
                                     , PROD.PROD_NM
                                     , EMP.DEPT_CD
                                     , EMP.EMPLE_NM
                                     , MPA.BEF_EMPLE_CD
                                     , MPA.JOIN_DT JOIN_DT
                                     , MPA.DED_NO
                                     , CASE WHEN EVT.ACCNT_NO IS NOT NULL THEN '행사'
                                            WHEN RESN.ACCNT_NO IS NOT NULL THEN FN_COM_NM('64',RESN.RESN_CL)
                                            WHEN TP.ACCNT_NO IS NOT NULL THEN '세무'
                                            ELSE '정상'
                                        END AS EVENT_STAT
                                     , CASE WHEN EVT.ACCNT_NO IS NOT NULL THEN NVL(EVT.EVENT_PROC_DAY,' ')
                                            WHEN RESN.ACCNT_NO IS NOT NULL THEN NVL(RESN.RESN_PROC_DAY,' ')
                                            ELSE ' '
                                        END AS EVENT_DAY
                                     , CASE WHEN NVL(RESN.RESN_PROC_YN,'') ='Y' THEN '처리'
                                            WHEN NVL(RESN.RESN_PROC_YN,'') ='N' THEN '미처리'
                                            ELSE '미대상'
                                        END AS EVENT_PROC
                                     , MPA.PROD_MODEL_KIND
                                     , NVL((SELECT MODEL_CL_NM FROM PRODUCT_MODEL_CL_CD WHERE MODEL_CL_CD = MPA.PROD_MODEL_KIND), '') AS MODEL_CL_NM
                                     , TRUNC(MONTHS_BETWEEN(to_char(SYSDATE,'YYYYMM')||'01',substr(MPA.join_dt,1,6)||'01')) + 1 AS NEW_STAT
                                     , EMP.EMPLE_NO
                                     , MPA.B2B_COMP_CD
                                     , NVL((SELECT COM_NM FROM B2BCOMCD WHERE COM_CD = MPA.B2B_COMP_CD), '') AS B2B_COMP_NM
                                     , NVL(FN_COM_NM('0125', (SELECT SALE_TYPE FROM B2BCOMCD WHERE COM_CD = MPA.B2B_COMP_CD)), '') AS SALE_TYPE
                                     , TO_CHAR(MPA.REG_DM, 'YYYYMMDD') AS REG_DM  <!-- 등록일 추가 - 2018.08.09 -->
                                  FROM MEM_PROD_ACCNT MPA
                                 INNER JOIN MEMBER MEM ON MEM.MEM_NO = MPA.MEM_NO
                                        <if test="mem_nm != null and mem_nm != ''">
                                            AND MEM.MEM_NM = #{mem_nm}
                                        </if>
                                 INNER JOIN PRODUCT PROD ON MPA.PROD_CD = PROD.PROD_CD
                                        <if test="prod_cd != null and prod_cd != ''">
                                            AND PROD.PROD_CD = #{prod_cd}
                                        </if>
                                        <if test="prod_cl != null and prod_cl != ''">
                                            AND PROD.PROD_CL = #{prod_cl}
                                        </if>
                                 INNER JOIN EMPLOYEE EMP ON EMP.EMPLE_NO = MPA.EMPLE_NO
                                        <if test="emple_no != null and emple_no != ''">
                                            AND EMP.EMPLE_NO = #{emple_no}
                                        </if>
                                        <if test="dept_cd != null and dept_cd != ''">
                                            AND EMP.DEPT_CD = #{dept_cd}
                                        </if>
                                 INNER JOIN DEPARTMENT DEPT ON DEPT.DEPT_CD = EMP.DEPT_CD
                                        <if test="dept_kind != null and dept_kind != ''">
                                            AND DEPT.DEPT_KIND = #{dept_kind}
                                        </if>
                                  LEFT OUTER JOIN EVENT EVT ON EVT.DEL_FG = 'N' AND EVT.ACCNT_NO = MPA.ACCNT_NO
                                  LEFT OUTER JOIN RESCISSION RESN ON RESN.DEL_FG = 'N' AND RESN.ACCNT_NO = MPA.ACCNT_NO
                                  LEFT OUTER JOIN TAXT_PROC TP ON TP.ACCNT_NO = MPA.ACCNT_NO AND TP.DEL_FG = 'N' AND TP.REVL_DAY IS NULL
                                 WHERE MPA.DEL_FG = 'N'
                                 <if test="accnt_no != null and accnt_no != ''">
                                     AND MPA.ACCNT_NO = #{accnt_no}
                                 </if>
                                 <if test="dataAthrQury != null and dataAthrQury != ''">
                                     ${dataAthrQury}
                                 </if>
                                 <if test="ocb_gubn != null and ocb_gubn != ''">
                                     <if test="ocb_gubn.equalsIgnoreCase('N')">
                                    AND CASE WHEN (PROD.MEMBERSHIP IS NOT NULL OR PROD.MEMBERSHIP != '')
                                        AND
                                                   TO_NUMBER(SUBSTR(TO_CHAR(SYSDATE,'YYYYMMDD'),1,4))) - TO_NUMBER(SUBSTR( NVL(MEM.BRTH_MON_DAY, '19000101'),1,4)) -
                                                       (CASE WHEN TO_NUMBER( SUB_STR(TO_CHAR(SYSDATE,'YYYYMMDD'),5, 4))) <![CDATA[>=]]>
                                                       TO_NUMBER(SUBSTR(REPLACE(TO_CHAR(NVL(MEM.BRTH_MON_DAY, '19000101'))  , '/', ''),5,4  ) )
                                                             THEN 0
                                                             ELSE 1
                                                         END) <![CDATA[>=]]> 14
                                                       AND  LENGHT(MEM.IDN_NO) != 10
                                                      <!--  AND LEN(CONVERT(VARCHAR(MAX), DecryptByKeyAutoCert( cert_ID('CertKeyProtect'), NULL, MEM.IDN_NO))) != 10  -->
                                                      AND
                                               THEN 'OCB'
                                               ELSE ' '
                                         END = ' '
                                     </if>
                                 </if>
                                 <if test="b2b_comp_cd != null and b2b_comp_cd != ''">
                                     AND MPA.B2B_COMP_CD = #{b2b_comp_cd}
                                 </if>
                               ) TBL
                           INNER JOIN (SELECT TBL.ACCNT_NO
                                            , TBL.NO
                                            , TBL.STAT
                                            , TBL.PAY_AMT
                                            , TBL.PAY_DTL_AMT
                                            , TBL.PAY_DTL1_AMT
                                            , TBL.GASU_AMT
                                            , CASE WHEN TBL.PAY_AMT != 0 THEN TBL.PAY_DAY
                                                   WHEN TBL.PAY_DTL_AMT != 0 THEN TBL.PAY_DTL_DAY
                                                   WHEN TBL.PAY_DTL1_AMT != 0 THEN TBL.PAY_DTL1_DAY
                                                   WHEN TBL.GASU_AMT != 0 THEN TBL.GASU_DAY
                                               END AS PAY_DAY
                                            , CASE WHEN TBL.PAY_AMT != 0 THEN TBL.PAY_MTHD
                                                   WHEN TBL.PAY_DTL_AMT != 0 THEN TBL.PAY_DTL_MTHD
                                                   WHEN TBL.PAY_DTL1_AMT != 0 THEN TBL.PAY_DTL1_MTHD
                                                   WHEN TBL.GASU_AMT != 0 THEN TBL.GASU_PAY_MTHD
                                               END AS PAY_MTHD
                                            , TBL.NEW_YN
                                         FROM (SELECT TBL.ACCNT_NO
                                                    , TBL.NO
                                                    , SUM(TBL.PAY_AMT) AS PAY_AMT
                                                    , SUM(TBL.PAY_DTL_AMT) AS PAY_DTL_AMT
                                                    , SUM(TBL.PAY_DTL1_AMT) AS PAY_DTL1_AMT
                                                    , SUM(TBL.GASU_AMT) AS GASU_AMT
                                                    , MAX(TBL.PAY_DAY) AS PAY_DAY
                                                    , MAX(TBL.PAY_DTL_DAY) AS PAY_DTL_DAY
                                                    , MAX(TBL.PAY_DTL1_DAY) AS PAY_DTL1_DAY
                                                    , MAX(TBL.GASU_DAY) AS GASU_DAY
                                                    , MAX(TBL.PAY_MTHD) AS PAY_MTHD
                                                    , MAX(TBL.PAY_DTL_MTHD) AS PAY_DTL_MTHD
                                                    , MAX(TBL.PAY_DTL1_MTHD) AS PAY_DTL1_MTHD
                                                    , MAX(TBL.GASU_PAY_MTHD) AS GASU_PAY_MTHD
                                                    , MAX(TBL.NEW_YN) AS NEW_YN
                                                    , MAX(TBL.STAT) AS STAT
                                                 FROM (SELECT PM.ACCNT_NO
                                                            , PM.NO
                                                            , PM.PAY_AMT
                                                            , 0 PAY_DTL_AMT
                                                            , 0 PAY_DTL1_AMT
                                                            , 0 GASU_AMT
                                                            , PM.PAY_DAY PAY_DAY
                                                            , ' ' PAY_DTL_DAY
                                                            , ' ' PAY_DTL1_DAY
                                                            , ' ' GASU_DAY
                                                            , PM.PAY_MTHD PAY_MTHD
                                                            , ' ' PAY_DTL_MTHD
                                                            , ' ' PAY_DTL1_MTHD
                                                            , ' ' GASU_PAY_MTHD
                                                            , PM.NEW_YN
                                                            , PM.STAT
                                                         FROM PAY_MNG PM
                                                      <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                                          LEFT OUTER JOIN EVENT EVT  ON PM.ACCNT_NO = EVT.ACCNT_NO AND EVT.DEL_FG = 'N'
                                                      </if>
                                                         WHERE PM.DEL_FG = 'N'
                                                         <if test="in_stt_dt != null and in_stt_dt != '' and in_end_dt != null and in_end_dt != ''">
                                                             AND PM.PAY_DAY BETWEEN #{in_stt_dt} AND #{in_end_dt}
                                                         </if>
                                                         <if test="accnt_no != null and accnt_no != ''">
                                                             AND PM.ACCNT_NO = #{accnt_no}
                                                         </if>
                                                         <if test="pay_mthd != null and pay_mthd != ''">
                                                             AND PM.PAY_MTHD = #{pay_mthd}
                                                         </if>
                                                         <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                                             AND PM.PAY_DAY <![CDATA[<]]> NVL(EVT.EVENT_PROC_DAY, '9999/12/31')
                                                         </if>

                                                        UNION ALL

                                                        SELECT PM.ACCNT_NO
                                                            , PM.NO
                                                            , 0 PAY_AMT
                                                            , PM.PAY_AMT PAY_DTL_AMT
                                                            , 0 PAY_DTL1_AMT
                                                            , 0 GASU_AMT
                                                            , ' ' PAY_DAY
                                                            , PM.PAY_DAY PAY_DTL_DAY
                                                            , ' ' PAY_DTL1_DAY
                                                            , ' ' GASU_DAY
                                                            , ' ' PAY_MTHD
                                                            , PM.PAY_MTHD PAY_DTL_MTHD
                                                            , ' ' PAY_DTL1_MTHD
                                                            , ' ' GASU_PAY_MTHD
                                                            , ' ' NEW_YN
                                                            , PM.STAT
                                                          FROM PAY_MNG_DTL PM
                                                      <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                                          LEFT OUTER JOIN EVENT EVT  ON PM.ACCNT_NO = EVT.ACCNT_NO AND EVT.DEL_FG = 'N'
                                                      </if>
                                                         WHERE PM.DEL_FG = 'N'
                                                         <if test="in_stt_dt != null and in_stt_dt != '' and in_end_dt != null and in_end_dt != ''">
                                                             AND PM.PAY_DAY BETWEEN #{in_stt_dt} AND #{in_end_dt}
                                                         </if>
                                                         <if test="accnt_no != null and accnt_no != ''">
                                                             AND PM.ACCNT_NO = #{accnt_no}
                                                         </if>
                                                         <if test="pay_mthd != null and pay_mthd != ''">
                                                             AND PM.PAY_MTHD = #{pay_mthd}
                                                         </if>
                                                         <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                                             AND PM.PAY_DAY <![CDATA[<]]> NVL(EVT.EVENT_PROC_DAY, '9999/12/31')
                                                         </if>

                                                        UNION ALL

                                                        SELECT PM.ACCNT_NO
                                                            , PM.NO
                                                            , 0 PAY_AMT
                                                            , 0 PAY_DTL_AMT
                                                            , PM.PAY_AMT PAY_DTL1_AMT
                                                            , 0 GASU_AMT
                                                            , ' ' PAY_DAY
                                                            , ' ' PAY_DTL_DAY
                                                            , PM.PAY_DAY PAY_DTL1_DAY
                                                            , ' ' GASU_DAY
                                                            , ' ' PAY_MTHD
                                                            , ' ' PAY_DTL_MTHD
                                                            , PM.PAY_MTHD PAY_DTL1_MTHD
                                                            , ' ' GASU_PAY_MTHD
                                                            , ' ' NEW_YN
                                                            , PM.STAT
                                                          FROM PAY_MNG_DTL1 PM
                                                      <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                                          LEFT OUTER JOIN EVENT EVT  ON PM.ACCNT_NO = EVT.ACCNT_NO AND EVT.DEL_FG = 'N'
                                                      </if>
                                                         WHERE PM.DEL_FG = 'N'
                                                         <if test="in_stt_dt != null and in_stt_dt != '' and in_end_dt != null and in_end_dt != ''">
                                                             AND PM.PAY_DAY BETWEEN #{in_stt_dt} AND #{in_end_dt}
                                                         </if>
                                                         <if test="accnt_no != null and accnt_no != ''">
                                                             AND PM.ACCNT_NO = #{accnt_no}
                                                         </if>
                                                         <if test="pay_mthd != null and pay_mthd != ''">
                                                             AND PM.PAY_MTHD = #{pay_mthd}
                                                         </if>
                                                         <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                                             AND PM.PAY_DAY <![CDATA[<]]> NVL(EVT.EVENT_PROC_DAY, '9999/12/31')
                                                         </if>

                                                        UNION ALL

                                                        SELECT ACCNT_NO
                                                            , PAY_NO NO
                                                            , 0 PAY_AMT
                                                            , 0 PAY_DTL_AMT
                                                            , 0 PAY_DTL1_AMT
                                                            , NVL(GASU_AMT, 0) + NVL(GASU_ALLT_AMT, 0) + NVL(GASU_ADD_AMT, 0) GASU_AMT
                                                            , ' ' PAY_DAY
                                                            , ' ' PAY_DTL_DAY
                                                            , ' ' PAY_DTL1_DAY
                                                            , PAY_DAY GASU_DAY
                                                            , ' ' PAY_MTHD
                                                            , ' ' PAY_DTL_MTHD
                                                            , ' ' PAY_DTL1_MTHD
                                                            , PAY_MTHD GASU_PAY_MTHD
                                                            , '' NEW_YN
                                                            , 0 AS STAT
                                                          FROM GASU_AMT_REG
                                                        WHERE DEL_FG = 'N'

                                                         <if test="in_stt_dt != null and in_stt_dt != '' and in_end_dt != null and in_end_dt != ''">
                                                             AND PAY_DAY BETWEEN #{in_stt_dt} AND #{in_end_dt}
                                                         </if>
                                                         <if test="accnt_no != null and accnt_no != ''">
                                                             AND ACCNT_NO = #{accnt_no}
                                                         </if>
                                                         <if test="pay_mthd != null and pay_mthd != ''">
                                                             AND PM.PAY_MTHD = #{pay_mthd}
                                                         </if>
                                                      ) TBL
                                                  GROUP BY TBL.ACCNT_NO, TBL.NO
                                               ) TBL
                                       ) PM ON TBL.ACCNT_NO = PM.ACCNT_NO
                               <if test="join_stat != 'ALL'">
                                   WHERE TBL.EVENT_STAT = #{join_stat}
                               </if>
                       ) X
                ) Z
     <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
         <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
         ]]>
     </if>
    </select>

    <!-- 입금현황(new) - 회원별 Count -->
    <select id="DlwCondMap.getPayMonthByMemCount" parameterType="map" resultType="int">


        /* DlwCondMap.getPayMonthByMemCount */

                        SELECT COUNT(*)
                          FROM (
                                 SELECT MPA.ACCNT_NO
                                     , MEM.MEM_NM
                                     , MEM.MEM_NO
                                     , PROD.PROD_NM
                                     , MPA.PROD_MODEL_KIND
                                     , DEPT.DEPT_CD
                                     ,(SELECT FN_DEPT_NM(DEPT.DEPT_CD) from dual) DEPT_NM
                                     , EMP.EMPLE_NM
                                     , MPA.BEF_EMPLE_CD
                                     , FN_EMPLE_NM(MPA.BEF_EMPLE_CD) BEF_EMPLE_NM
                                     , MPA.JOIN_DT JOIN_DT
                                     , MAX(MPA.PAY_DAY) PAY_DAY
                                     , MAX(MPA.NO) NO
                                     , TRUNC(MONTHS_BETWEEN ( sysdate , to_date(substr(mpa.join_dt,1,6)||'01','yyyymmdd'))) +1 NEW_STAT
                                     , SUM((MPA.PAY_AMT+MPA.ALLT_AMT+MPA.ADD_AMT)) PAY
                                     , CASE WHEN EVT.ACCNT_NO IS NOT NULL THEN '행사'
                                            WHEN RESN.ACCNT_NO IS NOT NULL THEN FN_COM_NM('64',RESN.RESN_CL)
                                            WHEN TP.ACCNT_NO IS NOT NULL THEN '세무'
                                            ELSE '정상'
                                       END EVENT_STAT
                                     , CASE WHEN EVT.ACCNT_NO IS NOT NULL THEN NVL(EVT.EVENT_PROC_DAY, '')
                                            WHEN RESN.ACCNT_NO IS NOT NULL THEN NVL(RESN.RESN_PROC_DAY, '')
                                            ELSE ''
                                        END EVENT_DAY
                                     , CASE WHEN NVL(RESN.RESN_PROC_YN,'') ='Y' THEN '처리'
                                              WHEN NVL(RESN.RESN_PROC_YN,'') ='N' THEN '미처리'
                                              ELSE '미대상'
                                        END EVENT_PROC
                                     , FN_COM_NM('01', MPA.PAY_MTHD) PAY_MTHD
                                     , SUM(MPA.PAY_AMT) PAY_AMT
                                     , SUM(MPA.ALLT_AMT) ALLT_AMT
                                     , SUM(MPA.ADD_AMT) ADD_AMT
                                     , FN_YEN_CHE(MPA.ACCNT_NO) STAT
                                     , SUM(MPA.GASU_AMT) GASU_AMT
                                     , MPA.DED_NO
                                     , '' NEW_YN
                                     , EMP.EMPLE_NO
                                     , MPA.B2B_COMP_CD

--                                   SELECT *
                                  FROM (  SELECT MEM_NO , PROD_CD , EMPLE_NO , ACCNT_NO , PROD_MODEL_KIND , BEF_EMPLE_CD , JOIN_DT , DED_NO , B2B_COMP_CD , NO , MAX(PAY_DAY) PAY_DAY , MAX(PAY_MTHD) PAY_MTHD  , SUM(PAY_AMT) PAY_AMT ,
                                                 SUM(ALLT_AMT) ALLT_AMT , SUM(ADD_AMT) ADD_AMT , SUM(GASU_AMT) GASU_AMT , MAX(NEW_YN) NEW_YN
                                            FROM (SELECT  /*+ INDEX(M IDX_MEM_PROD_ACCNT_JOIN_DT) */  M.MEM_NO , M.PROD_CD , M.EMPLE_NO , M.ACCNT_NO , M.PROD_MODEL_KIND , M.BEF_EMPLE_CD , M.JOIN_DT , M.PAY_MTHD , M.DED_NO , M.B2B_COMP_CD ,
                                                          P.NO , P.PAY_DAY , P.PAY_AMT , 0 ALLT_AMT , 0 ADD_AMT , 0 GASU_AMT  , P.NEW_YN NEW_YN
                                                   FROM MEM_PROD_ACCNT M LEFT OUTER JOIN (SELECT ACCNT_NO , NO , PAY_AMT , PAY_DAY , PAY_MTHD , NEW_YN
                                                                                            FROM PAY_MNG WHERE DEL_FG = 'N' ) P ON M.ACCNT_NO = P.ACCNT_NO
                                                  WHERE M.DEL_FG = 'N' <!-- AND M.JOIN_DT BETWEEN '20161101' AND '20161231' -->

                                                  UNION ALL
                                                  SELECT  /*+ INDEX(M IDX_MEM_PROD_ACCNT_JOIN_DT) */  M.MEM_NO , M.PROD_CD , M.EMPLE_NO , M.ACCNT_NO , M.PROD_MODEL_KIND , M.BEF_EMPLE_CD , M.JOIN_DT , M.PAY_MTHD , M.DED_NO , M.B2B_COMP_CD ,
                                                          P.NO , P.PAY_DAY , 0 PAY_AMT , P.PAY_AMT ALLT_AMT , 0 ADD_AMT , 0 GASU_AMT  , ' ' NEW_YN
                                                   FROM MEM_PROD_ACCNT M LEFT OUTER JOIN (SELECT ACCNT_NO , NO , PAY_AMT , PAY_DAY , PAY_MTHD
                                                                                            FROM PAY_MNG_DTL WHERE DEL_FG = 'N' ) P ON M.ACCNT_NO = P.ACCNT_NO
                                                  WHERE M.DEL_FG = 'N' <!--  AND M.JOIN_DT BETWEEN '20161101' AND '20161231'  -->

                                                  UNION ALL
                                                  SELECT  /*+ INDEX(M IDX_MEM_PROD_ACCNT_JOIN_DT) */  M.MEM_NO , M.PROD_CD , M.EMPLE_NO , M.ACCNT_NO , M.PROD_MODEL_KIND , M.BEF_EMPLE_CD , M.JOIN_DT , M.PAY_MTHD , M.DED_NO , M.B2B_COMP_CD ,
                                                          P.NO , P.PAY_DAY , 0 PAY_AMT , 0 ALLT_AMT , P.PAY_AMT ADD_AMT , 0 GASU_AMT , ' ' NEW_YN
                                                   FROM MEM_PROD_ACCNT M LEFT OUTER JOIN (SELECT ACCNT_NO , NO , PAY_AMT , PAY_DAY , PAY_MTHD
                                                                                            FROM PAY_MNG_DTL1 WHERE DEL_FG = 'N' ) P ON M.ACCNT_NO = P.ACCNT_NO
                                                  WHERE M.DEL_FG = 'N' <!--  AND M.JOIN_DT BETWEEN '20161101' AND '20161231'  -->

                                                  UNION ALL
                                                  SELECT  /*+ INDEX(M IDX_MEM_PROD_ACCNT_JOIN_DT) */  M.MEM_NO , M.PROD_CD , M.EMPLE_NO , M.ACCNT_NO , M.PROD_MODEL_KIND , M.BEF_EMPLE_CD , M.JOIN_DT , M.PAY_MTHD , M.DED_NO , M.B2B_COMP_CD ,
                                                          P.NO , P.PAY_DAY , 0 PAY_AMT , 0 ALLT_AMT , 0 ADD_AMT , P.GASU_AMT GASU_AMT  , ' ' NEW_YN
                                                   FROM MEM_PROD_ACCNT M LEFT OUTER JOIN (SELECT ACCNT_NO , PAY_NO NO , NVL(GASU_AMT, 0) + NVL(GASU_ALLT_AMT, 0) + NVL(GASU_ADD_AMT, 0) GASU_AMT , PAY_DAY , PAY_MTHD
                                                                                            FROM GASU_AMT_REG WHERE DEL_FG = 'N' ) P ON M.ACCNT_NO = P.ACCNT_NO
                                                  WHERE M.DEL_FG = 'N'  <!--  AND M.JOIN_DT BETWEEN '20161101' AND '20161231'  --> ) TBL
                                        GROUP BY MEM_NO , PROD_CD , EMPLE_NO , ACCNT_NO , PROD_MODEL_KIND , BEF_EMPLE_CD , JOIN_DT , PAY_MTHD , DED_NO , B2B_COMP_CD , NO ) MPA


                                 LEFT OUTER JOIN MEMBER MEM ON MEM.MEM_NO = MPA.MEM_NO
                                 LEFT OUTER JOIN PRODUCT PROD ON MPA.PROD_CD = PROD.PROD_CD
                                 LEFT OUTER JOIN EMPLOYEE EMP ON EMP.EMPLE_NO = MPA.EMPLE_NO
                                 LEFT OUTER JOIN DEPARTMENT DEPT ON DEPT.DEPT_CD = EMP.DEPT_CD
                                 LEFT OUTER JOIN EVENT EVT ON EVT.DEL_FG = 'N' AND EVT.ACCNT_NO = MPA.ACCNT_NO
                                 LEFT OUTER JOIN RESCISSION RESN ON RESN.DEL_FG = 'N' AND RESN.ACCNT_NO = MPA.ACCNT_NO
                                 LEFT OUTER JOIN TAXT_PROC TP ON TP.ACCNT_NO = MPA.ACCNT_NO AND TP.DEL_FG = 'N' AND TP.REVL_DAY IS NULL

                                WHERE 1=1

                                 <if test="accnt_no != null and accnt_no != ''">
                                      AND MPA.ACCNT_NO = #{accnt_no}
                                 </if>
                                 <if test="mem_nm != null and mem_nm != ''">
                                      AND MEM.MEM_NM = #{mem_nm}
                                 </if>
                                 <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                      AND MPA.JOIN_DT  BETWEEN #{stt_dt} AND #{end_dt}
                                 </if>
                                 <if test="dataAthrQury != null and dataAthrQury != ''">
                                     ${dataAthrQury}
                                 </if>
                                 <if test="ocb_gubun != null and ocb_gubun != ''">
                                     <if test="ocb_gubun.equalsIgnoreCase('N')">
                                     AND CASE WHEN (PROD.MEMBERSHIP IS NOT NULL OR PROD.MEMBERSHIP != '')
                                                   AND
                                                   TO_NUMBER(
                                                    SUBSTR(TO_CHAR(SYSDATE,'YYYYMMDD'),1,4)) - TO_NUMBER(SUBSTR( NVL(MEM.BRTH_MON_DAY, '19000101'),1,4)) -
                                                       (CASE WHEN TO_NUMBER( SUBSTR(TO_CHAR(SYSDATE,'YYYYMMDD'),5, 4)) <![CDATA[>=]]>
                                                       TO_NUMBER(SUBSTR(REPLACE(TO_CHAR(NVL(MEM.BRTH_MON_DAY, '19000101'))  , '/', ''),5,4  ) )
                                                             THEN 0
                                                             ELSE 1
                                                         END) <![CDATA[>=]]>  14
                                                       AND  LENGTH(MEM.IDN_NO) != 10




                                               THEN 'OCB'
                                               ELSE ''
                                         END = ''
                                     </if>
                                 </if>
                               <if test="b2b_comp_cd != null and b2b_comp_cd != ''">
                                   AND MPA.B2B_COMP_CD = #{b2b_comp_cd}
                               </if>

                                <if test="in_stt_dt != null and in_stt_dt != '' and in_end_dt != null and in_end_dt != ''">
                                    AND MPA.PAY_DAY BETWEEN #{in_stt_dt} AND #{in_end_dt}
                                </if>
                                <if test="emple_no != null and emple_no != ''">
                                    AND MPA.EMPLE_NO = #{emple_no}
                                </if>
                                <if test="dept_cd != null and dept_cd != ''">
                                    AND DEPT.DEPT_CD = #{dept_cd}
                                </if>
                                <if test="prod_cl != null and prod_cl != ''">
                                    AND PROD.PROD_CL = #{prod_cl}
                                </if>


                                <if test="prod_cd != null and prod_cd != ''">
                                   AND MPA.PROD_CD = #{prod_cd}
                                </if>
                                <if test="pay_mthd != null and pay_mthd != ''">
                                    AND MPA.PAY_MTHD = #{pay_mthd}
                                </if>
                                <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                    AND MPA.PAY_DAY <![CDATA[<]]> NVL(EVT.EVENT_PROC_DAY, '99991231')
                                </if>
                              GROUP BY MPA.ACCNT_NO, MEM.MEM_NO,MEM.MEM_NM,PROD.PROD_NM,
                                       MPA.PROD_MODEL_KIND,
                                       DEPT.DEPT_CD,EMP.EMPLE_NM,
                                       MPA.BEF_EMPLE_CD, MPA.JOIN_DT,MPA.DED_NO,MPA.PAY_MTHD,
                                       CASE WHEN EVT.ACCNT_NO IS NOT NULL THEN '행사'
                                            WHEN RESN.ACCNT_NO IS NOT NULL THEN fn_com_nm('64',resn.resn_cl)
                                            WHEN TP.ACCNT_NO IS NOT NULL THEN '세무'
                                            ELSE '정상'
                                       END, EMP.EMPLE_NO, MPA.B2B_COMP_CD
                                       , EVT.ACCNT_NO, RESN.ACCNT_NO
                                       , NVL(EVT.EVENT_PROC_DAY, '')
                                       , NVL(resn.resn_proc_day, '')
                                       , NVL(RESN.resn_proc_yn,'')


                               ) TBL
                               <if test="join_stat != 'ALL'">
                                   WHERE TBL.EVENT_STAT = #{join_stat}
                               </if>
    </select>

    <!-- 입금현황(new) - 회원별 -->
    <select id="DlwCondMap.getPayMonthByMemList" parameterType="map" resultType="resultMap">
    <!-- sql-cond.xml : payListmonth1 -->


        /* DlwCondMap.getPayMonthByMemList */

        SELECT *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*
                  FROM (
                        SELECT TBL.*
                             , CASE WHEN (SELECT MAX(REQ.AUTH_YN) FROM TB_MEMBER_WDRW_REQ REQ WHERE 1=1 AND TBL.PAY_DAY = REQ.REQ_DAY AND TBL.PAY_MTHD = REQ.PAY_MTHD AND TBL.ACCNT_NO = REQ.ACCNT_NO AND TBL.NO = REQ.REQ_PAY_NO) = 'N'
                                        THEN '무승인'
                                    ELSE '유승인'
                               END AS AUTH_YN
                             , NVL((SELECT MODEL_CL_NM FROM PRODUCT_MODEL_CL_CD WHERE MODEL_CL_CD = TBL.PROD_MODEL_KIND), '') MODEL_CL_NM
                             , NVL((SELECT COM_NM FROM B2BCOMCD WHERE COM_CD = TBL.B2B_COMP_CD), '') B2B_COMP_NM
                             , NVL(FN_COM_NM('0125', (SELECT SALE_TYPE FROM B2BCOMCD WHERE COM_CD = TBL.B2B_COMP_CD)), '') SALE_TYPE
                          FROM (
                                 SELECT MPA.ACCNT_NO
                                     , MEM.MEM_NM
                                     , MEM.MEM_NO
                                     , PROD.PROD_NM
                                     , MPA.PROD_MODEL_KIND
                                     , DEPT.DEPT_CD
                                     ,(SELECT FN_DEPT_NM(DEPT.DEPT_CD) from dual) DEPT_NM
                                     , EMP.EMPLE_NM
                                     , MPA.BEF_EMPLE_CD
                                     , FN_EMPLE_NM(MPA.BEF_EMPLE_CD) BEF_EMPLE_NM
                                     , MPA.JOIN_DT JOIN_DT
                                     , MAX(MPA.PAY_DAY) PAY_DAY
                                     , MAX(MPA.NO) NO
                                     , TRUNC(MONTHS_BETWEEN ( sysdate , to_date(substr(mpa.join_dt,1,6)||'01','yyyymmdd'))) +1 NEW_STAT
                                     , SUM((MPA.PAY_AMT+MPA.ALLT_AMT+MPA.ADD_AMT)) PAY
                                     , CASE WHEN EVT.ACCNT_NO IS NOT NULL THEN '행사'
                                            WHEN RESN.ACCNT_NO IS NOT NULL THEN FN_COM_NM('64',RESN.RESN_CL)
                                            WHEN TP.ACCNT_NO IS NOT NULL THEN '세무'
                                            ELSE '정상'
                                       END EVENT_STAT
                                     , CASE WHEN EVT.ACCNT_NO IS NOT NULL THEN NVL(EVT.EVENT_PROC_DAY, '')
                                            WHEN RESN.ACCNT_NO IS NOT NULL THEN NVL(RESN.RESN_PROC_DAY, '')
                                            ELSE ''
                                        END EVENT_DAY
                                     , CASE WHEN NVL(RESN.RESN_PROC_YN,'') ='Y' THEN '처리'
                                              WHEN NVL(RESN.RESN_PROC_YN,'') ='N' THEN '미처리'
                                              ELSE '미대상'
                                        END EVENT_PROC
                                     , FN_COM_NM('01', MPA.PAY_MTHD) PAY_MTHD
                                     , SUM(MPA.PAY_AMT) PAY_AMT
                                     , SUM(MPA.ALLT_AMT) ALLT_AMT
                                     , SUM(MPA.ADD_AMT) ADD_AMT
                                     , FN_YEN_CHE(MPA.ACCNT_NO) STAT
                                     , SUM(MPA.GASU_AMT) GASU_AMT
                                     , MPA.DED_NO
                                     , '' NEW_YN
                                     , EMP.EMPLE_NO
                                     , MPA.B2B_COMP_CD
                                     <!-- 등록일 추가 - 2018.08.09 -->
                                     , ( SELECT TO_CHAR(REG_DM, 'YYYYMMDD') FROM MEM_PROD_ACCNT WHERE ACCNT_NO = MPA.ACCNT_NO ) AS REG_DM
--                                   SELECT *
                                  FROM (  SELECT MEM_NO , PROD_CD , EMPLE_NO , ACCNT_NO , PROD_MODEL_KIND , BEF_EMPLE_CD , JOIN_DT , DED_NO , B2B_COMP_CD , NO , MAX(PAY_DAY) PAY_DAY , MAX(PAY_MTHD) PAY_MTHD  , SUM(PAY_AMT) PAY_AMT ,
                                                 SUM(ALLT_AMT) ALLT_AMT , SUM(ADD_AMT) ADD_AMT , SUM(GASU_AMT) GASU_AMT , MAX(NEW_YN) NEW_YN
                                            FROM (SELECT  /*+ INDEX(M IDX_MEM_PROD_ACCNT_JOIN_DT) */  M.MEM_NO , M.PROD_CD , M.EMPLE_NO , M.ACCNT_NO , M.PROD_MODEL_KIND , M.BEF_EMPLE_CD , M.JOIN_DT , M.PAY_MTHD , M.DED_NO , M.B2B_COMP_CD ,
                                                          P.NO , P.PAY_DAY , P.PAY_AMT , 0 ALLT_AMT , 0 ADD_AMT , 0 GASU_AMT  , P.NEW_YN NEW_YN
                                                   FROM MEM_PROD_ACCNT M LEFT OUTER JOIN (SELECT ACCNT_NO , NO , PAY_AMT , PAY_DAY , PAY_MTHD , NEW_YN
                                                                                            FROM PAY_MNG WHERE DEL_FG = 'N' ) P ON M.ACCNT_NO = P.ACCNT_NO
                                                  WHERE M.DEL_FG = 'N' -- AND M.JOIN_DT BETWEEN '20161101' AND '20161231'

                                                  UNION ALL
                                                  SELECT  /*+ INDEX(M IDX_MEM_PROD_ACCNT_JOIN_DT) */  M.MEM_NO , M.PROD_CD , M.EMPLE_NO , M.ACCNT_NO , M.PROD_MODEL_KIND , M.BEF_EMPLE_CD , M.JOIN_DT , M.PAY_MTHD , M.DED_NO , M.B2B_COMP_CD ,
                                                          P.NO , P.PAY_DAY , 0 PAY_AMT , P.PAY_AMT ALLT_AMT , 0 ADD_AMT , 0 GASU_AMT  , ' ' NEW_YN
                                                   FROM MEM_PROD_ACCNT M LEFT OUTER JOIN (SELECT ACCNT_NO , NO , PAY_AMT , PAY_DAY , PAY_MTHD
                                                                                            FROM PAY_MNG_DTL WHERE DEL_FG = 'N' ) P ON M.ACCNT_NO = P.ACCNT_NO
                                                  WHERE M.DEL_FG = 'N' -- AND M.JOIN_DT BETWEEN '20161101' AND '20161231'

                                                  UNION ALL
                                                  SELECT  /*+ INDEX(M IDX_MEM_PROD_ACCNT_JOIN_DT) */  M.MEM_NO , M.PROD_CD , M.EMPLE_NO , M.ACCNT_NO , M.PROD_MODEL_KIND , M.BEF_EMPLE_CD , M.JOIN_DT , M.PAY_MTHD , M.DED_NO , M.B2B_COMP_CD ,
                                                          P.NO , P.PAY_DAY , 0 PAY_AMT , 0 ALLT_AMT , P.PAY_AMT ADD_AMT , 0 GASU_AMT , ' ' NEW_YN
                                                   FROM MEM_PROD_ACCNT M LEFT OUTER JOIN (SELECT ACCNT_NO , NO , PAY_AMT , PAY_DAY , PAY_MTHD
                                                                                            FROM PAY_MNG_DTL1 WHERE DEL_FG = 'N' ) P ON M.ACCNT_NO = P.ACCNT_NO
                                                  WHERE M.DEL_FG = 'N'  --  AND M.JOIN_DT BETWEEN '20161101' AND '20161231'

                                                  UNION ALL
                                                  SELECT  /*+ INDEX(M IDX_MEM_PROD_ACCNT_JOIN_DT) */  M.MEM_NO , M.PROD_CD , M.EMPLE_NO , M.ACCNT_NO , M.PROD_MODEL_KIND , M.BEF_EMPLE_CD , M.JOIN_DT , M.PAY_MTHD , M.DED_NO , M.B2B_COMP_CD ,
                                                          P.NO , P.PAY_DAY , 0 PAY_AMT , 0 ALLT_AMT , 0 ADD_AMT , P.GASU_AMT GASU_AMT  , ' ' NEW_YN
                                                   FROM MEM_PROD_ACCNT M LEFT OUTER JOIN (SELECT ACCNT_NO , PAY_NO NO , NVL(GASU_AMT, 0) + NVL(GASU_ALLT_AMT, 0) + NVL(GASU_ADD_AMT, 0) GASU_AMT , PAY_DAY , PAY_MTHD
                                                                                            FROM GASU_AMT_REG WHERE DEL_FG = 'N' ) P ON M.ACCNT_NO = P.ACCNT_NO
                                                  WHERE M.DEL_FG = 'N'  --  AND M.JOIN_DT BETWEEN '20161101' AND '20161231'
                                                  ) TBL
                                        GROUP BY MEM_NO , PROD_CD , EMPLE_NO , ACCNT_NO , PROD_MODEL_KIND , BEF_EMPLE_CD , JOIN_DT , PAY_MTHD , DED_NO , B2B_COMP_CD , NO ) MPA


                                 LEFT OUTER JOIN MEMBER MEM ON MEM.MEM_NO = MPA.MEM_NO
                                 LEFT OUTER JOIN PRODUCT PROD ON MPA.PROD_CD = PROD.PROD_CD
                                 LEFT OUTER JOIN EMPLOYEE EMP ON EMP.EMPLE_NO = MPA.EMPLE_NO
                                 LEFT OUTER JOIN DEPARTMENT DEPT ON DEPT.DEPT_CD = EMP.DEPT_CD
                                 LEFT OUTER JOIN EVENT EVT ON EVT.DEL_FG = 'N' AND EVT.ACCNT_NO = MPA.ACCNT_NO
                                 LEFT OUTER JOIN RESCISSION RESN ON RESN.DEL_FG = 'N' AND RESN.ACCNT_NO = MPA.ACCNT_NO
                                 LEFT OUTER JOIN TAXT_PROC TP ON TP.ACCNT_NO = MPA.ACCNT_NO AND TP.DEL_FG = 'N' AND TP.REVL_DAY IS NULL

                                WHERE 1=1

                                 <if test="accnt_no != null and accnt_no != ''">
                                      AND MPA.ACCNT_NO = #{accnt_no}
                                 </if>
                                 <if test="mem_nm != null and mem_nm != ''">
                                      AND MEM.MEM_NM = #{mem_nm}
                                 </if>
                                 <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                      AND MPA.JOIN_DT  BETWEEN #{stt_dt} AND #{end_dt}
                                 </if>
                                 <if test="dataAthrQury != null and dataAthrQury != ''">
                                     ${dataAthrQury}
                                 </if>
                                 <if test="ocb_gubun != null and ocb_gubun != ''">
                                     <if test="ocb_gubun.equalsIgnoreCase('N')">
                                     AND CASE WHEN (PROD.MEMBERSHIP IS NOT NULL OR PROD.MEMBERSHIP != '')
                                                   AND
                                                   TO_NUMBER(
                                                    SUBSTR(TO_CHAR(SYSDATE,'YYYYMMDD'),1,4)) - TO_NUMBER(SUBSTR( NVL(MEM.BRTH_MON_DAY, '19000101'),1,4)) -
                                                       (CASE WHEN TO_NUMBER( SUBSTR(TO_CHAR(SYSDATE,'YYYYMMDD'),5, 4)) <![CDATA[>=]]>
                                                       TO_NUMBER(SUBSTR(REPLACE(TO_CHAR(NVL(MEM.BRTH_MON_DAY, '19000101'))  , '/', ''),5,4  ) )
                                                             THEN 0
                                                             ELSE 1
                                                         END) <![CDATA[>=]]>  14
                                                       AND  LENGTH(MEM.IDN_NO) != 10




                                               THEN 'OCB'
                                               ELSE ''
                                         END = ''
                                     </if>
                                 </if>
                               <if test="b2b_comp_cd != null and b2b_comp_cd != ''">
                                   AND MPA.B2B_COMP_CD = #{b2b_comp_cd}
                               </if>

                                <if test="in_stt_dt != null and in_stt_dt != '' and in_end_dt != null and in_end_dt != ''">
                                    AND MPA.PAY_DAY BETWEEN #{in_stt_dt} AND #{in_end_dt}
                                </if>
                                <if test="pay_mthd != null and pay_mthd != ''">
                                    AND MPA.PAY_MTHD = #{pay_mthd}
                                </if>
                                <if test="emple_no != null and emple_no != ''">
                                    AND MPA.EMPLE_NO = #{emple_no}
                                </if>
                                <if test="dept_cd != null and dept_cd != ''">
                                    AND DEPT.DEPT_CD = #{dept_cd}
                                </if>
                                <if test="prod_cl != null and prod_cl != ''">
                                    AND PROD.PROD_CL = #{prod_cl}
                                </if>
                                <if test="prod_cd != null and prod_cd != ''">
                                   AND MPA.PROD_CD = #{prod_cd}
                                </if>
                                <if test="eve_pay_chk.equalsIgnoreCase('Y')">
                                    AND MPA.PAY_DAY <![CDATA[<]]> NVL(EVT.EVENT_PROC_DAY, '99991231')
                                </if>
                              GROUP BY MPA.ACCNT_NO, MEM.MEM_NO,MEM.MEM_NM,PROD.PROD_NM,
                                       MPA.PROD_MODEL_KIND,
                                       DEPT.DEPT_CD,EMP.EMPLE_NM,
                                       MPA.BEF_EMPLE_CD, MPA.JOIN_DT,MPA.DED_NO,MPA.PAY_MTHD,
                                       CASE WHEN EVT.ACCNT_NO IS NOT NULL THEN '행사'
                                            WHEN RESN.ACCNT_NO IS NOT NULL THEN fn_com_nm('64',resn.resn_cl)
                                            WHEN TP.ACCNT_NO IS NOT NULL THEN '세무'
                                            ELSE '정상'
                                       END, EMP.EMPLE_NO, MPA.B2B_COMP_CD
                                       , EVT.ACCNT_NO, RESN.ACCNT_NO
                                       , NVL(EVT.EVENT_PROC_DAY, '')
                                       , NVL(resn.resn_proc_day, '')
                                       , NVL(RESN.resn_proc_yn,'')


                               ) TBL
                               <if test="join_stat != 'ALL'">
                                   WHERE TBL.EVENT_STAT = #{join_stat}
                               </if>
                       ) X
                ) Z
     <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
         <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
         ]]>
     </if>
    </select>

    <!-- ================================================================
     * 날짜 : 20190213
     * 이름 : 송준빈
     * 추가내용 : 일일청구기준데이터 엑셀파일 배치일자 조회
     * 대상 테이블 :
     * ================================================================
     * -->
    <select id="DlwCondMap.getMbidExcelBatchDay" parameterType="map" resultType="resultMap">
        SELECT /* DlwPayMap.getCsvFileBatchDay */
               BAT_PROC_DT
              ,BAT_CAL_YN
              ,REG_MAN
              ,REG_DM
              ,DEL_FG
          FROM LF_DMUSER.TB_CSV_FILE_BATCH_DAY
         WHERE 1=1
           AND DEL_FG = 'N'
           AND BAT_CAL_YN = 'Y'
           AND BAT_PROC_DT = #{bat_proc_dt}
        ORDER BY BAT_PROC_DT, BAT_CAL_YN
    </select>

    <!-- ================================================================
     * 날짜 : 20190213
     * 이름 : 송준빈
     * 추가내용 : 일일청구기준데이터 엑셀파일 리스트
     * 대상 테이블 :
     * ================================================================
     * -->
    <select id="DlwCondMap.getMbidExcelList" parameterType="map" resultType="resultMap">
        SELECT ACCNT_NO
              ,MEM_NO
              ,MEM_NM
              ,BRTH_MON_DAY
              ,DECODE(SEX,'0001','남성','여성') AS SEX
              ,SUBSTR(HOME_ADDR,0,6) AS ADDR
              ,CELL
              ,EMAIL
              ,CI_YN
              ,SDP_YN
              ,SUBSTR(JOIN_DT,0,4) AS JOIN_YYYY
              ,SUBSTR(JOIN_DT,5,2) AS JOIN_MM
              ,PROD_NM
              ,STAT
              ,TRUE_CNT
              ,PAY_AMT
              ,REL_AMT
              ,ADD_AMT
              ,DIFF_CNT
              ,(ACU_AMT - USE_AMT) AS DIFF_MALL
              ,'X' AS HOMP_YN
              ,MALL_YN
              ,MARKT_AGR_YN
              ,ACU_AMT
              ,USE_AMT
          FROM ( SELECT MBID.ACCNT_NO
                       ,MBID.MEM_NO
                       ,MB.MEM_NM
                       ,(CASE WHEN LENGTH(MB.CI_VAL) = 88 THEN 'Y' ELSE 'N' END) AS CI_YN
                       ,MB.BRTH_MON_DAY
                       ,MB.EMAIL
                       ,MBID.TRUE_DAY
                       ,MBID.JOIN_DT
                       ,MB.SEX
                       ,MB.HOME_ADDR
                       ,PD.PROD_NM
                       ,MB.CELL
                       ,MB.MARKT_AGR_YN
                       ,MBID.MONTH_COUNT
                       ,REAL_CNT AS TRUE_CNT
                       ,DECODE(KSTBIT,'01','대기','02','가입','03','해약','행사') AS STAT
                       ,NVL(( SELECT DISTINCT 'Y'
                                FROM TB_MEMBER_BASIC_INFO_DAY A
                                INNER JOIN PRODUCT B
                                        ON A.PROD_CD = B.PROD_CD
                               WHERE A.MEM_NO = MBID.MEM_NO
                                 AND B.SECTION_THR = '0010'
                                 AND MBID.MEM_NO = A.MEM_NO
                            ),'N') AS SDP_YN
                       ,(MONTH_COUNT - TRUE_CNT) AS DIFF_CNT
                       ,NVL((SELECT SUM(AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = MBID.PROD_CD AND NO <![CDATA[<=]]> TRUE_CNT),0) AS PAY_AMT
                       ,NVL((SELECT SUM(REL_AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = MBID.PROD_CD AND NO <![CDATA[<=]]> REL_CNT),0) AS REL_AMT
                       ,NVL((SELECT SUM(ADD_AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = MBID.PROD_CD AND NO <![CDATA[<=]]> ADD_CNT),0) AS ADD_AMT
                       ,(CASE WHEN NVL(DLW.GOODS_ID,'N') != 'N' AND MALL_USE_YN = 'Y'  THEN 'Y' ELSE 'N' END) AS MALL_YN
                       ,NVL(DLW.ACU_AMT,0) AS ACU_AMT
                       ,NVL(DLW.USE_AMT,0) AS USE_AMT
                   FROM LF_DMUSER.TB_MEMBER_BASIC_INFO_DAY MBID
                   INNER JOIN MEMBER MB
                           ON MBID.MEM_NO = MB.MEM_NO
                          AND MB.DEL_FG = 'N'
                   INNER JOIN PRODUCT PD
                           ON MBID.PROD_CD = PD.PROD_CD
                   LEFT OUTER JOIN TB_MEMBER_DLWMALL DLW
                           ON MBID.MEM_NO = DLW.MEMBER_ID
                          AND MBID.ACCNT_NO = DLW.GOODS_ID
                  WHERE 1=1
                    AND MEM_NM != 'AAA'
                    --AND (HOME_ADDR LIKE '%김포%' OR HOME_ADDR LIKE '%파주%' OR HOME_ADDR LIKE '%고양%')
               ) TBL
         WHERE DIFF_CNT <![CDATA[<]]> 4
    </select>

    <!-- ================================================================
     * 날짜 : 20181211
     * 이름 : 송준빈
     * 추가내용 : 일일청구기준데이터 File 목록 INSERT
     * 대상 테이블 : LF_DMUSER.TB_MBID_CSV_FILE_LIST
     * ================================================================
     * -->
    <insert id="DlwCondMap.insertMbidCsvFileList"  parameterType="map">
        INSERT INTO /* DlwPayMap.insertMbidCsvFileList */
                    LF_DMUSER.TB_MBID_CSV_FILE_LIST(EXT_DT, FILE_TYPE, FILE_PATH, FILE_NAME, DNLD_DM, DNLD_MAN, REG_DM, REG_MAN, DEL_FG)
             VALUES (#{ext_dt}, #{file_type}, #{file_path}, #{file_name}, '', '', SYSDATE, 'SYSTEM[MBID]', 'N')
    </insert>

    <!-- ================================================================
     * 날짜 : 20181214
     * 이름 : 송준빈
     * 추가내용 : 일일청구기준데이터 단문 메세지(SMS) 전송 대상 INSERT
     * 대상 테이블 : LF_KAKAO.SMS_MSG, LF_DMUSER.TB_MBID_CSV_FILE_PURIFY
     * ================================================================
     * -->
    <insert id="DlwCondMap.insertMbidBatchSmsSend" parameterType="map">
        INSERT INTO LF_KAKAO.SMS_MSG(MSGKEY, REQDATE, STATUS, TYPE, PHONE, CALLBACK, MSG)
        SELECT LF_KAKAO.SMS_MSG_SEQ.NEXTVAL AS MSGKEY
              ,SYSDATE
              ,'1'
              ,'0'
              ,REPLACE(MAIN_TBL.CELL, '-', '')
              ,'0808798899' AS CALLBACK
              ,MAIN_TBL.SEND_MSG
          FROM ( SELECT ACCNT_NO
                       ,MEM_NO
                       ,MEM_NM
                       ,AGE
                       ,SEX
                       ,HOME_ADDR
                       ,TRUE_CNT
                       ,TRUE_DAY
                       ,PROD_NM
                       ,JOIN_DT
                       ,CELL
                       ,MARKT_AGR_YN
                       ,ACU_AMT
                       ,USE_AMT
                       ,MSG_BATCH_SEND_YN
                       ,SEND_MSG
                       ,RGSR_DTTM
                   FROM LF_DMUSER.TB_MBID_CSV_FILE_PURIFY
                  WHERE 1=1
                    AND MSG_BATCH_SEND_YN = 'Y'
                    AND (LENGTHB(SEND_MSG) <![CDATA[<=]]> 140 OR SEND_MSG IS NULL)
               ) MAIN_TBL
         WHERE 1=1
    </insert>

    <!-- ================================================================
     * 날짜 : 20181214
     * 이름 : 송준빈
     * 추가내용 : 일일청구기준데이터 장문 메세지(LMS) 전송 대상 INSERT
     * 대상 테이블 : LF_KAKAO.MMS_MSG, LF_DMUSER.TB_MBID_CSV_FILE_PURIFY
     * ================================================================
     * -->
    <insert id="DlwCondMap.insertMbidBatchMmsSend" parameterType="map">
        INSERT INTO LF_KAKAO.MMS_MSG(MSGKEY, REQDATE, SUBJECT, MSG, CALLBACK, STATUS, TYPE, PHONE, FILE_CNT)
        SELECT LF_KAKAO.MMS_MSG_SEQ.NEXTVAL AS MSGKEY
              ,SYSDATE
              ,SUBSTR(MAIN_TBL.SEND_MSG, 0, 10)
              ,MAIN_TBL.SEND_MSG
              ,'0808798899' AS CALLBACK
              ,'1'
              ,'0'
              ,REPLACE(MAIN_TBL.CELL, '-', '')
              ,'1'
          FROM ( SELECT ACCNT_NO
                       ,MEM_NO
                       ,MEM_NM
                       ,AGE
                       ,SEX
                       ,HOME_ADDR
                       ,TRUE_CNT
                       ,TRUE_DAY
                       ,PROD_NM
                       ,JOIN_DT
                       ,CELL
                       ,MARKT_AGR_YN
                       ,ACU_AMT
                       ,USE_AMT
                       ,MSG_BATCH_SEND_YN
                       ,SEND_MSG
                       ,RGSR_DTTM
                   FROM LF_DMUSER.TB_MBID_CSV_FILE_PURIFY
                  WHERE 1=1
                    AND MSG_BATCH_SEND_YN = 'Y'
                    AND LENGTHB(SEND_MSG) > 140
               ) MAIN_TBL
         WHERE 1=1
    </insert>

    <!-- ================================================================
     * 날짜 : 20181214
     * 이름 : 송준빈
     * 추가내용 : 일일청구기준데이터 단문,장문 메세지(SMS,LMS) 전송 이력정보 INSERT
     * 대상 테이블 : PS_WILLVI.TB_CHAT_SNDG_HSTR_NEW, LF_DMUSER.TB_MBID_CSV_FILE_PURIFY
     * ================================================================
     * -->
    <insert id="DlwCondMap.insertMbidBatchMsgSendHist" parameterType="map">
        INSERT INTO PS_WILLVI.TB_CHAT_SNDG_HSTR_NEW (
                                                        CNTR_CD
                                                       ,CHAT_SNDG_HSTR_ID
                                                       ,CELL
                                                       ,CHAT_SNDG_DIV_CD
                                                       ,CHAT_MSG_TITL
                                                       ,CHAT_MSG_CNTN
                                                       ,MSG_TRNM_SCS_YN
                                                       ,SNDG_DTTM
                                                       ,SNDG_CHPR_ID
                                                       ,RESR_YN
                                                       ,RESR_DTTM
                                                       ,CNTR_RPRS_TLNO
                                                       ,MEM_NO
                                                       ,MEM_NM
                                                       ,SNDG_NO
                                                       ,SNDG_SQNC
                                                       ,CHAT_SNDG_STAT_CD
                                                       ,RGSR_ID
                                                       ,RGSN_DTTM
                                                       ,AMND_ID
                                                       ,AMNT_DTTM
                                                    )
        SELECT 'CCA'
              ,'CSH' || TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') || LPAD(PS_WILLVI.SEQ_COMMON.NEXTVAL, 7, '0')
              ,REPLACE(MAIN_TBL.CELL, '-', '')
              ,CASE WHEN  LENGTHB(MAIN_TBL.SEND_MSG) >  140 THEN '3'
                    WHEN (LENGTHB(MAIN_TBL.SEND_MSG) <![CDATA[<=]]> 140 OR MAIN_TBL.SEND_MSG IS NULL) THEN '0'
                    ELSE 'NOTDEF'
                END AS CHAT_SNDG_DIV_CD
              ,SUBSTR(MAIN_TBL.SEND_MSG, 0, 10)
              ,MAIN_TBL.SEND_MSG
              ,'Y'
              ,SYSDATE
              ,'SYSTEM[MSG]'
              ,'N'
              ,''
              ,REPLACE('0808798899', '-', '') AS CNTR_RPRS_TLNO
              ,MAIN_TBL.MEM_NO
              ,MAIN_TBL.MEM_NM
              ,(SELECT NVL(MAX(SNDG_NO) , 0) + 1 FROM PS_WILLVI.TB_CHAT_SNDG_HSTR_NEW WHERE 1=1)
              ,'0'
              ,'1'
              ,'SYSTEM[MSG]'
              ,SYSDATE
              ,'SYSTEM[MSG]'
              ,SYSDATE
          FROM ( SELECT ACCNT_NO
                       ,MEM_NO
                       ,MEM_NM
                       ,AGE
                       ,SEX
                       ,HOME_ADDR
                       ,TRUE_CNT
                       ,TRUE_DAY
                       ,PROD_NM
                       ,JOIN_DT
                       ,CELL
                       ,MARKT_AGR_YN
                       ,ACU_AMT
                       ,USE_AMT
                       ,MSG_BATCH_SEND_YN
                       ,SEND_MSG
                       ,RGSR_DTTM
                   FROM LF_DMUSER.TB_MBID_CSV_FILE_PURIFY
                  WHERE 1=1
                    AND MSG_BATCH_SEND_YN = 'Y'
               ) MAIN_TBL
         WHERE 1=1
    </insert>

    <!-- ================================================================
     * 날짜 : 20190131
     * 이름 : 송준빈
     * 추가내용 : 고객연체 히스토리 데이터 적재
     * 대상 테이블 : LF_DMUSER.TB_MEMBER_YENCHE_HSTR
     * ================================================================
     * -->
    <insert id="DlwCondMap.insertMemberYencheHstr" parameterType="map">
        BEGIN
            INSERT INTO /* DlwCondMap.insertMemberYencheHstr */
                        LF_DMUSER.TB_MEMBER_YENCHE_HSTR
            SELECT *
              FROM ( SELECT TO_CHAR(SYSDATE - 1,'YYYYMMDD') AS YYYYMMDD
                           ,TBL2.ACCNT_NO
                           ,TBL2.REAL_CNT
                           ,TBL2.ICHAE_DT
                           ,(SELECT KSTBIT FROM MEM_PROD_ACCNT WHERE ACCNT_NO = TBL2.ACCNT_NO AND DEL_FG ='N') AS KSTBIT
                           ,TBL2.PAY_MTHD
                           ,TBL2.DIFF_CNT
                           ,TBL2.PAY_DAY
                           ,REPLACE(TBL2.MEM_NM,CHR(0),'') AS MEM_NM
                           ,REPLACE(TBL2.PROD_NM,CHR(0),'') AS PROD_NM
                           ,REPLACE(TBL2.CELL,CHR(0),'') AS CELL
                           ,TBL2.MEM_NO
                           ,TBL2.DIFF_AMT
                           ,TBL2.PAY_BIT
                           ,REPLACE(TBL2.TYPE_A,CHR(0),'') AS TYPE_A
                           ,REPLACE(TBL2.TYPE_B,CHR(0),'') AS TYPE_B
                           ,REPLACE(TBL2.TYPE_C,CHR(0),'') AS TYPE_C
                           ,TBL2.TRUE_AMT
                           ,TBL2.REL_AMT
                           ,TBL2.ADD_AMT
                           ,TBL2.EXT_YN
                           ,REPLACE(TBL2.EXT_ID,CHR(0),'') AS EXT_ID
                           ,REPLACE(TBL2.SUB_TRGT_LIST_ID,CHR(0),'') AS SUB_TRGT_LIST_ID
                           ,REPLACE(TBL2.TRGT_LIST_ID,CHR(0),'') AS TRGT_LIST_ID
                           ,REPLACE((NVL(TRUE_AMT_1,0) + NVL(REL_AMT_1,0) + NVL(ADD_AMT_1,0)),CHR(0),'') AS MON_PAY_AMT
                           ,REPLACE((CASE WHEN PAY_BIT LIKE 'N%' THEN TRUE_DAY_1 ELSE REL_DAY_1 END ),CHR(0),'') AS MON_PAY_DAY
                           ,TCA.USER_NM
                           ,(SELECT MAX(EXCP_EXPI) FROM PS_WILLVI.TB_TRGT_EXCP WHERE EXCP_ID = TBL2.ACCNT_NO AND  USER_DEFN2_CNTN  = '02' AND USE_YN = 'Y') AS EXCP_REASON
                           ,TRGT_LIST_NM AS TRGT_NM
                           ,(SELECT MAX(SUB_TRGT_LIST_NM) FROM PS_WILLVI.TB_SUB_TRGT_LIST_DTL STL WHERE TBL2.SUB_TRGT_LIST_ID = STL.SUB_TRGT_LIST_ID ) AS SUB_TRGT_NM
                           ,NVL((SELECT 'Y' FROM TB_MEMBER_EXT_SPECIAL WHERE TBL2.ACCNT_NO = ACCNT_NO AND SPECIAL_BIT = '01' AND DEL_FG = 'N'),'N') AS SPECIAL_YN
                       FROM TB_MEMBER_YENCHE_MNG TBL2
                       LEFT OUTER JOIN ( SELECT ACCNT_NO
                                               ,SUM(CASE WHEN GNG = 'PM' THEN PAY_AMT ELSE 0 END) AS TRUE_AMT_1
                                               ,SUM(CASE WHEN GNG = 'PM1' THEN PAY_AMT ELSE 0 END) AS REL_AMT_1
                                               ,SUM(CASE WHEN GNG = 'PM2' THEN PAY_AMT ELSE 0 END) AS ADD_AMT_1
                                               ,MAX(CASE WHEN GNG = 'PM' THEN PAY_DAY ELSE '' END) AS TRUE_DAY_1
                                               ,MAX(CASE WHEN GNG = 'PM1' THEN PAY_DAY ELSE '' END) AS REL_DAY_1
                                               ,MAX(CASE WHEN GNG = 'PM2' THEN PAY_DAY ELSE '' END) AS ADD_DAY_1
                                           FROM ( SELECT MYM.ACCNT_NO
                                                        ,SUM(PAY_AMT) AS PAY_AMT
                                                        ,MAX(PM.PAY_DAY) AS PAY_DAY
                                                        ,'PM' AS GNG
                                                    FROM TB_MEMBER_YENCHE_MNG MYM
                                                    LEFT OUTER JOIN PAY_MNG PM
                                                            ON MYM.ACCNT_NO = PM.ACCNT_NO AND PM.DEL_FG = 'N'
                                                  GROUP BY  MYM.ACCNT_NO, PM.PAY_DAY
                                                  HAVING PM.PAY_DAY >= TO_CHAR(SYSDATE - 1,'YYYYMM') || '01'

                                                  UNION

                                                  SELECT MYM.ACCNT_NO
                                                        ,SUM(PAY_AMT) AS PAY_AMT
                                                        ,MAX(PM.PAY_DAY) AS PAY_DAY
                                                        ,'PM1' AS GNG
                                                  FROM TB_MEMBER_YENCHE_MNG MYM LEFT OUTER JOIN
                                                  PAY_MNG_DTL PM ON MYM.ACCNT_NO = PM.ACCNT_NO AND PM.DEL_FG = 'N'
                                                  GROUP BY  MYM.ACCNT_NO, PM.PAY_DAY
                                                  HAVING PM.PAY_DAY >= TO_CHAR(SYSDATE - 1,'YYYYMM') || '01'

                                                  UNION

                                                  SELECT MYM.ACCNT_NO
                                                        ,SUM(PAY_AMT) AS PAY_AMT
                                                        ,MAX(PM.PAY_DAY) AS PAY_DAY
                                                        ,'PM2' AS GNG
                                                  FROM TB_MEMBER_YENCHE_MNG MYM LEFT OUTER JOIN
                                                  PAY_MNG_DTL1 PM ON MYM.ACCNT_NO = PM.ACCNT_NO AND PM.DEL_FG = 'N'
                                                  GROUP BY  MYM.ACCNT_NO, PM.PAY_DAY
                                                  HAVING PM.PAY_DAY >= TO_CHAR(SYSDATE - 1,'YYYYMM') || '01'
                                                )
                                         GROUP BY ACCNT_NO
                                       ) TBL
                               ON TBL.ACCNT_NO = TBL2.ACCNT_NO
                       LEFT OUTER JOIN ( SELECT TRGT_LIST_ID
                                               ,TRGT_LIST_NM
                                               ,PS_WILLVI.FN_GETHRCHCDNM('CAM990', TL.CMPG_TYP_CD, 'CCA') AS CMPG_TYP_NM
                                               ,PS_WILLVI.FN_GETHRCHCDNM('CAM990', HC.HGRN_HRCH_CD, 'CCA') AS HGRN_HRCH_NM
                                           FROM PS_WILLVI.TB_TRGT_LIST_DTL TL
                                           INNER JOIN PS_WILLVI.TB_HRCH_CD HC
                                                   ON TL.CMPG_TYP_CD = HC.HRCH_CD
                                       ) TLI
                               ON TBL2.TRGT_LIST_ID = TLI.TRGT_LIST_ID
                       LEFT OUTER JOIN ( SELECT AA.SUB_TRGT_LIST_ID
                                               ,BB.ACCNT_NO
                                               ,USER_NM
                                           FROM PS_WILLVI.TB_TRGT_CUST_ALCT AA
                                           INNER JOIN PS_WILLVI.TB_TRGT_CUST_DTPT BB
                                                   ON AA.TRGT_CUST_DTPT_ID = BB.TRGT_CUST_DTPT_ID
                                           INNER JOIN PS_WILLVI.TB_USER USR
                                                   ON AA.CNSR_ID = USER_ID
                                       ) TCA
                               ON TCA.SUB_TRGT_LIST_ID = TBL2.SUB_TRGT_LIST_ID
                              AND TCA.ACCNT_NO = TBL2.ACCNT_NO
                      WHERE 1=1
                    )
             WHERE 1=1;

            INSERT INTO TB_CLOSE_MEMBER_MON
            SELECT TO_CHAR(SYSDATE - 1,'YYYYMM') AS CLOSE_DT,
                   ACCNT_NO,
                   MEM_NO,
                   PROD_CD,
                   KSTBIT,
                   STAT,
                   JOIN_DT,
                   PAY_MTHD,
                   NEW_CHAN_GUNSU,
                   MONTH_COUNT - 1,
                   TRUE_CNT,
                   REL_CNT,
                   ADD_CNT,
                   TRUE_DAY,
                   REL_DAY,
                   ADD_DAY,
                   PAY_BIT,
                   B2B_COMP_CD,
                   LF_DMUSER.FN_RESN_AMT_NEW(PROD_CD,TRUE_CNT,JOIN_DT),
                   EMPLE_NO,
                   MAIN_CONTRACT
               FROM LF_DMUSER.TB_MEMBER_BASIC_INFO_DAY;
        END;
    </insert>

    <!-- ================================================================
     * 날짜 : 20190418
     * 이름 : 송준빈
     * 추가내용 : 수수료 산출 프로시저
     * 대상 테이블 : LF_DMUSER.TB_ALOW_BASIC_INFO
     * ================================================================
     * -->
    <insert id="DlwCondMap.insertAlowBasicInfo" statementType="CALLABLE">
        {call LF_DMUSER.SP_MEMBER_ALOW_SCHEDULE()}
    </insert>

    <select id="DlwCondMap.getCloseDataCount" parameterType="map" resultType="int">
        SELECT /* DlwCondMap.getCloseDataCount */
        	COUNT(*)
		FROM ALOW_DA_DTL_DUMMY
		WHERE ALOW_DT = #{alow_dt}

        <if test="tab_id.equalsIgnoreCase('0')">
        	AND ALOW_CD IN  ('T33', 'F8', 'F10')
        </if>

        <if test="tab_id.equalsIgnoreCase('1')">
        	AND ALOW_CD IN  ('T21', 'T32', 'F7')
        </if>

    </select>

    <!--
    	================================================================
		  * 날짜 : 20190507
		  * 추가내용 :  해당 월 수수료 마감
		  * 대상 테이블 : LF_DMUSER.ALOW_DA_DTL
   		================================================================
     -->
    <insert id="DlwCondMap.insertCloseDataComm" parameterType="map">
        /* DlwCondMap.insertCloseDataComm */
        
       	BEGIN
       		/* 1) 수수료 마감 프로세스 */
	       	INSERT INTO ALOW_DA_DTL
	        SELECT
		        ALOW_DT,
		        B2B_COMP_CD,
		        ALOW_CD,
		        ACCNT_NO,
		        1,
		        MAX(PAY_NO) AS PAY_NO,
		        SUM(ALOW_AMT),
		        PROD_CD,
		        '',
		        0,
		        SYSDATE,
		        #{p_emple_no},
		        ''
		    FROM
		    (
		        SELECT
		            #{alow_dt} AS ALOW_DT,
		            B2B_COMP_CD,
		            (CASE WHEN ALOW_BIT IN ('T33A','T33B') THEN 'T33'
		                  WHEN ALOW_BIT IN ('F8A','F8B') THEN 'F8'
		             ELSE 'F10' END ) AS ALOW_CD,
		            ACCNT_NO,
		            PAY_NO,
		            ALOW_AMT,
		            PROD_CD
		        FROM TB_ALOW_BASIC_INFO
		        WHERE ALOW_DT = #{alow_dt}
		        AND ALOW_BIT IN ('T33A','T33B','F8A','F8B','F10')
		    )
		    GROUP BY ALOW_DT, B2B_COMP_CD, ALOW_CD, ACCNT_NO, PROD_CD;
            
            COMMIT;

	    	INSERT INTO ALOW_DTL_T33 (ALOW_DT,B2B_COMP_CD,ALOW_CD,ACCNT_NO,PAY_NO,AMT,PROD_CD,ALOW_B2B_COMP_CD)
	    	SELECT  
			    ALOW_DT,
			    (SELECT B2B_COMP_CD FROM MEM_PROD_ACCNT WHERE ACCNT_NO = ABI.ACCNT_NO AND DEL_FG = 'N') AS B2B_CODE,
			    'T33',
			    ACCNT_NO,
			    PAY_NO,
			    ALOW_AMT,
			    PROD_CD,
			    B2B_COMP_CD
			FROM LF_DMUSER.TB_ALOW_BASIC_INFO ABI
			WHERE ALOW_DT = #{alow_dt}
			AND ALOW_BIT IN  ('T33A','T33B');
			
			COMMIT;
			
		    INSERT INTO ALOW_DTL_T33_REDMP (ALOW_DT,B2B_COMP_CD,ALOW_CD,ACCNT_NO,PAY_NO,AMT,PROD_CD,ALOW_B2B_COMP_CD,TARGET_ALOW_DT)
	    	SELECT  
			    ALOW_DT,
			    (SELECT B2B_COMP_CD FROM MEM_PROD_ACCNT WHERE ACCNT_NO = ABI.ACCNT_NO AND DEL_FG = 'N') AS B2B_CODE,
			    'F8',
			    ACCNT_NO,
			    PAY_NO,
			    ALOW_AMT,
			    PROD_CD,
			    B2B_COMP_CD,
                ' '
			FROM LF_DMUSER.TB_ALOW_BASIC_INFO ABI
			WHERE ALOW_DT = #{alow_dt}
			AND ALOW_BIT IN  ('F8A','F8B');
			
		    COMMIT;
			
		    INSERT INTO ALOW_DTL_T33_REDMP (ALOW_DT,B2B_COMP_CD,ALOW_CD,ACCNT_NO,PAY_NO,AMT,PROD_CD,ALOW_B2B_COMP_CD,TARGET_ALOW_DT)
	    	SELECT  
			    ALOW_DT,
			    (SELECT B2B_COMP_CD FROM MEM_PROD_ACCNT WHERE ACCNT_NO = ABI.ACCNT_NO AND DEL_FG = 'N') AS B2B_CODE,
			    'F10',
			    ACCNT_NO,
			    PAY_NO,
			    ALOW_AMT,
			    PROD_CD,
			    B2B_COMP_CD,
                ' '
			FROM LF_DMUSER.TB_ALOW_BASIC_INFO ABI
			WHERE ALOW_DT = #{alow_dt}
			AND ALOW_BIT IN  ('F10');
			
			COMMIT;
	    END;
    </insert>

    <!--
    	================================================================
		  * 날짜 : 20190507
		  * 추가내용 :  해당 월 수당 마감
		  * 대상 테이블 : LF_DMUSER.ALOW_DA_DTL
   		================================================================
     -->
    <insert id="DlwCondMap.insertCloseDataAlow" parameterType="map">
       	/* DlwCondMap.insertCloseDataAlow */
       	
       	BEGIN
       		/* 2) 수당 마감 프로세스 */      
	       	INSERT INTO ALOW_DA_DTL
	        SELECT
		        ALOW_DT,
		        B2B_COMP_CD,
		        ALOW_CD,
		        ACCNT_NO,
		        1,
		        MAX(PAY_NO) AS PAY_NO,
		        SUM(ALOW_AMT),
		        PROD_CD,
		        '',
		        0,
		        SYSDATE,
		        #{p_emple_no},
		        ''
		    FROM
		    (
		        SELECT
		            #{alow_dt} AS ALOW_DT,
		            B2B_COMP_CD,
		            (CASE WHEN ALOW_BIT IN ('T21') THEN 'T21'
		                  WHEN ALOW_BIT IN ('F7A','F7B') THEN 'F7'
		             ELSE 'T32' END ) AS ALOW_CD,
		            ACCNT_NO,
		            PAY_NO,
		            ALOW_AMT,
		            PROD_CD
		        FROM TB_ALOW_BASIC_INFO
		        WHERE ALOW_DT = #{alow_dt}
		        AND ALOW_BIT IN ('T21','T32','F7A','F7B')
		    )
		    GROUP BY ALOW_DT, B2B_COMP_CD, ALOW_CD, ACCNT_NO, PROD_CD;

		    COMMIT;
		    
		    /* 3. 이월환수 프로세스 */  
		    INSERT INTO ALOW_DA_DTL
			SELECT
			    ALOW_DT,
			    EMPLE_NO,
			    'F12',
			    ACCNT_NO,
			    DTL_SEQ,
			    PAY_NO,
			    AMT,
			    PROD_CD,
			    NOTE,
			    NEW_CHAN_GUNSU,
			    SYSDATE,
			    #{p_emple_no},
			    'N'
			FROM
			(
			    SELECT
			        ALOW_DT,
			        EMPLE_NO,
			        ACCNT_NO,
			        1 AS DTL_SEQ,
			        PAY_NO,
			        (
			            CASE WHEN SEND_AMT > SUM(ALOW_AMT) OVER(PARTITION BY EMPLE_NO ORDER BY EMP_IDX) THEN ALOW_AMT
			                 ELSE (SEND_AMT + ALOW_AMT) - SUM(ALOW_AMT) OVER(PARTITION BY EMPLE_NO ORDER BY EMP_IDX)
			            END
			        ) AMT,
			        PROD_CD,
			        NOTE,
			        NEW_CHAN_GUNSU,
			        EMP_IDX,
			        SEND_AMT,
			        ALOW_AMT,
			        HW_AMT,
			        SUM(ALOW_AMT) OVER(PARTITION BY EMPLE_NO ORDER BY EMP_IDX) AS ADD_ALOW
			    FROM
			    (
			        SELECT
			            AD.ALOW_DT,
			            AD.EMPLE_NO,
			            AD.ACCNT_NO,
			            AD.PAY_NO,
			            AD.PROD_CD,
			            AD.NOTE,
			            AD.NEW_CHAN_GUNSU,
			            ROW_NUMBER() OVER(PARTITION BY EMPLE_NO ORDER BY ACCNT_NO ASC) AS EMP_IDX,
			            (SELECT SUM(AMT) FROM ALOW_DTL_F12 WHERE EMPLE_NO = AD.EMPLE_NO AND ALOW_DT = TO_CHAR(ADD_MONTHS(#{alow_dt}||'01',-1),'YYYYMM')) SEND_AMT,
			            (CASE WHEN ALOW_CD IN ('T21','T32') THEN AMT ELSE 0 END) AS ALOW_AMT,
			            (CASE WHEN ALOW_CD IN ('F7','F11') THEN AMT ELSE 0 END) AS HW_AMT
			        FROM ALOW_DA_DTL AD
			        WHERE 1=1
			        AND ALOW_CD != 'F12'
			        AND ALOW_DT =  #{alow_dt}
			    )
			    WHERE SEND_AMT > 0
			) TBL
			WHERE AMT > 0;
                
            COMMIT;


		    /* 3) 당월  전체 이월환수 데이터 이월환수 TABLE인서트 */
			INSERT INTO ALOW_DTL_F12
			SELECT
			      #{alow_dt}
			    , EMPLE_NO
			    , SUM(TM_DTL_AMT) TM_DTL_AMT
			    , SUM(TM_REDMP_AMT) TM_REDMP_AMT  
			    , SUM(AMT) AMT
			    , SUM(AMT) - SUM(TM_DTL_AMT) + SUM(TM_REDMP_AMT)
			    , SYSDATE
			    , 'SYSTEM'
			    , CASE WHEN SUM(TM_REDMP_AMT) > 0 AND SUM(TM_REDMP_AMT) >= SUM(TM_DTL_AMT) THEN SUM(TM_DTL_AMT) + SUM(TM_ALOW_AMT)
			           WHEN SUM(TM_REDMP_AMT) > 0 AND SUM(TM_REDMP_AMT) <![CDATA[<]]> SUM(TM_DTL_AMT) THEN SUM(TM_REDMP_AMT) + SUM(TM_ALOW_AMT)
			           ELSE SUM(TM_ALOW_AMT)
			      END TM_ALOW_AMT
			    , CASE WHEN MAX(STND_ALOW_DT) > ' ' THEN MAX(STND_ALOW_DT) ELSE '202002' END
			FROM
			(
			    SELECT
			        EMPLE_NO,
			        0 TM_DTL_AMT,
			        0 TM_REDMP_AMT,
			        AMT,
			        0 TM_ALOW_AMT,
			        STND_ALOW_DT
			    FROM ALOW_DTL_F12
			    WHERE ALOW_DT = TO_CHAR(ADD_MONTHS(#{alow_dt}||'01',-1),'YYYYMM')

			    UNION ALL

			    SELECT
			        EMPLE_NO,
			        CASE WHEN ALOW_CD IN ('T21','T32') THEN AMT ELSE 0 END TM_DTL_AMT,
			        CASE WHEN ALOW_CD IN ('F7','F11') THEN AMT ELSE 0 END TM_REDMP_AMT,
			        0 AMT,
			        CASE WHEN ALOW_CD IN ('F12') THEN AMT ELSE 0 END TM_ALOW_AMT,
			        ' ' STND_ALOW_DT
			    FROM ALOW_DA_DTL
			    WHERE ALOW_DT = #{alow_dt}
			) TBL
			WHERE EMPLE_NO IN (
			                      SELECT 
			                          EMPLE_NO 
			                      FROM EMPLOYEE EMP INNER JOIN
			                          DEPARTMENT DP ON EMP.DEPT_CD = DP.DEPT_CD
			                      WHERE DP.DEPT_KIND = '02'
			                      AND EMP.DEPT_CD != '1664'
			                  )
			GROUP BY EMPLE_NO
			HAVING SUM(AMT) > 0  OR SUM(TM_DTL_AMT) - SUM(TM_REDMP_AMT) <![CDATA[<]]> 0;
			
            COMMIT;
	    END;
    </insert>
    
    <!-- ================================================================
     * 날짜 : 20200514
     * 이름 : 송준빈
     * 추가내용 : 수당, 수수료 산출 여부 확인
     * 대상 테이블 : 
     * ================================================================
     * -->
    <select id="DlwCondMap.getAlowCalcMgmtExtList" parameterType="map" resultType="resultMap">
        SELECT /* DlwCondMap.getAlowCalcMgmtExtList */
            ALOW_DT,
            ALOW_CALC_GBN,
            REG_DM,
            REG_MAN
        FROM ALOW_CALC_MGMT_EXT
        WHERE 1=1
        AND ALOW_CALC_GBN = #{alow_calc_gbn}
        AND ALOW_DT = TO_CHAR(TO_DATE(TO_CHAR(SYSDATE, 'YYYYMM') || '01') - 1, 'YYYYMM')
    </select>
    
    <!-- ================================================================
     * 날짜 : 20200514
     * 이름 : 송준빈
     * 추가내용 : 수당, 수수료 산출 여부 등록
     * 대상 테이블 : 
     * ================================================================
     * -->
    <insert id="DlwCondMap.insertAlowCalcMgmtExtList" parameterType="map">
       	/* DlwCondMap.insertAlowCalcMgmtExtList */
       	INSERT INTO 
       		LF_DMUSER.ALOW_CALC_MGMT_EXT(ALOW_DT, ALOW_CALC_GBN, REG_DM, REG_MAN) 
       	VALUES(#{alow_dt}, #{alow_calc_gbn}, SYSDATE, 'SYS[PROC]')
    </insert>
</mapper>
