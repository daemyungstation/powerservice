<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[/******************************************************************************
* Program ID       : lib_string
* Program Name     : 공통 String 관련 Script
* Author           : R.H.S
* Created On       : 2015-09-04
 ******************************************************************************/


/**
 * Function Name : gfn_Right
 * Desc          : 문자열의 오른쪽부분을 지정한 길이만큼 Return 한다.
 * param code    : strString (오른부분을 얻어올 원본 문자열)
 * 				       nSize (얻어올 크기. [Default Value = 0])
 * Return        : String - 오른쪽 부분이 얻어진 문자열.
******/
function gfn_Right(strString, nSize)
{
    var nStart = String(strString).length;
    var nEnd   = Number(nStart) - Number(nSize);
    var rtnVal = strString.substring(nStart, nEnd);

    return rtnVal;
}

/**********************************************************************************
 * Function Name : gfn_Left
 * Desc          : 문자열의 왼쪽부분을 지정한 길이만큼 Return 한다.
 * Parameter     : strString (왼쪽부분을 얻어올 원본 문자열)
 *                     nSize (얻어올 크기. [Default Value = 0])
 * Return        : String/왼쪽 부분이 얻어진 문자열.
 **********************************************************************************/
function gfn_Left(strString, nSize)
{
    var rtnVal = "";
    if (nSize > String(strString).length || nSize == null)
        rtnVal = strString;
    else
        rtnVal = strString.substring(0, nSize);

    return rtnVal;
}

/**********************************************************************************
 * Function명   : gfn_Trim
 * Desc         : 입력된 문자열의 좌우측 공백을 제거한 문자열을 구함.
 * Parameter    : arg(좌우측 공백문자를 제거하려는 문자열)
 * Return       : 입력된 문자열에서 좌우측 공백이 제거된 문자열
 **********************************************************************************/
function gfn_Trim(arg)
{
    if (arg == null) { return ""; }
    var sArg = arg.toString();
    return sArg.replace(/(^\s*)|(\s*$)/g, "");
}

/**********************************************************************************
 * Function명   : gfn_Ltrim
 * Desc         : 입력된 문자열의 왼쪽 공백을 제거한 문자열을 구함.
 * Parameter    : 왼쪽 공백문자를 제거하려는 문자열
 * Return       : 입력된 문자열에서 왼쪽 공백이 제거된 문자열
 **********************************************************************************/
function gfn_Ltrim(arg)
{
    var sArg = arg.toString();
    return sArg.replace(/(^\s*)/, "");
}

/**********************************************************************************
 * Function명   : gfn_Rtrim
 * Desc         : 입력된 문자열의 오른쪽 공백을 제거한 문자열을 구함.
 * Parameter    : 오른쪽 공백문자를 제거하려는 문자열
 * Return       : 입력된 문자열에서 오른쪽 공백이 제거된 문자열
 **********************************************************************************/
function gfn_Rtrim(arg)
{
    var sArg = arg.toString();
    return sArg.replace(/(\s*$)/, "");
}

/**********************************************************************************
 * Function명   : gfn_BlankStr
 * Desc         : undefined을 ""로 리턴한다.
 * Parameter    : oParam (object나 문자열)
 * Return       : undefined이면 ""(널 스트링)
 **********************************************************************************/
function gfn_BlankStr(oParam)
{
    var strParam = new String(oParam);
    if(strParam.valueOf() == "undefined") {
        return "";
    }

    return oParam;
}

/**********************************************************************************
 * Function명   : gfn_GetLength
 * Desc         : 입력값 형태에 따라서 길이 또는 범위를 구하는 함수
 * Parameter    : 객체, 문자열, 배열
 * Return       : Type에 따라 구해진 길이 또는 범위
 **********************************************************************************/
function gfn_GetLength()
{
    var varRtnValue = 0;
    var arrArgument = gfn_GetLength.arguments;
    if (arrArgument.length < 1) { return 0; }

    if (!gfn_IsNull(arrArgument[0]))
        varRtnValue = arrArgument[0].toString().length;

    return varRtnValue;
}

/*******************************************************************************
 ★ Desc
    전각문자를 반각문자로
    ( 참고 : 전각문자는 "정사각형" 안에 들어가는 문자이고, 반각은 그 정사각형의 반쪽에 들어가는 문자이다.
             전각문자의 폭은, 반각문자의 2배입니다. 
             예를 들어 숫자 "3" 은, 한글 "가"의 절반의 폭만을 가지고 있습니다. 
             그래서 영문과 숫자 등은 반각이고, 한글이나 한자들은 전각문자입니다. 
             다만, 영문과 숫자를 전각으로 표현할 수도 있습니다.
      예 : 전각문자 ==> ※★０＋
           반각문자 ==> 1a )
 ★ Parameter 
    1. sFull   : 전각문자( 예 : "０＋" )
 ★ return 
    - 성공 = 반각문자 ( 예 : "0+" )
    - 실패 = 
 ******************************************************************************/
function gfn_Full2Half(sFull)
{
	var i, c, sHalf = "";
  
	for( i=0 ; i < sFull.length ; i++ )
	{
		var c = sFull.charCodeAt(i);

		if (c == 12288) 
			sHalf += unescape("%20"); 
		else if ( (c >= 65281) && (c <= 65374) ) 
			sHalf += unescape("%"+(c-65248).toString(16));
		else 
			sHalf += sFull.charAt(i);
	}
	return  sHalf;
}

/*******************************************************************************
 ★ 설명
    반각문자를 전각문자로
 ★ Parameter 
    1. sHalf   : 반각문자( 예 : "0+" )
 ★ return 
    - 성공 = 전각문자 ( 예 : "０＋" )
    - 실패 = 
 ******************************************************************************/
function gfn_Half2Full(sHalf)
{
    var rTmp = "";
    var iTmp = "";
    var i;
 
    for( i = 0 ; i < sHalf.length ; i++ ) 
    {
        //기본 아스키 코드 값을 벗어난 경우(한글)는 전자로 변환할 필요 없음.
        if( (sHalf.charCodeAt(i) >= 32) && (sHalf.charCodeAt(i) <= 126) ) 
        {
			if( sHalf.charCodeAt(i) == 32 ) 
				iTmp = unescape("%u"+(12288).toString(16));
            else 
				iTmp = sHalf.charCodeAt(i) + 65248;
		}
        else 
            iTmp = sHalf.charCodeAt(i);

		if( sHalf.charCodeAt(i) == 32 ) 
			rTmp = rTmp + (iTmp);
		else 
			rTmp = rTmp + String.fromCharCode(iTmp);
    }

    return rTmp;
}

/**********************************************************************************
 * Function명   : gfn_LengthAsciiB
 * Desc         : 입력받은 전체 길이를 계산하는 함수
				   - 문자, 숫자, 특수문자 : 1 로 Count	
				   - 그외 한글/한자 : 2 로 count 되어 합산한다.
 * Parameter    : {String} sValue 원본 문자열
 * Return       : {Number} nCnt 입력받은 전체 길이
 * 사용예		: gfn_LengthAsciiB('a1\n한韓')
 **********************************************************************************/
function gfn_GetLengthAsciiB(sValue) { 
	if(new String(sValue).valueOf() == "undefined") sValue = "";

    var strMsg = sValue.toString();
    var nCnt = 0;
    var loopCnt = 0;
    
    for(var i=0; i<strMsg.length; i++)
    {
        if(strMsg.charCodeAt(i) > 127) {
			nCnt += 2;
        }else 
			nCnt += 1;
	
		if (64 < strMsg.charCodeAt(i) && strMsg.charCodeAt(i) < 90)
			loopCnt += 1;
		
    }

    if (loopCnt>0)	nCnt += 1;

	return nCnt;
}

/**********************************************************************************
 * Function명 	: 
 * Desc       	: 대소문자 구별하여 문자개수 세는 함수
 * Parameter  	: sOrg   - 원래 문자열
				  sCnt   - 개수를 셀 문자열
 * Return     	: length (문자개수)
 * 사용예		: gfn_StringCount("aaBBbbcc", "BB")  ==> 1
 **********************************************************************************/
function gfn_StringCount(sOrg, sCnt)
{
	var i, sRet="";
	var nCnt = 0;

	if( IsNull(sCnt) )		return 0;
	
	for( i = 0 ; i < sOrg.length ; i += sCnt.length )
	{
		if( sOrg.substr(i, sCnt.length) == sCnt )
			nCnt++;
	}
	return nCnt;
}

/**********************************************************************************
 * Function명 	: 
 * Desc       	: 대소문자 구분없이 문자개수 세는 함수
 * Parameter  	: sOrg   - 원래 문자열
				  sCnt   - 개수를 셀 문자열
 * Return     	: length (문자개수)
 * 사용예		: gfn_StringCountCase("aaBBbbcc", "BB")  ==> 2
 **********************************************************************************/
function gfn_StringCountCase(sOrg, sCnt)
{
	var i, sRet="";
	var nCnt = 0;

	if( IsNull(sCnt) )		return 0;
		
	for( i = 0 ; i < sOrg.length ; i += sCnt.length )
	{
		if( sOrg.toLowerCase().substr(i, sCnt.length) == sCnt.toLowerCase() )
			nCnt++;
	}
	return nCnt;
}

/**********************************************************************************
 * Function명 	: gfn_Rand
 * 설명       	: 정수인 nStart ~ nEnd의 범위에 있는 숫자에 대하여 random값을 return한다.
 * Parameter  	: 
     1. nStart	: 시작숫자 ( 단, 정수, 만일 정수가 아니면 Math.floor(nStart)를 적용함)
     2. nEnd  	: 끝숫자 ( 단, 정수, 만일 정수가 아니면 Math.floor(nStart)를 적용함)
 * Return     	: 
    - 성공 = nStart ~ nEnd범위 중 random숫자 (단, nStart, nEnd도 포함됨)
    - 실패 =
 * 주의사항	:  nStart, nEnd는 정수임에 주의
 **********************************************************************************/
function gfn_Rand(nStart, nEnd)
{
	var range_unit, rand, tmp;

	nStart = Math.floor(nStart);
	nEnd = Math.floor(nEnd);
	if( nStart > nEnd )
	{
		tmp = nStart;
		nStart = nEnd;
		nEnd = tmp;
	}
	range_unit = nEnd-nStart+1;
	rand = Math.random();
	rand = Math.random();
	
	return Math.floor(rand*range_unit)+nStart;
}
	
/*******************************************************************************
 * Function Name  : gfn_Pos
 * Desc           : 문자열의 위치를 대소문자 구별하여 찾는 함수.
 * parameter      : sOrg   - 원래 문자열
					sFind  - 찾고자 하는 문자열
					nStart - 검색 시작위치 (옵션 : Default=0)
					ex) gfn_Pos("aaBBbbcc","bb", 1)
 * return         : 찾고자 하는 문자열의 시작위치 ( 예 : 4 )
********************************************************************************/
function gfn_Pos(sOrg, sFind, nStart)
{
	if( gfn_IsNull(nStart) )		nStart = 0;
		
	return sOrg.indexOf(sFind, nStart);
}
 
/*******************************************************************************
 * Function Name  : gfn_PosCase
 * Desc           : 문자열의 위치를 대소문자 구별없이 찾는 함수.
 * parameter      : sOrg   - 원래 문자열
					sFind  - 찾고자 하는 문자열
					nStart - 검색 시작위치 (옵션 : Default=0)
					ex) gfn_PosCase("aaBBbbcc","bb", 1)
 * return         : 찾고자 하는 문자열의 시작위치 ( 예 : 2 )
********************************************************************************/
function gfn_PosCase(sOrg, sFind, nStart)
{
	if( gfn_IsNull(nStart) )		nStart = 0;
	
	return sOrg.toLowerCase().indexOf(sFind.toLowerCase(), nStart);
}

/*******************************************************************************
 * Function Name  : gfn_PosReverse
 * Desc           : 문자열의 위치를 대소문자 구별하여 거꾸로 찾는 함수.
 * parameter      : sOrg   - 원래 문자열
					sFind  - 찾고자 하는 문자열
					ex) gfn_PosReverse("aaBBbbcc","BB", 6)
 * return         : 찾고자 하는 문자열의 시작위치 ( 예 : 2 )
********************************************************************************/
function gfn_PosReverse(sOrg, sFind, nStart)
{
	var pos;
	
	if( gfn_IsNull(nStart) )		nStart = sOrg.length-1;

	for( pos = nStart ; pos >= 0 ; pos-- )
	{
		if( sOrg.substr( pos, sFind.length ) == sFind )
			break;
	}
	
	return pos;
}
 
/*******************************************************************************
 * Function Name  : gfn_PosReverseCase
 * Desc           : 문자열의 위치를 대소문자 구별없이 거꾸로 찾는 함수.
 * parameter      : sOrg   - 원래 문자열
					sFind  - 찾고자 하는 문자열
					ex) gfn_PosReverseCase("aaBBbbcc","BB", 6)
 * return         : 찾고자 하는 문자열의 시작위치 ( 예 : 4 )
********************************************************************************/
function gfn_PosReverseCase(sOrg, sFind, nStart)
{
	var pos;
	
	if( gfn_IsNull(nStart) <= 0 )		nStart = sOrg.length-1;

	for( pos = nStart ; pos >= 0 ; pos-- )
	{
		if( sOrg.substr( pos, sFind.length ).toLowerCase() == sFind.toLowerCase() )
			break;
	}
	
	return pos;
}

/**********************************************************************************
 * Function명   : gfn_Replace
 * Desc         : 입력된 문자열의 일부분을 다른 문자열로 치환하는 함수
 *  		      ex) gfn_Replace("abc", "b", "*")
 * Parameter    : strString 원본 문자열.
                  strOld    원본 문자열에서 찾을 문자열. 
                  strNew    새로 바꿀 문자열.
 * Return       : 대체된 문자열
 **********************************************************************************/
function gfn_Replace()
{
    var varRtnValue = null;
    var arrArgument = gfn_Replace.arguments;

    if (arrArgument.length < 3) {
        varRtnValue = arrArgument[0];
    } else {
        if (gfn_IsNull(arrArgument[0])) {
            return varRtnValue;
        }
        varRtnValue = arrArgument[0].toString().replace(arrArgument[1], arrArgument[2]);
    }

    return varRtnValue;
}

/*******************************************************************************
 * Function Name  : gfn_ReplaceCase
 * Desc           : 문자열을 대소문자 구별없이 치환하는 함수.
 * parameter      : sOrg     - 원래 문자열
					sRepFrom - 치환할 문자열
					sRepTo   - 치환될 문자열
					ex) gfn_ReplaceCase("aaBBbbccBB","BB", "xx")
 * return         : 치환된 문자열 ( 예 : "aaxxxxccxx" )
                    실패 = sOrg
********************************************************************************/
function gfn_ReplaceCase( sOrg, sRepFrom, sRepTo )
{
	var pos, nStart=0, sRet="";
	
	if( IsNull(sRepFrom) )		return sOrg;
	if( IsNull(sRepTo) )		return sOrg;
		
	while(1)
	{
		pos = gfn_PosCase( sOrg, sRepFrom, nStart );
		if( pos < 0 )
		{
			sRet += sOrg.substr( nStart );
			break;
		}
		else
		{
			sRet += sOrg.substr( nStart, pos - nStart);
			sRet += sRepTo;
			nStart = pos+sRepFrom.length;
		}
	}
	return sRet;
}


/**
 * Function Name : gfn_IndexOf
 * Desc          : 전체 문자열 중 특정 문자열이 포함된 위치를 return
 *                 ex) gfn_IndexOf("abc", "b")
 * param code    : strString - 원본문자열
 * 				       nSize - 검사할 문자열
 * param               index - 시작순서
 * Return        : String - 문자열이 포함된 위치의 index값
**/
function gfn_IndexOf()
{
    var varRtnValue = null;
    var arrArgument = gfn_IndexOf.arguments;

    if (arrArgument.length < 2) {
        varRtnValue = -1;
    } else {
        var nOffset = 0;
        if (gfn_IsNull(arrArgument[0]) || gfn_IsNull(arrArgument[1])) {
            return varRtnValue;
        }

        if (!gfn_IsNull(arrArgument[2])) nOffset = parseInt(arrArgument[2]);
        varRtnValue = arrArgument[0].toString().indexOf(arrArgument[1], nOffset);
    }

    return varRtnValue;
}

//지정한 인덱스에 해당하는 문자를 반환하는 함수
/**
 * Function Name : gfn_CharAt
 * 설명          : 전체 문자열 중 특정 위치에 존재하는 문자를 return
 *                 ex) gfn_CharAt("abc", 2)
 * param code    : strString - 원본문자열
 *                     index - 시작순서
 * Return        : String - index에 해당하는 문자	
**/
function gfn_CharAt()
{
    var varRtnValue = null;
    var arrArgument = gfn_CharAt.arguments;

    if (arrArgument.length < 2) {
        varRtnValue = "";
    } else {
        var nIndex = parseInt(arrArgument[1]);
        varRtnValue = arrArgument[0].toString().charAt(nIndex);
    }

    return varRtnValue;
} 

/**********************************************************************************
 * Desc    		: 문자열이 지정된 길이가 되도록 왼쪽을 채우는 함수
 * Parameter    : strString   - 원본 문자열( 예 : "abc" )
                  strPadChar  - Pad 할 문자
                  int - return될 문자열 수
 * Return       : String - Pad된 문자열 (**abc)
 * 사용예   	: gfn_LPad("abc", "*", 5)
 **********************************************************************************/
function gfn_LPad(strString, strPadChar, nCount)
{
    var rtnStr = "";
    nCount = parseInt(nCount);

    if(gfn_GetLength(strString) < nCount) {
        var tmpStrPad = "";
        var cnt = nCount - gfn_GetLength(strString);
        for(var i=0; i<cnt; i++) {
            tmpStrPad += strPadChar;
        }
        
        rtnStr = tmpStrPad + strString;
    } else {
        rtnStr = strString
    }

    return rtnStr;
}

/**********************************************************************************
 * Desc    		: 왼쪽에 문자열 추가하는 함수
 * Parameter    : sOrg   - 원래 문자열
                  sPad   - Pad할 문자열(옵션 : Default=" ")
                  nCnt   - 반복횟수(옵션 : Default=1)
 * Return       : String - Pad된 문자열 (result ='aaaabbccCC')
 * 사용예   	: gfn_AddLPad("bbccCC", "aa", 2)
 **********************************************************************************/
function gfn_AddLPad(sOrg, sPad, nCnt)
{
	var i, sRet="";

	if( gfn_IsNull(sPad) )		sPad = " ";
	if( gfn_IsNull(nCnt) )		nCnt = 1;

	for( i = 0 ; i < nCnt ; i++ )
		sRet += sPad;
	sRet += sOrg;
	return sRet;
}

// 문자열이 지정된 길이가 되도록 오른쪽을 채우는 함수
// 예 : gfn_RPad("abc", "*", 5)
function gfn_RPad(strString, strPadChar, nCount)
{
    var rtnStr = "";
    var strStringLen = 0;
    nCount = parseInt(nCount);
    
    if (!gfn_isNull(strString)) {
		strStringLen = strString.length;
    }
    
    if(strStringLen < nCount) {
        var tmpStrPad = "";
        var cnt = nCount - strStringLen;
        for(var i=0; i<cnt; i++) {
            tmpStrPad += strPadChar;
        }
        
        rtnStr = strString + tmpStrPad;
    } else {
        rtnStr = strString
    }

    return rtnStr;
}

/*******************************************************************************
// 오른쪽에 문자열 추가.
 Parameter 
    1. sOrg   : 원래 문자열( 예 : "bbccCC" )
    2. sPad   : Pad할 문자열(옵션 : Default=" ")( 예 : "aa" )
    3. nCnt   : 반복횟수(옵션 : Default=1) (예 : 2)
 return 
    - 성공 = Pad된 문자열 ( 예 : "bbccCCaaaa" )
 ******************************************************************************/
function gfn_AddRPad(sOrg, sPad, nCnt)
{
	var i, sRet="";

	if( IsNull(sPad) )		sPad = " ";
	if( IsNull(nCnt) )		nCnt = 1;
	
	sRet += sOrg;
	for( i = 0 ; i < nCnt ; i++ )
		sRet += sPad;
	
	return sRet;
}

/**********************************************************************************
 * Function Name : gfn_Split
 * Desc          : 특정 문자열을 기준으로 전체 문자열을 나누어서 배열(Array)로 만들어 return하는는 함수
 *                 ex) gfn_Split("aa::bb::cc::dd", "::")
 * Parameter     : strString - 원본 문자열.
                   s  trChar - 나눌 기준이 되는 문자
 * Return        : Split 처리결과의 문자열 배열
 **********************************************************************************/
function gfn_Split()
{
    var rtnArr = new Array();
    var arrArgument = gfn_Split.arguments;

    if (arrArgument.length < 1) {
    } else if (arrArgument.length < 2) {
        if (!gfn_IsNull(arrArgument[0])) {
            rtnArr[0] = arrArgument[0];
        }
    } else {
        if (!gfn_IsNull(arrArgument[0])) {
            rtnArr = arrArgument[0].toString().split(arrArgument[1]);
        }
    }

    return rtnArr;
}

/**********************************************************************************
 * Function Name : gfn_NumFormat
 * Desc        	 : 입력된 실수를 문자열 표현법으로 표현하는 함수
 * Parameter     : dNumber - 문자열로 출력할 실수
                   nDetail - 출력시 소숫점 이하의 자릿수(Default : 0)
 * Return        : 문자열로 바뀐 실수
                   출력되는 실수는 정수부분에 3자리마다 ',' 가 삽입됩니다.
 **********************************************************************************/
function gfn_NumFormat(dNumber, nDetail) {
    var rtnStr;
    if (gfn_IsNull(nDetail) != false) { nDetail = 0; }

    if (nDetail == 0){ 
		rtnStr = dNumber.toFixedLocaleString(1).split(".")[0];
    } else {
		rtnStr = dNumber.toFixedLocaleString(nDetail);
    }

    return rtnStr;
}

/**********************************************************************************
 * Function명   : gfn_StripBlank
 * Desc         : "=" 좌우의 빈공백 제거된 문자열로 만드는 함수
 * Parameter    : strArg    문자열
 * Return       : "=" 좌우의 빈공백 제거된 문자열
 **********************************************************************************/
function gfn_StripBlank(strArg)
{
    var nChrPos;
    var strLeft;
    var strRight = strArg;
    var strChr;
    var retVal = "";

    while(true) {
        nChrPos = strRight.indexOf("=");
        if (nChrPos == -1) { 
            retVal += strRight;
            break;
        }

        strLeft  = strRight.substr(0, nChrPos).trimRight();
        strRight = strRight.substr(nChrPos + 1).trimLeft();
        strChr   = strRight.charAt(0);

        retVal += strLeft + "=";
        if (strChr != "\"" && strChr != "'") { strChr = " "; }

        nChrPos = strRight.indexOf(strChr, 1);
        if (nChrPos > -1) {
            retVal  += strRight.slice(0, nChrPos + 1);
            strRight = strRight.substr(nChrPos + 1);
        } else {
            retVal  += strRight;
            strRight = "";
        }
    }

    return retVal;
}

/**********************************************************************************
 * ★ Function명   : gfn_Quote
 * ★ 설명         : 입력된 문자열의 양쪽에 쌍따옴표를 붙여 반환합니다.
 * ★ Parameter    : strString 대상 문자열
 * ★ Return       : String/쌍따옴표가 붙여진 문자열
 **********************************************************************************/
function gfn_Quote()
{
    var retVal = '""';
    var arrArgument = gfn_Quote.arguments;

    if ((arrArgument != null) && (arrArgument.length >= 1) && (!gfn_IsNull(arrArgument[0]))) {
        retVal = wrapQuote(new String(arrArgument[0]));
    }

    return retVal;
}

/**********************************************************************************
 * Function명 	: gfn_SubStr
 * 설명       	: 가운데 부분의 문자열을 반환합니다.
 * Parameter  	: strString - String  가운데 부문을 얻어올 원본 문자열.
                  nIndex    - Integer 얻어올 첫 글자의 Index. 
                  nSize     - Integer 얻어올 글자수. [Default length(해당 개채의 길이)] 
 * Return   	: String/가운데 부분이 얻어진 문자열.
 * 사용예 		: gfn_SubStr("aaBBbbcc", 2, 3) ===> "BBb"
 **********************************************************************************/
function gfn_SubStr()
{
    var retVal    = "";
    var strString = "";
    var nIndex    = 0;
    var nSize     = 0;
    var arrArgument = gfn_SubStr.arguments;

    if (arrArgument.length >= 1) { strString = arrArgument[0]; }
    if (arrArgument.length >= 2) { nIndex    = parseInt(arrArgument[1]); }
    if (arrArgument.length >= 3) { nSize     = parseInt(arrArgument[2]); }
                            else { nSize     = gfn_GetLength(arrArgument[0]); }

    if (!gfn_IsNull(strString)) {
        retVal = strString.substr(nIndex, nSize);
    }

    return retVal;
}

/**********************************************************************************
 * Function명 	: gfn_SubStrLTrim
 * Desc      	: 대소문자 구별하여 왼쪽에서 문자열 삭제하는 함수
 * Parameter	: sOrg   - 원본 문자열( 예 : "BBbbcc" )
                  sTrim  - Trim할 문자열(옵션 : Default=" ") ( 예 : "bb" )
 * Return     	: 성공  - Trim된 문자열 ( 예 : "bbcc" )
                  실패
 **********************************************************************************/
function gfn_SubStrLTrim(sOrg, sTrim)
{
	var chk, pos;

	if( gfn_IsNull(sTrim) )		sTrim = " ";

	for( pos = 0 ; pos < sOrg.length ; pos+=sTrim.length )
	{
		if( sOrg.substr( pos, sTrim.length ) != sTrim )
			break;
	}
	
	return sOrg.substr(pos);
}

/**********************************************************************************
 * Function명   : gfn_SubStrLTrimCase
 * Desc         : 대소문자 구별없이 왼쪽에서 문자열 삭제하는 함수
 * Parameter    : sOrg   - 원본 문자열( 예 : "BBbbcc" )
                  sTrim  - Trim할 문자열(옵션 : Default=" ") ( 예 : "bb" )
 * Return       : 성공  - Trim된 문자열 ( 예 : "cc" )
                  실패
 **********************************************************************************/
function gfn_SubStrLTrimCase(sOrg, sTrim)
{
	var pos;

	if( gfn_IsNull(sTrim) )		sTrim = " ";
			
	for( pos = 0 ; pos < sOrg.length ; pos+=sTrim.length )
	{
		if( sOrg.toLowerCase().substr( pos, sTrim.length ) != sTrim.toLowerCase() )
			break;
	}
	
	return sOrg.substr(pos);
} 
 
/**********************************************************************************
 * Function명   : gfn_SubStrRTrim
 * Desc         : 대소문자 구별하여 오른쪽에서 문자열 삭제하는 함수
 * Parameter    : sOrg   - 원본 문자열( 예 : "bbccCC" )
                  sTrim  - Trim할 문자열(옵션 : Default=" ")( 예 : "CC" )
 * Return       : 성공  - Trim된 문자열 ( 예 : "bbcc" )
                  실패
 **********************************************************************************/
function gfn_SubStrRTrim(sOrg, sTrim)
{
	var pos, nStart;

	if( gfn_IsNull(sTrim) )		sTrim = " ";
		
	for( pos = sOrg.length-sTrim.length ; pos >= 0 ; pos -= sTrim.length )
	{
		if( sOrg.substr( pos, sTrim.length ) != sTrim )
			break;
	}

	return sOrg.substr(0, pos+sTrim.length);
}

/**********************************************************************************
 * Function명   : gfn_SubStrRTrimCase
 * Desc         : 대소문자 구별없이 오른쪽에서 문자열 삭제하는 함수
 * Parameter    : sOrg   - 원본 문자열( 예 : "bbccCC" )
                  sTrim  - Trim할 문자열(옵션 : Default=" ")( 예 : "CC" )
 * Return       : 성공  - Trim된 문자열 ( 예 : "bb" )
                  실패
 **********************************************************************************/
function gfn_SubStrRTrimCase(sOrg, sTrim)
{
	var pos, nStart;

	if( gfn_IsNull(sTrim) )		sTrim = " ";
		
	for( pos = sOrg.length-sTrim.length ; pos >= 0 ; pos -= sTrim.length )
	{
		if( sOrg.toLowerCase().substr( pos, sTrim.length ) != sTrim.toLowerCase() )
			break;
	}

	return sOrg.substr(0, pos+sTrim.length);
}



/*********************************************************************************************
 * ★ Function명 : gfn_Nvl
 * ★ 설명       : Null값을 실제 값으로 변환
 * ★ Params     : 1. expr1 : Null을 포함하는 소스 값
				   2. expr2 : Null을 대치할 값 
 * ★ Return     : retVal
*********************************************************************************************/
function gfn_Nvl() 
{
    var retVal    = "";
    var arrArgument = gfn_Nvl.arguments;

    if (arrArgument.length == 1) {
        if (!gfn_IsNull(arrArgument[0])) {
            retVal = arrArgument[0];
        }
    } else if (arrArgument.length == 2) {
        if (gfn_IsNull(arrArgument[0])) {
            retVal = arrArgument[1];
        } else {
            retVal = arrArgument[0];
        }
    }
    
    return retVal;
}

/**********************************************************************************
 * Function명	: gfn_IsNumber
 * Desc      	: 문자열이 숫자형식에 맞는지 여부 체크
 * Parameter 	: sNumber - 체크할 문자열숫자 ( 예 : "-1234.56" ) (단, ","가 들어있으면 안 됨)
 * Return    	: - 성공 = 숫자형식에 맞는경우 true
				  - 실패 = 숫자형식에 맞지않는 경우 false
 **********************************************************************************/
function gfn_IsNumber(sNumber) 
{
    var c;
    var point_cnt = 0;
    var ret = true;

    if (gfn_IsNull(sNumber))   return false;

    for (var i=0; i<sNumber.length; i++) 
    {
        c = sNumber.charAt(i);
        if ( i == 0 && ( c == "+" || c == "-" ) );
        else if ( c >= "0" && c <= "9" );
        else if ( c == "." ) {
            point_cnt++;
            if( point_cnt > 1 ) {
                ret = false;
                break;
            }
        } else {
            ret = false;
            break;
        }
    }

    return ret;
}

/**********************************************************************************
 * Function Name : gfn_IsAlpha
 * Desc      	 : 문자열이 알파벳(a~z, A~Z)만으로 구성되어 있는지 체크
 * Parameter  	 :  sValue - 체크할 문자열 
 * Return      	 : - 성공 = 알파벳만 있는경우 true
				   - 실패 = 알파벳이 아닌 글자가 하나라도 있는 경우 false
 * 사용예 		 : gfn_IsAlpha("aAzZ")  ==> result : true
 **********************************************************************************/
function gfn_IsAlpha(sValue) 
{
    if (gfn_IsNull(sValue)) return false;

    if (sValue.search("[^A-Za-z]") >= 0)
        return false;
    else
        return true;
}    

/**********************************************************************************
 * ★ Function명 : gfn_IsAlphaNumber
 * ★ 설명       : 문자열이 알파벳(a~z, A~Z), 숫자만으로 구성되어 있는지 체크
 * ★ Parameter  :  sValue - 체크할 문자열 ( 예 : "aAzZ09" )
 * ★ Return     : - 성공 = 알파벳, 숫자만 있는경우 true
				   - 실패 = 알파벳, 숫자가 아닌 글자가 하나라도 있는 경우 false
 **********************************************************************************/
function gfn_IsAlphaNumber(sValue) 
{
    if (gfn_IsNull(sValue))  return false;

    if (sValue.search("[^A-Za-z0-9]") >= 0)
        return false;
    else
        return true;
}

/**********************************************************************************
 * Function Name : gfn_IsKor
 * Desc          : 문자열이 한글로만 구성되어 있는지 체크
 * Params        :  sValue - 체크할 문자열 ( 예 : "가나다" )
 * Return        : - 성공 = 한글만 있는경우 true
				   - 실패 = 한글이 아닌 글자가 하나라도 있는 경우 false
 **********************************************************************************/
function gfn_IsKor(sValue) 
{
    if (gfn_IsNull(sValue))  return false;

    for (var i=0; i<sValue.length; i++) 
    {
        if (!((sValue.charCodeAt(i) > 0x3130 && sValue.charCodeAt(i) < 0x318F) || (sValue.charCodeAt(i) >= 0xAC00 && sValue.charCodeAt(i) <= 0xD7A3)))
            return false;
    }

    return true;
}

/**
 * 값이 null 이거나 white space 문자로만 이루어진 경우 true를 리턴
 * @param value
 * @return boolean
 */
function gfn_IsNull(value) {

	//trace("TWKIM:::" + gfnGetObjectType(value));
	if(value == null || typeof(value) == "undefined" || value === "null") {
		return true;
	}
	
	if (new String(value).valueOf() == "undefined") return true;
	var strCheck = new String(value);
	if (strCheck == null || strCheck.toString().length == 0 ) return true;
		
	return false;
}


/*++
프로그램 설명     : 입력받은 value의 타입별로 값이 null혹은 비었는지 체크, 값이 없으면 true를 리턴
@ Name            : gfn_NullToEmpty
@ Parameter       : value
@ Return          : value
*/
function gfn_IsEmpty(value) {
	if (gfn_IsNull(value)) {
		return true;
	}

	var bIsEmpty = false;
	switch (gfnGetObjectType(value)) {
	case "String":
	case "Array":
		bIsEmpty = value.length == 0 ? true : false;
		break;
	case null:
		bIsEmpty = true;
		break;
	case "boolean":
		break;
	case "Object":
		for (var key in value) {
			return false;
		}
		return true;		
	case "Dataset":
		bIsEmpty = value.rowcount == 0 ? true : false;
		break;		
	}
	
	return bIsEmpty;
}

/**
 * Function Name : NULL 일 경우 빈 값을 리턴한다.
 * Name          : gfn_NullToEmpty
 * Parameter     : sValue : 체크할 문자열(String)
 * Return        : 
                  - 입력값이 null = ""
                  - Not Null = 원래의 값   
*/
function gfn_NullToEmpty(sValue)
{
    if (gfn_IsNull(sValue)) {
        return "";
    }

    return sValue;
}

 /*++
프로그램 설명     : 배열을 Sort 한다.
@ param           : a - 배열
@ Parameter       : fnCompare - 재귀적으로 호출하는 function
@ Return          : void
*/
function gfnSortArray(a, fnCompare){
    for (var i = 1; i < a.length; i++) {
        var j = i;
        var tmp = a[i];

        while ((j > 0) && fnCompare(a[j - 1], tmp)) {
            a[j] = a[j - 1];
            j--;
        }

        a[j] = tmp;
    }
}

/*******************************************************************************
 ★ 설명
    문자열의 오른쪽에서 nSize만큼의 문자열을 가져온다.
 ★ Parameter 
    1. sOrg   : 원래 문자열( 예 : "aaBBbbcc" )
    2. nSize  : 가져올문자열 길이 ( 예 : 2 )
 ★ return 
    - 성공 = 오른쪽에서 nSize만큼의 문자열 ( 예 : "cc" )
    - 실패 = 
 ★ 주의사항
    sOrg의 길이가 nSize보다 작은경우는 sOrg가 Return된다.
    ( 예 : sOrg="a", nSize=2 ==> return = "a" )
 ******************************************************************************/
function Right(sOrg, nSize)
{
	if( sOrg == null )
		return "";
	if( sOrg.length < nSize )
		return sOrg;
	else
		return sOrg.substr(sOrg.length-nSize, nSize);
}




/*******************************************************************************
 ★ 설명
    시작글자와 끝글자에 해당하는 글자의 사이에 있는 가운데 글자를 
    대소문자를 구별하여 찾는다.
    ( 예 : aaBBbbccdd에서 bb, dd사이의 글자 cc를 찾는다 )
 ★ Parameter 
    1. sOrg   : 원래 문자열( 예 : "aaBBbbccdd" )
    2. sStart : 찾고자 하는 시작 문자열( 예 : "bb" )
    3. nEnd   : 찾고자 하는 끝 문자열 (옵션 : Default = "")
                 ( 예 : "dd" ) (만일, nEnd=""이면 문자열의 끝까지 찾는다)
 ★ return 
    - 성공 = 가운데 글자 ( 예 : "cc" )
    - 실패 = null
 ******************************************************************************/
function Mid(sOrg, sStart, sEnd)
{
	var pos_start, pos_end, ret_str;
	
	if( gfn_IsNull(sEnd) )		sEnd = "";
		
	pos_start = Pos(sOrg, sStart);
	if( pos_start < 0 )	return null;
	if( sEnd != "" )
	{
		pos_end = Pos(sOrg, sEnd, pos_start+sStart.length);
		if( pos_end < 0 )	return null;
	}
	else
		pos_end = sOrg.length;
	
	return sOrg.substring(pos_start+sStart.length, pos_end);
}

/*******************************************************************************
 ★ 설명
    시작글자와 끝글자에 해당하는 글자의 사이에 있는 가운데 글자를 
    대소문자 구별없이 찾는다.
    ( 예 : aaBBbbccdd에서 bb, dd사이의 글자 bbcc를 찾는다 )
 ★ Parameter 
    1. sOrg   : 원래 문자열( 예 : "aaBBbbccdd" )
    2. sStart : 찾고자 하는 시작 문자열( 예 : "bb" )
    3. nEnd   : 찾고자 하는 끝 문자열 (옵션 : Default = "")
                 ( 예 : "dd" ) (만일, nEnd=""이면 문자열의 끝까지 찾는다)
 ★ return 
    - 성공 = 가운데 글자 ( 예 : "bbcc" )
    - 실패 = null
 ******************************************************************************/
function MidCase(sOrg, sStart, sEnd)
{
	var pos_start, pos_end, ret_str;
	
	if( gfn_IsNull(sEnd) )		sEnd = "";
		
	pos_start = PosCase(sOrg, sStart);
	if( pos_start < 0 )	return null;
	if( sEnd != "" )
	{
		pos_end = PosCase(sOrg, sEnd, pos_start+sStart.length);
		if( pos_end < 0 )	return null;
	}
	else
		pos_end = sOrg.length;
	
	return sOrg.substring(pos_start+sStart.length, pos_end);
}

/*******************************************************************************
 ★ 설명
    Mid()함수와 동일하나 Return을 Array로 한다.
 ★ Parameter 
    1. sOrg   : 원래 문자열( 예 : "aaBBbbccdd" )
    2. sStart : 찾고자 하는 시작 문자열( 예 : "bb" )
    3. nEnd   : 찾고자 하는 끝 문자열 (옵션 : Default = "")
                 ( 예 : "dd" ) (만일, nEnd=""이면 문자열의 끝까지 찾는다)
 ★ return 
    - 성공
      Array[0] = 가운데 글자 ( 예 : "cc" )
      Array[1] = sStart의 위치 ( 예 : 4 )
      Array[2] = sEnd의 위치 ( 예 : 8 )
    - 실패 
      Array[0] = ""
      Array[1] = -1
      Array[2] = -1
 ★ 목적       
    sStart, sEnd의 위치를 알아내려면 다시한번 찾아야 하므로 속도 때문에 만들었다. 
 ******************************************************************************/
function AMid(sOrg, sStart, sEnd)
{
	var pos_start, pos_end, ret_str;
	var arr = new Array("",-1,-1);
	
	if( gfn_IsNull(sEnd) )		sEnd = "";
		
	pos_start = Pos(sOrg, sStart);
	if( pos_start < 0 )	
		return arr;
	if( sEnd != "" )
	{
		pos_end = Pos(sOrg, sEnd, pos_start+sStart.length);
		if( pos_end < 0 )	
			return arr;
	}
	else
		pos_end = sOrg.length;
	
	arr[0] = sOrg.substring(pos_start+sStart.length, pos_end);
	arr[1] = pos_start;
	arr[2] = pos_end;
	return arr;
}

/*******************************************************************************
 ★ 설명
    MidCase()함수와 동일하나 Return을 Array로 한다.
 ★ Parameter 
    1. sOrg   : 원래 문자열( 예 : "aaBBbbccdd" )
    2. sStart : 찾고자 하는 시작 문자열( 예 : "bb" )
    3. nEnd   : 찾고자 하는 끝 문자열 (옵션 : Default = "")
                 ( 예 : "dd" ) (만일, nEnd=""이면 문자열의 끝까지 찾는다)
 ★ return 
    - 성공
      Array[0] = 가운데 글자 ( 예 : "bbcc" )
      Array[1] = sStart의 위치 ( 예 : 2 )
      Array[2] = sEnd의 위치 ( 예 : 8 )
    - 실패 
      Array[0] = ""
      Array[1] = -1
      Array[2] = -1
 ★ 목적       
    sStart, sEnd의 위치를 알아내려면 다시한번 찾아야 하므로 속도 때문에 만들었다. 
 ******************************************************************************/
function AMidCase(sOrg, sStart, sEnd)
{
	var pos_start, pos_end, ret_str;
	var arr = new Array("",-1,-1);
		
	if( gfn_IsNull(sEnd) )		sEnd = "";
		
	pos_start = PosCase(sOrg, sStart);
	if( pos_start < 0 )	
		return arr;
	if( sEnd != "" )
	{
		pos_end = PosCase(sOrg, sEnd, pos_start+sStart.length);
		if( pos_end < 0 )	
			return arr;
	}
	else
		pos_end = sOrg.length;
	
	arr[0] = sOrg.substring(pos_start+sStart.length, pos_end);
	arr[1] = pos_start;
	arr[2] = pos_end;
	return arr;
}

/*******************************************************************************
 ★ 설명
    숫자에 ","를 집어넣기
 ★ Parameter 
    1. sNum   : 숫자( 예 : -1234567.89 )
 ★ return 
    - 성공 = 전각문자 ( 예 : -1,234,567.89 )
    - 실패 =
 ******************************************************************************/
function gfn_setComma(sNum)
{
	if (gfn_isNull(sNum)) return 0;
	var ppos, sDigit, nEnd, nStart=0, sRet="";
	sNum = String(sNum);
	if(sNum.charAt(0) == "+" || sNum.charAt(0) == "-" )
	{
		sRet += sNum.charAt(0);
		nStart = 1;
	}
	
	ppos = sNum.indexOf(".");
	if( ppos < 0 ) nEnd = sNum.length;
	else nEnd = ppos;
		
	sDigit = sNum.substr(nStart, nEnd-nStart);
	for( pos = 0 ; pos < sDigit.length ; pos ++ )
	{
		if( pos != 0 && (sDigit.length-pos)%3 == 0 ) sRet += ",";
		sRet += sDigit.charAt(pos);
	}
	sRet += sNum.substr(nEnd);
	
	return sRet;
}


/*******************************************************************************
 ★ 설명
    Position문자열을 Rect Object로 바꾼다.
 ★ parameter 
    1. sPos : Position 문자열 (예 : "10 10 50 50" 또는 "10 10")
 ★ return 
    1. 성공 = Rect Object
              (※ 단,  sPos = "10 10" ==> 2개인 경우
                  Rect.right = Rect.left, Rect.bottom = Rect.top,
                  Rect.width = 0, Rect.height = 0)
    2. 실패 = null
 ★ 주의사항
    Rect Object는 좌표를 처리하는 XPlatform 내부 Object로서 메뉴얼에는 존재치 않는다.
    Rect Object의 멤버는 left, top, right, bottom, width, height가 있다.
    (예 : rect가 Rect Object라면 rect.left, rect.top으로 사용하면 된다.)
******************************************************************************/ 
function PosStr2Rect(sPos)
{
	var oRect = new Rect();
	
	aPos = _PosStr2Arr(sPos);
	if( aPos == null )
		return null;

	oRect.left = aPos[_L];
	oRect.top  = aPos[_T];
	if( aPos.length == 2 )
	{
		oRect.right = aPos[_L];
		oRect.bottom = aPos[_T];
		oRect.width = 0;
		oRect.height = 0;
	}
	else
	{
		oRect.right = aPos[_R];
		oRect.bottom = aPos[_B];
		oRect.width = aPos[_W];
		oRect.height = aPos[_H];
	}
	
	return oRect;
}

/*******************************************************************************
 ★ 설명
    Rect Object를 Position문자열로 바꾼다.
 ★ parameter 
    1. oRect : Rect Object(예 : Rect.left = 10, ... )
 ★ return 
    1. 성공 = Position문자열 ( 예 : "10 20 30 40" )
              (※ 단,  
                  Rect.right = Rect.left, Rect.right = Rect.left, 
                  Rect.right = 0, Rect.bottom = 0,
                  Rect.width = 0, Rect.height = 0 인경우는
                  return = "10 10")
    2. 실패 = null
 ★ 주의사항
    Rect Object는 좌표를 처리하는 XPlatform 내부 Object로서 메뉴얼에는 존재치 않는다.
    Rect Object의 멤버는 left, top, right, bottom, width, height가 있다.
    (예 : rect가 Rect Object라면 rect.left, rect.top으로 사용하면 된다.)
******************************************************************************/ 
function PosRect2Str(oRect)
{
	if( gfn_IsNull(oRect) )		return null;
	
	// 2개인 경우 처리
	if( ( ( oRect.left == oRect.right ) || oRect.right == 0 || oRect.width == 0 ) &&
	    ( ( oRect.top == oRect.bottom ) || oRect.bottom == 0 || oRect.height == 0 ) )
	    return oRect.left + " " + oRect.top;
	else
		return oRect.left + " " + oRect.top + " " + oRect.right + " " + oRect.bottom;
}

///////////////////////////////////////////////////////////////////////////////
// Biz Validation Start
///////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
 ★ 설명
    사업자 등록번호 확인
 ★ parameter 
    sValue : 사업자 등록 번호
 ★ return 
    - sValue가 사업자등록번호 형식에 맞는 경우 = true
    - sValue가 사업자등록번호 형식에 맞지 않는 경우 = false
******************************************************************************/ 
function IsCompRegNo(sValue)
{
    var vCompNo = sVal.replace("-", "");
	var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);
	var i, Sum=0, c2, remander;
	
	if (vCompNo.length != 10) 
		return false; 
	
	for (i = 0; i <= 7; i++) 
		Sum += checkID[i] * vCompNo.charAt(i);

	c2 = "0" + (checkID[8] * vCompNo.charAt(8));
	c2 = c2.substring(c2.length - 2, c2.length);

	Sum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));

	remander = (10 - (Sum % 10)) % 10;

	if (Math.floor(vCompNo.charAt(9)) != remander) 
		return false;
	return true;
}

/*******************************************************************************
 ★ 설명
    법인 등록번호 확인
 ★ parameter 
    sValue : 법인 등록 번호
 ★ return 
    - sValue가 법인등록번호 형식에 맞는 경우 = true
    - sValue가 법인등록번호 형식에 맞지 않는 경우 = false
******************************************************************************/ 
function IsCorpRegNo(sValue)
{
	var vCorpNo = sValue.replace("-", "");
	var checkID = new Array(1,2,1,2,1,2,1,2,1,2,1,2);
	var i, Sum=0, c2, remander;
	
	if (vCorpNo.length != 13) 
		return false; 
	
	for (i = 0; i <= 12; i++) 
		Sum += checkID[i] * vCorpNo.charAt(i);
	
	remander = Sum / 10;
	var nIndex = remander.toString().indexOf(".");	
	remander = remander.toString().substring(nIndex+1,nIndex+2);
	remander = 10 - remander; 
	
	if (remander > 9 ) 
		remander = 0;
	if (remander == sValue.substring(12, 13)) 
		return true;

	return false
}

/*******************************************************************************
 ★ 설명
    주민 등록번호 확인
 ★ parameter 
    sValue : 주민 등록 번호
 ★ return 
    - sValue가 주민등록번호 형식에 맞는 경우 = true
    - sValue가 주민등록번호 형식에 맞지 않는 경우 = false
******************************************************************************/ 
function IsRsrNo(sValue)
{
    var v_JuminNo = sValue.replace("-", "");
	var v_JuminChkDgt = [2,3,4,5,6,7,8,9,2,3,4,5];
	var v_FNum = new Number();
	var v_LNum = new Number();
	var v_iSum = new Number();
	var v_RtnVal;
	var v_YY;

    if(v_JuminNo.length != 13) 
        return false;
	
	v_FNum = v_JuminNo.substr(0, 6).toString();
	v_LNum = v_JuminNo.substr(6).toString();
  
    if (v_LNum.substr(0,1) == '1' ||  v_LNum.substr(0,1) == '2')
        v_YY  = '19';
    else if (v_LNum.substr(0,1) == '3' ||  v_LNum.substr(0,1) == '4') 
        v_YY  = '20';
    else
		return false;
    
    if(IsDate(v_YY + v_FNum) == false)
		return false;

    if (IsNum(v_JuminNo) == false)
		return false;

	for ( ix = 0; ix < 12 ; ix++)
		v_iSum += (parseInt(v_JuminNo.substr(ix, 1)) * v_JuminChkDgt[ix]);
		
	v_iSum = 11 - (v_iSum%11);
	v_iSum = v_iSum % 10;
	if (v_iSum != (parseInt(v_JuminNo.substr(12, 1))))
		return false;

	return true; 
}


/*******************************************************************************
 ★ 설명
    Email 적합여부 확인
 ★ parameter 
    sValue : Email ( 예 : "oju@yahoo.co.kr" )
 ★ return 
    - sValue가 Email형식에 맞는 경우 = true
    - sValue가 Email형식에 맞지 않는 경우 = false
 *****************************************************************************/ 
function IsEmail(sValue)
{   
	var vChk = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890-._@";
	var i, pos, vEmailFirst, vEmailLast;
	
	for( i = 0 ; i < sValue.length ; i++)
	{
		if(vChk.indexOf(sValue.charAt(i)) < 0) 
			return false;
    }
    pos = Pos(sValue,"@");
    if( pos < 0 )
		return false;
		
	vEmailFirst = sValue.substr(0, pos);
	vEmailLast = sValue.substr(pos+1);
	if( vEmailFirst.length <= 0 || vEmailLast.length <= 0 )
		return false;
	if( Pos(vEmailLast, ".") <= 0 || Pos(vEmailLast, "..") >= 0 || Right(vEmailLast,1) == "." )
		return false;
	if( Pos(vEmailLast, "@") >= 0 )
		return false;
		
    return true;
}


/*******************************************************************************
 ★ 설명
     ADL을 주고 XPlatform실행하는 함수
 ★ parameter 
    1. sADL : ADL 
		      1) Full Path지정한 경우 (예 : C:\\Project\\ADL.xadl")
		         Full Path에 해당하는 ADL실행 
              2) ADL명만(확장자제외) 지정한 경우 ( 예 : "ADL" )
                 Project Path내의 ADL실행
              ※ 단, 경로에 대한 유효성 여부는 검사하지 않음
    2. sKey : XPlatform실행시 Key
              (옵션 : Default = ADL명(단, 확장자제외))
 ★ return 
    - 성공 = true 
    - 실패 = false
 ★ 주의사항
    XPLatform실행시 Argument를 전달할 방법은 못 찾겠다.
 ★ 목적    
    PC에서 Tool로 작업시 Project Path를 모를 경우 XPlatform실행이 어려워서 만들었음 
 ******************************************************************************/
function RunXP(sADL, sKey)
{
	var adl_name;
	var project_path;
	var oChildFrame_SDI;
	
	adl_name = gfnGetFileName(sADL);
	if( gfn_IsNull(sKey) )		sKey = adl_name;

	// FullPath로 지정한 경우
	if( adl_name != sADL )
		system.execXPlatform(" -X \"" + sADL + "\" -K " + sKey);	
	// ADL명만 지정한 경우
	else
	{
		project_path = gfnGetProjectPath();
		if( project_path == null )
			return false;
		else
			system.execXPlatform(" -X \"" + project_path + sADL + ".xadl" + "\" -K " + sKey);	
	}
		
	return true;
}

/*******************************************************************************
 ★ 설명
     Position String(예 : "absolute 10 10 20 20")을 Position Array(예:10,10,20,20)으로 변환
     ※ 단, 내부에서 사용하는 함수임
 ★ parameter 
    1. sPosition (예 : "absolute 10 10 20 20")
 ★ return 
    - 성공 = Position Array ( 예 : 10,10,20,20 )
    - 실패 = null
              (sPostion이 null 또는 "" 이거나 좌표의 개수가 2,4,6이 아닐경우)
 ★ 주의사항
    Position의 순서는 left, top, right, bottom, width, height이다.
 ******************************************************************************/
function _PosStr2Arr( sPosition )
{
	// L = left, T =top, R = right, B = bottom, W = width, H = height
	var L = 0, T = 1, R = 2, B = 3, W = 4, H = 5;
	var tmp = new Array();
	var i, arrNo;
	var arrRet = new Array();

	if( gfn_IsNull(sPosition) )	return null;
	
	tmp = sPosition.toString().split(" ");
	arrNo = 0;
	for( i = 0 ; i < tmp.length ; i++ )
	{
		if( tmp[i] == "absolute" )
			continue;
		arrRet[arrNo] = parseInt(tmp[i], 10);
		arrNo++;
	}
	if( arrNo != 2 && arrNo != 4 && arrNo != 6 )
		return null;
	if( arrNo == 4 )
	{
		arrRet[W] = arrRet[R] - arrRet[L];
		arrRet[H] = arrRet[B] - arrRet[T];
	}
	
	return arrRet;
}

/*******************************************************************************
 ★ 설명
     Position Array(예:10,10,20,20,10,10)를 Position String(예 : "absolute 10 10 20 20") 으로 변환
     단, 내부에서 사용하는 함수임     
 ★ parameter 
    1. aPosition (예:10,10,20,20,10,10) 
 ★ return 
    - 성공 = Position Array ( 예 : 10,10,20,20 )
    - 실패 = null ( aPosition이 null이거나 aPostion의 갯수가 2,4,6이 아닌경우 )    
 ★ 주의사항
    Position의 순서는 left, top, right, bottom, width, height이다.
 ******************************************************************************/
function _PosArr2Str(aPosition)
{
	// L = left, T =top, R = right, B = bottom, W = width, H = height
	var L = 0, T = 1, R = 2, B = 3, W = 4, H = 5;
	var sPos = "", i, end_num;
	
	if( gfn_IsNull(aPosition) )		return null;
	if( aPosition.length != 2 && aPosition.length != 4 && aPosition.length != 6 )
		return null;
		
//	sPos += "absolute ";
	if( aPosition.length > 4 )
		end_num = 4;
	else 
		end_num = aPosition.length;
	
	for( i = 0 ; i < end_num ; i++ )
	{
		sPos += aPosition[i];
		if( i != end_num-1 )
			sPos += " ";
	}
	return sPos;
}


/**********************************************************************************
 * Function Name : gfn_deleteRow
 * Desc          : 개행문자제거
 * Parameter     : strString(문자열)

 * Return        :  줄바꿈이 ->" "
 **********************************************************************************/
function gfn_deleteRow(strString)
{
    var sStr = strString;
    sStr = String(sStr).replace(String.fromCharCode(13)+String.fromCharCode(10), " ");
    return String(sStr);
}

function gfn_trim(arg)
{
	if (arg == null) { return ""; }
    var sArg = arg.toString();
    sArg = sArg.replace(/(^\s*)|(\s*$)/g, "");
    
    var sTmp = sArg.replace(/\n/g, "");
    sTmp = sTmp.replace(/\r/g, "");
    if ("" == sTmp) {
		return sTmp;
    }
    return sArg;
}]]></Script>
