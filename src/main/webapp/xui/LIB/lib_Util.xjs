<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[

// ========================================================================================
// Util 관련 공통함수
// function 명은 gfn_ 을 Prefix로 사용함.
// ========================================================================================

/*****************************************************************************************
 * 함  수  명 : gfn_trim
 * 입      력 : inVal : 문자열 값
 * 반      환 : return 문자열
 * 기      능 : 입력값을 체크하여 Null인경우 ""을 리턴, Null이 아니면 입력값을 반환하는 함수
 *****************************************************************************************/
function gfn_trim(sValue)
{
    if (sValue == null) return "";
    if (new String(sValue).valueOf() == "undefined") return "";
    if (new String(sValue) == null) return "";

    var retVal = (new String(sValue)).replace(/^\s+|\s+$/g, '');

    return retVal;
}

/*****************************************************************************************
 * 함  수  명 : gfn_isNull
 * 입      력 : sValue : String
 * 반      환 : return true/false
 * 기      능 : 입력된 값의 Null 유무 반환 함수
 *****************************************************************************************/
function gfn_isNull(sValue)
{
    if (new String(sValue).valueOf() == "undefined") return true;
    if (sValue == null) return true;

    var v_ChkStr = new String(sValue);

    if (v_ChkStr == null) return true;
    if (v_ChkStr.toString().length == 0 ) return true;
    return false;
}

/*****************************************************************************************
 * 함  수  명 : gfn_transNullToEmpty
 * 입      력 : sValue : 입력값
                sReVal : 입력값
 * 반      환 : 입력값이 null = sReVal
                Not Null = 입력값
 * 기      능 : NULL 일 경우 치환값을 리턴하는 함수
 *****************************************************************************************/
function gfn_transNullToEmpty(sValue, sReVal)
{
    if(sReVal == undefined || sReVal == "undefined") sReVal = "";

    if( gfn_isNull(sValue) )
    {
        return sReVal;
    }
    return sValue;
}

/*****************************************************************************************
 * 함  수  명 : gfn_transNullToNumber
 * 입      력 : sValue : 입력값
 * 반      환 : 입력값이 null = 0
                Not Null = 숫자형 입력값
 * 기      능 : NULL 일 경우 숫자형 치환값을 리턴하는 함수
 *****************************************************************************************/
function gfn_transNullToNumber(sValue)
{
    if(gfn_isNull(sValue)) {
        return 0;
    }

    return toNumber(sValue);
}

/*****************************************************************************************
 * 함  수  명 : gfn_exportComponentToTxt
 * 입      력 : objGrid      : 원본데이타
                sTxtFileNm   : 생성할 파일(경로포함)
                bAutoExecute : 자동실행여부
                sFilterFlag  : File Type Filter("EXCEL", "IMAGE", "" 중 택일)
 * 반      환 : 정상여부(true/false)
 * 기      능 : 컴포넌트의 값을 Text 파일로 변환하는 함수
 *****************************************************************************************/
function gfn_exportComponentToTxt(objComp, sTxtFileNm, bAutoExecute, sFilterFlag)
{
    gfn_setWaitCursor(true);

    var to_day = new Date();
    sTxtFileNm = sTxtFileNm + "_" + to_day.getTime();

    //내문서하단에 경로확인후 없으면 생성
    var strFilePath = system.convertRealPath("%DOCUMENT%");
    var strFileName = sTxtFileNm + ".txt";

     var sTxtFullPath = gfn_fileSavePath(strFilePath, strFileName, sFilterFlag);

     if(sTxtFullPath.length <= 0) {
         gfn_setWaitCursor(false);
        return;
    }

    if(bAutoExecute == undefined) bAutoExecute = true;
    var vFile = new VirtualFile;
    var bSuccess = vFile.open(sTxtFullPath, VirtualFile.openWrite | VirtualFile.openText );

    if(bSuccess)
    {
        var data = objComp.value;

        vFile.write(data);
        vFile.close();
    }

    if (bAutoExecute == true) {
        //파일자동실행
        var objExtCommon = new ExtCommon();
        var rtn = objExtCommon.executeProcess(sTxtFullPath, "", "")    ;
    }

    gfn_setWaitCursor(false);

    return true;
}

/*****************************************************************************************
 * 함  수  명 : gfn_appendComma
 * 입      력 : nNumber : String
                nDetail : 출력시 소숫점 이하의 자릿수.(반올림함)
 * 반      환 : 정상여부(true/false)
 * 기      능 : 입력받은 Number에 컴마를 추가한 String(Comma 를 포함하고 있는 숫자) 반환하는 함수
 *****************************************************************************************/
function gfn_appendComma(nNumber,nDetail)
{
    if (nNumber == null) return "";
    if (nDetail == null) nDetail = 0;

    nNumber = parseFloat(nNumber);
    nNumber = Math.round(nNumber, nDetail);

    var strNumber = new String(nNumber);
    var arrNumber = strNumber.split(".");
    var strFormatNum = "";
    var j = 0;

    for ( i = arrNumber[0].length - 1; i >= 0; i--)
    {
        if (i != strNumber.length && j == 3)
        {
            strFormatNum = arrNumber[0].charAt(i) + "," + strFormatNum;
            j = 0;
        }
        else
        {
            strFormatNum = arrNumber[0].charAt(i) + strFormatNum;
        }
        j++;
    }

    if (arrNumber.length > 1) strFormatNum = strFormatNum + "." + arrNumber[1];

    return strFormatNum;
}

 /*****************************************************************************************
 * 함  수  명 : gfn_removeComma
 * 입      력 : strValue :
 * 반      환 : 컴마를 제거한 입력값
 * 기      능 : 컴마를 제거한 입력값을 반환하는 함수
 *****************************************************************************************/
function gfn_removeComma(strValue)
{
    return strValue.replace(",", "");
}

/*****************************************************************************************
 * 함  수  명 : gfn_getBirthYear
 * 입      력 : sJuminNo : 생년 월일 또는 주민 번호
 * 반      환 : return true/false
 * 기      능 : 주민번호 뒷 첫번째 자리로 년대를 반환 하는 함수
 *****************************************************************************************/
function gfn_getBirthYear(sJuminNo)
{
    if (sJuminNo.toString().length != 13){
        return "N";
    }

    if (!(sJuminNo).match(/^\d{6}\d{7}$/)){
        return "N";
    }

    var vGb = sJuminNo.substr(6,1);

    if (vGb == '1' || vGb == '2' || vGb == '5' || vGb == '6') {
        return '19';
    } else if (vGb == '3' || vGb == '4' || vGb == '7' || vGb == '8') {
        return '20';
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_getJuminToBirth
 * 입      력 : sJumin : 주민번호
 * 반      환 : 생년월일
 * 기      능 : 주민번호를 생년월일로 변환
 *****************************************************************************************/
function gfn_getJuminToBirth(sJumin)
{
    var sJuminBirth = sJumin.substring(0,6);
    var sGubun = sJumin.substring(6,7);

    if (sGubun == "1" || sGubun == "2" || sGubun == "5" || sGubun == "6"){
        sJuminBirth = "19" + sJuminBirth;
    } else if (sGubun == "3" || sGubun == "4" || sGubun == "7" || sGubun == "8"){
        sJuminBirth = "20" + sJuminBirth;
    } else if (sGubun == "9" || sGubun == "0"){
        sJuminBirth = "18" + sJuminBirth;
    } else if (sGubun == "A" || sGubun == "B"){//태아의 경우
        sJuminBirth = "20" + sJuminBirth;
    }
    return sJuminBirth;
}


// ========================================================================================
// 유효성체크 관련  함수
// ========================================================================================

/*****************************************************************************************
 * 함  수  명 : gfn_isSSN
 * 입      력 : sJuminNo : 주민 번호
 * 반      환 : Boolen 형식의 정합성 체크
 * 기      능 : 주민등록번호 유효성 여부를 반환하는 함수
 *****************************************************************************************/
function gfn_isSSN(sJuminNo)
{
    var birthYear = gfn_getBirthYear(sJuminNo);

    birthYear += sJuminNo.substr(0, 2);
    var birthMonth = sJuminNo.substr(2, 2)-1;
    var birthDate = sJuminNo.substr(4, 2);
    var birth = new Date(birthYear, birthMonth, birthDate);

    if ( birth.getYear() % 100 != sJuminNo.substr(0, 2) ||
        birth.getMonth() != birthMonth ||
        birth.getDate() != birthDate)
    {
        return false;
    }

    // Check Sum 코드의 유효성 검사
    buf = new Array(13);
    for (i = 0; i < 6; i++)     buf[i] = parseInt(sJuminNo.charAt(i));
    for (i = 6; i < 13; i++)     buf[i] = parseInt(sJuminNo.charAt(i));

    multipliers = [2,3,4,5,6,7,8,9,2,3,4,5];
    for (i = 0, sum = 0; i < 12; i++) sum += (buf[i] *= multipliers[i]);

    if ((11 - (sum % 11)) % 10 != buf[12]) {
        return false;
    }else{
        return true;
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_getRealAge
 * 입      력 : sJuminNo : 주민 번호
 * 반      환 : 만나이
 * 기      능 : 만나이 산출하는 함수
 *****************************************************************************************/
function gfn_getRealAge(sJuminNo)
{
    var nRealAge = 0;
    var Birth = gfn_getJuminToBirth(sJuminNo);

    var nBirthYear = Birth.substr(0,4);
    var nBirthMonth = Birth.substr(4,2);

    var nYear = _gfn_getCurSysDate("YYYY");    // 올해
    var nMonth = _gfn_getCurSysDate("MM");     // 이번달

    (parseInt(nBirthMonth)<parseInt(nMonth)) ? nRealAge=nYear-nBirthYear : nRealAge=nYear-nBirthYear-1; // 생일이 지나지 않으면 1을 뺀다

    return nRealAge;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getRealAgeByBirthDay
 * 입      력 : sBirthDay : 생년월윌(YYYYMMDD)
 * 반      환 : 만나이
 * 기      능 : 만나이 산출하는 함수
 *****************************************************************************************/
function gfn_getRealAgeByBirthDay(sBirthDay)
{
    var nRealAge = 0;
    var Birth = sBirthDay;

    var nBirthYear = Birth.substr(0,4);
    var nBirthMonth = Birth.substr(4,2);

    var nYear = _gfn_getCurSysDate("YYYY");    // 올해
    var nMonth = _gfn_getCurSysDate("MM");     // 이번달

    (parseInt(nBirthMonth)<parseInt(nMonth)) ? nRealAge=nYear-nBirthYear : nRealAge=nYear-nBirthYear-1; // 생일이 지나지 않으면 1을 뺀다

    return nRealAge;
}

/*****************************************************************************************
 * 함  수  명 : gfn_isMinor
 * 입      력 : sJuminNo : 주민 번호
 * 반      환 : Boolen 형식의 정합성 체크
 * 기      능 : 미성년자 여부를 반환하는 함수
 *****************************************************************************************/
function gfn_isMinor(sJuminNo)
{
    if(gfn_getRealAge(sJuminNo) >= 20)
        return false;
    else
        return true;
}

 /*****************************************************************************************
 * 함  수  명 : gfn_isBzIdNo
 * 입      력 : strCustNo : 사업자등록번호
 * 반      환 : Boolen 형식의 정합성 체크
 * 기      능 : 사업자등록번호 유효성 여부를 반환하는 함수
 *****************************************************************************************/
function gfn_isBzIdNo(strCustNo)
{
    if (strCustNo.length != 10) return false;
    else {

        var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);
        var tmpcustNo, i, chkSum=0, c2, remander;

        for (i=0; i<=7; i++) chkSum += checkID[i] * strCustNo.charAt(i);

        c2 = "0" + (checkID[8] * strCustNo.charAt(8));
        c2 = c2.substring(c2.length - 2, c2.length);

        chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));

        remander = (10 - (chkSum % 10)) % 10 ;

        if (Math.floor(strCustNo.charAt(9)) == remander) return true; // OK!
        return false;
    }

    return true;
}

/*****************************************************************************************
 * 함  수  명 : gfn_isFirmIdNo
 * 입      력 : strNo : 법인등록번호
 * 반      환 : Boolen 형식의 정합성 체크
 * 기      능 : 법인등록번호 유효성 여부를 반환하는 함수
 *****************************************************************************************/
function gfn_isFirmIdNo(strNo)
{
    if (strNo.length != 13 || !isNumeric(strNo)) return false;

    var sum = 0;
    var buf = new Array(13);
    var multipliers = [1,2,1,2,1,2,1,2,1,2,1,2];

    for (var i=0; i<13; i++) {
        buf[i] = toNumber(strNo.charAt(i));
    }

    for (var i=0; i<12; i++) {
        sum += (buf[i] * multipliers[i]);
    }

    sum = (10 - (sum % 10)) % 10;

    if (buf[12] == sum) {
        return true;
    } else {
        return false;
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_isFrnrIdNo
 * 입      력 : strNo : 외국인등록번호
 * 반      환 : Boolen 형식의 정합성 체크
 * 기      능 : 외국인등록번호 유효성 여부를 반환하는 함수
 *****************************************************************************************/
function gfn_isFrnrIdNo(strNo)
{
    if (strNo.length != 13 || !isNumeric(strNo)) return false;

    var month = toNumber(strNo.substr(2, 2));
    var day      = toNumber(strNo.substr(4, 2));

    if (month < 1 || month > 12) return false;
    if (day < 1 || day > 31) return false;

    var sum = 0;
    var odd = 0;
    var buf = new Array(13);
    var multipliers = [2,3,4,5,6,7,8,9,2,3,4,5];

    for (var i=0; i<13; i++) {
        buf[i] = toNumber(strNo.charAt(i));
    }

    if (buf[11] < 6) return false;

    odd = buf[7] * 10 + buf[8];
    if((odd%2) != 0) return false;

    for (var i=0; i<12; i++) {
        sum += (buf[i] * multipliers[i]);
    }

    sum = 11 - (sum % 11);

    if (sum >= 10) sum -= 10;
    sum += 2;
    if (sum >= 10) sum -= 10;

    if (buf[12] == sum) {
        return true;
    } else {
        return false;
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_isCardNo
 * 입      력 : strNo : 카드번호
 * 반      환 : Boolen 형식의 정합성 체크
 * 기      능 : 카드번호 유효성 여부를 반환하는 함수
 *****************************************************************************************/
function gfn_isCardNo(strNo)
{
    if (strNo.length < 13 || strNo.length > 19 || !isNumeric(strNo)) return false;

    var sum = 0;
    var buf = new Array();

    for (var i=0; i<strNo.length; i++) {
        buf[i] = toNumber(strNo.charAt(i));
    }

    var temp;
    for (var i=buf.length-1, j=0; i>=0; i--, j++) {
        temp = buf[i] * ((j%2) + 1);
        if (temp >= 10) {
            temp = temp - 9;
        }
        sum += temp;
    }

    if ((sum % 10) == 0) {
        return true;
    } else {
        return false;
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_isEmail
 * 입      력 : strValue : E-메일주소
 * 반      환 : Boolen 형식의 정합성 체크
 * 기      능 : E-메일형식 유효성 여부를 반환하는 함수
 *****************************************************************************************/
function gfn_isEmail(strValue)
{
	strValue = strValue.trim();
    var retVal = false;
    var sTmp = "";
    var sRegExp = "[a-z0-9]+[a-z0-9.,]+@[a-z0-9]+[a-z0-9.,]+\\.[a-z0-9]+";

    var regexp = new RegExp(sRegExp,"ig");
    sTmp = regexp.exec(strValue);
	
    if( sTmp == null ) {
        retVal = false;
    } else {
        if( ( sTmp.index == 0 ) && (sTmp[0].length == strValue.length ) ) {
            retVal = true;
        } else {
            retVal = false;
        }
    }
    return retVal;
}

/*****************************************************************************************
 * 함  수  명 : gfn_removeSpecialChar
 * 입      력 : strValue : String
 * 반      환 : 특수문자를 제거한 문자열
 * 기      능 : 특수문자를 제거한 문자열을 반환하는 함수
 *****************************************************************************************/
function gfn_removeSpecialChar(strValue)
{
   var strSpecial = "~!@#$%^&*-+./=_`{|}()\\?<>";

   for (i = 0; i < strValue.length; i++) {
      for (j = 0; j < strSpecial.length; j++) {
        if (strValue.charAt(i) == strSpecial.charAt(j))
          strValue = strValue.replace(strValue.charAt(i), "");
      }
   }

   return strValue;
}


// ========================================================================================
// 길이(Length)  함수
// ========================================================================================

/*****************************************************************************************
 * 함  수  명 : gfn_lenB
 * 입      력 : sVal : String
 * 반      환 : Integer
 * 기      능 : 문자열의 전체 길이(한글,한자:3 / 나머지 1)를 반환하는 함수
 *****************************************************************************************/
function gfn_lenB(sVal)
{
    var len = 0;

    if( gfn_isNull(sVal) )     return -1;

    for (i=0; i<String(sVal).toString().length; i++)
    {
            if (String(sVal).charCodeAt(i) > 127)
                len += 3;
            else
                len += 1;
    }

    return len;
}

// ========================================================================================
// 형식확인 함수
// ========================================================================================

/*****************************************************************************************
 * 함  수  명 : gfn_isNum
 * 입      력 : sNum : 입력값
 * 반      환 : Boolen 형식의 정합성 체크
 * 기      능 : 숫자형식 여부를 반환하는 함수
 *****************************************************************************************/
function gfn_isNum(sNum)
{
    var c;
    var point_cnt=0;
    var ret=true;

    if( gfn_isNull(sNum) ) return false;

    for( i = 0 ; i < sNum.length ; i++ )
    {
        c = sNum.charAt(i);
        if( i == 0 && ( c == "+" || c == "-" ) );
        else if( c >= "0" && c <= "9" );
        else if( c == "." )
        {
            point_cnt++;
            if( point_cnt > 1 )
            {
                ret = false;
                break;
            }
        }
        else
        {
            ret = false;
            break;
        }
    }

    return ret;
}

/*****************************************************************************************
 * 함  수  명 : gfn_moveNextComponent
 * 입      력 : obj : Component
 * 반      환 :
 * 기      능 : 다음컴포넌트로 이동하는 함수
 *****************************************************************************************/
function gfn_moveNextComponent(obj)
{
    var objComponent = this.getNextComponent(obj);
    objComponent.setFocus();
}

/*****************************************************************************************
 * 함  수  명 : gfn_getObjFont
 * 입      력 : iFontSize : 폰트 사이즈
                sFontName : 폰트 명
 * 반      환 : Font Object
 * 기      능 : Font Object 생성 반환하는 함수
 *****************************************************************************************/
function gfn_getObjFont(iFontSize, sFontName)
{
    var objFont = new Font;
    objFont.size = iFontSize;
    objFont.name = sFontName;
    objFont.bold = true;
    return objFont;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getTextSize
 * 입      력 : sText                : 길이 산정을 위한 기본 텍스트
                objFont              : 폰트 오브젝트
                iLimitWidth          : 최소사이즈
                sConstWordWrapOption : WordWrapOption
 * 반      환 : true/false
 * 기      능 : TextSize 반환하는 함수
 *****************************************************************************************/
function gfn_getTextSize(sText, objFont, iLimitWidth, sConstWordWrapOption)
{
    var objPainter = this.canvas.getPainter();
    if(gfn_isNull(objPainter)==false)
    {
        var objTextSize = objPainter.getTextSize(sText, objFont);
        return objTextSize;
    }else
    {
        return false;
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_viewShortText
 * 입      력 : sText   : 길이 산정을 위한 기본 텍스트
                nMaxLen : 최대길이
 * 반      환 : MaxLen을 초가한 부분은 ".."으로 변환된 텍스트
 * 기      능 : 특정길이 이상 String을 ".."으로 변환된 String 반환 함수
 *****************************************************************************************/
function gfn_viewShortText(sText, nMaxLen)
{
    var reStr = "";
    if( gfn_isNull(sText) ) return "";

    var len = _gfn_getLengthByToolTip(sText);

    if(len <= nMaxLen) {
        return sText;
    } else if(len <= (nMaxLen+2)){
        return sText;
    }

    len = 0;
    for (i=0; i<String(sText).toString().length; i++)
    {
        if(parseInt(len) >= parseInt(nMaxLen)) {
            reStr += "..";
            return reStr;
        }

        // 한글 또는 공백은 예외처리
        if (String(sText).charCodeAt(i) > 127 || String(sText).charCodeAt(i) == 32){
            len += 2;
        } else {
            len += 1;
        }

        reStr += String(sText).charAt(i);
    }
    return reStr;
}

/*****************************************************************************************
 * 함  수  명 : _gfn_getLengthByToolTip
 * 입      력 : sText : 길이 산정을 위한 기본 텍스트
 * 반      환 : length
 * 기      능 : 특정길이 이상 String을 ".."으로 변환된대상 텍스트길이 반환 내부함수
 *****************************************************************************************/
function _gfn_getLengthByToolTip(sText)
{
    var len = 0;

    if( gfn_isNull(sText) ) return -1;

    for (i=0; i<String(sText).toString().length; i++)
    {
        // 한글 또는 공백은 예외처리
        if (String(sText).charCodeAt(i) > 127 || String(sText).charCodeAt(i) == 32){
            len += 2;
        } else {
            len += 1;
        }
    }

    return len;
}



/*****************************************************************************************
 * 함  수  명 : gfn_right
 * 입      력 : sOrg - 원본 문자열
                 nSize -자를 Size
 * 반      환 : 자른 후 문자열
 * 기      능 : 문자열을 오른쪽에서 nSize만큼 자른 후 리턴 함수
 *****************************************************************************************/
function gfn_right(sOrg, nSize) {
    if( gfn_isNull(sOrg) || gfn_isNull(nSize)) return "";

    if( sOrg.length < nSize )
        return sOrg;
    else
        return sOrg.substr(sOrg.length-nSize, nSize);
}

/*****************************************************************************************
 * 함  수  명 : gfn_right
 * 입      력 : sOrg  : 원본 문자열
                nSize : 자를 Size
 * 반      환 : (자른 후 문자열)
 * 기      능 : 문자열을 왼쪽에서 nSize만큼 자른 후 리턴 함수
 *****************************************************************************************/
function gfn_left(sOrg, nSize) {
    if( gfn_isNull(sOrg) || gfn_isNull(nSize)) return "";

    if( sOrg.length < nSize )
        return sOrg;
    else
        return sOrg.substr(0, nSize);
}

/*****************************************************************************************
 * 함  수  명 : gfn_TelMaskOnSetFocus
 * 입      력 : obj : 원본 문자열
                e   : 자를 Size
 * 반      환 :
 * 기      능 : 전화번호 형태일 경우
 *****************************************************************************************/
function gfn_TelMaskOnSetFocus(obj:MaskEdit, e:SetFocusEventInfo)
{
    obj.mask = "###########";
}

function gfn_TelMaskOnKillFocus(obj:MaskEdit, e:KillFocusEventInfo)
{
    gfn_SetTelNoMask(obj);
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetTelNoMask
 * 입      력 : obj : 객체
 * 반      환 :
 * 기      능 : 전화번호 MASK처리
 *****************************************************************************************/
function gfn_SetTelNoMask(obj)
{
    var nMaskLength = gfn_getLength(obj.value);

    if(nMaskLength == 9)           // 9자리
        obj.mask = "##-###-####";
    else if(nMaskLength == 10)     // 10자리
      obj.mask = "###-###-####";
    else
        obj.mask = "###-####-####";
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetHomeZipMask
 * 입      력 : obj : 객체
 * 반      환 :
 * 기      능 : 우편번호 MASK처리
 *****************************************************************************************/
function gfn_SetHomeZipMask(obj)
{
    var nMaskLength = gfn_getLength(obj.value);

    if(nMaskLength == 5)           // 5자리
		obj.mask = "#####";
    else if(nMaskLength == 6)     // 6자리
		obj.mask = "###-###";
    else
        obj.mask = "";
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetTelNoGrdMask
 * 입      력 : sMsk : 원본 문자열
 * 반      환 :
 * 기      능 : 전화번호 MASK처리
 *****************************************************************************************/
function gfn_SetTelNoGrdMask(sMsk)
{
	sMsk = String(sMsk).replace("-", "");
    var nMaskLength = gfn_getLength(sMsk);
	// 임동진 수정 (보안검열관련)
    if(nMaskLength == 9)     	// 9자리
        return '##-###-####';
    else if(nMaskLength == 10)   // 10자리
        return '###-###-####';
    else if(nMaskLength == 11)
        return '###-####-####';
	else
		return '';	
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetHomeZipGrdMask
 * 입      력 : obj : 객체
 * 반      환 :
 * 기      능 : 우편번호 MASK처리
 *****************************************************************************************/
function gfn_SetHomeZipGrdMask(sMsk)
{
	sMsk = String(sMsk).replace("-", "");
    var nMaskLength = gfn_getLength(sMsk);

    if(nMaskLength == 5)          // 5자리
		return "#####";
    else if(nMaskLength == 6)     // 6자리
		return "###-###";
    else
        return "";
}

/*****************************************************************************************
 * 함  수  명 : gfn_getTabPageIndexByTabPageNm
 * 입      력 : objTab     : Tab Object
                sTabPageNm : 찾고자하는 Tabpage Name
 * 반      환 : Tabpage Index
 * 기      능 : 탭페이지명을 이용해서 탭페이지의 인덱스를 Return 함수
                (단, 해당 탭페이지가 없는경우에는 -1 Return)
 *****************************************************************************************/
function gfn_getTabPageIndexByTabPageNm(objTab, sTabPageNm)
{
    var objTabPage = objTab.components;
    var nIndex = -1;

    for(var i=0;i<objTabPage.length;i++)
    {
        if(objTabPage[i].name == sTabPageNm) return i;
    }

    return nIndex;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getFilterStr
 * 입      력 : sFullText    : Filter 작성대상 FullText
                sCompare     : Filter 작성대상
                sSplitGbn    : Split 구분자(Default:",")
                sRelationGbn : 연산구분자(Default:"||")
 * 반      환 : Tabpage Index
 * 기      능 : Filter String 생성 함수
 *****************************************************************************************/
function gfn_getFilterStr(sFullText, sCompare, sSplitGbn, sRelationGbn)
{
    if(sSplitGbn == null) sSplitGbn = ",";
    if(sRelationGbn == null) sRelationGbn = "||";

    var arrFilter = String(sFullText).split(sSplitGbn);
    var sFilter = "";

    for(var i=0;i<arrFilter.length;i++)
    {
        if(i==0)
            sFilter = sCompare + "=='"+arrFilter[i]+"'";
        else
            sFilter += sRelationGbn + sCompare + "=='"+arrFilter[i]+"'";
    }

    return sFilter;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getRowType
 * 입      력 : objDs : Dataset Object
 * 반      환 :
 * 기      능 : Dataset RowType 확인 함수
 *****************************************************************************************/
function gfn_getRowType(objDs)
{
    for(var i=0;i<objDs.rowcount;i++)
    {
        trace("Row::"+i+" RowType::"+objDs.getRowType(i));
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_viewFusionChart
 * 입      력 : swf       : FlashFile명
                objchart  : Chart Object
                dataXml   : Chart View 대상 문자열
 * 반      환 :
 * 기      능 : Fusion Chart View 함수
 *****************************************************************************************/
function gfn_viewFusionChart(swf,objchart,dataXml)
{
    trace("ChartUrl::"+gfn_getFusionChartUrl());

    objchart.Movie = gfn_getFusionChartUrl() + swf;
    objchart.SetVariable('dataXML', dataXml);
    objchart.visible=true;
    objchart.Rewind();
    objchart.Stop();
    objchart.Play();
}

/*****************************************************************************************
 * 함  수  명 : gfn_viewObjectInfo
 * 입      력 : obj : Object
 * 반      환 :
 * 기      능 : Object 내용확인 함수
 *****************************************************************************************/
function gfn_viewObjectInfo(obj)
{
    for(var i in obj)
    {
        trace(i + "::" + obj[i]);
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_getHangulComplete
 * 입      력 : sText : 한글완성여부 확인대상 문자열
 * 반      환 :
 * 기      능 : 한글 완성여부 반환 함수
 *****************************************************************************************/
function gfn_getHangulComplete(sText)
{
    var font_cho = new Array('ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ','ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ' );
    var font_jung = new Array('ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ','ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ',    'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ' );
    var font_jong = new Array('', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ' );

    var sJongList = "";
    var sJungList = "";
    var sChoList  = "";

    for(var i=0;i<sText.length;i++)
    {
        var CompleteCode = sText.charCodeAt(i);
        var UniValue = CompleteCode - 44032;

        var Jong = UniValue%28;
        var Jung = ((UniValue-Jong)/28)%21;
        var Cho = parseInt(((UniValue-Jong)/28)/21);

        if(font_jong[Jong] == undefined) return false;
        if(font_jung[Jung] == undefined) return false;
        if(font_cho[Cho] == undefined) return false;

        sJongList += font_jong[Jong];
        sJungList += font_jung[Jung];
        sChoList += font_cho[Cho];
    }

    return true;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getImageView
 * 입      력 : sFileId : 파일 아이디
 * 반      환 :
 * 기      능 : 이미지 미리보기를 위한 함수
 *****************************************************************************************/
function gfn_getImageView(sFileId)
{
    return gfn_getFileDownloadUrl() + "?fileId="+sFileId;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getHttpImageView
 * 입      력 : sFileId   : 파일 아이디
                sFilePath : 파일 경로
 * 반      환 :
 * 기      능 : 이미지 미리보기를 위한 함수
 *****************************************************************************************/
function gfn_getHttpImageView(sFileId, sFilePath)
{
    return gfn_getHttpFileDownloadUrl() + "?fileId="+sFileId+"&filePath="+sFilePath;
}

/*****************************************************************************************
 * 함  수  명 : gfn_decode
 * 입      력 : 함수의 Arguments에서 확인
 * 반      환 : value
 * 기      능 : 조건에 따른 Value 처리
 * 샘       플    :  gfn_decode(strVal, "test", true, false);
 *****************************************************************************************/
function gfn_decode()
{
    var varRtnValue = null;

    var arrArgument = gfn_decode.arguments;
    var varValue = arrArgument[0];
    var bIsDefault = false;
    var nCount = 0;

    if((arrArgument.length % 2) == 0) {
        nCount = arrArgument.length - 1;
        bIsDefault = true;
    } else {
        nCount = arrArgument.length;
        bIsDefault = false;
    }

    for(var i = 1; i < nCount; i+=2) {
        if(varValue == arrArgument[i]) {
            varRtnValue = arrArgument[i+1];
            i = nCount;
        }
 }

    if(varRtnValue == null && bIsDefault) {
        varRtnValue = arrArgument[arrArgument.length-1];
    }

    return varRtnValue;
}

/*****************************************************************************************
 * 함  수  명 : gfn_iif
 * 입      력 : 함수의 Arguments에서 확인
 * 반      환 : value
 * 기      능 : 조건에 따른 Value 처리
 * 샘      플 : gfn_iif(strVal=="test", true, false);
 *****************************************************************************************/
function gfn_iif()
{
    var varRtnValue = null;
    var arrArgument = gfn_iif.arguments;

    if(arrArgument[0]) {
        return arrArgument[1];
    } else {
        return arrArgument[2];
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_getLengthB
 * 입      력 :
 * 반      환 : length
 * 기      능 : Byte 길이 반환 함수
 *****************************************************************************************/
function gfn_getLengthB(sValue)
{
	 if (gfn_isNull(sValue)) return 0;
	 
     var v_ChkStr = sValue.toString();
     var v_cnt = 0;

     for (var i=0; i<v_ChkStr.length; i++)
     {
        if (v_ChkStr.charCodeAt(i) > 127)
         {
            v_cnt += 3;
         } else {
            v_cnt += 1;
         }
     }

    return v_cnt;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getLength
 * 입      력 : sValue : String
 * 반      환 : return int
 * 기      능 : 입력된 문자열 길이 반환하는 함수
 *****************************************************************************************/
function gfn_getLength(sValue)
{
    if (new String(sValue).valueOf() == "undefined") return 0;
    if (sValue == null) return 0;

    var v_ChkStr = new String(gfn_trim(sValue));

    if (v_ChkStr == null) return 0;
    if (v_ChkStr.toString().length == 0 ) return 0;

    return v_ChkStr.toString().length;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getInSqlStrByFileList
 * 입      력 : sAttachFileList : 첨부파일리스트 문자열
                sSplit          : Split 구분자(Default:",")
 * 반      환 : IN절에서 사용하기 위한 문자열
 * 기      능 : 구분자로 분리된 파일리스트를 IN절에서 사용가능한 문자열로 변환해서 반환
 *****************************************************************************************/
function gfn_getInSqlStrByFileList(sAttachFileList, sSplit)
{
    var sQuoteFileList;

    if(sSplit == null) sSplit = ",";

    var arrFileList = sAttachFileList.split(sSplit);

    for(var i=0;i<arrFileList.length;i++)
    {
        if(i == 0) {
            sQuoteFileList = "'"+ arrFileList[i] + "'";
        } else {
            sQuoteFileList += ",'"+ arrFileList[i] + "'";
        }
    }

    return sQuoteFileList;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getInSqlStrByDataset
 * 입      력 : objDs          : 첨부파일리스트 데이타셋
                strFileIdColNm : FileId 칼럼명
 * 반      환 : IN절에서 사용하기 위한 문자열
 * 기      능 : 데이타셋를 전달받아 IN절에서 사용하기 위한 문자열로 변환해서 반환
 *****************************************************************************************/
function gfn_getInSqlStrByDataset(objDs, strFileIdColNm)
{
    var sQuoteFileList;

    for(var i=0;i<objDs.rowcount;i++)
    {
        if(i == 0) {
            sQuoteFileList = "'"+ objDs.getColumn(i, strFileIdColNm) + "'";
        } else {
            sQuoteFileList += ",'"+ objDs.getColumn(i, strFileIdColNm) + "'";
        }
    }

    return sQuoteFileList;
}

/*****************************************************************************************
 * 함  수  명 : gfn_setUpdateToDataset
 * 입      력 : objContainer : 컨테이너 Object
 * 반      환 :
 * 기      능 : 해당 컨테이너 내의 모든 컴포넌트의 값을 데이타셋에 반영시키는 함수
 *****************************************************************************************/
function gfn_setUpdateToDataset(objContainer)
{
    var containerNm = objContainer.name;
    var bindlist = this.binds;
    for(var i=0;i<bindlist.length;i++)
    {
        var binditem = bindlist[i];

        if(String(binditem.compid).indexOf(containerNm) == 0) {
            var objComp = eval(binditem.compid);
            objComp.updateToDataset();
        }
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_isPopupYn
 * 입      력 :
 * 반      환 : true/false
 * 기      능 : 현재폼의 팝업인지 아닌지 반환
 *****************************************************************************************/
function gfn_isPopupYn()
{
    if(this.getOwnerFrame().form.opener != null){
        return true;
    }else {
        return false;
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_ozRptPrmrInit
 * 입      력 :
 * 반      환 :
 * 기      능 : OZ-Report Parameter 초기화 함수
 *****************************************************************************************/
function gfn_ozRptPrmrInit()
{
    gds_OzRptOzrParam.clearData();
    gds_OzRptOdiParam.clearData();
}

/*****************************************************************************************
 * 함  수  명 : gfn_setOzRptOzrPrmr
 * 입      력 :
 * 반      환 :
 * 기      능 : OZ-Report ozr Parameter 데이타 설정 함수
 *****************************************************************************************/
function gfn_setOzRptOzrPrmr(sKey, sValue)
{
    var objDs = gds_OzRptOzrParam;

    if(gfn_getLength(sKey) <= 0 ) {
        alert("OZ-Report ozr Parameter Key 설정오류!!");
        return;
    }

    var nRow = objDs.findRow("key", sKey);

    if(nRow == -1) {
        nRow = objDs.addRow();
    }

    objDs.setColumn(nRow, "key", sKey);
    objDs.setColumn(nRow, "value", sValue);
}

/*****************************************************************************************
 * 함  수  명 : gfn_setOzRptOdiPrmr
 * 입      력 :
 * 반      환 :
 * 기      능 : OZ-Report odi Parameter 데이타 설정 함수
 *****************************************************************************************/
function gfn_setOzRptOdiPrmr(sKey, sValue)
{
    var objDs = gds_OzRptOdiParam;

    if(gfn_getLength(sKey) <= 0 ) {
        alert("OZ-Report odi Parameter Key 설정오류!!");
        return;
    }

    var nRow = objDs.findRow("key", sKey);

    if(nRow == -1) {
        nRow = objDs.addRow();
    }

    objDs.setColumn(nRow, "key", sKey);
    objDs.setColumn(nRow, "value", sValue);
}

/*****************************************************************************************
 * 함  수  명 : gfn_openOzRptViewer
 * 입      력 : ozRptFilePath  : OZ-Report Path 예:"Sample/"
                ozRptFileNm    : OZ-Report 파일명(단, 확장자 제외) 예:"ozFileNm"
                objParamDsList : OZ-Report csv data 설정(n개의 데이타셋을 object에 담아 object로 전달한다.)
 * 반      환 :
 * 기      능 : OZ-Report Viewer 팝업호출 함수
 *****************************************************************************************/
function gfn_openOzRptViewer(ozRptFilePath, ozRptFileNm, objParamDsList)
{
    var strParam = {pv_ozRptFilePath:ozRptFilePath,pv_ozRptFileNm:ozRptFileNm,pv_objDsList:objParamDsList};
    var rtn = gfn_diaLog("ozRptViewer", -1, -1, 850, 850, "COMM::Comm_OZReportViewer.xfdl", true, strParam, false, true, true, true);
}

/*****************************************************************************************
 * 함  수  명 : gfn_OzRptLauncher
 * 입      력 : ozRptFilePath  : OZ-Report Path 예:"Sample/"
                ozRptFileNm    : OZ-Report 파일명(단, 확장자 제외) 예:"ozFileNm"
                objParamDsList : OZ-Report csv data 설정(n개의 데이타셋을 object에 담아 object로 전달한다.)
                previewMode    : 미리보기 모드 gfn_getOZRepor_preview, gfn_getOZRepor_print, gfn_getOZRepor_export
 * 반      환 :
 * 기      능 : OZ-Report Viewer 팝업호출 함수
 *****************************************************************************************/
function gfn_OzRptLauncher(ozRptFilePath, ozRptFileNm, objParamDsList, previewMode)
{
    if(gfn_isNull(previewMode)){
        previewMode = "preview";
    }
    var strParam = {pv_ozRptFilePath:ozRptFilePath,pv_ozRptFileNm:ozRptFileNm,pv_objDsList:objParamDsList,pv_mode:previewMode};
    var rtn = gfn_diaLog("ozRptViewer", -1, -1, 850, 850, "COMM::Comm_OZReportViewer.xfdl", true, strParam, false, true, true, true);
}

/*****************************************************************************************
 * 함  수  명 : gfn_OzRptBatchLauncher
 * 입      력 : ds_rpt      : ozr 파일명, odi 파일명, ozr 파일경로, ozr 주입 param, odi 주입 param
                previewMode : 미리보기 모드 gfn_getOZRepor_preview, gfn_getOZRepor_print, gfn_getOZRepor_export
 * 반      환 :
 * 기      능 : OZ-Report Batch Viewer 팝업호출 함수
 *****************************************************************************************/
function gfn_OzRptBatchLauncher(ds_rpt, previewMode)
{
    if(gfn_isNull(previewMode)){
        previewMode = "preview";
    }
    var strParam = {pv_ds_rpt:ds_rpt,pv_previewMode:previewMode};
    var rtn = gfn_diaLog("ozRptBatchViewer", -1, -1, 850, 850, "COMM::Comm_OZReportBatchViewer.xfdl", true, strParam, false, true, true, true);
}


/*****************************************************************************************
 * 함  수  명 : gfn_getCodeOfString
 * 입      력 : strValue   : 코드값 반환대상 문자열
                sStartFlag : 코드값 Parsing 시작문자
                sEndFlag   : 코드값 Parsing 종료문자
 * 반      환 :
 * 기      능 : 문자열내에서 코드값 반환하는 함수(단, 코드는 특정문자로 묶여있어야 함)
 *****************************************************************************************/
function gfn_getCodeOfString(strValue, sStartFlag, sEndFlag)
{
    var nStartPos = String(strValue).indexOf(sStartFlag);
    var nEndPos = String(strValue).indexOf(sEndFlag);

    return String(strValue).substring(nStartPos+1, nEndPos);
}

/*****************************************************************************************
 * 함  수  명 : gfn_getOpenerUid
 * 입      력 :
 * 반      환 : 부모창(업무화면) UID
 * 기      능 : 팝업창에서 팝업창을 호출한 부모창(업무화면) UID 반환하는 함수
 *****************************************************************************************/
function gfn_getOpenerUid()
{
    return this.getOwnerFrame().form.opener.getOwnerFrame().name;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getLocalIp
 * 입      력 :
 * 반      환 : 로컬컴퓨터 IP
 * 기      능 : 로컬컴퓨터 IP 반환하는 함수
 *****************************************************************************************/
function gfn_getLocalIp()
{
    var objExt = new ExtCommon();
    var local_ip = objExt.getIPAddress();

    return local_ip[0];
}

/*****************************************************************************************
 * 함  수  명 : gfn_setRgnNo
 * 입      력 : 1.s_admnAddr : 기본 주소 String (ex:서울특별시)
                  2.obj_rgnNo : 지역번호를 리턴받을 Object
 * 반      환 : 해당 주소의 지역번호
 * 기      능 : 지역번호 반환
 *****************************************************************************************/
function gfn_setRgnNo(s_admnAddr, obj_rgnNo)
{
    if(gfn_isNull(s_admnAddr)) return;

    var v_rgn = s_admnAddr.substr(0,3);
    v_rgn = v_rgn.trim();
    var v_no = '';


    // 새주소는 도 명칭이 Full Name으로 조회됨 예) 서울특별시 을지로 6-0
    // 구주소는 도 명칭을 줄임말로 가져옴 예) 서울 을지로 7가
    if(v_rgn.length == 3)
    {
        switch(v_rgn)
        {
            case "광주광":
            v_no = '062';
            break;

            case "경기도":
            v_no = '031';
            break;

            case "경상북":
            v_no = '054';
            break;

            case "경상남":
            v_no = '055';
            break;

            case "대구광":
            v_no = '053';
            break;

            case "대전광":
            v_no = '042';
            break;

            case "부산광" :
            v_no = '051';
            break;

            case "서울특" :
            v_no = '02';
            break;

            case "세종특" :
            v_no = '044';
            break;

            case "울산광" :
            v_no = '052';
            break;

            case "인천광" :
            v_no = '032';
            break;

            case "전라남" :
            v_no = '061';
            break;

            case "전라북" :
            v_no = '063';
            break;

            case "제주특" :
            v_no = '064';
            break;

            case "충청남" :
            v_no = '041';
            break;

            case "충청북" :
            v_no = '043';
            break;

            default :
            trace('지역번호 값 추출에 실패하였습니다 \n주소값 확인하시기 바랍니다');
            v_no = '';
            break;
        }
    }
    else
    {
        switch(v_rgn)
        {
            case "광주":
            v_no = '062';
            break;

            case "경기":
            v_no = '031';
            break;

            case "경북":
            v_no = '054';
            break;

            case "경남":
            v_no = '055';
            break;

            case "대구":
            v_no = '053';
            break;

            case "대전":
            v_no = '042';
            break;

            case "부산" :
            v_no = '051';
            break;

            case "서울" :
            v_no = '02';
            break;

            case "세종" :
            v_no = '044';
            break;

            case "울산" :
            v_no = '052';
            break;

            case "인천" :
            v_no = '032';
            break;

            case "전남" :
            v_no = '061';
            break;

            case "전북" :
            v_no = '063';
            break;

            case "제주" :
            v_no = '064';
            break;

            case "충남" :
            v_no = '041';
            break;

            case "충북" :
            v_no = '043';
            break;

            default :
            trace('지역번호 값 추출에 실패하였습니다 \n주소값 확인하시기 바랍니다');
            v_no = '';
            break;
        }
    }

    if(v_no != '' && obj_rgnNo != null)
    {
        obj_rgnNo.value = v_no;
    }

    return v_no;
}

/*****************************************************************************************
 * 함  수  명 :  gfn_getOpenPopupYn
 * 입      력 :  화면아이디
 * 반      환 :   true/false
 * 기      능 :  해당 폼아이디(스크린아이디) 팝업오픈 여부 반환 함수
 *****************************************************************************************/
function gfn_getOpenPopupYn(sScrnId)
{
    var objDs = gds_Menu;
    var sMenuID;

    var nRow = objDs.findRow("scrnId", sScrnId);
    if(nRow != -1) {
        sMenuID = objDs.getColumn(nRow, "menuCd");

        for(var i=0;i<application.popupframes.length;i++)
        {
            if(String(application.popupframes[i].name).indexOf(sMenuID) != -1) {
                return true;
            }
        }

    }

    return false;
}

/*****************************************************************************************
 * 함  수  명 :  gfn_getFuncExistsYn
 * 입      력 :  str_func 함수명
 * 반      환 :   true/false
 * 기      능 :  함수존재여부 반환
 *****************************************************************************************/
function gfn_getFuncExistsYn(str_func)
{
    // 존재하지 않는 함수 체크
    if (this[str_func] == undefined) {
        return false;
    } else {
        // "exist_func"이 함수 타입인지 체크
        //if (typeof str_func == "function") {
            return true;
        //}
    }
}


function gfn_cutByLen(str, maxByte) {
	for(b=i=0;c=str.charCodeAt(i);) {
		b+=c>>7?3:1;
		if (b > maxByte) break;
		i++;
	}

	return str.substring(0,i);
}

/*****************************************************************************************
 * 함  수  명 :  gfn_phoneNumStr
 * 입      력 :  object
 * 반      환 :  object
 * 기      능 :  전화번호 형태로 반환
 *****************************************************************************************/
function gfn_phoneNumObj(obj) {
	obj.value = gfn_phoneNumStr(obj.value);
}

/*****************************************************************************************
 * 함  수  명 :  gfn_phoneNumStr
 * 입      력 :  str 문자열
 * 반      환 :  str
 * 기      능 :  전화번호 형태로 반환
 *****************************************************************************************/
function gfn_phoneNumStr(str) {
	str = str+"";
    var RegNotNum  = /[^0-9]/g;
    var RegPhonNum = "";
    var DataForm   = "";

    // return blank
    if (str == "" || str == null) return "";

    // delete not number
    str = str.replace(RegNotNum,'');

    if (str.length < 5) {
        return str;
    }

    if (str.length > 11) {
        str = str.substring(0, 11);
    }

    if (str.length > 4 && str.length < 7) {
        DataForm = "$1-$2";
        RegPhonNum = /([0-9]{3})([0-9]+)/;
    } else if (str.length == 7) {
        DataForm = "$1-$2";
        RegPhonNum = /([0-9]{3})([0-9]{4})/;
    } else if (str.length == 8) {
        DataForm = "$1-$2";
        RegPhonNum = /([0-9]{4})([0-9]{4})/;
    } else if (str.length > 8 && str.length < 10) {
        DataForm = "$1-$2-$3";
        RegPhonNum = /([0-9]{2})([0-9]{3})([0-9]+)/;
    } else if (str.length == 10) {
        if (str.substring(0,2) == "02") {
            DataForm = "$1-$2-$3";
            RegPhonNum = /([0-9]{2})([0-9]{4})([0-9]+)/;
        } else {
            DataForm = "$1-$2-$3";
            RegPhonNum = /([0-9]{3})([0-9]{3})([0-9]+)/;
        }
    } else if (str.length > 10) {
        DataForm = "$1-$2-$3";
        RegPhonNum = /([0-9]{3})([0-9]{4})([0-9]+)/;
    }

    while (RegPhonNum.test(str)) {
        str = str.replace(RegPhonNum, DataForm);
    }
    return str;
};

/*****************************************************************************************
 * 함  수  명 :  gfn_textArea
 * 입      력 :  str 문자열
 * 반      환 :  str
 * 기      능 :  띄어쓰기 제거
 *****************************************************************************************/
 function gfn_textArea(str)
{
	//수정자 정훈
	//수정이유 false 리턴 이상있을시 원복
	/*if (gfn_isNull(str)) return false;*/
	if (gfn_isNull(str)) return;
	return String(str).replace(/[\n\r]/g,"");
}

/*****************************************************************************************
 * 함  수  명 :  gfn_strDttm
 * 입      력 :  str 문자열
 * 반      환 :  str
 * 기      능 :  날자 형태로 변환
 *****************************************************************************************/
function gfn_strDttm(inStr){
	var Str;
	if(inStr.length > 8){
		Str = inStr.substring(0,4);
		Str += "-"+ inStr.substring(4,6)+"-"+inStr.substring(6,8);
		Str += " "+ inStr.substring(8,10)+":"+inStr.substring(10,12);
	}else{
		Str = inStr.substring(0,4);
		Str += "-"+ inStr.substring(4,6)+"-"+inStr.substring(6,8);
	}
	return Str;
}

/*****************************************************************************************
 * 함  수  명 :  gfn_commaStr
 * 입      력 :  str 문자열
 * 반      환 :  str
 * 기      능 :  금액의 콤마(,) 표시 추가
 *****************************************************************************************/
function gfn_commaStr(inStr){
	inStr = String(toNumber(String(inStr).replace(/[^0-9]/g,"")));	
	return inStr.replace(/(\d)(?=(?:\d{3})+(?!\d))/g,'$1,');
}

/*****************************************************************************************
 * 함  수  명 :  gfn_BrnoStr
 * 입      력 :  str 문자열
 * 반      환 :  str
 * 기      능 :  사업자등록번호 형태로 반환
 *****************************************************************************************/
function gfn_BrnoStr(str) {
    var RegNotNum  = /[^0-9]/g;
    var RegPhonNum = "";
    var DataForm   = "";

    if (str == "" || str == null) return "";

    str = str.replace(RegNotNum,'');

    if (str.length < 10) {
        return str;
    }

    if (str.length > 10) {
        str = str.substring(0, 10);
    }

   if (str.length == 10) {
		DataForm = "$1-$2-$3";
		RegPhonNum = /([0-9]{2})([0-9]{3})([0-9]+)/;
    }

    while (RegPhonNum.test(str)) {
        str = str.replace(RegPhonNum, DataForm);
    }
    return str;
};

/*****************************************************************************************
 * 함  수  명 :  gfn_CardStr
 * 입      력 :  str 문자열
 * 반      환 :  str
 * 기      능 :  카드번호 형태로 반환
 *****************************************************************************************/
function gfn_CardStr(str) {
	str = str+"";
    var RegNotNum  = /[^0-9]/g;
    var RegPhonNum = "";
    var DataForm   = "";

    if (str == "" || str == null) return "";

    str = str.replace(RegNotNum,'');
    if (str.length < 15) {
        return str;
    }

    if (str.length > 16) {
        str = str.substring(0, 16);
    }
    if (str.length == 15 || str.length == 16) {
		DataForm = "$1-$2-$3-$4";
		RegPhonNum = /([0-9]{4})([0-9]{4})([0-9]{4})([0-9]+)/;
    }

    while (RegPhonNum.test(str)) {
        str = str.replace(RegPhonNum, DataForm);
    }
    return str;
};


/*****************************************************************************************
 * 함  수  명 : gfn_isEmpty
 * 입      력 : sValue : String
 * 반      환 : return true/false
 * 기      능 : 입력된 값이 비어있는지 검사
 *****************************************************************************************/
function gfn_isEmpty(sValue)
{
	if ( null == sValue ) return true;
	if ( undefined == sValue ) return true;
	
	if (sValue instanceof Calendar) {
		if ("" == sValue.value + "") {
			return true;
		} else {
			return false;
		}
	}
	
	var sType = typeof sValue;	
	sType = sType.toLowerCase();
	
	if ("string" != sType) {
		if ( "object" == sType && sValue.getFullYear) {
			if ("" == sValue.toString()) {
				return true;
			}
		} else if ( "number" == sType ) {
			return false;
		} else {
			return true;
		}
	}
	
	if (sValue.length < 1) return true;
	
    return false;
}

/*****************************************************************************************
 * 함  수  명 : gfn_isBlank
 * 입      력 : sValue : String
 * 반      환 : return true/false
 * 기      능 : 입력된 값이 비어있거나 공백으로만 채워진 문자열인지 검사
 *****************************************************************************************/
function gfn_isBlank(sValue)
{	
	if ( undefined == sValue || null == sValue ) return true;
	
	var sType = typeof sValue;
	if ("string" != sType.toLowerCase()) return true;
	
	if (sValue.length < 1) return true;
	
	if (gfn_trim(sValue).length < 1) return true;
	
    return false;
}

/*****************************************************************************************
 * 함  수  명 : gfn_startsWith
 * 입      력 : sValue : String
 * 반      환 : return true/false
 * 기      능 : 입력된 값이 특정 문자열로 시작되는지 검사
 *****************************************************************************************/
function gfn_startsWith(str, prefix) {
    return str.indexOf(prefix) === 0;
}

/*****************************************************************************************
 * 함  수  명 : gfn_endsWith
 * 입      력 : sValue : String
 * 반      환 : return true/false
 * 기      능 : 입력된 값이 특정 문자열로 종료되는지 검사
 *****************************************************************************************/
function gfn_endsWith(str, suffix) {
    return str.match(suffix+"$")==suffix;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getUserInfo
 * 입      력 : sKey : String
 * 반      환 : return gds_UserInfo 데이터셋에서 명시한 키의 값
 * 기      능 : 로그인 사용자 단순 정보 획득
 *****************************************************************************************/
function gfn_getUserInfo(sKey) {
	return gds_UserInfo.getColumn(0, sKey);
}

// Tabpage의 id를 리턴
function gfn_getTpgId(obj:Tab, idx) {
	if (gfn_isEmpty(idx)) {
		return obj.components[obj.tabindex].name;
	} else {
		return obj.components[idx].name;
	}
}

// Tabpage 리턴
function gfn_getTpg(obj:Tab, idx) {
	if (gfn_isEmpty(idx)) {
		return obj.components[obj.tabindex];
	} else {
		return obj.components[idx];
	}
}


// 이미지 90% 회전
function gfn_retateImg(imgView, isClockWise) {

	if (gfn_isNull(imgView.image)) {
		return;
	}
	
	var old = imgView.style.transformation + "";
	var sTmp = "";
	var oldAngle = 0;
	var newAngle = 0;
	var idx;	

	var x = Math.ceil(imgView.position.width / 2);
	var y = Math.ceil(imgView.position.height / 2);

	if ("" == old) {
		if (isClockWise) {
			imgView.style.transformation = x + "," + y + " [rotate 90]";
		} else {
			imgView.style.transformation = x + "," + y + " [rotate 270]";
		}
		
	} else {
		idx = old.indexOf("[");
		sTmp = old.substr(idx);
		sTmp = sTmp.replace("[", "").replace("rotate ", "").replace("]", "");
		oldAngle = parseInt(sTmp);
		
		if (isClockWise) {
			if (oldAngle == 360) {
				newAngle = 90;
			} else {
				newAngle = parseInt(sTmp) + 90;
			}		
		} else {
			if (oldAngle == 360 || oldAngle == 0) {
				newAngle = 270;
			} else {
				newAngle = parseInt(sTmp) - 90;
			}
		}
		imgView.style.transformation = x + "," + y + " [rotate " + newAngle + "]";
	}	
}

// 생일로 만 나이 계산
// ex). var age = gfn_getFullAge("1979030", true);
function gfn_getFullAge(pBrithDt, pShowMsg, pObj)
{
	var nAge;
	
	if (undefined == pBrithDt || null == pBrithDt) {
		if (true === pShowMsg) {
			alert("생년월일을 입력해주세요.");
			if (undefined != pObj) {
				pObj.setFocus();
			}
		}
		return false;
	}
	
	pBrithDt = pBrithDt + ""; // Date => String
	
	if (pBrithDt.length < 8) {
		if (true === pShowMsg) {
			alert("생년월일은 8자리로 입력해주세요.");
			if (undefined != pObj) {
				pObj.setFocus();
			}
		}
		return false;
	}

	var tgtYear = pBrithDt.substr(0,4);
	var tgtMd = Number(pBrithDt.substr(4,4));

	var date = new Date();
	var currYear	= date.getFullYear();
	var currMonth	= (date.getMonth() + 1);
	var currDt		= date.getDate();
	if (currMonth < 10) {
		currMonth = "0" + currMonth;
	}

	if (currDt < 10) {
		currDt = "0" + currDt;
	}
	currMd = Number(currMonth + "" + currDt);

	if (currMd >= tgtMd) {
		nAge = currYear - tgtYear;
	} else {
		nAge = currYear - tgtYear - 1;
	}

	return nAge;
} //end func

// 달력컴포넌트에서 값 문자열로 가져오기
function gfn_getCalVal(obj) {
	if (null == obj) return "";
	if (null == obj.value) return "";
	var sVal = obj.value + "";
	return sVal;
}


// 엔컴화면에서 사용하는 권한관련 함수
// asis : getAuthGroup
// 추가일자 : 2017.01.02
function gfn_getAuthGroup(id) {
	var obj;
	try {
		for(var i=0;i<menuList.length;i++){
			if(menuList.getItemAt(i).menuPath!=null
				&& menuList.getItemAt(i).menuPath.indexOf(id)>=0){
				obj = menuList.getItemAt(i);
				break;
			}
		}
	}catch(e) {
		alert(e);
	}
	return obj;
}
/*****************************************************************************************
					마스킹으로 인한 함수 추가 및 수정 
*****************************************************************************************/
/*****************************************************************************************
 * 함  수  명 : gfn_SetBirthDayGrdSecu
 * 입      력 : sData : 원본 문자열
 * 반      환 : 
 * 기      능 : 생일, 사업자번호 MASK처리(보안용)_김준호
 *****************************************************************************************/
function gfn_SetBirthDayGrdSecu(sMak)
{
	var result ='';
	sMak = sMak.toString();
	
	if (sMak.length == 10 ){
		result = '###{####}###';
	}else if (sMak.length == 6){
		result ='##{####}';
	}else if (sMak.length == 8){
		result ='####{####}';
	}else{
		result ='';
	}

	return result;
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetAddrGrdSecu
 * 입      력 : sMsk : 원본 문자열
 * 반      환 : 
 * 기      능 : 주소 MASK처리(보안용)_김준호
				 상세주소만 마스킹 처리
 *****************************************************************************************/
function gfn_SetAddrGrdSecu(oMsk)
{
		
	// null 체크
	if (null == oMsk || undefined == oMsk) return "	";
		
		//2017.12.12 김찬영 상세주소는 ******로 통일...
		return sMskResult = "******";
	
// // 	var sMsk = oMsk.toString();
// // 	var nMaskLength = gfn_getLength(sMsk);
// // 	var sMskArr = sMsk.split(" ");
// // 	var sMskResult ="";
// // 	trace(sMskArr.length);
// // 	for (var i = 0; i<sMskArr.length; i++ ){
// // 		sMskArr[i] = gfn_RPad("", "*", sMskArr[i].length);
// // 		sMskResult = sMskResult+sMskArr[i]+" ";
// // 	}
// //	return sMskResult;
}
/*****************************************************************************************
 * 함  수  명 : gfn_SetTelNoEdtSecu (eMsk)
 * 입      력 : eMsk : 원본 문자열
 * 반      환 :
 * 기      능 : 전화번호 MASK처리
 *****************************************************************************************/
function gfn_SetTelNoEdtSecu(sMsk)
{
	sMsk = String(sMsk).replace("-", "");
    var nMaskLength = gfn_getLength(sMsk);
	// 임동진 수정 (보안검열관련)
   if(nMaskLength == 9)     	// 9자리
        return sMsk.substr(0,2)+"-***-"+sMsk.substr(5,4);
    else if(nMaskLength == 10) {// 10자리
		if (sMsk.substr(0,2) == '02'){
			return sMsk.substr(0,2)+"-****-"+sMsk.substr(6,4);
			
		}else{
			return sMsk.substr(0,3)+"-***-"+sMsk.substr(6,4);
			
        }
    }
    else if(nMaskLength == 11)
        return sMsk.substr(0,3)+"-****-"+sMsk.substr(7,4);
	else
		return '';	
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetCiGrdSecu
 * 입      력 : sMsk : 원본 문자열
 * 반      환 : 
 * 기      능 : CI MASK처리(보안용)_김준호
 *****************************************************************************************/
function gfn_SetCiGrdSecu(oMsk)
{
	var sMsk = oMsk.toString();
	var nMaskLength = gfn_getLength(sMsk);
	if(nMaskLength == 88){     	// 88자리
	   return gfn_RPad(sMsk.substr(0,7).toString(), "*", nMaskLength-7);
	}else{
		return '';	
	}

}


/*****************************************************************************************
 * 함  수  명 : gfn_SetTelNoGrdMaskSecu
 * 입      력 : sMsk : 원본 문자열
 * 반      환 :
 * 기      능 : 전화번호 MASK처리(보안용)
 *****************************************************************************************/
function gfn_SetTelNoGrdMaskSecu(sMsk)
{
	sMsk = String(sMsk).replace("-", "");
    var nMaskLength = gfn_getLength(sMsk);

	// 임동진 수정 (보안검열관련)
	// 김준호 추가 수정
    if(nMaskLength == 9)     	// 9자리
        return '##-{###}-####';
    else if(nMaskLength == 10) {// 10자리
		if (sMsk.substr(0,2) == '02'){
			return '##-{####}-####'
		}else{
		
			return '###-{###}-####';
        }
    }
    else if(nMaskLength == 11)
        return '###-{####}-####';
	else
		return '';	
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetEmailGrdSecu
 * 입      력 : sMsk : 원본 문자열
 * 반      환 : 
 * 기      능 : E-Mail MASK처리(보안용)_김준호
 *****************************************************************************************/
function gfn_SetEmailGrdSecu(sMak)
{

	var retVal = false;
	var sTmp1 = "";
	var sTmp2 = "";
    var sRegExp1 = "[a-z0-9]+[a-z0-9.,]+@";
    var sRegExp2 = "@+[a-z0-9]+[a-z0-9.,]+[a-z0-9]";
    var regexp1 = new RegExp(sRegExp1,"ig");
    var regexp2 = new RegExp(sRegExp2,"ig");
    var sResult;
	
	// null 체크
	if (null == sMak || undefined == sMak) return "";
	// String 변환
	sMak = sMak.toString();
	// 공백제거
	sMak = sMak.replace(" ","");
	// 이메일 정규식 체크
	if (gfn_isEmail(sMak)){

		// @앞부분까지 (@포함)
		sTmp1 = regexp1.exec(sMak);
		
		// @뒤 나머지부분 (@포함)
		sTmp2 = regexp2.exec(sMak);
    
		// @앞부분의 길이-1 (@제외) 
		var len1 = sTmp1[0].length -1;
		
		// @앞부분 2개 제외한 나머지에 * 처리를 한다.
		sResult = gfn_RPad(sTmp1[0].substr(0,2).toString(), "*", len1);
		
		// @+* 한 문자열에 @뒷부분을 붙여준다.
		sResult = sResult + sTmp2[0];
		
		return sResult;	
	}else{
		// 이메일 형식이 아닐경우 그대로 출력
		return sMak;
	}
	
}


/*****************************************************************************************
 * 함  수  명 : gfn_SetCardNoGrdSecu
 * 입      력 : sMsk : 원본 문자열
 * 반      환 : 
 * 기      능 : CardNo MASK처리(보안용)_김준호
 *****************************************************************************************/
function gfn_SetCardNoGrdSecu(sMsk)
{

	sMsk = String(sMsk).replace("-", "");
    var nMaskLength = gfn_getLength(sMsk);
	
    if(nMaskLength == 16)     	// 16자리
        return '####{####}########';
    else if(nMaskLength == 15)   // 15자리
        return '####{####}#######';
	else
		return sMak;	
}


/*****************************************************************************************
 * 함  수  명 : gfn_SetCmsNoGrdSecu
 * 입      력 : sMsk : 원본 문자열
 * 반      환 : 
 * 기      능 : CmsNo MASK처리(보안용)_김준호
 *****************************************************************************************/
function gfn_SetCmsNoGrdSecu(sMsk)
{

	sMsk = String(sMsk).replace("-", "");
    var nMaskLength = gfn_getLength(sMsk);
	
    if(nMaskLength == 12){     	// 12자리
        return '####{####}####';
        
    }else if(nMaskLength == 11){   // 11자리
        return '####{####}###';
	}else if(nMaskLength == 13){	// 13자리
		return '####{####}#####';
	}else if(nMaskLength == 14){	//14자리
		return '####{####}######';
	}else{
		return sMak;	
	}
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetCLGrdSecu
 * 입      력 : sMsk : 원본 문자열
 * 반      환 : 
 * 기      능 : CL MASK처리(보안용)_김준호
 *****************************************************************************************/
function gfn_SetCLGrdSecu(oMsk)
{
	var sMsk = oMsk.toString();
	var nMaskLength = gfn_getLength(sMsk);
	if(nMaskLength == 88){     	// 88자리
		gfn_RPad(sMsk.substr(0,7), "*", nMaskLength);
	}else{
		return gfn_RPad(sMsk.substr(0,7), "*", nMaskLength);;	
	}

}

/*****************************************************************************************
 * 함  수  명 : gfn_SetNameGrdSecu
 * 입      력 : sMsk : 원본 문자열
 * 반      환 : 
 * 기      능 : 이름 MASK처리(보안용)_임동진
 *****************************************************************************************/
function gfn_SetNameGrdSecu(sData)
{
	if (null == sData || undefined == sData) return "";
    var nDataLength = gfn_getLength(sData);
	sData = ""+ sData
    var strData = "";

    if(nDataLength == 2)
    // 2017.07.21 김준호 김경욱 메니저 요청으로 외자 이름 뒷1자리 * 처리
	//	strData =  sData.substr(0,1) ;
	strData =  sData.substr(0,1)+"*" ;
    else if(nDataLength == 3)
		strData = sData.substr(0,1) + "*" + sData.substr(2);	
	else 
		strData = sData.substr(0,2) + "***" + sData.substr(5);	
	
	return strData;
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetBankCodeName
 * 입      력 : sCodeYN : 은행코드여부  /  sName : 원본 문자열
 * 반      환 : 
 * 기      능 : 은행코드 및 은행이름 MASK처리 (보안용)
 *****************************************************************************************/
function gfn_SetBankCodeName(sCodeYN, sName )
{
	var nMaskLength = sName.toString().length;
	
	if (sCodeYN == "N")
		return gfn_RPad(sName.toString().substr(0,1), "*", nMaskLength);
	else
		return '(***) '+gfn_RPad(sName.toString().substr(0,1), "*", nMaskLength);
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetCardName
 * 입      력 : sMsk : 원본 문자열
 * 반      환 : 
 * 기      능 : 카드사 MASK처리 (보안용)
 *****************************************************************************************/
 function gfn_SetCardName(sName)
 {
	return  sName.toString().substr(0,1)+'*';
 }

/*****************************************************************************************
 * 함  수  명 : gfn_SetCmsCardNoSecu
 * 입      력 : sData : 원본 문자열
 * 반      환 : 
 * 기      능 : Cms/Card No MASK처리(NoGrid_보안용)_정승철
 *****************************************************************************************/
function gfn_SetCmsCardNoSecu(sData)
{
	if (null == sData || undefined == sData) return "";
    var strData = "";
	strData = sData.substr(0,4) + "****" + sData.substr(8);	
	
	return strData;
}

/*****************************************************************************************
 * 함  수  명 : gfn_SetCardNoGrdMaskSecu
 * 입      력 : sMsk : 원본 문자열
 * 반      환 :
 * 기      능 : 카드번호 MASK처리('-' 포함)
 *****************************************************************************************/
function gfn_SetCardNoGrdMaskSecu(sMsk)
{
	var nMaskLength = gfn_getLength(sMsk);
    
    if(nMaskLength == 19)     	    //  '-' 포함 19자리 (** 카드번호 16자리)
        return '####-{####}-####-####';
    else if(nMaskLength == 18)     	//  '-' 포함 18자리 (** 카드번호 15자리)
        return '####-{####}-####-###';
}
]]></Script>
