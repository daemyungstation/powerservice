<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[

// ========================================================================================
// Transaction 관련 공통함수
// function 명은 gfn_ 을 Prefix로 사용함.
// ========================================================================================

/******************************************************************************************
 * 함  수  명 : gfn_transaction(objFrm, strSvcID, strURL, strInDatasets, strOutDatasets, strArgument, strCallbackFunc, bAsync)
 * 입      력 : strSvcID        : transaction을 구분하기 위한 ID
 *              strURL          : 요청 URL
 *              strInDatasets   : transaction을 요청할 때 입력값으로 보낼 Dataset 의 ID 리스트
 *              strOutDatasets  : transaction을 처리 결과를 받을 Dataset의 ID 리스트
 *              strArgument     : transaction을 요청할 때 입력값으로 보낼 변수
 *              strCallbackFunc : transaction callback 함수
 *              bAsync          : 비동기 여부(true: Sync, false : UnSync)
 *			    bLogGbun        : 조회, 저장 구분(S:조회, I:저장)
 *              bLogMenuId      : 화면 아이디
 * 반      환 : 없음
 * 기      능 : transaction함수
 *****************************************************************************************/
function gfn_transaction(objFrm, strSvcID, strURL, strInDatasets, strOutDatasets, strArgument, strCallbackFunc, bAsync, bWait, bLogGbun, bLogMenuId) {
    if (objFrm.ds_athrPgmFilter != null) {
		if ("N" == objFrm.ds_athrPgmFilter.getColumn(0, 'inq_yn') && strSvcID.indexOf("get") > -1) {
			trace(objFrm.name + "->" + strSvcID + " >> '" + gds_UserInfo.getColumn(0, "user_nm") + "'님 조회 권한이 없습니다");
			return;
		}
    }
    
    objFrm.ds_trans_info.clearData();
    
    // 페이징 설정 추가
	strInDatasets = strInDatasets + " gds_RequestCompVariable=gds_RequestCompVariable";
  
    ///////////////////////////////////////////////////////////////////////////////////////////
	// 프로그램 로그 추가 2017.11.07 김찬영
    if (bLogGbun == "S" || bLogGbun == "I" )
    {
		gds_logInput.setColumn(0, "logId", UUID);
		gds_logInput.setColumn(0, "logMenuId", bLogMenuId);
		gds_logInput.setColumn(0, "logGubun", bLogGbun);

		//alert(gds_logInput.saveXML());
	}	
	strInDatasets = strInDatasets + " gds_logInput=gds_logInput";
	
	
	/////////////////////////////////////////////////////////////////////////////////////////// 
	

	
    var dsInputName = gfn_splitDsName(strInDatasets,0);
    var dsOutputName = gfn_splitDsName(strOutDatasets,1);

    for (var i = 0; i < dsInputName.length ; i++ ){
        var row = objFrm.ds_trans_info.addRow();
        if (i == 0){                                        //svc id 와 url은 하나이다.
            objFrm.ds_trans_info.setColumn(row,0, strSvcID);
            objFrm.ds_trans_info.setColumn(row,1, strURL);
        }
        objFrm.ds_trans_info.setColumn(row,2, dsInputName[i]);
    }

    for (var i = 0; i < dsOutputName.length ; i++ ){
        objFrm.ds_trans_info.setColumn(row,3, dsOutputName[i]);
    }

    //trace(objFrm.ds_trans_info.saveXML());
    if (strCallbackFunc.trim().length <=0 ) {
        strCallbackFunc="Non";
    }

    var strNewSvcId = "";
    strNewSvcId += strSvcID;
    strNewSvcId += "|" + strCallbackFunc;

	strURL = "SVC::" + strURL;
	
    strInDatasets = strInDatasets + " __DS_TRANS_INFO__=ds_trans_info";

    var strComTranCallback = "gfn_comTranCallback";

    if (bAsync == null) bAsync = true;
    if (bWait == null) bWait = true;

    if(bWait == true) {
        gfn_setWaitCursor(true);
    } else {
        gfn_setWaitCursor(false);
    }
    
    strArgument = strArgument + " MenuId=1213";
    
    trace(strURL);

    _transaction(strNewSvcId, strURL, strInDatasets, strOutDatasets, strArgument, strComTranCallback, bAsync);
}


/*****************************************************************************************
 * 함  수  명 : gfn_comTranCallback
 * 입      력 : strSvcId    : transaction을 구분하기 위한 ID
                nErrorCode  : 에러코드
                strErrorMsg : 에러메세지
 * 반      환 :
 * 기      능 : 공통 Transaction callback
 ****************************************************************************************/
function gfn_comTranCallback(strSvcId, nErrorCode, strErrorMsg) {
    var arrTrCallBack = strSvcId.split("|");
    var strRealSvcID = arrTrCallBack[0].trim();    // Form에서 호출한 Transaction ID
    var strCallbackFunc = arrTrCallBack[1].trim(); // Form에서 받는 콜백함수

    if (nErrorCode < 0) {
        alert(strErrorMsg);
    }

    // CallBack을 정의 했으면 Form의 CallBack을 호출한다.
    if (strCallbackFunc != "Non")
    {
        eval(strCallbackFunc + "(strRealSvcID,nErrorCode,strErrorMsg)");
    }
    
    gfn_setWaitCursor(false);
}

/*****************************************************************************************
 * 함  수  명    : gfn_setWaitCursor
 * 입      력    : bWaitCursor : Wait Cursor 보이기/숨기기 여부(true/false)
 * 반      환    :
 * 기      능    : Wait Cursor 보이기/숨기기
 *****************************************************************************************/
function gfn_setWaitCursor(bWaitCursor)
{
   if(bWaitCursor) {
       this.setWaitCursor(true,true);
   } else {
       this.setWaitCursor(false,true);
   }
}


function _transaction(strSvcId, strURL, strInDatasets, strOutDatasets, strArgument, strCallbackFunc, bAsync)
{
    transaction(strSvcId, strURL, strInDatasets, strOutDatasets, strArgument, strCallbackFunc, bAsync, 0, false);
}

/*****************************************************************************************
 * 함  수  명    : gfn_splitDsName
 * 입      력    : objString :
                   type :
 * 반      환    :
 * 기      능    :
 *****************************************************************************************/
function gfn_splitDsName(objString, type)
{
    var strDsMapping;   // Mapping String
    var objArr;         // DataSet Name Array
    var objReturn = new Array();

    strDsMapping = objString.split(" ");

    for (var i = 0; i < strDsMapping.length ; i++ ){
        objArr = strDsMapping[i].split("=");    // objArr = a,cd
        if (type == 0)
            objReturn[i] = objArr[0];
        else
            objReturn[i] = objArr[1];
    }

    return objReturn;
}

/*****************************************************************************************
 * 함  수  명    : gfn_getSrvcReqUrl
 * 입      력    : 서비스 요청 url
 * 반      환    : 서비스요청 url
 * 기      능    : IP에 따라 서비스 요청(내부망/외부망) url return
 *****************************************************************************************/
// function gfn_getSrvcReqUrl(p_url)
// {
// 	var objExtCommon = new ExtCommon();
// 	var sUserIP = objExtCommon.getIPAddress();
//  	var sAccessIp = ["192.168.15", "192.168.21"];
//  	var bIpChkFg = false;
//  	var strURL = "";
//  	
//  	for (var i=0; i<sAccessIp.length; i++) {
//  		if (String(sUserIP).indexOf(sAccessIp[i]) > -1) {
//  			bIpChkFg = true;
//  		}
//  	}
// 	if (bIpChkFg) {
// 		strURL = "SVC2::" + p_url;
// 	} else {
// 		strURL = "SVC::" + p_url;
// 	}
// 	
// 	return strURL;
// }]]></Script>
