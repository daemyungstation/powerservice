<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[

// ========================================================================================
// Excel 관련 공통함수
// function 명은 gfn_ 을 Prefix로 사용함.
// ========================================================================================

var lv_VirtualFile;

/*****************************************************************************************
 * 함  수  명 : gfn_exportGridToExcel
 * 입      력 : objGrid      : 출력 대상 그리드 오브젝트
 *              strFileName  : 파일명
 *              strSheetName : Sheet 명
                arrMultiList : MultiFile 출력용(ex:"objGrid1:sheetName1:fileName1,objGrid2:sheetName2:fileName2")
                bExec        : Export 후 엑셀 실행여부(true/false)
 * 반      환 :
 * 기      능 : 단일/다중 Grid의 내용을 Excel로 Export하는 함수 
 *****************************************************************************************/
 function gfn_exportGridToExcel(objGrid, strFileName, strSheetName, arrMultiList)
{    
	var objExport = new ExportObject();
	if(gfn_isNull(strFileName)) strFileName = gfn_getFormId(this) + "_" + gfn_getTodayFull();
    if(gfn_isNull(strSheetName)) strSheetName = "Sheet1";
	
	var sTxtFullPath = gfn_fileSavePath("", strFileName, "EXCEL");
	if(sTxtFullPath.length <= 0) return false;
	strFileName = sTxtFullPath ;
	
	objExport.exporttype       = ExportTypes.EXCEL;
	objExport.activepagename   = strSheetName;	
	objExport.exportfilename   = strFileName;
	objExport.exportopenmode   = "overwrite";
	
	var ret = objExport.addExportItem(ExportItemTypes.GRID, objGrid, strSheetName+"!A1" );
	objExport.exporteventtype = "itemrecord";
	objExport.exportuitype ="exportprogress";
    objExport.exportmessageprocess = "%d 항목을 출력중입니다.%d/%d";
    objExport.exportsavemode = "save";
	
	objExport.export();
}

// function gfn_exportGridToExcel(objGrid, strFileName, strSheetName, arrMultiList, bExec)
// {    
//     if(gfn_isNull(strFileName)) strFileName = gfn_getFormId(this) + "_" + gfn_getTodayFull();
//     if(gfn_isNull(strSheetName)) strSheetName = "Sheet1";
//     if(bExec == null) bExec = true;
// 	var objGridNm;
// 	objGridNm = objGrid;
// 
//     // 파일경로 선택
//     //strFileName = gfn_getFormId(this) + "_" + gfn_getTodayFull();    
//     var sTxtFullPath = gfn_fileSavePath("", strFileName, "EXCEL");
//     if(sTxtFullPath.length <= 0) return false;
//     
//     //this.setWaitCursor(true,true);
// 
//     if (lv_VirtualFile != null) {
//         if (lv_VirtualFile.open(VirtualFile.openRead)) {
//             VirtualFile.delete(lv_VirtualFile);
//             lv_VirtualFile.close();
//             lv_VirtualFile = null;
//         }
//     }
// 
//     // Excel 출력용 그리드 생성시 사용
//     //var objNewGrid = _gfn_getExcelExportNewGrid(objGrid, "");
//     strFileName = sTxtFullPath + ".xls";
// 
//     // Global Export Object
//     var objExport = new ExportObject();
//     objExport.exporttype       = ExportTypes.EXCEL;
//     objExport.activepagename   = strSheetName;
// 	objExport.exportopenmode  	= "overwrite";
// 	objExport.exportfilename 	= strFileName;
// 		
// 	//하나의 그리드만 엑셀로 export 처리
// 	if (!gfn_isNull(objGridNm))
// 		objExport.addExportItem(ExportItemTypes.GRID, objGrid, strSheetName + "!A1");
// 
//     if(!gfn_isNull(arrMultiList)) {
//         var arrSheetList = arrMultiList.split(",");
// 
//         for(var i=0;i<arrSheetList.length;i++)
//         {
//             var arrSheetInfo = arrSheetList[i].split(":");
//             objGridNm = eval(String(arrSheetInfo[0]));
//             objExport.addExportItem(ExportItemTypes.GRID, objGridNm, String(gfn_trim(arrSheetInfo[1])) + "!A1");
// 			
// 			//Multi File로 출력할 경우 사용
//             //strFileName += "," + arrSheetInfo[2] + ".xls";
//         }
//     }
// 
//     objExport.exportuseclipboard = "NO";
//     objExport.exportuseclipboardFilename = strFileName;
// 
//     objExport.exportuitype ="exportprogress";
//     objExport.exportmessageprocess = "%d 항목을 출력중입니다.%d/%d";
// 
//     objExport.export(true);
// 
// 	objGridNm.destroy();
// 	objGridNm = null;
// 
//     objExport = null;
// 
// 
// 	/*
//     //this.setWaitCursor(false,true);
//     gfn_setWaitCursor(true);
//     strFileName = gfn_setSaveAsExcel(strFileName);
//     trace("strFileNameSaveAs::"+strFileName);
// 
//     if(bExec) system.execShell("\""+strFileName+"\"");
// 
//     gfn_setWaitCursor(false);
//     */
// }


/*****************************************************************************************
 * 함  수  명 : gfn_exportGridToExcelByClipBoard
 * 입      력 : objGrid      : 출력 대상 그리드 오브젝트
 *              strFileName  : 파일명
 *              strSheetName : Sheet 명
                arrMultiList : MultiGrid 출력용(ex:"objGrid1:sheetName1,objGrid2:sheetName2")
 * 반      환 :
 * 기      능 : Grid의 내용을 Excel로 Export하는 함수
 *****************************************************************************************/
function gfn_exportGridToExcelByClipBoard(objGrid, strFileName, strSheetName, arrMultiList)
{
    if(gfn_isNull(strFileName)) strFileName = gfn_getFormId(this) + "_" + gfn_getTodayFull();
    if(gfn_isNull(strSheetName)) strSheetName = "Sheet1";

    // 파일경로 선택
    strFileNm = gfn_getFormId(this) + "_" + gfn_getTodayFull();
    var sTxtFullPath = gfn_fileSavePath("", strFileNm, "EXCEL");
    if(sTxtFullPath.length <= 0) return false;

    //this.setWaitCursor(true,true);

    if (lv_VirtualFile != null) {
        if (lv_VirtualFile.open(VirtualFile.openRead)) {
            VirtualFile.delete(lv_VirtualFile);
            lv_VirtualFile.close();
            lv_VirtualFile = null;
        }
    }

    // Excel 출력용 그리드 생성
    var objNewGrid = _gfn_getExcelExportNewGrid(objGrid, "");
    strFileName = sTxtFullPath;

    // Global Export Object
    var objExport = new ExportObject();
    objExport.exporttype = ExportTypes.EXCEL;
    objExport.activepagename = strSheetName;
    objExport.exportopenmode = "overwrite";
    objExport.exportsavemode = "save";
    objExport.exportfilename = strFileName;

    objExport.addExportItem(ExportItemTypes.GRID, objNewGrid, strSheetName + "!A1");

    objExport.exportuitype ="exportprogress";
    objExport.exportmessageprocess = "%d 항목을 출력중입니다.%d/%d";
    objExport.exportsavemode = "save";

    if(!gfn_isNull(arrMultiList)) {
        var arrSheetList = arrMultiList.split(",");

        for(var i=0;i<arrSheetList.length;i++)
        {
            var arrSheetInfo = arrSheetList[i].split(":");
            var objGrid = eval(arrSheetInfo[0]);
            var objNewGrid2 = _gfn_getExcelExportNewGrid(objGrid, i);    // 그리드 Object 생성

            objExport.addExportItem(ExportItemTypes.GRID, objNewGrid2, arrSheetInfo[1] + "!A1");

            objNewGrid2.destroy();
            objNewGrid2 = null;
        }
    }

    objExport.export();
    objNewGrid.destroy();
    objNewGrid = null;
    objExport = null;
    //this.setWaitCursor(false,true);
}

function _gfn_getExcelExportNewGrid(objGrid, nIndex)
{
    var sGridNm = "_grd_ExcelExport"+nIndex;

    if(this[sGridNm] == undefined) {
        var objNewGrid = new Grid();
        objNewGrid.init(sGridNm, 0, 0, 0, 0);
        var nIndex = this.addChild(sGridNm, objNewGrid);

        if(nIndex == -1) {
            alert("ExcelExport Error!!");
            this.setWaitCursor(false,true);
            return false;
        }
    } else {
        var objNewGrid = this[sGridNm];
    }

    var strFormats = "";
    strFormats = "<Formats>" + objGrid.getCurFormatString() + "</Formats>";

    objNewGrid.formats = strFormats;
    objNewGrid.binddataset = objGrid.binddataset;
    objNewGrid.treeinitstatus = "expand,all";
    objNewGrid.summarytype = objGrid.summarytype;
    objNewGrid.show();

    // 칼럼사이즈 처리
    for(var i=0;i<objNewGrid.getCellCount("body");i++)
    {
        var nRow = objGrid.getCellProperty("body", i, "row");
        if(nRow == 0) {
            var norgColSize = objGrid.getRealColSize(i);
            objNewGrid.setFormatColProperty(i,"size", norgColSize);
        }
    }

    // Grid ColSize 0인 칼럼 삭제
    // 원본Grid를 이용해서 Looping처리하고
    // 실제 삭제대상Grid는 생성한 그리드로 처리
    for(var i=(objGrid.getCellCount("Head")-1);i>=0;i--)
    {
        var nRow = objGrid.getCellProperty("Head", i, "row");
        var nCol = objGrid.getCellProperty("Head", i, "col");
        var nColSpan = objGrid.getCellProperty("Head", i, "colspan");
        var nRowSpan = objGrid.getCellProperty("Head", i, "rowspan");
        var nSize = objGrid.getRealColSize(nCol);
        var sTitleText = objGrid.getCellProperty("head", i, "text");
        var sColType = objGrid.getCellProperty("head", i, "displaytype");

        if(nRow == 0 && nSize == 0) {
            if(nColSpan == 1) {
                objNewGrid.deleteContentsCol("body", nCol, false);
            } else {
                for(var j=(nCol+nColSpan-1);j>=nCol;j--)
                {
                    objNewGrid.deleteContentsCol("body", j, false);
                }
            }
        } else if(gfn_getLength(sTitleText) <= 0 || sTitleText == 0 || sTitleText == 1) {
            objNewGrid.deleteContentsCol("body", nCol, false);
        }
    }
    gfn_clearSortMark(objNewGrid);

    return objNewGrid;
}

 /*****************************************************************************************
 * 함  수  명 : gfn_importExcelToDataset
 * 입      력 : strDsName    : Import대상 Dataset Name
 *              nStartRow    : Import 시작 행(사용된 Range 기준, 1 base)
                bKeepColInfo : Dataset의 컬럼 정보를 유지할지 여부
                vSheet       : Sheet선택(숫자형->SheetIndex, 문자형->SheetName)
                strFileName  : Excel FileName (경로 포함)
                objStaticCnt : 건수표현 대상 Static 컴포넌트
 * 반      환 : true/false(성공여부)
 * 기      능 : Excel 내용을 데이타셋으로 Import하는 함수
 *****************************************************************************************/
function gfn_importExcelToDataset(strDsName, nStartRow, bKeepColInfo, vSheet, strFileName, objStaticCnt)
{
    if(vSheet == null) vSheet = 0;

    if(strFileName == null) {
        var objFile = gfn_fileSelect("S");
        if (!objFile) return;
        strFileName = objFile.fullpath;
    }

    if (strFileName.length == 0) return false;

    var objDsImport = eval(strDsName);
    if (objDsImport == null || objDsImport == undefined) return false;
    if (nStartRow == null || nStartRow == 0) nStartRow = 1;
    if (bKeepColInfo == null || bKeepColInfo == undefined) bKeepColInfo = 1;

    this.setWaitCursor(true,true);

    var objDs = eval(strDsName);
    objDs.clearData();

    // Excel Import를 대신 수행하기 위한 Temp 데이타셋 생성
    var objTempDs = gfn_createDataset(this, "_excelImportTempDs");

    objTempDs.assign(objDs);

    // Excel Import를 위해서 임시로 공통칼럼 삭제
    gfn_delCommCol(objTempDs);

    var objExt = new ExtCommon();

    if(gfn_isNum(vSheet)) {
        var v_Ret = objExt.excelImportByIndex(strFileName, vSheet, "_excelImportTempDs", bKeepColInfo, 1, 0, nStartRow);
    } else {
        var v_Ret = objExt.excelImportByName(strFileName, vSheet, "_excelImportTempDs", bKeepColInfo, 1, 0, nStartRow);
    }

    // 공통칼럼 재생성
    gfn_addCommCol(objTempDs);

    for(var i=0;i<objTempDs.rowcount;i++)
    {
        var nRow = objDs.addRow();
        objDs.copyRow(nRow, objTempDs, i);
    }

    objTempDs = null;

    // Excel Import시에 상태칼럼 Insert로 "I"로 설정
    for(var i=0;i<objDs.rowcount;i++)
    {
        objDs.setColumn(i, gfn_getColNmStatus(), gfn_getRowTypeInsert());
    }

    // 현재건수/총건수 표현부분 추가
    if(objStaticCnt != null) {
        if(objStaticCnt.position.width <= 400) objStaticCnt.position.width = 400;

         gds_ResponseCompVariable.clearData();
        _gfn_setTotalRowCount(objStaticCnt, objDs.rowcount);
    }

    this.setWaitCursor(false,true);

    return v_Ret;
}

 /*****************************************************************************************
 * 함  수  명 : gfn_exportDsToCSV
 * 입      력 : objDataDs  : CSV변환시 데이타영역 데이타셋
 *              objTitleDs : CSV변환시 타이틀에 들어갈 데이타를 입력한 데이타셋
                strFileNm  : CSV파일명(확장자 포함하지 않음)
                bExec      : 파일 실행여부
 * 반      환 : true/false(성공여부)
 * 기      능 : 데이타셋 내용을 CSV파일로 변환하는 함수
                단, CSV파일 변환시 타이틀영역에 들어갈 내용을 작성한 데이타셋을 생성해서 처리해야 함.
 *****************************************************************************************/
function gfn_exportDsToCSV(objDataDs, objTitleDs, strFileNm, bExec)
{
    if(strFileNm == null) strFileNm = gfn_getFormId(this);
    if(bExec == null) bExec = true;

    // 파일경로 선택
    strFileNm = strFileNm + "_" + gfn_getTodayFull() + ".csv";
    var sTxtFullPath = gfn_fileSavePath("", strFileNm, "CSV");
    if(sTxtFullPath.length <= 0) return false;

    if(String(sTxtFullPath).indexOf(".") == -1) {
        sTxtFullPath = sTxtFullPath + ".csv";
    }

    // 파일
    var objDs = gfn_createDataset(this, "_ds_ExcelExport");
    objDs.copyData(objTitleDs);
    objDs.appendData(objDataDs, true);

    // undefined 처리
    for(var i=0;i<objDs.rowcount;i++)
    {
        for(var j=0;j<objDs.getColCount();j++)
        {
            if(gfn_isNull(objDs.getColumn(i,j))) objDs.setColumn(i,j, "");
        }
    }

    var objEx = new ExtCommon();
    var rtn = objEx.ds2CsvNF(objDs,sTxtFullPath,true,false,",","\r\n");

    if(bExec) system.execShell("\""+sTxtFullPath+"\"");

    objDs = null;

    return true;
}

/*****************************************************************************************
* 함  수  명 : gfn_getExcelVersion
* 입      력 :
* 반      환 : Excel Version(Excel 2010->14, 2007->12, 2003->10, XP->10, 2002->9 입니다.)
* 기      능 : Excel Version 반환 함수
*****************************************************************************************/
function gfn_getExcelVersion()
{
    var objExt = new ExtCommon();
    var arrExcelVer = objExt.regGetValue("HKEY_CLASSES_ROOT", "Excel.Application\\CurVer", "", "S").split("."); //registry에서 확인
    var excelCurVer = arrExcelVer[arrExcelVer.length-1]; //버전을 확인

    //※ Excel 2010->14, 2007->12, 2003->10, XP->10, 2002->9 입니다.
    //trace("excelCurVer::"+excelCurVer);

//     switch (excelCurVer){
//         case 14 :
//             alert("2010");
//             break;
//         case 12 :
//             alert("2007");
//             break;
//         case 10 :
//             alert("2003, xp");
//             break;
//         case 9 :
//             alert("2002");
//             break;
//         default :
//             alert("Excel 설치안됨");
//     }

    return excelCurVer;
}

/*****************************************************************************************
* 함  수  명 : gfn_setSaveAsExcel
* 입      력 :
* 반      환 :
* 기      능 : Excel 파일 재저장(확장자 변경) 함수
*****************************************************************************************/
function gfn_setSaveAsExcel(strFileList)
{
    var objExt = new ExtCommon();
    var excelCurVer = toNumber(gfn_getExcelVersion());

    var arrFileList = strFileList.split(",");
    var arrFileName = [];

    if(excelCurVer > 10) {
        for(var i=0;i<arrFileList.length;i++)
        {
            arrFileName[i] = String(arrFileList[i]).replace(".xls", ".xlsx");

            var saveAsYn = objExt.excelSaveAs(String(arrFileList[i]), arrFileName[i], "2007", false);
            if(saveAsYn == 0) {
                var delYn = objExt.DeleteFile(String(arrFileList[i]));
            }
        }

        return arrFileName[0];

     } else {
        return arrFileList[0];
    }
}


/**********************************************************************************
 * 함수명     : gfn_ExportMultSheet
 * 설명       : 여러 그리드를 Sheet로 나누어 표현
 * argument    : 
				sFilename	엑셀파일명
				sAgument 	아규먼트(그리드아이디::시트명,그리드아이디::시트명)
 * return Type : 없음.
 **********************************************************************************/
function gfn_ExportMultSheet(sFilename, sAgument){

	if( gfn_isEmpty(sFilename) ) sFilename = gfn_getFormId(this) + "_" + gfn_getTodayFull();
	var sTxtFullPath = gfn_fileSavePath_xlsx("", sFilename, "EXCEL");
	if(sTxtFullPath.length <= 0)
	{ 
		return false;
	}
	
	sFilename = sTxtFullPath ;
   var aExportInfo = sAgument.split(",");
	   
   for(var i=0; i<aExportInfo.length; i++){
		var aExport = aExportInfo[i].split("::");
		var objGrid = eval(aExport[0]);

		var strSheetName = gfn_isEmpty(aExport[1]) ? "Sheet"+(i+1) : aExport[1];
				
		if (i == 0) {
			var objExport1 = new ExportObject();
			objExport1.exporttype = ExportTypes.EXCEL;
		}
		objExport1.activepagename 	= strSheetName;
		objExport1.addExportItem(ExportItemTypes.GRID, objGrid, strSheetName+"!A0" ,"allband");
		
		if (i == aExportInfo.length-1) {
			objExport1.exportfilename = sFilename+".xlsx";
			objExport1.exportopenmode 			= "overwrite";
			objExport1.exporteventtype 			= "itemrecord";
			objExport1.exportmessageready 		= "processing...";
			objExport1.exportuitype 			= "exportprogress";
			objExport1.exportmessageprocess 	= "%d 항목을 출력중입니다.%d/%d";
			objExport1.exportsavemode   		= "save"; 
			objExport1.export();
		}
   }
   
   return true;
}
]]></Script>
