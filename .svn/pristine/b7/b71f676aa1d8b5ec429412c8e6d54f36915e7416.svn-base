package powerservice.business.dlw.web;

import java.net.InetAddress;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import kr.co.nicevan.nicepay.adapter.web.NicePayHttpServletRequestWrapper;
import kr.co.nicevan.nicepay.adapter.web.NicePayWEB;
import kr.co.nicevan.nicepay.adapter.web.dto.WebMessageDTO;
import kr.co.nicevan.nicepay.adaptor.etc.HttpServletRequestMock;
import kr.co.nicevan.nicepay.adaptor.etc.HttpServletResponseMock;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.tobesoft.xplatform.data.DataSet;

import powerservice.business.bean.UserSession;
import powerservice.business.common.service.CommonService;
import powerservice.business.dlw.service.DataAthrQuryService;
import powerservice.business.dlw.service.DlwMemPayMthdService;
import powerservice.business.sys.service.BasVlService;
import powerservice.common.util.CommonUtils;
import powerservice.core.util.ParamUtils;
import powerservice.core.util.SessionUtils;
import egovframework.rte.cmmn.ria.xplatform.XPlatformConstant;
import egovframework.rte.cmmn.ria.xplatform.map.DataSetMap;
import egovframework.rte.cmmn.ria.xplatform.map.XPlatformMapDTO;


/**
 * 대명 고객 납입방법 관리
 *
 * Copyright (c) 2016 Company Inwoo Tech Inc.
 *
 * @author 최현식
 * @version 1.0
 * @date 2016/02/03
 * @프로그램ID DlwCust
 */
@Controller
@RequestMapping(value="/dlw/memPayMthd")
public class DlwMemPayMthdController {
	
	@Resource
    private DlwMemPayMthdService DlwMemPayMthdService;
	
	@Resource
    private DataAthrQuryService dataAthrQuryService;
	
	@Resource
    private CommonService commonService;
	
	@Resource
    private BasVlService basVlService;
	
	
	/**
     * 고객-구좌 정보를 검색한다.
     *
     * @param pmParam Map<String, Object>
     * @return ModelAndView
     * @throws Exception
     */
    @RequestMapping(value = "/getMemPayMthdList")
    public ModelAndView getMemPayMthdList(XPlatformMapDTO xpDto, Model model) throws Exception {
        ModelAndView modelAndView = new ModelAndView("xplatformMapView");
        DataSetMap listMap = new DataSetMap();
        DataSetMap listMap2 = new DataSetMap();
        Map<String, Object> hmParam = new HashMap<String, Object>();  

        // 에러코드및 메시지
        String szErrorCode="0";
        String szErrorMsg="OK";

        try {
            Map <String, Object> mapInVar     = xpDto.getInVariableMap();
            Map <String, DataSetMap> mapInDs  = xpDto.getInDataSetMap();
            Map <String, Object> mapOutVar    = xpDto.getOutVariableMap();
            Map <String, DataSetMap> mapOutDs = xpDto.getOutDataSetMap();
            
            DataSetMap srchInDs = (DataSetMap)mapInDs.get("ds_input");
            if (srchInDs != null && srchInDs.size() > 0) {
                hmParam = srchInDs.get(0);
                
                // CMS 조회인지 카드 조회인지 구분
                String svcid = (String) mapInVar.get("pay_mthd");                
                hmParam.put("pay_mthd", svcid);
                                
                List<Map<String, Object>> mList = DlwMemPayMthdService.getMemPayMthdList(hmParam);
                listMap.setRowMaps(mList);
                mapOutDs.put("ds_output", listMap);
                
                List<Map<String, Object>> mList2 = DlwMemPayMthdService.getDlwPymnHstrList(hmParam);
                listMap2.setRowMaps(mList2);
                mapOutDs.put("ds_output2", listMap2);
            }

            modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
            modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, 	 xpDto.getOutDataSetMap());
        } catch (Exception e) {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg  = e.getMessage();
            
            modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
            modelAndView.addObject(XPlatformConstant.ERROR_MSG,  szErrorMsg);
        }

        return modelAndView;
    }
    
    /**
     * 상담 정보를 등록/수정한다. (대명 - CMS/카드 부가서비스 등록시)
     *
     * @param pmParam Map<String, Object>
     * @return ModelAndView
     * @throws Exception
     */
    @RequestMapping(value = "/updateCard")
    public ModelAndView updateCardMemInfo(XPlatformMapDTO xpDto, Model model) throws Exception {
        ModelAndView modelAndView = new ModelAndView("xplatformMapView");

        // 에러코드및 메시지
        String szErrorCode="0";
        String szErrorMsg="OK";

        try {
            Map <String, DataSetMap> mapInDs  = xpDto.getInDataSetMap();

            DataSetMap listInDs = (DataSetMap)mapInDs.get("ds_input"); 				// 변경후 dataset
            DataSetMap listInOldDs = (DataSetMap)mapInDs.get("ds_input_old"); 				// 변경후 dataset

            if (listInDs.size() > 0) {
                Map <String, Object> hmParam = listInDs.get(0);
                Map <String, Object> hmParam_old = listInOldDs.get(0);
                                                
                // 카드 변경 정보 업데이트
                DlwMemPayMthdService.updateCardMemInfo(hmParam);
                
                /**************************************************상담등록 필드 구성*********************************************************/ 
                String chgText = "[CARD] 이체일자가 변경되었습니다. [" + hmParam_old.get("ichae_dt").toString() + " >> " + hmParam.get("ichae_dt").toString() +  "]" ;

                // 상담유형 1, 2, 3
                hmParam.put("cons_typ1_cd", "CT01010000");		//회원정보
                hmParam.put("cons_typ2_cd", "CT01010100");		//결제정보
                hmParam.put("cons_typ3_cd", "CT01010102");		//결제수단변경
                hmParam.put("cons_memo_tit", chgText);
                /*******************************************************************************************************************************/
                
                // 상담 등록
                saveConsdlw(hmParam); 
            }

            modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
            modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, 	 xpDto.getOutDataSetMap());
        } catch (Exception e) {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg  = e.getMessage();
            
            modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
            modelAndView.addObject(XPlatformConstant.ERROR_MSG,  szErrorMsg);
        }
        return modelAndView;
    }
    
    /**
     * 대명스테이션 카드 부가서비스(신규,해지)를 등록한다. (나이스 전용)
     *
     * @param pmParam Map<String, Object>
     * @return ModelAndView
     * @throws Exception
     */
    @RequestMapping(value = "/saveCard")
    public ModelAndView insertDlwCardAnxtSrvc(XPlatformMapDTO xpDto, Model model) throws Exception {
        ModelAndView modelAndView = new ModelAndView("xplatformMapView");
        DataSetMap listMap = new DataSetMap();
        Map<String, Object> hmParam = new HashMap<String, Object>();
        Map<String, Object> hmParam2 = new HashMap<String, Object>();

        // 에러코드및 메시지
        String szErrorCode = "0";
        String szErrorMsg  = "OK";

        try {
            Map <String, Object> mapInVar     = xpDto.getInVariableMap();
            Map <String, DataSetMap> mapInDs  = xpDto.getInDataSetMap();
            Map <String, Object> mapOutVar    = xpDto.getOutVariableMap();
            Map <String, DataSetMap> mapOutDs = xpDto.getOutDataSetMap();
            
            // 카드 신청 시 카드 혜택이 끝난 체크 대상자는 강제로 납입회차를 100으로 늘린다. (납입회차 36기준으로 dmlife001 가맹번호 빌키 생성)
            String sBenefitYn = (String)mapInVar.get("benefit");
            
            DataSetMap listInDs = (DataSetMap)mapInDs.get("ds_input");
            DataSetMap listInDs2 = (DataSetMap)mapInDs.get("ds_input2");
            hmParam = listInDs.get(0);

            //세션
            ParamUtils.addSaveParam(hmParam);
            hmParam.put("emple_no", hmParam.get("rgsr_id"));
            hmParam.put("reg_man", hmParam.get("rgsr_id"));
            hmParam.put("upd_man", hmParam.get("rgsr_id"));
            
            // 카드 회원 여부
            String cardMemYN = "";	// CARD 회원 여부
            String cardMsg = "";		// 결과 전달 메세지
            
            cardMemYN  = hmParam.get("card_yn").toString();
            String syyyy = hmParam.get("yyyy").toString();
            String smm = hmParam.get("mm").toString();
            String expr_Dt = syyyy + smm;
           
            // 카드 신청 시 카드 혜택이 끝난 체크 대상자는 강제로 납입회차를 100으로 늘린다. (납입회차 36기준으로 dmlife001 가맹번호 빌키 생성)
            hmParam.put("pay_no", sBenefitYn);	
            
            //통합구좌 확인     
//            String strDblStat  = (String)mapInVar.get("double_stat");            
//            hmParam.put("double_stat", strDblStat);								// 통합구좌 상태값 (STAT값이 2인경우 기존회원번호 변경)	
            
            //이니시스 여부 등록       
            hmParam.put("ini_yn", "N");
            
        	hmParam.put("inv_tg_dt", hmParam.get("ichae_dt"));					// 이체일자
            hmParam.put("idn_no", hmParam.get("birth"));							// 생년월일
            hmParam.put("exp_year", syyyy);											// 만기 연도            
            hmParam.put("exp_mon", smm);											// 만기 월		
            hmParam.put("exp_dt", expr_Dt);											// 이체일자
            
            hmParam.put("cell", "");													// 전화번호(기초데이터)
            hmParam.put("email", "");												// 이메일(기초데이터)
            
            System.out.println(hmParam);
                                                
            if (cardMemYN.equals("N")){
            	//CARD 회원이 등록되어 있음 (DEL_FG = 'N')
                hmParam.put("app_cl", "3");											// 3: 해지, 1: 신규, 7 : 보류해지                            
                cardMsg = DlwMemPayMthdService.deleteDlwAccntCard(hmParam);    
            } else {    
            	if (listInDs2 != null && listInDs2.size() > 0) {
                    hmParam2 = listInDs2.get(0);
                    if("N".equals(hmParam2.get("CMS_YN"))) {
                    	hmParam2.put("acpt_mthd", "04");										// 04: 정상부가해지, 05: 보류부가해지, 03: 부가신규
                        hmParam2.put("app_cl", "3");											// 3: 해지, 1: 신규, 7 : 보류해지                            
                        DlwMemPayMthdService.deleteDlwAccntCms(hmParam2);
                        
                        hmParam.put("old_pay_mthd", "04");
                    	hmParam.put("new_pay_mthd", "06");
                    	DlwMemPayMthdService.updateAccntPayMthd(hmParam);
                    }
            	}
            	
            	 // CARD 회원이 등록된 적이 있거나(DEL_FG = 'Y') 등록되지 않음 (NONE)
                hmParam.put("app_cl", "1");											// 3: 해지, 1: 신규, 7 : 보류해지               
            	cardMsg = DlwMemPayMthdService.insertDlwAccntCard(hmParam);         	
            }
            mapOutVar.put("gv_rslMsg", cardMsg);
                       
            //2018.01.05 접속 로그////////////////////////////////////////////////////////////////////////////////
            DataSetMap listLogIn = (DataSetMap)mapInDs.get("gds_logInput");

            if (listLogIn.size() > 0) {
                hmParam = listLogIn.get(0);
                commonService.insertLog(hmParam);
            }
            //////////////////////////////////////////////////////////////////////////////////////////////////////

            modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
            modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, 	 xpDto.getOutDataSetMap());
        } catch (Exception e) {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg  = e.getMessage();
            
            modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
            modelAndView.addObject(XPlatformConstant.ERROR_MSG,  szErrorMsg);
        }        
        return modelAndView;
    }
    
    /**
     * 상담 정보를 등록/수정한다. (대명 - CMS/카드 부가서비스 등록시)
     *
     * @param pmParam Map<String, Object>
     * @return ModelAndView
     * @throws Exception
     */
    @RequestMapping(value = "/updateCms")
    public ModelAndView updateCmsMemInfo(XPlatformMapDTO xpDto, Model model) throws Exception {
        ModelAndView modelAndView = new ModelAndView("xplatformMapView");

        // 에러코드및 메시지
        String szErrorCode="0";
        String szErrorMsg="OK";

        try {
            Map <String, DataSetMap> mapInDs  = xpDto.getInDataSetMap();

            DataSetMap listInDs = (DataSetMap)mapInDs.get("ds_input"); 				// 변경후 dataset
            DataSetMap listInOldDs = (DataSetMap)mapInDs.get("ds_input_old"); 				// 변경후 dataset

            if (listInDs.size() > 0) {
                Map <String, Object> hmParam = listInDs.get(0);
                Map <String, Object> hmParam_old = listInOldDs.get(0);
                                                
                // CMS 변경 정보 업데이트
                DlwMemPayMthdService.updateCmsMemInfo(hmParam);
                
                /**************************************************상담등록 필드 구성*********************************************************/ 
                String chgText = "[CMS] 이체일자가 변경되었습니다. [" + hmParam_old.get("ichae_dt").toString() + " >> " + hmParam.get("ichae_dt").toString() +  "]" ;

                // 상담유형 1, 2, 3
                hmParam.put("cons_typ1_cd", "CT01010000");		//회원정보
                hmParam.put("cons_typ2_cd", "CT01010100");		//결제정보
                hmParam.put("cons_typ3_cd", "CT01010102");		//결제수단변경
                hmParam.put("cons_memo_tit", chgText);
                /*******************************************************************************************************************************/
                
                // 상담 등록
                saveConsdlw(hmParam); 
            }

            modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
            modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, 	 xpDto.getOutDataSetMap());
        } catch (Exception e) {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg  = e.getMessage();
            
            modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
            modelAndView.addObject(XPlatformConstant.ERROR_MSG,  szErrorMsg);
        }
        return modelAndView;
    }
    
    /**
     * 대명라이프웨이 CMS 부가서비스(신규,해지)를 등록한다.
     *
     * @param pmParam Map<String, Object>
     * @return ModelAndView
     * @throws Exception
     */
    @RequestMapping(value = "/saveCms")
    public ModelAndView insertDlwAccntCms(XPlatformMapDTO xpDto, Model model) throws Exception {
        ModelAndView modelAndView = new ModelAndView("xplatformMapView");
        DataSetMap listMap = new DataSetMap();
        Map<String, Object> hmParam = new HashMap<String, Object>();
        Map<String, Object> hmParam2 = new HashMap<String, Object>();

        // 에러코드및 메시지
        String szErrorCode = "0";
        String szErrorMsg  = "OK";

        try {
            Map <String, Object> mapInVar     = xpDto.getInVariableMap();
            Map <String, DataSetMap> mapInDs  = xpDto.getInDataSetMap();
            Map <String, Object> mapOutVar    = xpDto.getOutVariableMap();
            Map <String, DataSetMap> mapOutDs = xpDto.getOutDataSetMap();

            DataSetMap listInDs = (DataSetMap)mapInDs.get("ds_input");
            DataSetMap listInDs2 = (DataSetMap)mapInDs.get("ds_input2");
            hmParam = listInDs.get(0);

            //세션
            ParamUtils.addSaveParam(hmParam);
            hmParam.put("emple_no", hmParam.get("rgsr_id"));
            hmParam.put("reg_man", hmParam.get("rgsr_id"));
            hmParam.put("upd_man", hmParam.get("rgsr_id"));
            
            // CMS 회원 여부
            String cmsMemYN = "";	// CMS 회원 여부
            String cmsMsg = "";		// 결과 전달 메세지
            
            //통합구좌 확인     
//            String strDblStat  = (String)mapInVar.get("double_stat");            
//            hmParam.put("double_stat", strDblStat);								// 통합구좌 상태값 (STAT값이 2인경우 기존회원번호 변경)	
            
            cmsMemYN  = hmParam.get("cms_yn").toString();
                        
            hmParam.put("depr_nm", hmParam.get("depr"));						// 예금주  
        	hmParam.put("inv_tg_dt", hmParam.get("ichae_dt"));					// 이체일자
            hmParam.put("idn_no", hmParam.get("birth"));							// 생년월일            
            hmParam.put("rltn_cd", hmParam.get("reltn"));							// 관계   
                                    
//            System.out.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : " + strDblStat);
                          
            if (cmsMemYN.equals("N")){
            	//CMS 회원이 등록되어 있음 (DEL_FG = 'N')
                hmParam.put("acpt_mthd", "04");										// 04: 정상부가해지, 05: 보류부가해지, 03: 부가신규
                hmParam.put("app_cl", "3");											// 3: 해지, 1: 신규, 7 : 보류해지                            
                cmsMsg = DlwMemPayMthdService.deleteDlwAccntCms(hmParam);    
            } else {
            	if (listInDs2 != null && listInDs2.size() > 0) {
                    hmParam2 = listInDs2.get(0);
                    if("N".equals(hmParam2.get("CARD_YN"))) {
                    	hmParam2.put("app_cl", "3");											// 3: 해지, 1: 신규, 7 : 보류해지                            
                        DlwMemPayMthdService.deleteDlwAccntCard(hmParam2);
                        
                        hmParam.put("old_pay_mthd", "06");
                    	hmParam.put("new_pay_mthd", "04");
                    	DlwMemPayMthdService.updateAccntPayMthd(hmParam);
                    }
            	}
            	
            	 // CMS 회원이 등록된 적이 있거나(DEL_FG = 'Y') 등록되지 않음 (NONE)
                hmParam.put("acpt_mthd", "03");										// 04: 정상부가해지, 05: 보류부가해지, 03: 부가신규
                hmParam.put("app_cl", "1");												// 3: 해지, 1: 신규, 7 : 보류해지                
            	cmsMsg = DlwMemPayMthdService.insertDlwAccntCms(hmParam);            	
            }
            mapOutVar.put("cmsReslMsg", cmsMsg);
                       
            //2018.01.05 접속 로그////////////////////////////////////////////////////////////////////////////////
            DataSetMap listLogIn = (DataSetMap)mapInDs.get("gds_logInput");

            if (listLogIn.size() > 0) {
                hmParam = listLogIn.get(0);
                commonService.insertLog(hmParam);
            }
            //////////////////////////////////////////////////////////////////////////////////////////////////////

            modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
            modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, 	 xpDto.getOutDataSetMap());
        } catch (Exception e) {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg  = e.getMessage();
            
            modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
            modelAndView.addObject(XPlatformConstant.ERROR_MSG,  szErrorMsg);
        }        
        return modelAndView;
    }
    
    /**
     * 대명라이프웨이 CMS 신청 실패 로그 등록
     *
     * @param pmParam Map<String, Object>
     * @return ModelAndView
     * @throws Exception
     */
    @RequestMapping(value = "/saveCmsHistoryLogs")
    public ModelAndView insertDlwCmsHistoryLogs(XPlatformMapDTO xpDto, Model model) throws Exception {
        ModelAndView modelAndView = new ModelAndView("xplatformMapView");
        DataSetMap listMap = new DataSetMap();
        Map<String, Object> hmParam = new HashMap<String, Object>();

        // 에러코드및 메시지
        String szErrorCode = "0";
        String szErrorMsg  = "OK";

        try {
            Map <String, Object> mapInVar     = xpDto.getInVariableMap();
            Map <String, DataSetMap> mapInDs  = xpDto.getInDataSetMap();
            Map <String, Object> mapOutVar    = xpDto.getOutVariableMap();
            Map <String, DataSetMap> mapOutDs = xpDto.getOutDataSetMap();

            DataSetMap listInDs = (DataSetMap)mapInDs.get("ds_input");
            hmParam = listInDs.get(0);

            //세션
            ParamUtils.addSaveParam(hmParam);
            
            DlwMemPayMthdService.insertDlwCmsHistoryLogs(hmParam);
            
            //2018.01.05 접속 로그////////////////////////////////////////////////////////////////////////////////
            DataSetMap listLogIn = (DataSetMap)mapInDs.get("gds_logInput");

            if (listLogIn.size() > 0) {
                hmParam = listLogIn.get(0);
                commonService.insertLog(hmParam);
            }
            //////////////////////////////////////////////////////////////////////////////////////////////////////

            modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
            modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, 	 xpDto.getOutDataSetMap());
        } catch (Exception e) {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg  = e.getMessage();
            
            modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
            modelAndView.addObject(XPlatformConstant.ERROR_MSG,  szErrorMsg);
        }        
        return modelAndView;
    }
    
    /**
     * 상담 정보를 등록/수정한다. (대명)
     *
     * @param pmParam Map<String, Object>
     * @return ModelAndView
     * @throws Exception
     */
    public void saveConsdlw(Map <String, Object> pmParam) throws Exception {
        String sConsno = "";
        
        String sAccntNo = StringUtils.defaultString((String)pmParam.get("accnt_no")); 	// 회원번호
        UserSession oLoginUser = (UserSession) SessionUtils.getLoginUser();				// 담당자 아이디

        //상담이력 저장 (TB_CONS)
        pmParam.put("consno_sqno", "1");   				// SEQ
        pmParam.put("acpg_chnl_cd", "99");					// 접수채널 코드 (기타)
        pmParam.put("cons_stat_cd", "30"); 					//상담상태 - 처리완료
        pmParam.put("cons_dspsmddl_dtpt_cd", "10"); 		//상담처리중 - 일반     
        
        pmParam.put("rgsr_id", oLoginUser.getUserid());
        pmParam.put("amnd_id", oLoginUser.getUserid());
        pmParam.put("cnsl_man", oLoginUser.getUserid());
        
        sConsno = DlwMemPayMthdService.insertCons(pmParam);
    }
}
