<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="DlwCmsMap">
    <select id="DlwCmsMap.getDlwCmsCsmmCount" parameterType="map" resultType="int">
        SELECT /* DlwCmsMap.getDlwCmsCsmmCount */
               COUNT(*)
               FROM CMS_MEM A
          left outer join ( select MEM_PROD_ACCNT.*,mb.mem_nm from MEM_PROD_ACCNT
                            left outer join member mb on MEM_PROD_ACCNT.mem_no=mb.mem_no
                            left outer join EMPLOYEE C on C.EMPLE_NO = MEM_PROD_ACCNT.EMPLE_NO )
                 B on A.ACCNT_NO = B.ACCNT_NO
         WHERE
            B.DEL_FG = 'N'
           <if test="srch_vl != null and srch_vl != ''">
               <if test="srch_typ == 'all'">
                   AND (A.ACCNT_NO LIKE '%' || #{srch_vl} || '%'
                    OR A.MEM_NO LIKE '%' || #{srch_vl} || '%'
                    OR b.mem_nm LIKE '%' || #{srch_vl} || '%'
                    OR A.BIRTH LIKE '%' || #{srch_vl} || '%'
                    OR A.BANK_ACCNT_NO LIKE '%' || #{srch_vl} || '%')
               </if>
               <if test="srch_typ == 'mem_nm'">
                   AND b.mem_nm LIKE '%' || #{srch_vl} || '%'
               </if>
               <if test="srch_typ == 'accnt_no'">
                   AND A.ACCNT_NO = #{srch_vl}
               </if>
               <if test="srch_typ == 'mem_no'">
                   AND A.MEM_NO = #{srch_vl}
               </if>
               <if test="srch_typ == 'birth'">
                   AND A.BIRTH LIKE '%' || #{srch_vl} || '%'
               </if>
               <if test="srch_typ == 'bank_accnt_no'">
                   AND A.BANK_ACCNT_NO LIKE '%' || #{srch_vl} || '%'
               </if>
               <if test="srch_typ == 'depr'">
                   AND A.DEPR LIKE '%' || #{srch_vl} || '%'
               </if>
           </if>
           <if test="srch_typ == 'ichae_dt'">
               AND A.ICHAE_DT <![CDATA[>=]]> replace(#{ichae_stt_dt},'/','')
               AND A.ICHAE_DT <![CDATA[<=]]> replace(#{ichae_end_dt},'/','')
           </if>
    </select>

    <select id="DlwCmsMap.getDlwCmsCsmm" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectCMSMemberByGun -->


        SELECT /* DlwCmsMap.getDlwCmsCsmm */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*, CMS_JOIN_DT AS RGSN_DT
                    FROM (SELECT A.MEM_NO, 'cms' AS BUGA_SRVC_TYP
                               , A.ACCNT_NO AS ACCNT_NO
                               , A.CMS_JOIN_DT CMS_JOIN_DT
                               , FN_MEM_NM (A.MEM_NO) MEM_NM
                               , FN_PROD_NM (B.PROD_CD) PROD_NM
                               , (SELECT PROD_AMT FROM PRODUCT WHERE PROD_CD = B.PROD_CD) PROD_AMT
                               , (SELECT MON_PAY_AMT FROM PRODUCT WHERE PROD_CD = B.PROD_CD) MON_PAY_AMT
                               , B.EMPLE_NO MANAGER_NO
                               , FN_EMPLE_NM(B.EMPLE_NO) MANAGER_NM
                               , A.DEPR
                               , CASE WHEN LENGTH(A.BIRTH) = 10
                                           THEN 'Y'
                                      ELSE 'N'
                                  END AS BUSINESS_YN
                               , A.BIRTH IDN_NO
                               , A.RELTN
                               , FN_COM_NM ('07', A.RELTN) RELTN_NM
                               , A.BANK_CD
                               , FN_COM_NM('63',A.BANK_CD) BANK_NM
                               , A.BANK_ACCNT_NO BANK_ACCNT_NO
                               , A.ICHAE_DT
                               , A.ICHAE_LIMIT_GUNSU
                               , FN_COM_NM('09',A.ACPT_MTHD) ACPT_NM
                               , FN_DEPT_NM(B.DEPT_CD) DEPT_NM
                               , A.DEPR_CELL
                               , A.DEL_FG
                               , A.CNSL_DT CNSL_DT
                               , PAY_DAY_FIX_YN
                               , PRE_PAY_YN
                               , PRE_PAY_GUNSU
                               , YEN_CHE_PRE_PAY_YN
                               , YEN_CHE_PRE_PAY_GUNSU
                               , NVL((SELECT MODEL_CL_NM FROM PRODUCT_MODEL_CL_CD WHERE MODEL_CL_CD = B.PROD_MODEL_KIND), ' ') MODEL_CL_NM
                          FROM CMS_MEM A
                                    left outer join ( select MEM_PROD_ACCNT.*,mb.mem_nm,C.DEPT_CD from MEM_PROD_ACCNT
                                    left outer join member mb on MEM_PROD_ACCNT.mem_no=mb.mem_no
                                    left outer join EMPLOYEE C on C.EMPLE_NO = MEM_PROD_ACCNT.EMPLE_NO )  B on A.ACCNT_NO = B.ACCNT_NO
                         WHERE  B.DEL_FG = 'N'
                         <if test="srch_vl != null and srch_vl != ''">
                             <if test="srch_typ == 'all'">
                                 AND (A.ACCNT_NO LIKE '%' || #{srch_vl} || '%'
                                  OR A.MEM_NO LIKE '%' || #{srch_vl} || '%'
                                  OR B.MEM_NM LIKE '%' || #{srch_vl} || '%'
                                  OR A.BIRTH LIKE '%' || #{srch_vl} || '%'
                                  OR  A.BANK_ACCNT_NO  LIKE '%' || #{srch_vl} || '%')
                             </if>
                             <if test="srch_typ == 'mem_nm'">
                                 AND B.MEM_NM LIKE  '%' || #{srch_vl} || '%'
                             </if>
                             <if test="srch_typ == 'accnt_no'">
                                 AND A.ACCNT_NO = #{srch_vl}
                             </if>
                             <if test="srch_typ == 'memno'">
                                 AND A.MEM_NO = #{srch_vl}
                             </if>
                             <if test="srch_typ == 'birth'">
                                 AND A.BIRTH LIKE '%' || #{srch_vl} || '%'
                             </if>
                             <if test="srch_typ == 'bank_accnt_no'">
                                 AND  A.BANK_ACCNT_NO LIKE '%' || #{srch_vl} || '%'
                             </if>
                             <if test="srch_typ == 'depr'">
                                 AND A.DEPR LIKE '%' || #{srch_vl} || '%'
                             </if>
                         </if>
                         <if test="srch_typ == 'ichae_dt'">
                             AND A.ICHAE_DT <![CDATA[>=]]> REPLACE(#{ichae_stt_dt},'/','')
                             AND A.ICHAE_DT <![CDATA[<=]]> REPLACE(#{ichae_end_dt},'/','')
                         </if>
                       ) X
                ) Z
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            <![CDATA[
            WHERE PAGE_INDX >= #{startLine}
              AND PAGE_INDX < #{endLine}
            ]]>
        </if>
    </select>


    <select id="DlwCmsMap.getDlwCmsRgsnHstrCount" parameterType="map" resultType="int">


        SELECT /* DlwCmsMap.getDlwCmsRgsnHstrCount */
               COUNT(*)
          FROM NEW_CANCL_APP
         WHERE ACCNT_NO = #{accnt_no}
           AND STAT = '04'
    </select>

    <select id="DlwCmsMap.getDlwCmsRgsnHstrList" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectCMSRegHistoryByGun -->

        SELECT /* DlwCmsMap.getDlwCmsRgsnHstrList */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       SEQ
                     , ACCNT_NO AS accnt_NO
                     , SUBSTR(APP_DT,1,8) APP_DT
                     , PAYR_NO
                     , BANK_CD
                     , FN_COM_NM('63',BANK_CD) BANK_NM
                     , BANK_ACCNT_NO BANK_ACCNT_NO
                     , NVL(BIRTH,'') IDN_NO
                     , IMPS_CD
                     , INV_TG_DT
                     , APP_CL
                     , FN_COM_NM('17',APP_CL) APP_CL_NM
                     , STAT
                     , ACPT_MTHD
                     , FN_COM_NM('09',ACPT_MTHD) ACPT_MTHD_NM
                     , HANDL_BRACH_CD
                     , TO_CHAR(UPD_DM, 'YYYY-MM-DD HH24:MI:SS') REG_DT
                     , AREA_CODE
                  FROM NEW_CANCL_APP
                 WHERE ACCNT_NO = #{accnt_no}
                   AND STAT = '04'
               ) Z
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            <![CDATA[
            WHERE PAGE_INDX >= #{startLine}
              AND PAGE_INDX < #{endLine}
            ]]>
        </if>
    </select>

    <select id="DlwCmsMap.getDlwCmsWdrwHstrCount" parameterType="map" resultType="int">


        SELECT /* DlwCmsMap.getDlwCmsWdrwHstrCount */
               /*+INDEX(WDRW_REQ IDX_WDRW_REQ_ACCNT_STAT) */
               COUNT(*)
          FROM WDRW_REQ
         WHERE ACCNT_NO = #{accnt_no}
    </select>

    <select id="DlwCmsMap.getDlwCmsWdrwHstrList" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectCMSWdrwHistoryByGun -->
        SELECT /* DlwCmsMap.getDlwCmsWdrwHstrList */
               *
          FROM (SELECT  /*+INDEX(WDRW_REQ IDX_WDRW_REQ_ACCNT_STAT) */
                           <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       IMPS_CD
                     , WDRW_REQ_AMT
                     , INV_GUNSU
                     , INV_DT INV_DT
                     , STAT
                     , FN_COM_NM('15',IMPS_CD) IMPS_NM
                     , BANK_FILIN_BRKDN
                  FROM WDRW_REQ
                 WHERE ACCNT_NO = #{accnt_no}
                ) Z
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            <![CDATA[
            WHERE PAGE_INDX >= #{startLine}
              AND PAGE_INDX < #{endLine}
            ]]>
        </if>
    </select>

    <update id="DlwCmsMap.updateCmsTranInfo" parameterType="map" >
        <!-- DM sql-id : updateIchaeInfo -->
        UPDATE /* DlwCmsMap.updateCmsTranInfo */
                CMS_MEM
           SET ICHAE_DT = #{ichae_dt}
             , UPD_MAN = #{upd_man}
             , UPD_DM = SYSDATE
             <if test="ichae_limit_gunsu != null and ichae_limit_gunsu != ''">
                 , ICHAE_LIMIT_GUNSU = #{ichae_limit_gunsu}
             </if>
             <if test="reltn != null and reltn != ''">
                 , RELTN = #{reltn}
             </if>
             <if test="depr != null and depr != ''">
                 , DEPR = #{depr}
             </if>
             <if test="pay_day_fix_yn != null and pay_day_fix_yn != ''">
                 , PAY_DAY_FIX_YN = #{pay_day_fix_yn}
             </if>
             <if test="pre_pay_yn != null and pre_pay_yn != ''">
                 , PRE_PAY_YN = #{pre_pay_yn}
             </if>
             <if test="pre_pay_gunsu != null and pre_pay_gunsu != ''">
                 , PRE_PAY_GUNSU = #{pre_pay_gunsu}
             </if>
             <if test="yen_che_pre_pay_yn != null and yen_che_pre_pay_yn != ''">
                 , YEN_CHE_PRE_PAY_YN = #{yen_che_pre_pay_yn}
             </if>
             <if test="yen_che_pre_pay_gunsu != null and yen_che_pre_pay_gunsu != ''">
                 , YEN_CHE_PRE_PAY_GUNSU = #{yen_che_pre_pay_gunsu}
             </if>
         WHERE accnt_no = #{accnt_no}
    </update>

    <select id="DlwCmsMap.getDlwCmsWdrwChk" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : selectCmsWdrwReqChk -->
        SELECT /* DlwCmsMap.getDlwCmsWdrwChk */
               CASE WHEN NVL((SELECT COUNT(*)
                                   FROM WDRW_REQ
                                  WHERE ACCNT_NO = #{accnt_no}
                                    AND STAT IN ('01', '02','11')), 0)<![CDATA[>]]>0
                    THEN 'CMS'
                    WHEN NVL((SELECT COUNT(*)
                                   FROM WDRW_REQ_CALL_CENTER
                                  WHERE ACCNT_NO = #{accnt_no}
                                    AND WDRW_REQ_YN = 'N'
                                    AND STAT IN ('01', '02','11')
                                    AND GUBUN = 'CMS'
                                    AND DEL_FG IS NULL), 0)<![CDATA[>]]>0
                    THEN '콜센터'
                    ELSE ' '
               END AS CMS_WDRW
          FROM DUAL
    </select>

    <select id="DlwCmsMap.getDlwCmsAplcDtlCount" parameterType="map" resultType="int">


        SELECT /* DlwCmsMap.getDlwCmsAplcDtlCount */
               COUNT(*)
          FROM NEW_CANCL_APP A
               INNER JOIN MEM_PROD_ACCNT MPA ON A.ACCNT_NO = MPA.ACCNT_NO
               INNER JOIN EMPLOYEE EMP ON EMP.EMPLE_NO = MPA.EMPLE_NO
         WHERE APP_DT= TO_CHAR(SYSDATE, 'YYYYMMDD')
           AND (ACPT_MTHD = '03' OR ACPT_MTHD = '04' OR ACPT_MTHD = '05')
           <if test="dataAthrQury != null and dataAthrQury != ''">
               ${dataAthrQury}
           </if>
           <if test="ns_yn == 'Y'">
               AND EMP.DEPT_CD = '1602'
           </if>
    </select>

    <select id="DlwCmsMap.getDlwCmsAplcDtl" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : selectCMSBugaHistoryByDay -->


        SELECT /* DlwCmsMap.getDlwCmsAplcDtl */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*
                  FROM (SELECT A.SEQ
                             , A.ACCNT_NO
                             , A.BANK_ACCNT_NO BANK_ACCNT_NO
                             , A.APP_DT APP_DT
                             , A.PAYR_NO
                             , FN_MEM_NM (A.PAYR_NO) PAYR_NM
                             , FN_DEPT_NM_BY_ACCNT_NO(A.ACCNT_NO)DEPT_NM
                             , A.BANK_CD
                             , FN_COM_NM ('63', A.BANK_CD) BANK_NM
                             , A.BIRTH IDN_NO
                             , A.INV_TG_DT
                             , A.ACPT_MTHD
                             , A.APP_CL
                             , FN_COM_NM ('17', APP_CL) APP_CL_NM
                             , A.REG_DM
                             , A.REG_MAN
                             , A.UPD_DM
                             , A.UPD_MAN
                          FROM NEW_CANCL_APP A
                               INNER JOIN MEM_PROD_ACCNT MPA ON A.ACCNT_NO = MPA.ACCNT_NO
                               INNER JOIN EMPLOYEE EMP ON EMP.EMPLE_NO = MPA.EMPLE_NO
                         WHERE APP_DT = TO_CHAR(SYSDATE, 'YYYYMMDD')
                           AND (ACPT_MTHD = '03' OR ACPT_MTHD = '04' OR ACPT_MTHD = '05')
                           <if test="dataAthrQury != null and dataAthrQury != ''">
                               ${dataAthrQury}
                           </if>
                           <if test="ns_yn == 'Y'">
                               AND EMP.DEPT_CD = '1602'
                           </if>
                       ) X
                ) Z
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            <![CDATA[
            WHERE PAGE_INDX >= #{startLine}
              AND PAGE_INDX < #{endLine}
            ]]>
        </if>
    </select>

    <select id="DlwCmsMap.getDltnFlagCmsMmbr" parameterType="map" resultType="String">
        <!-- DM sql-id : selectIsCmsMember -->


        SELECT /* DlwCmsMap.getDltnFlagCmsMmbr */
               NVL(MAX(DEL_FG),'O') AS DEL_FG
          FROM CMS_MEM
          <where>
            <if test="cl_tmp == 'syncCheck'">
                AND sync_no = #{accnt_no}
            </if>
            <if test="cl_tmp != 'syncCheck'">
                AND accnt_no = #{accnt_no}
            </if>
         </where>
    </select>

    <insert id="DlwCmsMap.insertDlwCmsAnxtSrvc" parameterType="map">
        <!-- DM sql-id : insertCMSMemberNewByBuga -->
        INSERT /* DlwCmsMap.insertDlwCmsAnxtSrvc */
          INTO NEW_CANCL_APP
                  ( SEQ
                  , ACCNT_NO
                  , BANK_ACCNT_NO
                  , APP_DT
                  , PAYR_NO
                  , BANK_CD
                  , DEPR
                  , INV_TG_DT
                  , APP_CL
                  , ACPT_MTHD
                  , RELTN
                  , STAT
                  , REG_DM
                  , REG_MAN
                  , UPD_DM
                  , UPD_MAN
                  , BIRTH
                  <if test="depr_cell != null and depr_cell != ''">
                  , DEPR_CELL
                  </if>
                  )
             SELECT A.SEQ
                  , #{accnt_no}
                  , #{bank_accnt_no}
                  , TO_CHAR(SYSDATE,'YYYYMMDD')
                  , #{mem_no}
                  , #{bank_cd}
                  , #{depr_nm}
                  , #{inv_tg_dt}
                  , #{app_cl}
                  , #{acpt_mthd}
                  , #{rltn_cd}
                  , '04'
                  , SYSDATE
                  , #{emple_no}
                  , SYSDATE
                  , #{emple_no}
                  , #{idn_no}
                  <if test="depr_cell != null and depr_cell != ''">
                  , #{depr_cell}
                  </if>
             FROM (SELECT NVL(MAX(SEQ) + 1, '1') AS SEQ
                     FROM NEW_CANCL_APP) A
    </insert>

    <insert id="DlwCmsMap.insertDlwCmsMmbr" parameterType="map" >
        <!-- DM sql-id : insertCMSMember -->
        /* CmsMap.insertCMSMember */

        INSERT INTO CMS_MEM
                  ( ACCNT_NO
                  , MEM_NO
                  , BANK_CD
                  , BANK_ACCNT_NO
                  , ICHAE_DT
                  , ICHAE_LIMIT_GUNSU
                  , CMS_JOIN_DT
                  , ACPT_MTHD
                  , DEPR
                  , RELTN
                  , REG_DM
                  , REG_MAN
                  , UPD_DM
                  , UPD_MAN
                  , DEL_FG
                  , SYNC_NO
                  , PAY_DAY_FIX_YN
                  , PRE_PAY_YN
                  , PRE_PAY_GUNSU
                  , YEN_CHE_PRE_PAY_YN
                  , YEN_CHE_PRE_PAY_GUNSU
                  , BIRTH
                  )
            VALUES ( #{accnt_no}
                   , #{mem_no}
                   , #{bank_cd}
                   , #{bank_accnt_no}
                   , #{inv_tg_dt}
                   , '0'
                   <if test="acpt_mthd == '06'">
                   , to_char(sysdate,'yyyy')|| #{rgsn_dt}
                   </if>
                   <if test="acpt_mthd != '06'">
                   , #{rgsn_dt}
                   </if>
                   , #{acpt_mthd}
                   , #{depr_nm}
                   , #{rltn_cd}
                   , SYSDATE
                   , #{emple_no}
                   , SYSDATE
                   , #{emple_no}
                   , 'N'
                   , #{accnt_no}
                   , 'N'
                   , 'N'
                   , 0
                   , 'N'
                   , 0
                   , #{idn_no}
                   )


    </insert>

    <update id="DlwCmsMap.updateDlwCmsMmbr" parameterType="map" >
        <!-- DM sql-id : updateCMSMember -->
        /* DlwCmsMap.updateDlwCmsMmbr */


        UPDATE CMS_MEM
           SET ICHAE_DT = #{inv_tg_dt}
             , ICHAE_LIMIT_GUNSU = '0'
             , MEM_NO = #{mem_no}
             , CMS_JOIN_DT = TO_CHAR(SYSDATE,'YYYYMMDD')
             , DEPR = #{depr_nm}
             <if test="depr_cell != null and depr_cell != ''">
             , DEPR_CELL = #{depr_cell}
             </if>
             , BANK_CD = #{bank_cd}
             , BANK_ACCNT_NO =  #{bank_accnt_no}
             , RELTN = #{rltn_cd}
             , UPD_DM = SYSDATE
             , UPD_MAN = #{emple_no}
             , DEL_FG = 'N'
             , SYNC_NO = #{accnt_no}
             , CNSL_DT = ''
             , PAY_DAY_FIX_YN = 'N'
             , PRE_PAY_YN = 'N'
             , PRE_PAY_GUNSU = 0
             , YEN_CHE_PRE_PAY_YN = 'N'
             , YEN_CHE_PRE_PAY_GUNSU = 0
             , BIRTH = #{idn_no}
            <where>
                <if test="cl_tmp == 'syncCheck'">
                    SYNC_NO = #{accnt_no}
                </if>
                <if test="cl_tmp != 'syncCheck'">
                    ACCNT_NO = #{accnt_no}
                </if>
            </where>


    </update>


    <update id="DlwCmsMap.deleteDlwCmsMmbr" parameterType="map" >
        <!-- DM sql-id : deleteCMSMember -->
        UPDATE /* DlwCmsMap.deleteDlwCmsMmbr */
               CMS_MEM
           SET DEL_FG = 'Y'
             , CNSL_DT = SYSDATE
             , UPD_DM = SYSDATE
             , UPD_MAN = #{emple_no}
         <where>
             <if test="acpt_mthd == '07'">
                 <if test="cl_tmp == 'tempModule'">
                     AND ACCNT_NO = #{accnt_no}
                 </if>
                 <if test="cl_tmp == 'syncCheck'">
                     AND SYNC_NO = #{accnt_no}
                 </if>
             </if>
             <if test="acpt_mthd != '07'">
                 AND ACCNT_NO = #{accnt_no}
             </if>
         </where>
    </update>


    <update id="DlwCmsMap.updateDlwCmsPymtMthd" parameterType="map" >
        <!-- DM sql-id : updatePayMthd -->
        UPDATE /* DlwCmsMap.updateDlwCmsPymtMthd */
               MEM_PROD_ACCNT
        <if test="app_cl.equalsIgnoreCase('1')">
            SET pay_mthd = '04'
            <if test="bank_accnt_no != null and bank_accnt_no != ''">
                , BANK_ACCNT_NO = #{bank_accnt_no}
            </if>
        </if>
        <if test="!app_cl.equalsIgnoreCase('1')">
            SET pay_mthd = '01'
            <if test="bank_accnt_no != null and bank_accnt_no != ''">
                , BANK_ACCNT_NO = ' '
            </if>
        </if>
        <if test="cl_tmp != 'syncCheck'">
            WHERE ACCNT_NO = #{accnt_no}
        </if>
        <if test="cl_tmp == 'syncCheck'">
            WHERE OLD_MID = #{accnt_no}
               OR ACCNT_NO = #{accnt_no}
        </if>
    </update>

    <update id="DlwCmsMap.updateDlwCmsAcpgMthd"  parameterType="map" >
        <!-- DM sql-id : updateCMSAcpt -->
        UPDATE /* DlwCmsMap.updateDlwCmsAcpgMthd */
               CMS_MEM
           SET ACPT_MTHD = #{acpt_mthd}
             , UPD_DM = SYSDATE
         WHERE ACCNT_NO = #{accnt_no}
    </update>

    <!--
    DlwCmsMap. updateDlwCmsRprvPymt 에서 CMS와 회원의 생일, 해피콜건수를 조회하는 부분을 분리함
     -->
    <select id="DlwCmsMap.getCardAndMemberBirth" parameterType="map" resultType="resultMap">
        SELECT /* DlwCmsMap.getCardAndMemberBirth */
               (SELECT BIRTH
                  FROM CMS_MEM
                 WHERE DEL_FG = 'N'
                   AND ACCNT_NO = #{accnt_no}
                   AND BIRTH IS NOT NULL) AS CMS_BIRTH
             , (SELECT CASE WHEN LENGTH(NVL(IDN_NO, '')) = 10
                            THEN NVL(IDN_NO, '')
                            ELSE SUBSTR(BRTH_MON_DAY, -6)
                        END BRTH_MON_DAY
                  FROM MEMBER
                 WHERE MEM_NO = (SELECT MEM_NO
                                   FROM MEM_PROD_ACCNT
                                  WHERE ACCNT_NO = #{accnt_no})) AS MEM_BIRTH
             , (SELECT to_char(COUNT(ACCNT_NO)) FROM HP_CALL WHERE ACCNT_NO = #{accnt_no}) AS HA_CALL_CNT
          FROM DUAL
    </select>

    <!--
    DlwCmsMap. updateDlwCmsRprvPymt 에서 해피콜 변경 부분을 분리함
     -->
    <update id="DlwCmsMap.updateHpCall"  parameterType="map">
        UPDATE /* DlwCmsMap.updateHpCall */
               HP_CALL
           SET STAT = '17'
             , UPD_DM = SYSDATE
             , UPD_MAN = #{emple_no}
         WHERE ACCNT_NO = #{accnt_no}
    </update>

    <!--
    DlwCmsMap. updateDlwCmsRprvPymt 에서 해피콜 등록 부분을 분리함
     -->
    <insert id="DlwCmsMap.insertHpCall" parameterType="map">
        INSERT /* DlwCmsMap.insertHpCall */
          INTO HP_CALL
              ( ACCNT_NO
              , EMPLE_NO
              , BEF_EMPLE_NO
              , STAT
              , ASSIGN_DM
              , REG_DM
              , REG_MAN
              , UPD_DM
              , UPD_MAN
              )
         VALUES
              (
                #{accnt_no}
              , #{emple_no}
              , #{emple_no}
              , '17'
              , SYSDATE
              , SYSDATE
              , #{emple_no}
              , SYSDATE
              , #{emple_no}
              )
    </insert>

    <!--
    해피콜 이력등록
    DlwCmsMap. updateDlwCmsRprvPymt 에서 해피콜 이력등록 부분을 분리함
     -->
    <insert id="DlwCmsMap.insertHpCallHist" parameterType="map">
        INSERT /* DlwCmsMap.insertHpCallHist */
          INTO HP_CALL_HIST
                ( ACCNT_NO
                , SEQ
                , EMPLE_NO
                , STAT
                , NOTE
                , CONN
                , REG_MAN
                , REG_DM
                , UPD_MAN
                , UPD_DM
                )
           VALUES
                ( #{accnt_no}
                , NVL((SELECT COUNT(SEQ) FROM HP_CALL_HIST WHERE ACCNT_NO = #{accnt_no}), 0) + 1
                , #{emple_no}
                , '17'
                , '[타인카드 등록] 대리납여부 확인 요망'
                , ''
                , #{emple_no}
                , SYSDATE
                , #{emple_no}
                , SYSDATE
                )
    </insert>

    <select id="DlwCmsMap.getDlwWdrwTranDtlCount" parameterType="map" resultType="int">


        SELECT /* DlwCmsMap.getDlwWdrwTranDtlCount */
               COUNT(*)
          FROM WDRW_REQ_CALL_CENTER REQ
         INNER JOIN MEM_PROD_ACCNT ACCNT
            ON ACCNT.ACCNT_NO = REQ.ACCNT_NO
           AND ACCNT.DEL_FG = 'N'
         INNER JOIN PRODUCT PROD
            ON PROD.PROD_CD = ACCNT.PROD_CD
           AND PROD.DEL_FG = 'N'
         INNER JOIN MEMBER MEM
            ON MEM.MEM_NO = ACCNT.MEM_NO
           AND MEM.DEL_FG = 'N'
          LEFT OUTER JOIN CMS_MEM CMEM
            ON CMEM.ACCNT_NO = ACCNT.ACCNT_NO
           AND CMEM.DEL_FG = 'N'
          LEFT OUTER JOIN CARD_MEM CARDMEM
            ON CARDMEM.ACCNT_NO = ACCNT.ACCNT_NO
           AND CARDMEM.DEL_FG = 'N'
         WHERE 1=1
       <if test="mode != null and mode != ''">
           <if test="mode == 'popup'">
               <if test="gubun == 'CMS'">
                   AND CMEM.ACCNT_NO IS NOT NULL
               </if>
               <if test="gubun == 'CARD'">
                   AND CARDMEM.ACCNT_NO IS NOT NULL
               </if>
           </if>
       </if>
       <if test="accntno != null and accntno != ''">
           AND REQ.ACCNT_NO = #{accntno}
           <if test="seq != null and seq != ''" >
               <if test="seq.equalsIgnoreCase('0')">
                   AND REQ.SEQ = (SELECT MAX (SEQ)
                                    FROM WDRW_REQ_CALL_CENTER
                                   WHERE ACCNT_NO = #{accntno}
                                     AND DEL_FG IS NULL)
               </if>
               <if test="!seq.equalsIgnoreCase('0')">
                   AND REQ.SEQ = #{seq}
               </if>
           </if>
       </if>
       <if test="(stt_dt != null and stt_dt != '') and (end_dt != null and end_dt != '')">
           <if test="dt_typ == '01'">
               AND REQ.INV_DT BETWEEN #{stt_dt} AND #{end_dt}
           </if>
           <if test="dt_typ == '02'">
               AND REQ.REG_DM BETWEEN #{stt_dt} AND #{end_dt}
           </if>
       </if>
       <if test="wdrwreqappyn != null and wdrwreqappyn != ''">
           AND REQ.WDRW_REQ_YN = #{wdrwreqappyn}
       </if>
       <if test='del_fg == "Y"'>
           AND REQ.DEL_FG = #{del_fg}
       </if>
       <if test='del_fg != "Y"'>
           AND REQ.DEL_FG IS NULL
       </if>
       <if test="gubun != null and gubun != ''">
           AND REQ.GUBUN = #{gubun}
       </if>
    </select>

    <select id="DlwCmsMap.getDlwWdrwTranDtlList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : selectWdrwReqCallCenter -->
        SELECT /* DlwCmsMap.getDlwWdrwTranDtlList */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*
                  FROM (SELECT REQ.SEQ
                             , REQ.ACCNT_NO
                             , REQ.PAYR_NO
                             , MEM.MEM_NM
                             , CASE WHEN REQ.GUBUN = 'CMS'
                                    THEN CMEM.ICHAE_DT
                                    ELSE CARDMEM.PAY_DT
                               END AS ICHAE_DT
                             , CMEM.ICHAE_LIMIT_GUNSU
                             , PROD.MON_PAY_AMT
                             , NVL(CASE WHEN NVL(PROD.PROD_CL, '00') = '03'
                                           THEN CASE WHEN FN_ACCNT_STAT(ACCNT.ACCNT_NO) = 'Y'
                                                     THEN CASE WHEN  ACCNT.KSTBIT = '09'
                                                               THEN (SELECT SUM( END_NO - ST_NO + 1 )
                                                                       FROM PRODUCT_DTL
                                                                      WHERE PROD_CD = PROD.PROD_CD
                                                                        AND ALLT_AMT<![CDATA[>]]>0)
                                                               ELSE CASE WHEN ACCNT.KSTBIT = '09'
                                                                         THEN (PROD.EXPR_NO -ACCNT.NEW_CHAN_GUNSU)
                                                                         ELSE (PROD.EXPR_NO -ACCNT.NEW_CHAN_GUNSU)
                                                                     END
                                                           END
                                                     ELSE CASE WHEN  ACCNT.KSTBIT = '09'
                                                               THEN (SELECT SUM( END_NO - ST_NO + 1 )
                                                                       FROM PRODUCT_DTL
                                                                      WHERE PROD_CD = PROD.PROD_CD
                                                                        AND ADD_AMT<![CDATA[>]]>0)
                                                               ELSE CASE WHEN  ACCNT.KSTBIT = '09'
                                                                         THEN (SELECT SUM( END_NO - ST_NO + 1 )
                                                                                 FROM PRODUCT_DTL
                                                                                WHERE PROD_CD = PROD.PROD_CD
                                                                                  AND ALLT_AMT<![CDATA[>]]>0)
                                                                         ELSE (SELECT SUM( END_NO - ST_NO + 1 )
                                                                                 FROM PRODUCT_DTL
                                                                                WHERE PROD_CD = PROD.PROD_CD
                                                                                  AND ALLT_AMT<![CDATA[>]]>0)
                                                                    END
                                                           END
                                                 END
                                           ELSE (PROD.EXPR_NO -ACCNT.NEW_CHAN_GUNSU)
                                       END, 0) AS EXPR_NO
                             , REQ.INV_GUNSU
                             , REQ.WDRW_REQ_AMT
                             , REQ.BANK_CD
                             , CASE WHEN REQ.GUBUN = 'CMS'
                                    THEN FN_COM_NM ('63', REQ.BANK_CD)
                                    ELSE FN_COM_NM ('0120', REQ.BANK_CD)
                                END AS BANK_NM
                             , REQ.BANK_ACCNT_NO AS BANK_ACCNT_NO
                             , REQ.BIRTH IDN_NO
                             , CASE WHEN NVL(PROD.PROD_CL, '00') = '03'
                                    THEN CASE WHEN FN_ACCNT_STAT(ACCNT.ACCNT_NO) = 'Y'
                                              THEN CASE WHEN  ACCNT.KSTBIT = '09'
                                                        THEN FN_YEN_CHE_COMB(ACCNT.ACCNT_NO)
                                                        ELSE CASE WHEN  ACCNT.KSTBIT = '09'
                                                                  THEN FN_YEN_CHE(ACCNT.ACCNT_NO)
                                                                  ELSE FN_YEN_CHE(ACCNT.ACCNT_NO)
                                                              END
                                                    END
                                              ELSE CASE WHEN  ACCNT.KSTBIT = '09'
                                                        THEN FN_YEN_CHE_COMB_ADD(ACCNT.ACCNT_NO)
                                                        ELSE CASE WHEN  ACCNT.KSTBIT = '09'
                                                                  THEN FN_YEN_CHE_COMB(ACCNT.ACCNT_NO)
                                                                  ELSE FN_YEN_CHE_COMB(ACCNT.ACCNT_NO)
                                                              END
                                                    END
                                          END
                                    ELSE FN_YEN_CHE(ACCNT.ACCNT_NO)
                                END AS DEL_STAT
                             , REQ.BANK_FILIN_BRKDN
                             , REQ.INV_NO
                             , ACCNT.OLD_MID
                             , CMEM.SYNC_NO
                             , FN_COM_NM ('67', REQ.CL) AS CL
                             , REQ.NOTE
                             , REQ.WDRW_REQ_YN
                             , FN_EMPLE_NM(REQ.REG_MAN) AS REG_MAN
                             , TO_CHAR(REQ.REG_DM, 'YYYY-MM-DD HH24:MI:SS') AS REG_DM
                             , REQ.INV_DT AS INV_DT
                             , CASE WHEN REQ.GUBUN = 'CARD'
                                    THEN NVL((SELECT /*+INDEX(CARD_WDRW_REQ INDEX_CARD_WDRW_REQ_IDNTT) */ MAX(INV_DT)
                                                   FROM CARD_WDRW_REQ
                                                  WHERE IDNTT = REQ.IDNTT), '')
                                    ELSE NVL((SELECT /*+INDEX(WDRW_REQ INDEX_WDRW_REQ_IDNTT) */ MAX(INV_DT)
                                                   FROM WDRW_REQ
                                                  WHERE IDNTT = REQ.IDNTT), '')
                                END AS WDRW_REQ_DT
                             , CASE WHEN REQ.GUBUN = 'CARD'
                                    THEN NVL((SELECT /*+INDEX(CARD_WDRW_REQ INDEX_CARD_WDRW_REQ_IDNTT) */  MAX(FN_COM_NM('16', STAT))
                                                   FROM CARD_WDRW_REQ
                                                  WHERE IDNTT = REQ.IDNTT), '')
                                    ELSE NVL((SELECT /*+INDEX(WDRW_REQ INDEX_WDRW_REQ_IDNTT) */ MAX(FN_COM_NM('16', STAT))
                                                   FROM WDRW_REQ
                                                  WHERE IDNTT = REQ.IDNTT), '')
                                END AS WDRW_REQ_STAT
                             , REQ.GUBUN
                             , CASE WHEN REQ.GUBUN = 'CMS'
                                    THEN CASE WHEN NVL((SELECT /*+INDEX(WDRW_REQ IDX_WDRW_REQ_ACCNT_STAT) */ COUNT(SEQ)
                                                             FROM WDRW_REQ
                                                            WHERE ACCNT_NO = REQ.ACCNT_NO
                                                              AND INV_NO = REQ.INV_NO
                                                              AND STAT = '02'), 0)<![CDATA[>]]>0
                                              THEN '신청 중'
                                              WHEN NVL((SELECT /*+INDEX(WDRW_REQ IDX_WDRW_REQ_ACCNT_STAT) */ COUNT(SEQ)
                                                             FROM WDRW_REQ
                                                            WHERE ACCNT_NO = REQ.ACCNT_NO
                                                              AND INV_NO = REQ.INV_NO
                                                              AND STAT = '04'), 0)<![CDATA[>]]>0
                                              THEN '완료'
                                              ELSE ''
                                          END
                                    WHEN REQ.GUBUN = 'CARD'
                                    THEN CASE WHEN NVL((SELECT COUNT(SEQ)
                                                             FROM CARD_WDRW_REQ
                                                            WHERE ACCNT_NO = REQ.ACCNT_NO
                                                              AND INV_NO = REQ.INV_NO
                                                              AND STAT = '02'), 0)<![CDATA[>]]>0
                                              THEN '신청 중'
                                              WHEN NVL((SELECT COUNT(SEQ)
                                                             FROM CARD_WDRW_REQ
                                                            WHERE ACCNT_NO = REQ.ACCNT_NO
                                                              AND INV_NO = REQ.INV_NO
                                                              AND STAT = '04'), 0)<![CDATA[>]]>0
                                              THEN '완료'
                                              ELSE ''
                                         END
                                    ELSE ''
                                END AS REAL_WDRW_REQ_STAT
                             , CASE WHEN REQ.GUBUN = 'CMS'
                                    THEN CASE <if test="mode != null and mode != ''">
                                              WHEN NVL(#{mode}, '') != 'popup'
                                              THEN 'Y'
                                              </if>
                                              WHEN NVL((SELECT /*+INDEX(WDRW_REQ IDX_WDRW_REQ_ACCNT_STAT) */ COUNT(SEQ)
                                                             FROM WDRW_REQ
                                                            WHERE ACCNT_NO = REQ.ACCNT_NO
                                                              AND INV_NO = REQ.INV_NO
                                                              AND STAT = '02'
                                                              AND NVL(IDNTT, 0) = 0), 0)<![CDATA[>]]>0
                                              THEN 'N'
                                              WHEN NVL((SELECT /*+INDEX(WDRW_REQ IDX_WDRW_REQ_ACCNT_STAT) */ COUNT(SEQ)
                                                             FROM WDRW_REQ
                                                            WHERE ACCNT_NO = REQ.ACCNT_NO
                                                              AND INV_NO = REQ.INV_NO
                                                              AND STAT = '04'
                                                              AND NVL(IDNTT, 0) = 0), 0)<![CDATA[>]]>0
                                              THEN 'N'
                                              ELSE 'Y'
                                          END
                                    WHEN REQ.GUBUN = 'CARD'
                                    THEN CASE <if test="mode != null and mode != ''">
                                              WHEN NVL(#{mode}, '') != 'popup'
                                              THEN 'Y'
                                              </if>
                                              WHEN NVL((SELECT COUNT(SEQ)
                                                             FROM CARD_WDRW_REQ
                                                            WHERE ACCNT_NO = REQ.ACCNT_NO
                                                              AND INV_NO = REQ.INV_NO
                                                              AND STAT = '02'
                                                              AND NVL(IDNTT, 0) = 0), 0)<![CDATA[>]]>0
                                              THEN 'N'
                                              WHEN NVL((SELECT COUNT(SEQ)
                                                             FROM CARD_WDRW_REQ
                                                            WHERE ACCNT_NO = REQ.ACCNT_NO
                                                              AND INV_NO = REQ.INV_NO
                                                              AND STAT = '04'
                                                              AND NVL(IDNTT, 0) = 0), 0)<![CDATA[>]]>0
                                              THEN 'N'
                                              ELSE 'Y'
                                          END
                                    ELSE 'Y'
                                END AS APP_YN
                          FROM WDRW_REQ_CALL_CENTER REQ
                         INNER JOIN MEM_PROD_ACCNT ACCNT
                            ON ACCNT.ACCNT_NO = REQ.ACCNT_NO
                           AND ACCNT.DEL_FG = 'N'
                         INNER JOIN PRODUCT PROD
                            ON PROD.PROD_CD = ACCNT.PROD_CD
                           AND PROD.DEL_FG = 'N'
                         INNER JOIN MEMBER MEM
                            ON MEM.MEM_NO = ACCNT.MEM_NO
                           AND MEM.DEL_FG = 'N'
                          LEFT OUTER JOIN CMS_MEM CMEM
                            ON CMEM.ACCNT_NO = ACCNT.ACCNT_NO
                           AND CMEM.DEL_FG = 'N'
                          LEFT OUTER JOIN CARD_MEM CARDMEM
                            ON CARDMEM.ACCNT_NO = ACCNT.ACCNT_NO
                           AND CARDMEM.DEL_FG = 'N'
                         WHERE 1=1
                       <if test="mode != null and mode != ''">
                           <if test="mode == 'popup'">
                               <if test="gubun == 'CMS'">
                                   AND CMEM.ACCNT_NO IS NOT NULL
                               </if>
                               <if test="gubun == 'CARD'">
                                   AND CARDMEM.ACCNT_NO IS NOT NULL
                               </if>
                           </if>
                       </if>
                       <if test="accnt_no != null and accnt_no != ''">
                           AND REQ.ACCNT_NO = #{accnt_no}
                           <if test="seq != null and seq != ''" >
                               <if test="seq.equalsIgnoreCase('0')">
                                   AND REQ.SEQ = (SELECT MAX (SEQ)
                                                    FROM WDRW_REQ_CALL_CENTER
                                                   WHERE ACCNT_NO = #{accnt_no}
                                                     AND DEL_FG IS NULL)
                               </if>
                               <if test="!seq.equalsIgnoreCase('0')">
                                   AND REQ.SEQ = #{seq}
                               </if>
                           </if>
                       </if>
                       <if test="(stt_dt != null and stt_dt != '') and (end_dt != null and end_dt != '')">
                           <if test="dt_typ == '01'">
                               AND REQ.INV_DT BETWEEN #{stt_dt} AND #{end_dt}
                           </if>
                           <if test="dt_typ == '02'">
                               AND TO_CHAR(REQ.REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
                           </if>
                       </if>
                       <if test="wdrwreqappyn != null and wdrwreqappyn != ''">
                           AND REQ.WDRW_REQ_YN = #{wdrwreqappyn}
                       </if>
                       <if test='del_fg == "Y"'>
                           AND REQ.DEL_FG = #{del_fg}
                       </if>
                       <if test='del_fg != "Y"'>
                           AND REQ.DEL_FG IS NULL
                       </if>
                       <if test="gubun != null and gubun != ''">
                           AND REQ.GUBUN = #{gubun}
                       </if>
                       ) X
                ) Z
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            <![CDATA[
            WHERE PAGE_INDX >= #{startLine}
              AND PAGE_INDX < #{endLine}
            ]]>
        </if>
    </select>

    <select id="DlwCmsMap.getDlwWdrwReqDtTtamt" parameterType="map" resultType="string">
        <!-- DM sql-id : selectMonthReqAmt -->
        SELECT /* DlwCmsMap.getDlwWdrwReqDtTtamt */
               to_char(NVL(SUM (WDRW_REQ_AMT),0))
                FROM WDRW_REQ
                WHERE STAT NOT IN ('03')
                AND SUBSTR(INV_DT,1,6) = TO_CHAR(SYSDATE, 'YYYYMM')
    </select>

    <select id="DlwCmsMap.getDlwCmsComnInfo" parameterType="map"
        resultType="resultMap">
        <!-- DM sql-id : selectCMSComInfo -->


        SELECT /* DlwCmsMap.getDlwCmsComnInfo */
        USE_INST_CL_CD
        , USE_INST_NM
        , BANK_OP_BRACH_CD
        <!-- , CONVERT(VARCHAR(MAX), DecryptByKeyAutoCert(cert_ID('CertKeyProtect'), NULL, BANK_ACCNT_NO)) AS BANK_ACCNT_NO  -->
        ,BANK_ACCNT_NO AS  BANK_ACCNT_NO
        , GUNDANG_WDRW_LIMIT
        , MON_WDRW_LIMIT
        , BANK_FILIN_BRKDN
        , FILE_PATH
        , WDRW_COM
        , WDRW_IMPS_COM
        , FILE_PATH
        FROM CMS_COM
    </select>



    <!-- cms 기초환경설정 변경  -->
    <update id="DlwCmsMap.updateCMSComInfo" parameterType="map">
        <!-- DM sql-id : updateCMSComInfo -->

        UPDATE /* DlwCmsMap.updateCMSComInfo */
               CMS_COM
        SET
            USE_INST_CL_CD = #{use_inst_cl_cd}
            ,USE_INST_NM = #{use_inst_nm}
            , BANK_OP_BRACH_CD = #{bank_op_brach_cd}
            , BANK_ACCNT_NO = #{bank_accnt_no}
            , GUNDANG_WDRW_LIMIT = #{gundang_wdrw_limit}
            , MON_WDRW_LIMIT = #{mon_wdrw_limit}
            , BANK_FILIN_BRKDN = #{bank_filin_brkdn}
            , FILE_PATH = #{file_path}
            , WDRW_COM = #{wdrw_com}
            , WDRW_IMPS_COM = #{wdrw_imps_com}
        WHERE USE_INST_CL_CD = #{use_inst_cl_cd}
    </update>

    <select id="DlwCmsMap.getDlwComnInfo" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : selectComInfo -->


        SELECT SEQ
             , CORP_NM
             , CEO_NM
             , BSNS_REGNO
             , BSNS_CODT
             , BSNS_TYPE
             , TEL
             , REPLACE(SUBSTR(TEL,1,3), '-','') AS TEL1
             , REPLACE(SUBSTR(TEL,4,4),'-','') AS TEL2
             , SUBSTR(TEL, -4) AS TEL3
             , ZIP
             , SUBSTR(ZIP,1,3) AS ZIP1
             , SUBSTR(ZIP,4, 3) AS ZIP2
             , ADDR
             , ADDR2
             , EMAIL
             , HOMEP
             , CHAR_ID
             , SITE_ID
             , USER_ID
             , CONF_NO_ID
             , NOTE
             , CMS_MTHD
             , CARD_MEM_CD
             , CARD_TERMINL_NO
             , CARD_FILE_PATH
          FROM USE_ENTR
    </select>

    <select id="DlwCmsMap.getEvntAccntNo" parameterType="map" resultType="string">
        <!-- DM sql-id : selectEventByAccntNo -->


        SELECT /* DlwCmsMap.getEvntAccntNo */
               CASE WHEN FN_EVENT(#{accnt_no}) IN ('', '부활')
                    THEN 'Y'
                    ELSE 'N'
                END
                 FROM DUAL
    </select>

    <select id="DlwCmsMap.getPrdtDiv" parameterType="map" resultType="string">
        <!-- DM sql-id : selectProdClByAccntNo -->


        SELECT /* DlwCmsMap.getPrdtDiv */
               PROD_CL
          FROM PRODUCT
         WHERE PROD_CD = (SELECT PROD_CD
                            FROM MEM_PROD_ACCNT
                           WHERE ACCNT_NO = #{accnt_no})
    </select>

    <select id="DlwCmsMap.getInvAmt" parameterType="map" resultType="int">
        <!-- DM sql-id : selectInvAmt -->


        SELECT /* DlwCmsMap.getInvAmt */
               FN_CMS_APP_CNT(#{gunsu}, #{inv_cnt}, #{accnt_no})
        FROM DUAL
    </select>

    <update id="DlwCmsMap.updateInvGunsuForEB21Call" parameterType="map">
        <!-- DM sql-id : updateInvGunsuForEB21Call -->
        UPDATE WDRW_REQ_CALL_CENTER
           SET INV_GUNSU = #{inv_gunsu}
             , WDRW_REQ_AMT = #{wdrw_req_amt}
             , BANK_FILIN_BRKDN = #{bank_filin_brkdn}
             , INV_NO = #{inv_no}
         WHERE seq = #{seq}
           AND accnt_no = #{accnt_no}
           AND DEL_FG IS NULL
    </update>

    <!-- 청구건수 수정,-실청구금액 수정 -->
    <update id="DlwCmsMap.updateInvGunsuForEB21" parameterType="map">
        <!-- DM sql-id : updateInvGunsuForEB21 -->
        UPDATE /* DlwCmsMap.updateInvGunsuForEB21 */
               WDRW_REQ
           SET INV_GUNSU = #{inv_gunsu}
             , WDRW_REQ_AMT = #{wdrw_req_amt}
             , BANK_FILIN_BRKDN = #{bank_filin_brkdn}
             , INV_NO = #{inv_no}
         WHERE seq = #{seq}
           AND accnt_no = #{accnt_no}
    </update>

    <!-- 청구건수 수정,-실청구금액 수정 -->
    <update id="DlwCmsMap.updateInvGunsuForCard" parameterType="map">
        <!-- DM sql-id : updateInvGunsuForCard -->
        UPDATE /* DlwCmsMap.updateInvGunsuForCard */
               CARD_WDRW_REQ
           SET INV_GUNSU = #{inv_gunsu}
             , WDRW_REQ_AMT = #{wdrw_req_amt}
             , BANK_FILIN_BRKDN = #{bank_filin_brkdn}
             , INV_NO = #{inv_no}
         WHERE seq = #{seq}
           AND accnt_no = #{accnt_no}
    </update>


    <delete id="DlwCmsMap.deleteCmsWdrwReq" parameterType="map">
        <!-- DM sql-id : deleteCmsWdrwReq -->
        DELETE /* DlwCmsMap.deleteCmsWdrwReq */
          FROM WDRW_REQ
         WHERE ACCNT_NO = #{accnt_no}
           AND STAT = '01'
    </delete>

    <insert id="DlwCmsMap.insertCmsWdrwReqByCall" parameterType="map">
        <!-- DM sql-id : wdrwReqApp -->

        INSERT INTO /* DlwCmsMap.insertCmsWdrwReqByCall */
                    WDRW_REQ
                  ( SEQ
                  , ACCNT_NO
                  , INV_NO
                  , PAYR_NO
                  , BANK_CD
                  , IMPS_CD
                  , BANK_FILIN_BRKDN
                  , WDRW_REQ_AMT
                  , INV_GUNSU
                  , INV_DT
                  , STAT
                  , CL
                  , REG_DM
                  , REG_MAN
                  , UPD_DM
                  , UPD_MAN
                  , BIRTH
                  , BANK_ACCNT_NO
                  , IDNTT
                  )
             SELECT SEQ
                  , ACCNT_NO
                  , INV_NO
                  , PAYR_NO
                  , BANK_CD
                  , IMPS_CD
                  , BANK_FILIN_BRKDN
                  , WDRW_REQ_AMT
                  , INV_GUNSU
                  , CASE WHEN TRUNC( SYSDATE -  TO_DATE(INV_DT) ,1)  <![CDATA[<]]> 0
                         THEN INV_DT
                         ELSE TO_CHAR(SYSDATE,'YYYYMMDD')
                     END INV_DT
                  , STAT
                  , CL
                  , REG_DM
                  , REG_MAN
                  , UPD_DM
                  , UPD_MAN
                  , BIRTH
                  , BANK_ACCNT_NO
                  , IDNTT
          FROM WDRW_REQ_CALL_CENTER
         WHERE WDRW_REQ_YN = 'N'
           AND ACCNT_NO = #{accnt_no}
           AND DEL_FG IS NULL


    </insert>

    <update id="DlwCmsMap.updateWdrwReqYn" parameterType="map">
        <!-- DM sql-id : updateWdrwReqYn -->

        UPDATE /* DlwCmsMap.updateWdrwReqYn */
               WDRW_REQ_CALL_CENTER
           SET WDRW_REQ_YN = 'Y'
         WHERE ACCNT_NO = #{accnt_no}
           AND WDRW_REQ_YN = 'N'
           AND DEL_FG IS NULL
    </update>



    <select id="DlwCmsMap.getDlwCombErrList" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectCombErrList -->


        SELECT /* DlwCmsMap.getDlwCombErrList */
               MPA.ACCNT_NO
             , MBR.MEM_NM
           <!--   , CONVERT(VARCHAR(MAX), DecryptByKeyAutoCert( cert_ID('CertKeyProtect'), NULL, MBR.IDN_NO)) IDN_NO    -->
           ,MBR.IDN_NO
             <if test="wdrw_gubun == null or wdrw_gubun == ''">
                , CM.ICHAE_DT ICHAE_DT
             </if>
             <if test="wdrw_gubun != null and wdrw_gubun != ''">
                 <if test="wdrw_gubun == 'Card'">
                    ,CM.PAY_DT
                 </if>
             </if>
          FROM MEMBER MBR
         INNER JOIN MEM_PROD_ACCNT MPA
            ON MBR.MEM_NO = MPA.MEM_NO
           AND MPA.DEL_FG = 'N'
         INNER JOIN PRODUCT P
            ON MPA.PROD_CD = P.PROD_CD
         INNER JOIN HP_CALL_HIST HP
            ON MPA.ACCNT_NO = HP.ACCNT_NO
           AND HP.SEQ =FN_HP_CALL_HIST_SEQ(HP.ACCNT_NO)
          <if test="wdrw_gubun == null or wdrw_gubun == ''">
          LEFT OUTER JOIN CMS_MEM CM
            ON MPA.ACCNT_NO = CM.ACCNT_NO
           AND CM.DEL_FG = 'N'
          </if>
          <if test="wdrw_gubun != null and wdrw_gubun != ''">
              <if test="wdrw_gubun == 'Card'">
                 LEFT OUTER JOIN CARD_MEM CM
                   ON MPA.ACCNT_NO = CM.ACCNT_NO
                  AND CM.DEL_FG = 'N'
              </if>
          </if>
          LEFT OUTER JOIN (SELECT ACCNT_NO
                             FROM WDRW_REQ
                            WHERE STAT IN ('00', '01')
                            GROUP BY ACCNT_NO) WR
            ON MPA.ACCNT_NO = WR.ACCNT_NO
          LEFT OUTER JOIN (SELECT SUM(PD.END_NO - PD.ST_NO + 1) EXPR_NO
                                , PD.PROD_CD PROD_CD
                             FROM PRODUCT_DTL PD
                            WHERE ALLT_AMT<![CDATA[>]]>0
                            GROUP BY PD.PROD_CD) ALLT
            ON P.PROD_CD = ALLT.PROD_CD
          LEFT OUTER JOIN (SELECT SUM(PD.END_NO - PD.ST_NO + 1) EXPR_NO
                                , PD.PROD_CD PROD_CD
                             FROM PRODUCT_DTL PD
                            WHERE ADD_AMT<![CDATA[>]]>0
                            GROUP BY PD.PROD_CD) ADDAMT
            ON P.PROD_CD = ADDAMT.PROD_CD
          LEFT OUTER JOIN PAY_MNG PAY
            ON MPA.ACCNT_NO = PAY.ACCNT_NO
           AND PAY.DEL_FG = 'N'
           AND PAY.NO = FN_PAY_MNG(MPA.ACCNT_NO)
          LEFT OUTER JOIN PAY_MNG_DTL PAY1
            ON MPA.ACCNT_NO = PAY1.ACCNT_NO
           AND PAY1.DEL_FG = 'N'
           AND PAY1.NO = FN_PAY_MNG_DTL (MPA.ACCNT_NO)
          LEFT OUTER JOIN PAY_MNG_DTL1 PAY2
            ON MPA.ACCNT_NO = PAY2.ACCNT_NO
           AND PAY2.DEL_FG = 'N'
           AND PAY2.NO =  FN_PAY_MNG_DTL1(MPA.ACCNT_NO)
         WHERE 1=1
           AND MBR.DEL_FG = 'N'
           AND NVL(P.PROD_CL, '00') = '03'
           AND CM.ACCNT_NO IS NOT NULL
           AND WR.ACCNT_NO IS NULL
           AND FN_ACCNT_STAT (MPA.ACCNT_NO) = 'Y'
             <if test="wdrw_gubun == null or wdrw_gubun == ''">
                AND NVL(MPA.PAY_MTHD, '01') = '04'
             </if>
             <if test="wdrw_gubun != null and wdrw_gubun != ''">
                 <if test="wdrw_gubun == 'Card'">
                    AND NVL(MPA.PAY_MTHD, '01') = '06'
                 </if>
             </if>
           AND HP.STAT IN ('01','011')
           AND NOT (PAY.NO = P.EXPR_NO AND PAY1.NO = ALLT.EXPR_NO AND PAY2.NO = ADDAMT.EXPR_NO)
           AND
           (
            (
              NVL(ADDAMT.EXPR_NO, 0)<![CDATA[>]]>0 AND
              (
                (PAY.NO != P.EXPR_NO AND PAY1.NO != ALLT.EXPR_NO AND PAY2.NO != ADDAMT.EXPR_NO AND (PAY.NO != PAY1.NO OR PAY1.NO != PAY2.NO OR PAY.NO != PAY2.NO))
                OR
                (PAY.NO = P.EXPR_NO AND PAY1.NO != ALLT.EXPR_NO AND PAY2.NO != ADDAMT.EXPR_NO AND PAY1.NO != PAY2.NO)
                OR
                (PAY1.NO = ALLT.EXPR_NO AND PAY2.NO != ADDAMT.EXPR_NO)
                OR
                (PAY.NO != P.EXPR_NO AND PAY1.NO != ALLT.EXPR_NO AND PAY2.NO = ADDAMT.EXPR_NO AND PAY.NO != PAY1.NO)
              )
            )
            OR
            (
              NVL(ADDAMT.EXPR_NO, 0) = 0 AND
              (
                (PAY.NO != P.EXPR_NO AND PAY1.NO != ALLT.EXPR_NO AND PAY.NO != PAY1.NO)
              )
            )
           )

        UNION ALL

        SELECT MPA.ACCNT_NO
             , MBR.MEM_NM
           <!--   , CONVERT(VARCHAR(MAX), DecryptByKeyAutoCert( cert_ID('CertKeyProtect'), NULL, MBR.IDN_NO)) IDN_NO  -->
             ,MBR.IDN_NO AS IDN_NO
             <if test="wdrw_gubun == null or wdrw_gubun == ''">
                , CM.ICHAE_DT ICHAE_DT
             </if>
             <if test="wdrw_gubun != null and wdrw_gubun != ''">
                 <if test="wdrw_gubun == 'Card'">
                    , CM.PAY_DT ICHAE_DT
                 </if>
             </if>
          FROM MEMBER MBR
         INNER JOIN MEM_PROD_ACCNT MPA
            ON MBR.MEM_NO = MPA.MEM_NO
           AND MPA.DEL_FG = 'N'
         INNER JOIN PRODUCT P
            ON MPA.PROD_CD = P.PROD_CD
         INNER JOIN HP_CALL_HIST HP
            ON MPA.ACCNT_NO = HP.ACCNT_NO
           AND HP.SEQ = FN_HP_CALL_HIST_SEQ(HP.ACCNT_NO)
             <if test="wdrw_gubun == null or wdrw_gubun == ''">
                LEFT OUTER JOIN CMS_MEM CM ON MPA.ACCNT_NO = CM.ACCNT_NO AND CM.DEL_FG = 'N'
             </if>
             <if test="wdrw_gubun != null and wdrw_gubun != ''">
                 <if test="wdrw_gubun == 'Card'">
                    LEFT OUTER JOIN CARD_MEM CM ON MPA.ACCNT_NO = CM.ACCNT_NO AND CM.DEL_FG = 'N'
                 </if>
             </if>
          LEFT OUTER JOIN (SELECT ACCNT_NO
                             FROM WDRW_REQ
                            WHERE STAT IN ('00', '01')
                            GROUP BY ACCNT_NO) WR
            ON MPA.ACCNT_NO = WR.ACCNT_NO
          LEFT OUTER JOIN (SELECT SUM(PD.END_NO - PD.ST_NO + 1) EXPR_NO
                                , PD.PROD_CD PROD_CD
                             FROM PRODUCT_DTL PD
                            WHERE ALLT_AMT<![CDATA[>]]>0
                            GROUP BY PD.PROD_CD) ALLT
            ON P.PROD_CD = ALLT.PROD_CD
          LEFT OUTER JOIN (SELECT SUM(PD.END_NO - PD.ST_NO + 1) EXPR_NO
                                , PD.PROD_CD PROD_CD
                             FROM PRODUCT_DTL PD
                            WHERE ADD_AMT<![CDATA[>]]>0
                            GROUP BY PD.PROD_CD) ADDAMT
            ON P.PROD_CD = ADDAMT.PROD_CD
          LEFT OUTER JOIN PAY_MNG_DTL PAY
            ON MPA.ACCNT_NO = PAY.ACCNT_NO
           AND PAY.DEL_FG = 'N'
           AND PAY.NO =FN_PAY_MNG_DTL(MPA.ACCNT_NO)
          LEFT OUTER JOIN PAY_MNG_DTL1 PAY1
            ON MPA.ACCNT_NO = PAY1.ACCNT_NO
           AND PAY1.DEL_FG = 'N'
           AND PAY1.NO = FN_PAY_MNG_DTL1(MPA.ACCNT_NO)
         WHERE 1 = 1
           AND MBR.DEL_FG = 'N'
           AND NVL(P.PROD_CL, '00') = '03'
           AND CM.ACCNT_NO IS NOT NULL
           AND WR.ACCNT_NO IS NULL
           AND FN_ACCNT_STAT (MPA.ACCNT_NO) != 'Y'
           AND FN_EVENT(MPA.ACCNT_NO) != '청약철회'
             <if test="wdrw_gubun == null or wdrw_gubun == ''">
                AND NVL(MPA.PAY_MTHD, '01') = '04'
             </if>
             <if test="wdrw_gubun != null and wdrw_gubun != ''">
                 <if test="wdrw_gubun == 'Card'">
                    AND NVL(MPA.PAY_MTHD, '01') = '06'
                 </if>
             </if>
           AND HP.STAT IN ('01','011')
           AND NOT (PAY.NO = ALLT.EXPR_NO AND PAY1.NO = ADDAMT.EXPR_NO)
           AND
           (
            (ADDAMT.EXPR_NO IS NOT NULL AND PAY.NO != PAY1.NO AND PAY.NO != ALLT.EXPR_NO AND PAY1.NO != ADDAMT.EXPR_NO)
           )
    </select>

    <select id="DlwCmsMap.getDlwTempMember" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectCMSTempMember -->


        SELECT /* DlwCmsMap.getDlwTempMember */
               TBL.ACCNT_NO
             , TBL.MEM_NM
             , TBL.HOME_TEL
             , TBL.PROD_NM
             , TBL.PROD_CD
             , TBL.CELL
             , TBL.EMAIL
             , TBL.MEM_NO
             , TBL.ICHAE_DT
             , TBL.ICHAE_LIMIT_GUNSU
             , TBL.MON_PAY_AMT
             , TBL.EXPR_NO
             , TBL.DEL_STAT
             , TBL.LAST_NO
             , TBL.JOIN_CL
             , TBL.PRE_PAY_GUNSU
             , TBL.TMM_ACCNT_NO
             , TBL.CMS_APP_YN
             , TBL.ICHAE_DT1
             , TBL.CARD_NM
             , TBL.CARD_NO
             , TBL.PAY_DT
             , TBL.EXPIRE_DATE
             , TBL.INV_DT
             , TBL.CARD_CD
             , TBL.BANK_CD
             , TBL.BANK_NM
             , TBL.BANK_ACCNT_NO
             , TBL.IDN_NO
             , TBL.WDRW_NO
             , TBL.BID
          FROM (SELECT CMEM.ACCNT_NO
                     , ACCNT.MEM_NM
                     , ACCNT.HOME_TEL
                     , PROD.PROD_NM
                     , PROD.PROD_CD
                     , ACCNT.CELL
                     , NVL(ACCNT.EMAIL,'lifeway@daemyung.com') EMAIL
                     <if test="wdrw_gubun == null or wdrw_gubun == ''">
                     , CMEM.MEM_NO
                     , CMEM.ICHAE_DT
                     , CMEM.ICHAE_LIMIT_GUNSU
                     </if>
                     <if test="wdrw_gubun != null and wdrw_gubun != ''">
                         <if test="wdrw_gubun == 'Card'">
                     , '' MEM_NO
                     , '' ICHAE_DT
                     , '' ICHAE_LIMIT_GUNSU
                         </if>
                     </if>
                     , CASE WHEN PROD.PAY_TYPE = '001'
                            THEN PROD.MON_PAY_AMT
                            ELSE NVL((SELECT MONTH_PAY_AMT + ALLT_AMT + ADD_AMT
                                           FROM PRODUCT_DTL
                                          WHERE PROD_CD = ACCNT.PROD_CD
                                            AND 1 BETWEEN ST_NO
                                            AND END_NO), 0)
                        END AS MON_PAY_AMT
                     , PROD.EXPR_NO - ACCNT.NEW_CHAN_GUNSU AS EXPR_NO
                     , FN_YEN_CHE (CMEM.ACCNT_NO) AS DEL_STAT
                     , 0 AS LAST_NO
                     , ACCNT.JOIN_CL
                     , FN_ACCNT_STAT (CMEM.ACCNT_NO) AS JOIN_STAT
                     , CASE WHEN CMEM.PRE_PAY_YN = 'Y'
                            THEN CMEM.PRE_PAY_GUNSU
                            WHEN PROD.PROD_CD IN (SELECT PROD_CD
                                                    FROM PRODUCT
                                                   WHERE PROD_NM LIKE '%격월납%')
                            THEN 2
                            ELSE 1
                        END PRE_PAY_GUNSU
                     , '' AS TMM_ACCNT_NO
                     , '' AS CMS_APP_YN
                     , '' AS  ICHAE_DT1
                     , (SELECT NVL(MAX(NO),0)
                          FROM PAY_MNG
                         WHERE ACCNT_NO = ACCNT.ACCNT_NO
                           AND DEL_FG = 'N') AS PAY_CNT
                     <if test="wdrw_gubun == null or wdrw_gubun == ''">
                     , '' AS CARD_NM
                     , '' AS CARD_NO
                     , '' AS PAY_DT
                     , '' AS EXPIRE_DATE
                     , '' AS INV_DT
                     , '' AS CARD_CD
                     , CMEM.BANK_CD
                     , FN_COM_NM ('63', CMEM.BANK_CD) AS  BANK_NM
                     , WDRW_CNT.CNT WDRW_NO
                     , CMEM.BANK_ACCNT_NO AS BANK_ACCNT_NO
                     , CMEM.BIRTH IDN_NO
                     , '' BID
                     ,HP.STAT
                     , case when WDRW.accnt_no IS NULL then 'Y' else 'N' end bit1
                     , case when CALLCENTER.ACCNT_NO IS NULL then 'Y' else 'N' end bit2
                     , case when VAD.ACCNT_NO IS NULL then 'Y' else 'N' end bit3 --

                  FROM (select /*+INDEX(cms_mem IDX_CMS_MEM_FLAG) */ * from cms_mem where del_fg = 'N') CMEM


                </if>
                <if test="wdrw_gubun != null and wdrw_gubun != ''">
                    <if test="wdrw_gubun == 'Card'">
                     , FN_COM_NM('0120', CMEM.CARD_CD) CARD_NM
                <!--     , CONVERT(VARCHAR(MAX), DecryptByKeyAutoCert( cert_ID('CertKeyProtect'), NULL, CMEM.CARD_NO)) AS CARD_NO  -->
                     , CMEM.CARD_NO AS  CARD_NO
                     , CMEM.PAY_DT
                     , CMEM.EXPIRE_DATE
                     , CMEM.PAY_DT AS INV_DT
                     , CMEM.CARD_CD
                     , '' AS BANK_CD
                     , '' AS BANK_NM
                     , '' AS BANK_ACCNT_NO
                     , '' AS IDN_NO
                     , (SELECT COUNT(SEQ)
                         FROM CARD_WDRW_REQ
                        WHERE ACCNT_NO = CMEM.ACCNT_NO) AS WDRW_NO
                     , CMEM.BID
                     ,HP.STAT
                     , case when WDRW.accnt_no IS NULL then 'Y' else 'N' end bit1
                     , case when CALLCENTER.ACCNT_NO IS NULL then 'Y' else 'N' end bit2
                     , case when VAD.ACCNT_NO IS NULL then 'Y' else 'N' end bit3 --
                  FROM (select /*+INDEX(CARD_MEM IDX_CMS_MEM_FLAG) */ * from CARD_MEM where del_fg = 'N'
                        AND NVL(BID,'') != ''     /* NICE 결제모듈 BILLKEY 생성된 것만 산출 */
                                  ) CMEM
                    </if>
                </if>
                 INNER JOIN (select /*+INDEX(a IDX_MEM_PROD_ACCNT_FLAG) */ A.ACCNT_NO , A.PROD_CD , A.JOIN_CL , A.NEW_CHAN_GUNSU , MEM.MEM_NM , MEM.email , MEM.CELL , MEM.HOME_TEL
                                           from MEM_PROD_ACCNT a INNER JOIN (select /*+INDEX(member IDX_MEMBER_FLAG) */ * from member where member.del_fg = 'N' ) mem ON a.mem_no = mem.mem_no
                                          where a.del_fg = 'N'
                                         <if test="wdrw_gubun == null or wdrw_gubun == ''">
                                              AND a.PAY_MTHD = '04'
                                           </if>
                                       <if test="wdrw_gubun != null and wdrw_gubun != ''">
                                             <if test="wdrw_gubun == 'Card'">
                                                       AND a.PAY_MTHD = '06'
                                             </if>
                                         </if>
                      ) accnt ON cmem.accnt_no = accnt.accnt_no
                      INNER JOIN (SELECT * FROM PRODUCT ) PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                        <if test="wdrw_gubun == null or wdrw_gubun == ''">
                             LEFT OUTER JOIN (select accnt_no , count(*) cnt
                                          from wdrw_req
                                          group by accnt_no ) wdrw_cnt on cmem.accnt_no = wdrw_cnt.accnt_no
                            LEFT OUTER JOIN (SELECT /*+INDEX(wdrw_req IDX_WDRW_REQ_STAT) */ ACCNT_NO FROM WDRW_REQ WHERE WDRW_REQ.STAT >= '01' and STAT <![CDATA[<=]]> '02') wdrw on cmem.accnt_no = wdrw.accnt_no
                            </if>
                        <if test="wdrw_gubun != null and wdrw_gubun != ''">
                            <if test="wdrw_gubun == 'Card'">
                                     LEFT OUTER JOIN (select accnt_no , count(*) cnt
                                          from card_wdrw_req
                                          group by accnt_no ) wdrw_cnt on cmem.accnt_no = wdrw_cnt.accnt_no
                                      LEFT OUTER JOIN (SELECT /*+INDEX(card_wdrw_req IDX_WDRW_REQ_STAT) */ ACCNT_NO FROM card_wdrw_req WHERE card_wdrw_req.STAT >= '01' and card_wdrw_req.STAT <![CDATA[<=]]> '02') wdrw on cmem.accnt_no = wdrw.accnt_no
                            </if>
                        </if>

                      LEFT OUTER JOIN HP_CALL_HIST hp ON accnt.accnt_no = hp.accnt_no AND HP.SEQ = FN_HP_CALL_HIST_SEQ(HP.ACCNT_NO)
                      LEFT OUTER JOIN (SELECT /*+INDEX(wdrw_req_callcenter IDX_WDRW_REQ_CALLCENTER_REQ_YN) */ ACCNT_NO FROM WDRW_REQ_CALL_CENTER WHERE WDRW_REQ_YN = 'N' AND DEL_FG IS NULL) callcenter on cmem.accnt_no = callcenter.accnt_no
                      LEFT OUTER JOIN (   SELECT VAD.ACCNT_NO
                                            FROM NICE_VRTL_ACCNT_WDRW_REQ_DTL VAD INNER JOIN NICE_VRTL_ACCNT_WDRW_REQ_MST VAM ON VAM.SEQ = VAD.SEQ AND
                                                 ((VAM.STAT = '02' AND VAM.EXPIRY_YYYYMMDD || VAM.EXPIRY_HHMMSS > TO_CHAR(SYSDATE -1/24,'YYYYMMDDHH24MISS') ) OR
                                                   VAM.STAT = '01')          <!-- 01:대기 02:입금안됨 04 :입금완료  . EXPIRY_YYYYMMDD : 만기일자 -->
                                                   ) VAD ON ACCNT.ACCNT_NO = VAD.ACCNT_NO

                WHERE nvl(wdrw_cnt.cnt,0)  <![CDATA[<]]> 3
                  AND HP.STAT IN ('01','011')

           ) TBL
         WHERE BIT1 = 'Y'
              AND BIT2 = 'Y'
              AND BIT3 = 'Y'
              AND TBL.JOIN_STAT = 'Y'
              AND TBL.PAY_CNT = 0



    </select>

    <!-- 카드 오류 회원 -->
    <select id="DlwCmsMap.getDlwErrorMember" parameterType="map" resultType="resultMap">
       <!-- DM sql-id : selectCMSTempMember -->

        SELECT /* DlwCmsMap.getDlwErrorMember */
            A.ACCNT_NO,
            B.MEM_NM,
            B.BRTH_MON_DAY AS IDN_NO,
            B.PROD_NM,
            B.MEM_NO,
            FN_ICHAE_DT(A.ACCNT_NO, B.PAY_MTHD) AS ICHAE_DT,
            A.PAY_AMT AS MON_PAY_AMT,
            (SELECT EXPIRE_DATE FROM CARD_MEM WHERE ACCNT_NO = A.ACCNT_NO AND DEL_FG = 'N') AS EXPIRE_DATE,
            A.CARD_CD,
            A.CARD_NO,
            FN_YEN_CHE(A.ACCNT_NO) AS DEL_STAT,
            A.PAY_CNT AS PRE_PAY_GUNSU,
            0 AS LAST_NO,
            (B. EXPR_NO - B.SPECIAL_DISCOUNT) AS EXPR_NO
        FROM RT_CARD_PAY_LOG A LEFT OUTER JOIN
        USERNPRODUCT_VIEW B ON A.ACCNT_NO = B.ACCNT_NO
        WHERE PAY_DT BETWEEN #{ichae_stt_dt} AND #{ichae_end_dt}
        AND MENU_GBN = '0004' AND RESULT_CODE ='01'
        AND RESULT_MSG IN ('거래거절 재시도요망','시스템장애','전문오류','카드사시스템작업','카드사통신장애','기타자료오류')
        AND A.ACCNT_NO NOT IN (
        SELECT ACCNT_NO FROM RT_CARD_PAY_LOG
        WHERE PAY_DT BETWEEN #{ichae_stt_dt} AND #{ichae_end_dt}
        AND MENU_GBN = '0003')


    </select>
    <select id="DlwCmsMap.getDlwDelayMember" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectCMSDelayMember -->


        SELECT /* DlwCmsMap.getDlwDelayMember */
                TBL.accnt_no
             , TBL.MEM_NO
             , TBL.MEM_NM
             , TBL.HOME_TEL
             , TBL.PROD_NM
             , TBL.PROD_CD
             , TBL.CELL
             , TBL.EMAIL
             , TBL.ICHAE_DT
             , TBL.ICHAE_LIMIT_GUNSU
             , TBL.MON_PAY_AMT
             , TBL.EXPR_NO
             , TBL.DEL_STAT
             , TBL.LAST_NO LAST_NO
             , TBL.PRE_PAY_GUNSU
         , TBL.LAST_NO +  TBL.PRE_PAY_GUNSU AS PAY_NEW_INV_NO
             , TBL.CARD_NM
             , TBL.CARD_NO
             , TBL.PAY_DT
             , TBL.EXPIRE_DATE
             , TBL.INV_DT
             , TBL.CARD_CD
             , TBL.BANK_CD
             , FN_COM_NM ('63', TBL.BANK_CD) AS BANK_NM
             , TBL.BANK_ACCNT_NO
             , TBL.IDN_NO
             , BID
        FROM (SELECT  CMEM.ACCNT_NO
                   , ACCNT.MEM_NM
                   , ACCNT.HOME_TEL
                   , PROD.PROD_NM
                   , PROD.PROD_CD
                   , ACCNT.CELL
                   , NVL(ACCNT.EMAIL,'lifeway@daemyung.com') AS EMAIL
                  <if test="wdrw_gubun == null or wdrw_gubun == ''">
                  , CMEM.MEM_NO
                  , CMEM.ICHAE_DT
                  , CMEM.ICHAE_LIMIT_GUNSU
                  , CMEM.YEN_CHE_PRE_PAY_YN
                  </if>
                  <if test="wdrw_gubun != null and wdrw_gubun != ''">
                      <if test="wdrw_gubun == 'Card'">
                  , '' AS MEM_NO
                  , '' AS ICHAE_DT
                  , '' AS ICHAE_LIMIT_GUNSU
                  , '' AS YEN_CHE_PRE_PAY_YN
                      </if>
                  </if>
                   , CASE WHEN CMEM.YEN_CHE_PRE_PAY_YN = 'Y'
                              THEN CMEM.YEN_CHE_PRE_PAY_GUNSU
                          WHEN PROD.PROD_CD IN (SELECT PROD_CD FROM PRODUCT WHERE PROD_NM LIKE '%격월납%') THEN 2
                              ELSE 1
                     END PRE_PAY_GUNSU
                   , CASE WHEN PROD.PAY_TYPE = '001' THEN PROD.MON_PAY_AMT
                      ELSE NVL((SELECT MONTH_PAY_AMT + ALLT_AMT + ADD_AMT
                                     FROM PRODUCT_DTL
                                    WHERE PROD_CD = ACCNT.PROD_CD AND PAY.NO+1 BETWEEN ST_NO AND END_NO), 0) END MON_PAY_AMT
                   , PROD.EXPR_NO - ACCNT.NEW_CHAN_GUNSU AS EXPR_NO
                   , T2.STAT DEL_STAT
                   , PAY.NO LAST_NO
                 , FN_ACCNT_STAT (CMEM.ACCNT_NO) EVT_ST
                 , CASE WHEN (CMEM.YEN_CHE_PRE_PAY_YN = 'Y')
                              AND
                              (NVL((SELECT COUNT(ACCNT_NO)
                                FROM PAY_MNG
                                WHERE DEL_FG = 'N'
                                  AND ACCNT_NO = CMEM.ACCNT_NO
                                  AND SUBSTR(PAY_DAY,1,8) = TO_CHAR(SYSDATE,'YYYYMMDD')), 0) > 0)
                        THEN '1'
                        ELSE '0'
                   END SRCH_GBN
                  <if test="wdrw_gubun == null or wdrw_gubun == ''">
                       , '' CARD_NM
                       , '' CARD_NO
                       , '' PAY_DT
                       , '' EXPIRE_DATE
                       , '' INV_DT
                       , '' CARD_CD
                       , CMEM.BANK_CD
                       , FN_COM_NM ('63', CMEM.BANK_CD) BANK_NM
                      , cmem.bank_accnt_no AS BANK_ACCNT_NO
                       , CMEM.BIRTH IDN_NO
                       , CMEM.PRE_PAY_YN
                       , '' BID
                       , PAY.PAY_DAY
                       , case when callcenter.accnt_no is null then 'Y' else 'N' end cbit
                    FROM (select /*+INDEX(cms_mem IDX_CMS_MEM_FLAG) */ * from cms_mem where del_fg = 'N' ) CMEM
                  </if>
                  <if test="wdrw_gubun != null and wdrw_gubun != ''">
                      <if test="wdrw_gubun == 'Card'">
                    , FN_COM_NM('0120', CMEM.CARD_CD) CARD_NM

                    , CMEM.CARD_NO AS CARD_NO
                    , CMEM.PAY_DT
                    , CMEM.EXPIRE_DATE
                    , CMEM.PAY_DT INV_DT
                    , CMEM.CARD_CD
                    , '' BANK_CD
                    , '' BANK_NM
                    , '' BANK_ACCNT_NO
                    , '' IDN_NO
                    , CMEM.PRE_PAY_YN
                    , CMEM.BID
                FROM (select /*+INDEX(CARD_MEM IDX_CARD_MEM_FLAG) */ * from CARD_MEM where del_fg = 'N'


                      AND   NVL(CMEM.BID,'') != ''       ) CMEM  <!-- /* NICE 결제모듈 BillKey 생성된 것만 산출 */ -->
                      </if>
                  </if>
                INNER JOIN (select /*+INDEX(a IDX_MEM_PROD_ACCNT_FLAG) */ A.ACCNT_NO , A.PROD_CD , A.JOIN_CL , A.NEW_CHAN_GUNSU , MEM.MEM_NM , MEM.email , MEM.CELL , MEM.HOME_TEL
                                                                 from MEM_PROD_ACCNT a INNER JOIN (select /*+INDEX(member IDX_MEMBER_FLAG) */ * from member where member.del_fg = 'N' ) mem ON a.mem_no = mem.mem_no
                                          where a.del_fg = 'N'
                                          <if test="wdrw_gubun == null or wdrw_gubun == ''">
                                              AND a.pay_mthd = '04'
                                           </if>
                                           <if test="wdrw_gubun != null and wdrw_gubun != ''">
                                                  <if test="wdrw_gubun == 'Card'">
                                                    AND a.pay_mthd = '06'
                                                  </if>
                                              </if>
                                          and a.kstbit = '02' ) accnt ON cmem.accnt_no = accnt.accnt_no
               INNER JOIN (SELECT * FROM PRODUCT WHERE PROD_CL != '03') PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                              INNER JOIN HP_CALL hp ON accnt.accnt_no = hp.accnt_no AND hp.stat in ('01', '011')   <!-- 해피콜 01승인 , 011재승인  -->
                              <if test="wdrw_gubun == null or wdrw_gubun == ''">
                              left outer join (SELECT /*+INDEX(wdrw_req IDX_WDRW_REQ_STAT) */ ACCNT_NO FROM WDRW_REQ WHERE WDRW_REQ.STAT >= '01' and STAT <![CDATA[<=]]> '02') wdrw on cmem.accnt_no = wdrw.accnt_no
                              left outer join (SELECT /*+INDEX(wdrw_req_callcenter IDX_WDRW_REQ_CALLCENTER_REQ_YN) */ ACCNT_NO FROM WDRW_REQ_CALL_CENTER WHERE WDRW_REQ_YN = 'N' AND DEL_FG IS NULL) callcenter on cmem.accnt_no = callcenter.accnt_no
                              </if>
                              <if test="wdrw_gubun != null and wdrw_gubun != ''">
                                   <if test="wdrw_gubun == 'Card'">
                                          left outer join (SELECT /*+INDEX(CARD_wdrw_req IDX_WDRW_REQ_STAT) */ ACCNT_NO FROM CARD_WDRW_REQ WHERE WDRW_REQ.STAT >= '01' and STAT <![CDATA[<=]]> '02') wdrw on cmem.accnt_no = wdrw.accnt_no
                                          left outer join (SELECT /*+INDEX(CARD_wdrw_req_callcenter IDX_WDRW_REQ_CALLCENTER_REQ_YN) */ ACCNT_NO FROM CARD_WDRW_REQ_CALL_CENTER WHERE WDRW_REQ_YN = 'N' AND DEL_FG IS NULL) callcenter on cmem.accnt_no = callcenter.accnt_no
                                   </if>
                              </if>
                              LEFT OUTER JOIN (select com_cd , cd_nm from com_cd where grp_cd = '63') bnm on cmem.bank_cd = bnm.com_cd
                              LEFT OUTER JOIN (   SELECT VAD.ACCNT_NO
                                       FROM NICE_VRTL_ACCNT_WDRW_REQ_DTL VAD INNER JOIN NICE_VRTL_ACCNT_WDRW_REQ_MST VAM ON VAM.SEQ = VAD.SEQ AND
                                             ((VAM.STAT = '02' AND VAM.EXPIRY_YYYYMMDD || VAM.EXPIRY_HHMMSS > TO_CHAR(SYSDATE -1/24,'YYYYMMDDHH24MISS') ) OR
                                                  VAM.STAT = '01')          <!-- 01:대기 02:입금안됨 04 :입금완료  . EXPIRY_YYYYMMDD : 만기일자  -->
                                               ) VAD ON ACCNT.ACCNT_NO = VAD.ACCNT_NO
                              LEFT OUTER JOIN (SELECT accnt_no,
                                                  CASE WHEN yen_che = 0 and yen = 1 then '만기'
                                                      WHEN yen_che = 0 and yen = 0 then '정상'
                                                      WHEN yen_che = 1 and yen = 0 then '당월미납'
                                                      WHEN yen_che > 1 and yen = 0 then to_char(yen_che-1) || '회 연체'
                                                      WHEN yen_che <![CDATA[<]]> 0 and yen = 0 then replace(yen_che, '-', '') || '회 선납'
                                                      WHEN yen_che <![CDATA[<]]> 0 and yen = 1 then '만기' else '' END stat ,
                                                      max_seq  ,
                                                      CASE WHEN yen_che > 1 and yen = 0 then yen_che-1 ELSE 0 END YEN_CNT
                                           FROM ( SELECT m.accnt_no
                                                        ,CASE WHEN (p.expr_no - new_chan_gunsu) > join_no then nvl(join_no, 0)  - nvl(pay_no, 0)
                                                              else nvl((p.expr_no - new_chan_gunsu), 0) - nvl(pay_no, 0) end yen_che
                                                        ,CASE WHEN (p.expr_no - new_chan_gunsu) = pay_no then 1 else 0 end yen
                                                        , r.pay_no max_seq
                                                   FROM (select /*+INDEX(mem_prod_accnt IDX_MEM_PROD_ACCNT_FLAG) */
                                                                accnt_no, trunc(months_between(sysdate -1 ,to_date(substr(join_dt,1,6)||'01'))) + 1 join_no ,
                                                                new_chan_gunsu , prod_cd
                                                           from MEM_PROD_ACCNT where del_fg = 'N'
                                                          <if test="wdrw_gubun == null or wdrw_gubun == ''">
                                                              AND pay_mthd = '04'
                                                           </if>
                                                           <if test="wdrw_gubun != null and wdrw_gubun != ''">
                                                                  <if test="wdrw_gubun == 'Card'">
                                                                    AND pay_mthd = '06'
                                                                  </if>
                                                              </if>

                                                            ) m                  <!-- 구좌테이블 -->
                                                     INNER JOIN PRODUCT p on m.prod_cd = p.prod_cd    <!-- 상품테이블과 조인   -->
                                                LEFT OUTER JOIN (select accnt_no , nvl(max(no), 0) pay_no from PAY_MNG where del_fg = 'N' group by accnt_no ) r on m.accnt_no = r.accnt_no ) t
                                                                    )t2 on cmem.accnt_no = t2.accnt_no
                                 left outer join (select * from pay_mng where del_fg = 'N' ) pay on t2.accnt_no = pay.accnt_no and t2.max_seq = pay.no
             WHERE 1=1
                AND   (
                        cmem.PAY_DAY_FIX_YN = 'N'                                   <!--  이체일만 출금여부가 N이면 상시 출금  -->

                          <if test="wdrw_gubun == null or wdrw_gubun == ''">
                                 OR (cmem.PAY_DAY_FIX_YN = 'Y' AND cmem.ichae_dt=#{ichae_end_dt} )      <!--  이체일만 출금일경우 해당 이체일자에 출금  -->
                          </if>
                          <if test="wdrw_gubun != null and wdrw_gubun != ''">
                              <if test="wdrw_gubun == 'Card'">
                                 OR (cmem.PAY_DAY_FIX_YN = 'Y' AND cmem.pay_dt= #{ichae_end_dt} )      <!--  이체일만 출금일경우 해당 이체일자에 출금  -->
                              </if>
                          </if>

                        )

                        and     wdrw.accnt_no is null
                       AND 0 <![CDATA[<]]> pay.NO                      <!-- 최종입금회차 (납입이력이 있어야함 ????????????)  -->
                       AND  SUBSTR(t2.stat,-2) = '연체'   <!-- /* 수정 : 2회연체 까지 산출 되도록 수정 by lbk_2012_10_05 */ -->
                       <if test="wdrw_gubun == null or wdrw_gubun == ''">   <!-- /* 수정 : 4회연체 까지 산출 되도록 수정 by hjw_2016_05_31 */ -->
                          AND (
                            T2.YEN_CNT  <![CDATA[<=]]>  4 OR (T2.YEN_CNT >= 5 AND CMEM.YEN_CHE_PRE_PAY_YN = 'Y' AND SUBSTR(PAY.PAY_DAY,1,6) >= TO_CHAR(ADD_MONTHS(SYSDATE,-4),'YYYYMM'))
                           )
                       </if>       <!-- 수정 : 연체자 임의지정출금 체크되었고 이번달에 출금되었다면 산출되지 않아야함 by lbk_2013_06_11 -->
                      AND VAD.ACCNT_NO IS NULL             <!-- 가상계좌 청구상태가 아님   -->

             ) TBL

         WHERE 1=1
            and cbit = 'Y' AND SRCH_GBN = '0'





     UNION ALL

        <!-- 결합상품이면서 행사,해약이 아닌 연체건 산출 -->

        SELECT TBL1.ACCNT_NO
             , TBL1.MEM_NO
             , TBL1.MEM_NM
             , TBL1.HOME_TEL
             , TBL1.PROD_NM
             , TBL1.PROD_CD
             , TBL1.CELL
             , TBL1.EMAIL
             , TBL1.ICHAE_DT
             , TBL1.ICHAE_LIMIT_GUNSU
             , TBL1.MON_PAY_AMT
             , TBL1.EXPR_NO
             , TBL1.DEL_STAT
             , TBL1.LAST_NO LAST_NO
             , TBL1.PRE_PAY_GUNSU
              , TBL1.LAST_NO  +  TBL1.PRE_PAY_GUNSU AS PAY_NEW_INV_NO
             , TBL1.CARD_NM
             , TBL1.CARD_NO
             , TBL1.PAY_DT
             , TBL1.EXPIRE_DATE
             , TBL1.INV_DT
             , TBL1.CARD_CD
             , TBL1.BANK_CD
             , FN_COM_NM ('63', TBL1.BANK_CD) BANK_NM
             , TBL1.BANK_ACCNT_NO
             , TBL1.IDN_NO
             , BID
          FROM (SELECT CMEM.ACCNT_NO
                     , ACCNT.MEM_NM
                     , ACCNT.HOME_TEL
                     , PROD.PROD_NM
                     , PROD.PROD_CD
                     , ACCNT.CELL
                     , NVL(ACCNT.EMAIL,'lifeway@daemyung.com') AS EMAIL
                  <if test="wdrw_gubun == null or wdrw_gubun == ''">
                     , CMEM.MEM_NO
                     , CMEM.ICHAE_DT
                     , CMEM.ICHAE_LIMIT_GUNSU
                     , CMEM.YEN_CHE_PRE_PAY_YN
                  </if>
                  <if test="wdrw_gubun != null and wdrw_gubun != ''">
                      <if test="wdrw_gubun == 'Card'">
                    , '' AS MEM_NO
                    , '' AS ICHAE_DT
                    , '' AS ICHAE_LIMIT_GUNSU
                    , '' AS YEN_CHE_PRE_PAY_YN
                      </if>
                  </if>
                    , CASE WHEN CMEM.YEN_CHE_PRE_PAY_YN = 'Y'
                           THEN CMEM.YEN_CHE_PRE_PAY_GUNSU
                           WHEN PROD.PROD_CD IN (SELECT PROD_CD FROM PRODUCT WHERE PROD_NM LIKE '%격월납%')
                           THEN 2
                           ELSE 1
                       END AS PRE_PAY_GUNSU
                  , nvl((SELECT CASE WHEN PD.SCNT = pay.no2 AND PROD.EXPR_NO = PAY.NO THEN 0
                                     WHEN PD.SCNT = pay.no2 THEN MONTH_PAY_AMT
                                     WHEN PROD.EXPR_NO = PAY.NO THEN ALLT_AMT + ADD_AMT
                                     ELSE MONTH_PAY_AMT + ALLT_AMT + ADD_AMT END
                           FROM PRODUCT_DTL
                          WHERE PROD_CD = accnt.PROD_CD AND CASE WHEN PD.SCNT = pay.no2 AND PROD.EXPR_NO = PAY.NO THEN 0
                                                                 WHEN PD.SCNT = pay.no2 THEN PAY.NO + 1
                                                                 WHEN PROD.EXPR_NO = PAY.NO THEN pay.no2 + 1
                                                                 ELSE PAY.NO + 1 END BETWEEN ST_NO AND END_NO), 0) mon_pay_amt
                 , CASE WHEN PD.SCNT = pay.no2 AND PROD.EXPR_NO = PAY.NO THEN PROD.EXPR_NO
                          WHEN PD.SCNT = pay.no2 THEN PROD.EXPR_NO
                          WHEN PROD.EXPR_NO = PAY.NO THEN PD.SCNT
                          ELSE PROD.EXPR_NO END EXPR_NO
                    ,  CASE WHEN PD.SCNT = pay.no2 AND PROD.EXPR_NO = PAY.NO THEN pay.stat
                          WHEN PD.SCNT = pay.no2 THEN pay.stat
                          WHEN PROD.EXPR_NO = PAY.NO THEN pay.stat2
                          ELSE pay.stat END DEL_STAT
                   , CASE WHEN PD.SCNT = pay.no2 AND PROD.EXPR_NO = PAY.NO THEN 0
                          WHEN PD.SCNT = pay.no2 THEN PAY.NO
                          WHEN PROD.EXPR_NO = PAY.NO THEN pay.no2
                          ELSE PAY.NO END last_no

                   , CASE WHEN (
                                (CMEM.YEN_CHE_PRE_PAY_YN = 'Y')
                                AND
                                (
                                NVL((SELECT COUNT(ACCNT_NO)
                                  FROM PAY_MNG
                                  WHERE DEL_FG = 'N'
                                    AND ACCNT_NO = CMEM.ACCNT_NO
                                    AND SUBSTR(PAY_DAY, 1,6) = TO_CHAR(SYSDATE,'YYYYMM')   )   , 0) ||
                                NVL((SELECT COUNT(ACCNT_NO)
                                  FROM PAY_MNG_DTL
                                  WHERE DEL_FG = 'N'
                                    AND ACCNT_NO = CMEM.ACCNT_NO
                                    AND SUBSTR( PAY_DAY, 1,6) = TO_CHAR(SYSDATE,'YYYYMM')), 0) ||
                                NVL((SELECT COUNT(ACCNT_NO)
                                  FROM PAY_MNG_DTL1
                                  WHERE DEL_FG = 'N'
                                    AND ACCNT_NO = CMEM.ACCNT_NO
                                    AND SUBSTR(PAY_DAY,1,6) =  TO_CHAR(SYSDATE,'YYYYMM')), 0)
                                ) > 0
                              )
                          THEN '1'
                          ELSE '0'
                     END SRCH_GBN
                        , CASE WHEN prod.PROD_CD IN ('S9', 'T0', 'X6')      <!-- 스마트라이프429(상조할인) , 스마트라이프297(상조할인) , 대명 스마트라이프 Gold(594)_상조할인 -->
                          THEN 'true'
                          WHEN (
                                ( nvl(PD.SCNT2, 0) > 0 AND    --추가금이 존재하고
                                  (
                                    <!-- PAY : 상조부금 PAY1:할부금 PAY2:추가금 PROD.EXPR_NO : 만기횟수 -->
                                    (PAY.NO = pay.no2 AND pay.no2 = pay.no3 AND PAY.NO != PROD.EXPR_NO)  <!-- 부금,할부금,추가금이존재하고 만기가 아니면-->
                                    OR
                                    (PAY.NO != PROD.EXPR_NO AND pay.no2 = PD.SCNT AND pay.no3 = PD.SCNT2)  <!-- 부금은 만기가아니고 할부,추가금이 만기이면-->
                                    OR
                                    (PAY.NO = PROD.EXPR_NO AND pay.no2 != PD.SCNT AND pay.no3 != PD.SCNT2 AND pay.no2 = pay.no3) <!-- 부금만 만기라면-->
                                    OR
                                    (PAY.NO != PROD.EXPR_NO AND pay.no2 != PD.SCNT AND pay.no3 = PD.SCNT2 AND PAY.NO = pay.no2)  <!-- 추가금만 만기라면-->
                                    OR
                                    (PAY.NO = PROD.EXPR_NO AND pay.no2 != PD.SCNT AND pay.no3 = PD.SCNT2)   <!-- 할부금만 만기가 아니면-->
                                  )
                                )
                            OR
                              (
                                nvl(PD.SCNT2, 0) = 0 AND     <!-- 추가금이 존재하지 않고-->
                                (
                                    (PAY.NO = PROD.EXPR_NO AND pay.no2 != PD.SCNT)
                                    OR
                                    (PAY.NO != PROD.EXPR_NO AND pay.no2 != PD.SCNT AND PAY.NO = pay.no2)
                                    OR
                                    (PAY.NO != PROD.EXPR_NO AND pay.no2 = PD.SCNT)
                                  )
                              )
                           ) THEN 'true' ELSE 'false' END COMB_COND_1

                  <if test="wdrw_gubun == null or wdrw_gubun == ''">
                             , '' AS CARD_NM
                            , '' AS CARD_NO
                           , '' AS PAY_DT
                           , '' AS EXPIRE_DATE
                           , '' AS INV_DT
                           , '' AS CARD_CD
                           , CMEM.BANK_CD
                           , FN_COM_NM ('63', CMEM.BANK_CD) AS BANK_NM
                           , CMEM.BANK_ACCNT_NO AS BANK_ACCNT_NO
                           , CMEM.BIRTH AS IDN_NO

                           , CMEM.PRE_PAY_YN
                           , '' BID
                           , CASE WHEN PD.SCNT = pay.no2 AND PROD.EXPR_NO = PAY.NO THEN payday
                          WHEN PD.SCNT = pay.no2 THEN payday
                          WHEN PROD.EXPR_NO = PAY.NO THEN payday2
                          ELSE payday END PAY_DAY
                                , case when vad.accnt_no is null then 'Y' else 'N' end vbit
                        , case when callcenter.accnt_no is null then 'Y' else 'N' end cbit
                    FROM (select /*+INDEX(cms_mem IDX_CMS_MEM_FLAG) */ * from cms_mem where del_fg = 'N' ) CMEM

                  </if>
                  <if test="wdrw_gubun != null and wdrw_gubun != ''">
                      <if test="wdrw_gubun == 'Card'">
                            , FN_COM_NM('0120', CMEM.CARD_CD) AS CARD_NM
                            , CMEM.CARD_NO  AS CARD_NO
                            , CMEM.PAY_DT
                            , CMEM.EXPIRE_DATE
                            , CMEM.PAY_DT  AS INV_DT
                            , CMEM.CARD_CD
                            , '' AS BANK_CD
                            , '' AS BANK_NM
                            , '' AS BANK_ACCNT_NO
                            , '' AS IDN_NO
                            , CMEM.PRE_PAY_YN
                           , '' BID
                           , CASE WHEN PD.SCNT = pay.no2 AND PROD.EXPR_NO = PAY.NO THEN payday
                        FROM (select /*+INDEX(card_mem IDX_CMS_MEM_FLAG) */ * from card_mem where del_fg = 'N'    AND NVL(CMEM.BID,'') != ''  ) CMEM      <!-- /* NICE 결제모듈 BillKey 생성된 것만 산출 */ -->

                      </if>
                  </if>
                INNER JOIN (select /*+INDEX(a IDX_MEM_PROD_ACCNT_FLAG) */ A.ACCNT_NO , A.PROD_CD , A.JOIN_CL , A.NEW_CHAN_GUNSU , MEM.MEM_NM , MEM.email , MEM.CELL , MEM.HOME_TEL
                   from MEM_PROD_ACCNT a INNER JOIN (select /*+INDEX(member IDX_MEMBER_FLAG) */ * from member where member.del_fg = 'N' ) mem ON a.mem_no = mem.mem_no
                  where a.del_fg = 'N'
                                      <if test="wdrw_gubun == null or wdrw_gubun == ''">
                                        AND  a.pay_mthd = '04'
                                      </if>
                                      <if test="wdrw_gubun != null and wdrw_gubun != ''">
                                          <if test="wdrw_gubun == 'Card'">
                                         AND a.PAY_MTHD = '06'
                                          </if>
                                      </if>

                                       and a.kstbit = '02' ) accnt ON cmem.accnt_no = accnt.accnt_no
      INNER JOIN (SELECT * FROM PRODUCT WHERE PROD_CL = '03') PROD ON ACCNT.PROD_CD = PROD.PROD_CD
      INNER JOIN HP_CALL hp ON accnt.accnt_no = hp.accnt_no AND hp.stat in ('01', '011')   <!-- 해피콜 01승인 , 011재승인  -->
      left outer join (SELECT /*+INDEX(wdrw_req IDX_WDRW_REQ_STAT) */ ACCNT_NO FROM WDRW_REQ WHERE WDRW_REQ.STAT >= '01' and STAT <![CDATA[<=]]> '02') wdrw on cmem.accnt_no = wdrw.accnt_no
      left outer join (SELECT /*+INDEX(wdrw_req_callcenter IDX_WDRW_REQ_CALLCENTER_REQ_YN) */ ACCNT_NO FROM WDRW_REQ_CALL_CENTER WHERE WDRW_REQ_YN = 'N' AND DEL_FG IS NULL) callcenter on cmem.accnt_no = callcenter.accnt_no
      LEFT OUTER JOIN (select com_cd , cd_nm from com_cd where grp_cd = '63') bnm on cmem.bank_cd = bnm.com_cd
      LEFT OUTER JOIN (   SELECT VAD.ACCNT_NO
               FROM NICE_VRTL_ACCNT_WDRW_REQ_DTL VAD INNER JOIN NICE_VRTL_ACCNT_WDRW_REQ_MST VAM ON VAM.SEQ = VAD.SEQ AND
                     ((VAM.STAT = '02' AND VAM.EXPIRY_YYYYMMDD || VAM.EXPIRY_HHMMSS > TO_CHAR(sysdate -1 /24,'YYYYMMDDHH24MISS') ) OR
                          VAM.STAT = '01')          <!-- 01:대기 02:입금안됨 04 :입금완료  . EXPIRY_YYYYMMDD : 만기일자 -->
                       ) VAD ON ACCNT.ACCNT_NO = VAD.ACCNT_NO
        LEFT OUTER JOIN ( select prod_cd , sum(case when allt_amt > 0 then end_no - st_no + 1 else 0 end) scnt
                                                               , sum(case when add_amt > 0 then end_no - st_no + 1 else 0 end) scnt2
                                                  from product_dtl
                                              group by prod_cd ) PD on prod.prod_cd = pd.prod_cd
         LEFT OUTER JOIN (SELECT accnt_no,
                          CASE WHEN yen_che = 0 and yen = 1 then '만기'
                              WHEN yen_che = 0 and yen = 0 then '정상'
                              WHEN yen_che = 1 and yen = 0 then '당월미납'
                              WHEN yen_che > 1 and yen = 0 then to_char(yen_che-1) || '회 연체'
                              WHEN yen_che <![CDATA[<]]> 0 and yen = 0 then replace(yen_che, '-', '') || '회 선납'
                              WHEN yen_che <![CDATA[<]]> 0 and yen = 1 then '만기' else '' END stat ,
                              max_seq no  ,  payday ,
                          CASE WHEN yen_che2 = 0 and yen2 = 1 then '만기'
                              WHEN yen_che2 = 0 and yen2 = 0 then '정상'
                              WHEN yen_che2 = 1 and yen2 = 0 then '당월미납'
                              WHEN yen_che2 > 1 and yen2 = 0 then to_char(yen_che2-1) || '회 연체'
                              WHEN yen_che2 <![CDATA[<]]> 0 and yen2 = 0 then replace(yen_che2, '-', '') || '회 선납'
                              WHEN yen_che2 <![CDATA[<]]> 0 and yen2 = 1 then '만기' else '' END stat2 ,
                              max_seq2 no2  ,  payday2 ,
                          CASE WHEN yen_che3 = 0 and yen3 = 1 then '만기'
                              WHEN yen_che3 = 0 and yen3 = 0 then '정상'
                              WHEN yen_che3 = 1 and yen3 = 0 then '당월미납'
                              WHEN yen_che3 > 1 and yen3 = 0 then to_char(yen_che3-1) || '회 연체'
                              WHEN yen_che3 <![CDATA[<]]> 0 and yen3 = 0 then replace(yen_che3, '-', '') || '회 선납'
                              WHEN yen_che3 <![CDATA[<]]> 0 and yen3 = 1 then '만기' else '' END stat3 ,
                              max_seq3 no3 , payday3
                   FROM ( SELECT m.accnt_no
                                ,CASE WHEN (p.expr_no - new_chan_gunsu) > join_no then nvl(join_no, 0)  - nvl(r.pay_no, 0)
                                      else nvl((p.expr_no - new_chan_gunsu), 0) - nvl(r.pay_no, 0) end yen_che
                                ,CASE WHEN (p.expr_no - new_chan_gunsu) = r.pay_no then 1 else 0 end yen
                                , r.pay_no max_seq , r.pay_day payday
                                ,CASE WHEN (p.expr_no - new_chan_gunsu) > join_no then nvl(join_no, 0)  - nvl(r2.pay_no, 0)
                                      else nvl((p.expr_no - new_chan_gunsu), 0) - nvl(r2.pay_no, 0) end yen_che2
                                ,CASE WHEN (p.expr_no - new_chan_gunsu) = r2.pay_no then 1 else 0 end yen2
                                , r2.pay_no max_seq2 , r2.pay_day payday2
                                ,CASE WHEN (p.expr_no - new_chan_gunsu) > join_no then nvl(join_no, 0)  - nvl(r3.pay_no, 0)
                                      else nvl((p.expr_no - new_chan_gunsu), 0) - nvl(r3.pay_no, 0) end yen_che3
                                ,CASE WHEN (p.expr_no - new_chan_gunsu) = r3.pay_no then 1 else 0 end yen3
                                , r3.pay_no max_seq3  , r3.pay_day payday3
                           FROM (select /*+INDEX(mem_prod_accnt IDX_MEM_PROD_ACCNT_FLAG) */
                                        accnt_no, trunc(months_between(sysdate -1,to_date(substr(join_dt,1,6)||'01'))) + 1 join_no ,
                                        new_chan_gunsu , prod_cd
                                   from MEM_PROD_ACCNT where del_fg = 'N'


                                                   <if test="wdrw_gubun == null or wdrw_gubun == ''">
                                                         and pay_mthd = '04'
                                                      </if>
                                                      <if test="wdrw_gubun != null and wdrw_gubun != ''">
                                                          <if test="wdrw_gubun == 'Card'">
                                                             and pay_mthd = '06'
                                                          </if>
                                                      </if>

                                                   ) m                  <!-- 구좌테이블 -->
                             INNER JOIN PRODUCT p on m.prod_cd = p.prod_cd    <!-- 상품테이블과 조인  -->
                        LEFT OUTER JOIN (select accnt_no , nvl(max(no), 0) pay_no , max(pay_day) pay_day from PAY_MNG where del_fg = 'N' group by accnt_no ) r  on m.accnt_no = r.accnt_no
                        LEFT OUTER JOIN (select accnt_no , nvl(max(no), 0) pay_no , max(pay_day) pay_day from PAY_MNG_dtl where del_fg = 'N' group by accnt_no ) r2 on m.accnt_no = r2.accnt_no
                        LEFT OUTER JOIN (select accnt_no , nvl(max(no), 0) pay_no , max(pay_day) pay_day from PAY_MNG_dtl1 where del_fg = 'N' group by accnt_no ) r3 on m.accnt_no = r3.accnt_no

                        ) t
                                            ) pay on cmem.accnt_no = pay.accnt_no
                WHERE 1=1


                  <if test="wdrw_gubun == null or wdrw_gubun == ''">
                   <!-- AND left(convert(varchar,pay.PAY_DAY,112),6) >= left(convert(varchar,DATEADD(Month, -3, getdate()),112),6)-->
                  </if>
                  <!-- 조건추가 : 콜센터 산출중인건은 조회되지 않도록 수정 BY LBK_2013_09_10 -->


                   <!-- /* 이체일만 산출 체크시 산출 이체일자  마지막 날인 구좌만 산출 */ -->

                 and   (    CMEM.PAY_DAY_FIX_YN = 'N'
                           <if test="wdrw_gubun == null or wdrw_gubun == ''">
                                 OR (cmem.PAY_DAY_FIX_YN = 'Y' AND cmem.ichae_dt=#{ichae_end_dt} )      <!--  이체일만 출금일경우 해당 이체일자에 출금  -->
                          </if>
                          <if test="wdrw_gubun != null and wdrw_gubun != ''">
                              <if test="wdrw_gubun == 'Card'">
                                 OR (cmem.PAY_DAY_FIX_YN = 'Y' AND cmem.pay_dt= #{ichae_end_dt} )      <!--  이체일만 출금일경우 해당 이체일자에 출금  -->
                              </if>
                          </if>
                   )
                   <!-- /* 이체일자 조건에 맞게 산출   - 2012.09.25 by lgl 다시 주석처리함 */ -->
                  <!-- AND CONVERT (INT, cmem.ichae_dt) BETWEEN #se.ichaeSt# AND #se.ichaeEd#  -->
                  AND 0 <![CDATA[<]]> PAY.NO
                  AND wdrw.accnt_no is null
                    AND hp.stat in ('01','011' )
               ) TBL1
         WHERE 1=1

         AND  vbit = 'Y' AND
            cbit = 'Y' and
         COMB_COND_1 = 'true'
                    <!-- /* 선납, 정상 중복 산출 방지 */ -->
                AND SUBSTR(TBL1.DEL_stat,-2) = '연체'
            <!-- /* 수정 : 2회연체 까지 산출 되도록 수정 by lbk_2012_10_05 */ -->
                        <!-- /* 수정 : 4회연체 까지 산출 되도록 수정 by hjw_2016_05_31 */ -->
            <if test="wdrw_gubun == null or wdrw_gubun == ''">
            AND (
               TO_NUMBER(SUBSTR (TBL1.DEL_STAT,1, INSTR( TBL1.DEL_STAT,'회')-1))  <![CDATA[<=]]>   4
                OR (TO_NUMBER(SUBSTR(TBL1.DEL_STAT,1, INSTR(TBL1.DEL_STAT,'회')-1)) >= 5 AND TBL1.YEN_CHE_PRE_PAY_YN = 'Y' AND SUBSTR(TBL1.PAY_DAY,1,6) >= TO_CHAR(ADD_MONTHS(SYSDATE,-4),'YYYYMM')) )
            </if>
            <!-- 수정 : 연체자 임의지정출금 체크되어고 이번달에 출금되었다면 산출되지 않아야함 by lbk_2013_06_11 -->
     UNION ALL

        <!-- 결합상품이면서 행사,해약인 연체건  산출 -->
        SELECT TBL.ACCNT_NO
             , TBL.MEM_NO
             , TBL.MEM_NM
             , TBL.HOME_TEL
             , TBL.PROD_NM
             , TBL.PROD_CD
             , TBL.CELL
             , TBL.EMAIL
             , TBL.ICHAE_DT
             , TBL.ICHAE_LIMIT_GUNSU
             , TBL.MON_PAY_AMT
             , TBL.EXPR_NO
             , TBL.DEL_STAT
             , TBL.LAST_NO LAST_NO
             , TBL.PRE_PAY_GUNSU
             , TBL.LAST_NO  +  TBL.PRE_PAY_GUNSU AS PAY_NEW_INV_NO
             , TBL.CARD_NM
             , TBL.CARD_NO
             , TBL.PAY_DT
             , TBL.EXPIRE_DATE
             , TBL.INV_DT
             , TBL.CARD_CD
             , TBL.BANK_CD
             , FN_COM_NM ('63', TBL.BANK_CD) BANK_NM
             , TBL.BANK_ACCNT_NO
             , TBL.IDN_NO
             , BID
          FROM (SELECT  CMEM.ACCNT_NO
                     , PAY.MEM_NM
                     , PAY.HOME_TEL
                     , PAY.PROD_NM
                     , PAY.PROD_CD
                     , PAY.CELL
                     , NVL(PAY.EMAIL,'lifeway@daemyung.com') AS EMAIL
                  <if test="wdrw_gubun == null or wdrw_gubun == ''">
                     , CMEM.MEM_NO
                     , CMEM.ICHAE_DT
                     , CMEM.ICHAE_LIMIT_GUNSU
                     , CMEM.YEN_CHE_PRE_PAY_YN
                  </if>
                  <if test="wdrw_gubun != null and wdrw_gubun != ''">
                      <if test="wdrw_gubun == 'Card'">
                     , '' AS MEM_NO
                     , '' AS ICHAE_DT
                     , '' AS ICHAE_LIMIT_GUNSU
                     , '' AS YEN_CHE_PRE_PAY_YN
                      </if>
                  </if>
                     , CASE WHEN CMEM.YEN_CHE_PRE_PAY_YN = 'Y'
                            THEN CMEM.YEN_CHE_PRE_PAY_GUNSU
                            WHEN PAY.PROD_CD IN (SELECT PROD_CD FROM PRODUCT WHERE PROD_NM LIKE '%격월납%')
                            THEN 2
                            ELSE 1
                         END AS PRE_PAY_GUNSU
                     , nvl((SELECT CASE WHEN ADDAMT.EXPR_NO IS NULL THEN CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) THEN 0
                                                                          ELSE ALLT_AMT
                                                                     END
                                    ELSE CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN 0
                                              WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO != nvl(PAY.NO3, 0) THEN ADD_AMT
                                              WHEN ALLT.EXPR_NO != nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN ALLT_AMT
                                              ELSE ALLT_AMT + ADD_AMT
                                         END
                               END
                             FROM PRODUCT_DTL
                            WHERE PROD_CD = PAY.PROD_CD AND CASE WHEN ADDAMT.EXPR_NO IS NULL THEN CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) THEN 0
                                                                                                       ELSE nvl(PAY.NO2, 0) + 1
                                                                                                  END
                                                                 ELSE CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN 0
                                                                           WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO != nvl(PAY.NO3, 0) THEN nvl(PAY.NO3, 0)+1
                                                                           WHEN ALLT.EXPR_NO != nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN nvl(PAY.NO2, 0)+1
                                                                           ELSE nvl(PAY.NO2, 0)+1
                                                                      END
                                                            END BETWEEN ST_NO AND END_NO), 0) mon_pay_amt
                , CASE WHEN ADDAMT.EXPR_NO IS NULL THEN CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) THEN 0
                                                           ELSE ALLT.EXPR_NO
                                                      END
                     ELSE CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN 0
                               WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO != nvl(PAY.NO3, 0) THEN ADDAMT.EXPR_NO
                               WHEN ALLT.EXPR_NO != nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN ALLT.EXPR_NO
                               ELSE ALLT.EXPR_NO
                          END
                END EXPR_NO
                     , CASE WHEN ADDAMT.EXPR_NO IS NULL THEN CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) THEN ''
                                                           ELSE FN_YEN_CHE_COMB(CMEM.ACCNT_NO)
                                                      END
                     ELSE CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN ''
                               WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO != nvl(PAY.NO3, 0) THEN FN_YEN_CHE_COMB_ADD(CMEM.ACCNT_NO)
                               WHEN ALLT.EXPR_NO != nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN FN_YEN_CHE_COMB(CMEM.ACCNT_NO)
                               ELSE FN_YEN_CHE_COMB(CMEM.ACCNT_NO)
                          END
                      END DEL_STAT
                     , CASE WHEN ADDAMT.EXPR_NO IS NULL THEN CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) THEN 0
                                                           ELSE nvl(pay.NO2, 0)
                                                      END
                     ELSE CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN 0
                               WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO != nvl(PAY.NO3, 0) THEN nvl(pay.NO3, 0)
                               WHEN ALLT.EXPR_NO != nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN nvl(pay.NO2, 0)
                               ELSE nvl(pay.NO2, 0)
                          END
                END last_no
                   , NVL((SELECT COUNT(*) FROM WDRW_REQ_CALL_CENTER WHERE ACCNT_NO = CMEM.ACCNT_NO AND WDRW_REQ_YN = 'N' AND DEL_FG IS NULL), 0) AS WRY
                     , FN_ACCNT_STAT (CMEM.ACCNT_NO) AS EVT_ST
                     , CASE WHEN (CMEM.YEN_CHE_PRE_PAY_YN = 'Y')
                              AND
                              (NVL((SELECT COUNT(ACCNT_NO)
                                FROM PAY_MNG
                                WHERE DEL_FG = 'N'
                                  AND ACCNT_NO = CMEM.ACCNT_NO
                                  AND SUBSTR(PAY_DAY,1,8) = TO_CHAR(SYSDATE,'YYYYMMDD')), 0) > 0)
                        THEN '1'
                        WHEN (CMEM.YEN_CHE_PRE_PAY_YN = 'Y')
                              AND
                              (NVL((SELECT COUNT(ACCNT_NO)
                                FROM PAY_MNG_DTL1
                                WHERE DEL_FG = 'N'
                                  AND ACCNT_NO = CMEM.ACCNT_NO
                                  AND SUBSTR(PAY_DAY,1,8) = TO_CHAR(SYSDATE,'YYYYMMDD')), 0) > 0)
                        THEN '1'
                        ELSE '0'
                       END SRCH_GBN

                     , CASE WHEN (
                              (ADDAMT.EXPR_NO IS NOT NULL AND nvl(PAY.NO2, 0) = nvl(PAY.NO3, 0))
                              OR
                              (ADDAMT.EXPR_NO IS NOT NULL AND nvl(PAY.NO2, 0) != nvl(PAY.NO3, 0) AND ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO != nvl(PAY.NO3, 0))
                              OR
                              (ADDAMT.EXPR_NO IS NOT NULL AND nvl(PAY.NO2, 0) != nvl(PAY.NO3, 0) AND ALLT.EXPR_NO != nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0))
                              OR
                              (ADDAMT.EXPR_NO IS NULL AND ALLT.EXPR_NO != nvl(PAY.NO2, 0))
                              OR
                              (ALLT.EXPR_NO IS NOT NULL AND ADDAMT.EXPR_NO IS NOT NULL AND nvl(PAY.NO2, 0) = 0 AND nvl(PAY.NO3, 0) = 0)
                              OR
                              (ALLT.EXPR_NO IS NOT NULL AND ADDAMT.EXPR_NO IS NOT NULL AND ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND nvl(PAY.NO3, 0) = 0)
                              OR
                              (ALLT.EXPR_NO IS NOT NULL AND ADDAMT.EXPR_NO IS NOT NULL AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) AND nvl(PAY.NO2, 0) = 0)
                         )
                      THEN 'true'
                      ELSE 'false'
                 END COMB_COND_1
                     , FN_EVENT(CMEM.ACCNT_NO) AS EVT_NM


                  <if test="wdrw_gubun == null or wdrw_gubun == ''">
                     , '' AS CARD_NM
                     , '' AS CARD_NO
                     , '' AS PAY_DT
                     , '' AS EXPIRE_DATE
                     , '' AS INV_DT
                     , '' AS CARD_CD
                     , CMEM.BANK_CD
                     , FN_COM_NM ('63', CMEM.BANK_CD) AS BANK_NM
                     , CMEM.BANK_ACCNT_NO AS BANK_ACCNT_NO
                     , CMEM.BIRTH IDN_NO

                     , CMEM.PRE_PAY_YN
                     , '' BID
                     , CASE WHEN ADDAMT.EXPR_NO IS NULL THEN
                            CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) THEN '' ELSE pay.payday2  END
                          ELSE CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN ''
                                    WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO != nvl(PAY.NO3, 0) THEN pay.payday3
                                    WHEN ALLT.EXPR_NO != nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN pay.payday2
                               ELSE pay.payday2 END END pay_day
                     ,  case when vad.ACCNT_NO is null then 'N' else 'Y' end vbit

                  FROM (select /*+INDEX(cms_mem IDX_CMS_MEM_FLAG) */ cms_mem.* from cms_mem
                              INNER JOIN (
                                select accnt_no from (
                                      select /*+INDEX(resn IDX_RESCISSION_FLAG) */  accnt_no ,
                                        CASE WHEN RESN.RELTN = '20'
                                         THEN CASE WHEN nvl(CHK_A, '') = 'Y' AND nvl(CHK_B, '') = 'Y' AND nvl(CHK_G, '') = 'Y'
                                                   THEN 'Y'
                                                   ELSE ''
                                              END
                                         WHEN RESN.RELTN = ''
                                         THEN ''
                                         ELSE CASE WHEN nvl(RESN.DEATH, '') = 'Y'
                                                   THEN CASE WHEN nvl(CHK_A, '') = 'Y' AND nvl(CHK_B, '') = 'Y' AND nvl(CHK_C, '') = 'Y'
                                                                  AND nvl(CHK_D, '') = 'Y' AND nvl(CHK_E, '') = 'Y' AND nvl(CHK_F, '') = 'Y' AND nvl(CHK_G, '') = 'Y'
                                                             THEN 'Y'
                                                             ELSE ''
                                                        END
                                                   ELSE CASE WHEN nvl(CHK_A, '') = 'Y' AND nvl(CHK_B, '') = 'Y' AND nvl(CHK_C, '') = 'Y'
                                                                  AND nvl(CHK_D, '') = 'Y' AND nvl(CHK_E, '') = 'Y' AND nvl(CHK_G, '') = 'Y'
                                                             THEN 'Y'
                                                             ELSE ''
                                                        END
                                              END
                                         END kbit
                                   from RESCISSION resn
                                  where RESN.DEL_FG = 'N'
                                    AND RESN.CMS_WDRW_REQ_YN = 'Y'
                                    AND RESN.RESN_PROC_YN = 'Y'
                                union all

                                 select accnt_no , 'Y' kbit
                                   from event
                                  where DEL_FG = 'N'
                                    AND CMS_WDRW_REQ_YN = 'Y' ) tbl
                                  where kbit = 'Y') TBL ON CMS_MEM.ACCNT_NO = TBL.ACCNT_NO where CMS_MEM.del_fg = 'N' ) CMEM



                  </if>
                  <if test="wdrw_gubun != null and wdrw_gubun != ''">
                      <if test="wdrw_gubun == 'Card'">
                      , FN_COM_NM('0120', CMEM.CARD_CD) AS CARD_NM
                      , CMEM.CARD_NO AS CARD_NO
                      , CMEM.PAY_DT
                      , CMEM.EXPIRE_DATE
                      , CMEM.PAY_DT  AS INV_DT
                      , CMEM.CARD_CD
                      , '' AS BANK_CD
                      , '' AS BANK_NM
                      , '' AS BANK_ACCNT_NO
                      , '' AS IDN_NO


                      , CMEM.PRE_PAY_YN
                     , '' BID
                     , CASE WHEN ADDAMT.EXPR_NO IS NULL THEN
                            CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) THEN '' ELSE pay.payday2  END
                          ELSE CASE WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN ''
                                    WHEN ALLT.EXPR_NO = nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO != nvl(PAY.NO3, 0) THEN pay.payday3
                                    WHEN ALLT.EXPR_NO != nvl(PAY.NO2, 0) AND ADDAMT.EXPR_NO = nvl(PAY.NO3, 0) THEN pay.payday2
                               ELSE pay.payday2 END END pay_day
                     ,  case when vad.ACCNT_NO is null then 'N' else 'Y' end vbit

                  FROM (select /*+INDEX(cms_mem IDX_CMS_MEM_FLAG) */ card_mem.* from card_mem
                              INNER JOIN (
                                select accnt_no from (
                                      select /*+INDEX(resn IDX_RESCISSION_FLAG) */  accnt_no ,
                                        CASE WHEN RESN.RELTN = '20'
                                         THEN CASE WHEN nvl(CHK_A, '') = 'Y' AND nvl(CHK_B, '') = 'Y' AND nvl(CHK_G, '') = 'Y'
                                                   THEN 'Y'
                                                   ELSE ''
                                              END
                                         WHEN RESN.RELTN = ''
                                         THEN ''
                                         ELSE CASE WHEN nvl(RESN.DEATH, '') = 'Y'
                                                   THEN CASE WHEN nvl(CHK_A, '') = 'Y' AND nvl(CHK_B, '') = 'Y' AND nvl(CHK_C, '') = 'Y'
                                                                  AND nvl(CHK_D, '') = 'Y' AND nvl(CHK_E, '') = 'Y' AND nvl(CHK_F, '') = 'Y' AND nvl(CHK_G, '') = 'Y'
                                                             THEN 'Y'
                                                             ELSE ''
                                                        END
                                                   ELSE CASE WHEN nvl(CHK_A, '') = 'Y' AND nvl(CHK_B, '') = 'Y' AND nvl(CHK_C, '') = 'Y'
                                                                  AND nvl(CHK_D, '') = 'Y' AND nvl(CHK_E, '') = 'Y' AND nvl(CHK_G, '') = 'Y'
                                                             THEN 'Y'
                                                             ELSE ''
                                                        END
                                              END
                                         END kbit
                                   from RESCISSION resn
                                  where RESN.DEL_FG = 'N'
                                    AND RESN.CMS_WDRW_REQ_YN = 'Y'
                                    AND RESN.RESN_PROC_YN = 'Y'
                                union all

                                 select accnt_no , 'Y' kbit
                                   from event
                                  where DEL_FG = 'N'
                                    AND CMS_WDRW_REQ_YN = 'Y' ) tbl
                                  where kbit = 'Y') TBL ON card_mem.ACCNT_NO = TBL.ACCNT_NO where card_mem.del_fg = 'N'  AND NVL(card_mem.BID,'') != ''  ) CMEM       <!-- /* NICE 결제모듈 BillKey 생성된 것만 산출 */ -->


                      </if>
                  </if>
                             LEFT OUTER JOIN (SELECT ACCNT_NO , PROD_CD , JOIN_CL , NEW_CHAN_GUNSU , MEM_NM , EMAIL , CELL , HOME_TEL , PROD_NM ,
                                      CASE WHEN yen_che2 = 0 and yen2 = 1 then '만기'
                                          WHEN yen_che2 = 0 and yen2 = 0 then '정상'
                                          WHEN yen_che2 = 1 and yen2 = 0 then '당월미납'
                                          WHEN yen_che2 > 1 and yen2 = 0 then to_char(yen_che2-1) || '회 연체'
                                          WHEN yen_che2 <![CDATA[<]]> 0 and yen2 = 0 then replace(yen_che2, '-', '') || '회 선납'
                                          WHEN yen_che2 <![CDATA[<]]> 0 and yen2 = 1 then '만기' else '' END stat2 ,
                                          max_seq2 no2  ,  payday2 ,
                                      CASE WHEN yen_che3 = 0 and yen3 = 1 then '만기'
                                          WHEN yen_che3 = 0 and yen3 = 0 then '정상'
                                          WHEN yen_che3 = 1 and yen3 = 0 then '당월미납'
                                          WHEN yen_che3 > 1 and yen3 = 0 then to_char(yen_che3-1) || '회 연체'
                                          WHEN yen_che3 <![CDATA[<]]> 0 and yen3 = 0 then replace(yen_che3, '-', '') || '회 선납'
                                          WHEN yen_che3 <![CDATA[<]]> 0 and yen3 = 1 then '만기' else '' END stat3 ,
                                          max_seq3 no3 , payday3
                               FROM ( SELECT M.ACCNT_NO , M.PROD_CD , M.JOIN_CL , M.NEW_CHAN_GUNSU , M.MEM_NM , M.EMAIL , M.CELL , M.HOME_TEL  , P.PROD_NM
                                            ,CASE WHEN (p.expr_no - new_chan_gunsu) > join_no then nvl(join_no, 0)  - nvl(r2.pay_no, 0)
                                                  else nvl((p.expr_no - new_chan_gunsu), 0) - nvl(r2.pay_no, 0) end yen_che2
                                            ,CASE WHEN (p.expr_no - new_chan_gunsu) = r2.pay_no then 1 else 0 end yen2
                                            , r2.pay_no max_seq2 , r2.pay_day payday2
                                            ,CASE WHEN (p.expr_no - new_chan_gunsu) > join_no then nvl(join_no, 0)  - nvl(r3.pay_no, 0)
                                                  else nvl((p.expr_no - new_chan_gunsu), 0) - nvl(r3.pay_no, 0) end yen_che3
                                            ,CASE WHEN (p.expr_no - new_chan_gunsu) = r3.pay_no then 1 else 0 end yen3
                                            , r3.pay_no max_seq3  , r3.pay_day payday3
                                       FROM (select /*+INDEX(a IDX_MEM_PROD_ACCNT_FLAG) */  A.ACCNT_NO , A.PROD_CD , A.JOIN_CL , A.NEW_CHAN_GUNSU , MEM.MEM_NM , MEM.email , MEM.CELL , MEM.HOME_TEL
                                                    , trunc(months_between(sysdate -1,to_date(substr(a.join_dt,1,6)||'01'))) + 1 join_no
                                               from MEM_PROD_ACCNT a  INNER JOIN (select /*+INDEX(member IDX_MEMBER_FLAG) */ * from member where member.del_fg = 'N' ) mem ON a.mem_no = mem.mem_no
                                              where a.del_fg = 'N'

                                                       <if test="wdrw_gubun == null or wdrw_gubun == ''">
                                                         and a.pay_mthd = '04'
                                                      </if>
                                                      <if test="wdrw_gubun != null and wdrw_gubun != ''">
                                                          <if test="wdrw_gubun == 'Card'">
                                                             and a.pay_mthd = '06'
                                                          </if>
                                                      </if>
                                                                   ) m                  <!-- 구좌테이블 -->
                                    LEFT OUTER JOIN (select * from PRODUCT where PROD_CL = '03' AND nvl(JOIN_TYPE,' ') <![CDATA[<>]]> '0002' ) p on m.prod_cd = p.prod_cd    <!-- 상품테이블과 조인 -->
                                    LEFT OUTER JOIN (select accnt_no , nvl(max(no), 0) pay_no , max(pay_day) pay_day from PAY_MNG_dtl where del_fg = 'N' group by accnt_no ) r2 on m.accnt_no = r2.accnt_no
                                    LEFT OUTER JOIN (select accnt_no , nvl(max(no), 0) pay_no , max(pay_day) pay_day from PAY_MNG_dtl1 where del_fg = 'N' group by accnt_no ) r3 on m.accnt_no = r3.accnt_no
                                    ) t
                                                        ) pay on cmem.accnt_no = pay.accnt_no

                                    LEFT OUTER JOIN (
                                        SELECT VAD.ACCNT_NO
                                        FROM NICE_VRTL_ACCNT_WDRW_REQ_DTL VAD
                                             INNER JOIN NICE_VRTL_ACCNT_WDRW_REQ_MST VAM ON VAM.SEQ = VAD.SEQ AND ((VAM.STAT = '02' AND VAM.EXPIRY_YYYYMMDD || VAM.EXPIRY_HHMMSS > to_char(sysdate,'YYYYMMDDHH24MISS')) OR VAM.STAT = '01')
                                    ) VAD ON cmem.ACCNT_NO = VAD.ACCNT_NO
                                    left outer join (SELECT /*+INDEX(wdrw_req IDX_WDRW_REQ_STAT) */ ACCNT_NO FROM WDRW_REQ WHERE WDRW_REQ.STAT >= '01' and STAT <![CDATA[<=]]> '02') wdrw on cmem.accnt_no = wdrw.accnt_no
                 LEFT OUTER JOIN (
                        SELECT sum(PD.end_no - PD.st_no + 1) EXPR_NO
                             ,PD.PROD_CD PROD_CD
                          FROM PRODUCT_DTL PD
                         WHERE ALLT_AMT > 0
                        GROUP BY PD.PROD_CD
                      ) ALLT ON pay.PROD_CD = ALLT.PROD_CD
                      LEFT OUTER JOIN (
                        SELECT sum(PD.end_no - PD.st_no + 1) EXPR_NO
                             ,PD.PROD_CD PROD_CD
                          FROM PRODUCT_DTL PD
                         WHERE ADD_AMT > 0
                        GROUP BY PD.PROD_CD
                      ) ADDAMT ON pay.PROD_CD = ADDAMT.PROD_CD
                          INNER JOIN HP_CALL hp ON cmem.accnt_no = hp.accnt_no AND hp.stat in ('01', '011')


                 WHERE 1=1
                       AND wdrw.accnt_no is null


                  <if test="wdrw_gubun == null or wdrw_gubun == ''">
                  <!-- AND left(convert(varchar,isnull(pay.PAY_DAY, DATEADD(MM, -1, GETDATE())),112),6) >= left(convert(varchar,DATEADD(Month, -3, getdate()),112),6)-->
                  </if>
                    <!-- 조건추가 : 콜센터 산출중인건은 조회되지 않도록 수정 BY LBK_2013_09_10 -->
                       <!-- 수정 : 해약이면서 결합상품 유형이 상품권이면 산출되지 않도록 수정 BY LBK_2013_03_28 -->

                               <!--   /* 이체일만 산출 체크시 산출 이체일자  마지막 날인 구좌만 산출*/ -->
                   AND
                   (    cmem.PAY_DAY_FIX_YN = 'N'
                  <if test="wdrw_gubun == null or wdrw_gubun == ''">
                     OR (CMEM.PAY_DAY_FIX_YN = 'Y' AND CMEM.ICHAE_DT= #{ichae_end_dt} )
                     )
                     AND cmem.ichae_dt BETWEEN '01' AND '05'
                  </if>
                  <if test="wdrw_gubun != null and wdrw_gubun != ''">
                      <if test="wdrw_gubun == 'Card'">
                        OR (CMEM.PAY_DAY_FIX_YN = 'Y' AND CONVERT (INT, CMEM.PAY_DT)= #{ichae_end_dt} )
                        )
                        AND cmem.PAY_DT BETWEEN '01' AND '05'
                      </if>
                  </if>
                   )   TBL
         WHERE 1=1
           AND  vbit = 'N'
               and  COMB_COND_1 = 'true'
        AND  SRCH_GBN = '0'
        AND  EVT_NM != '청약철회'

           <!-- /* 선납, 정상 중복 산출 방지 */ -->
           AND SUBSTR(TBL.DEL_STAT, -2) = '연체'
           <!-- /* 수정 : 2회연체 까지 산출 되도록 수정 BY LBK_2012_10_05  */ -->
                    <!-- /* 수정 : 4회연체 까지 산출 되도록 수정 by hjw_2016_05_31 */ -->
           <if test="wdrw_gubun == null or wdrw_gubun == ''">
                AND ( TO_NUMBER(SUBSTR (TBL.DEL_STAT,1, INSTR( TBL.DEL_STAT,'회')-1))  <![CDATA[<=]]>  4
                  OR (TO_NUMBER(SUBSTR(TBL.DEL_STAT,1, INSTR(TBL.DEL_STAT,'회')-1)) >= 5 AND TBL.YEN_CHE_PRE_PAY_YN = 'Y' AND SUBSTR(TBL.PAY_DAY,1,6) >= TO_CHAR(ADD_MONTHS(SYSDATE,-4),'YYYYMM')) )
           </if>
            <!-- 수정 : 연체자 임의지정출금 체크되어고 이번달에 출금되었다면 산출되지 않아야함 by lbk_2013_06_11 -->

    </select>


    <select id="DlwCmsMap.getInvAmtByInvGunsu" parameterType="map" resultType="int">
        <!-- DM sql-id : selectCmsAppAmtByInvGunsu -->

        SELECT FN_CMS_APP_CNT(#{inv_gunsu}, #{last_no}, #{accnt_no})
        FROM DUAL
    </select>

    <insert id="DlwCmsMap.insertCmsWdrwReq" parameterType="map">
        <!-- DM sql-id : insertCMSWDRWReq -->


        INSERT INTO /* DlwCmsMap.insertCmsWdrwReq */
                    WDRW_REQ
                    (SEQ
                    , ACCNT_NO
                    , INV_NO
                    , PAYR_NO
                    , BANK_CD
                    , BANK_ACCNT_NO
            <!--        , idn_no -->
                    , BANK_FILIN_BRKDN
                    , WDRW_REQ_AMT
                    , INV_GUNSU
                    , INV_DT
                    , STAT
                    , CL
                    , REG_DM
                    , REG_MAN
                    , UPD_DM
                    , UPD_MAN
                    , BIRTH
                    )
               SELECT A.SEQ
                    , #{accnt_no}
                    , ${inv_no}
                    , #{mem_no}
                    , #{bank_cd}
                    , #{bank_accnt_no}
                <!--     , (EncryptByKey(Key_GUID('KeyAES256'), CONVERT(VARCHAR, #vo.idnNo#))) -->
                    <!-- 변경 : 대명->대명라이프로 변경(제휴 조건 제거) by lbk_20141208  -->
                    <!--
                    , CASE WHEN DBO.FN_EVENT(#vo.accntNo#) NOT IN ('', '부활') AND @PROD_CL = '03' THEN LEFT('대명제휴' + CONVERT(VARCHAR, @INV_NO) +'회', 8)
                           ELSE LEFT(#vo.bankFilinBrkdn# + CONVERT(VARCHAR, @INV_NO) +'회분',8)
                      END
                    -->
                    , SUBSTR(#{bank_filin_brkdn} || TO_CHAR(${inv_no}),1,8)
                    , #{wdrw_req_amt}
                    , #{inv_gunsu}
                    , SYSDATE
                    , #{stat}
                    , #{cl}
                    , SYSDATE
                    , #{emple_no}
                    , SYSDATE
                    , #{emple_no}
                    , #{idn_no}
                 FROM (SELECT NVL (MAX (SEQ) + 1, '1') AS SEQ
                         FROM WDRW_REQ
                        WHERE ACCNT_NO = #{accnt_no}) A

    </insert>


    <select id="DlwCmsMap.getnew_inv_no" parameterType="map" resultType="int">
        <!-- DM sql-id : DlwCmsMap.getnew_inv_no -->

        SELECT /* DlwCmsMap.getnew_inv_no */
             NVL(CASE WHEN NVL(PROD.PROD_CL, '00') = '03'
                                    THEN CASE WHEN FN_ACCNT_STAT(MPA.ACCNT_NO) = 'Y'
                                          THEN CASE
                                                    WHEN FN_YEN_CHE(MPA.ACCNT_NO) = '만기' THEN PAY1.NO + ${inv_gunsu}
                                                    ELSE CASE
                                                              WHEN FN_YEN_CHE_COMB(MPA.ACCNT_NO) = '만기' THEN PAY.NO + ${inv_gunsu}
                                                   ELSE PAY.NO + ${inv_gunsu}
                                                         END
                                               END
                                          ELSE CASE
                                                    WHEN FN_YEN_CHE_COMB(MPA.ACCNT_NO) = '만기' THEN PAY2.NO + ${inv_gunsu}
                                                    ELSE CASE
                                                              WHEN FN_YEN_CHE_COMB_ADD(MPA.ACCNT_NO) = '만기' THEN PAY1.NO + ${inv_gunsu}
                                                              ELSE PAY1.NO + ${inv_gunsu}
                                                         END
                                               END
                                     END
                                    ELSE PAY.NO + ${inv_gunsu}
                           END , 0 + ${inv_gunsu} )

                      FROM MEM_PROD_ACCNT MPA
                           INNER JOIN PRODUCT PROD ON MPA.PROD_CD = PROD.PROD_CD
                           LEFT OUTER JOIN PAY_MNG PAY
                           ON MPA.ACCNT_NO = PAY.ACCNT_NO
                              AND PAY.DEL_FG = 'N'
                              AND PAY.NO = FN_PAY_MNG(MPA.ACCNT_NO)
                           LEFT OUTER JOIN PAY_MNG_DTL PAY1
                           ON MPA.ACCNT_NO = PAY1.ACCNT_NO
                              AND PAY1.DEL_FG = 'N'
                              AND PAY1.NO = FN_PAY_MNG_DTL(MPA.ACCNT_NO)
                           LEFT OUTER JOIN PAY_MNG_DTL1 PAY2
                           ON MPA.ACCNT_NO = PAY2.ACCNT_NO
                                AND PAY2.DEL_FG = 'N'
                              AND PAY2.NO = FN_PAY_MNG_DTL1(MPA.ACCNT_NO)
                     WHERE MPA.ACCNT_NO = #{accnt_no}
                       AND MPA.DEL_FG = 'N'
    </select>

    <!--
    ASIS 의 DlwCmsMap.insertCardWdrwReq 쿼리에서 @INV_NO 조회 부분을 분리
    정출연
    2016.10.17
    -->
    <select id="DlwCmsMap.getInvNo" parameterType="map" resultType="resultMap">
        SELECT /* DlwCmsMap.getInvNo */
               CASE WHEN NVL(PROD.PROD_CL, '00') = '03'
                        THEN CASE WHEN FN_ACCNT_STAT(MPA.ACCNT_NO) = 'Y'
                              THEN CASE
                                        WHEN FN_YEN_CHE(MPA.ACCNT_NO) = '만기' THEN PAY1.NO + TO_NUMBER(#{inv_gunsu})
                                        ELSE CASE
                                                  WHEN FN_YEN_CHE_COMB(MPA.ACCNT_NO) = '만기' THEN PAY.NO + TO_NUMBER(#{inv_gunsu})
                                                  ELSE nvl(PAY.NO,0) + TO_NUMBER(#{inv_gunsu})
                                             END
                                   END
                              ELSE CASE
                                        WHEN FN_YEN_CHE_COMB(MPA.ACCNT_NO) = '만기' THEN PAY2.NO + TO_NUMBER(#{inv_gunsu})
                                        ELSE CASE
                                                  WHEN FN_YEN_CHE_COMB_ADD(MPA.ACCNT_NO) = '만기' THEN nvl(PAY1.NO,0) + TO_NUMBER(#{inv_gunsu})
                                                  ELSE nvl(PAY1.NO,0) + to_number(#{inv_gunsu})
                                             END
                                   END
                         END
                        ELSE nvl(PAY.NO,0) + TO_NUMBER(#{inv_gunsu})
               END AS INV_NO
          FROM MEM_PROD_ACCNT MPA
               INNER JOIN PRODUCT PROD ON MPA.PROD_CD = PROD.PROD_CD
               LEFT OUTER JOIN PAY_MNG PAY
               ON MPA.ACCNT_NO = PAY.ACCNT_NO
                  AND PAY.DEL_FG = 'N'
                  AND PAY.NO =   FN_PAY_MNG(MPA.ACCNT_NO)
               LEFT OUTER JOIN PAY_MNG_DTL PAY1
               ON MPA.ACCNT_NO = PAY1.ACCNT_NO
                  AND PAY1.DEL_FG = 'N'
                  AND PAY1.NO =   FN_PAY_MNG_DTL(MPA.ACCNT_NO)
               LEFT OUTER JOIN PAY_MNG_DTL1 PAY2
               ON MPA.ACCNT_NO = PAY2.ACCNT_NO
                    AND PAY2.DEL_FG = 'N'
                  AND PAY2.NO =   FN_PAY_MNG_DTL1(MPA.ACCNT_NO)
         WHERE MPA.ACCNT_NO = #{accnt_no}
           AND MPA.DEL_FG = 'N'
    </select>

    <!--
    쿼리 2개로 분리함
    정출연
    2016.10.17
    -->
    <insert id="DlwCmsMap.insertCardWdrwReq" parameterType="map">
        <!-- DM sql-id : insertCardWDRWReq -->
        INSERT /* DlwCmsMap.insertCardWdrwReq */
          INTO CARD_WDRW_REQ (
           SEQ
          ,ACCNT_NO
          ,INV_NO
          ,CARD_CD
          ,CARD_NO
          ,EXPIRE_DATE
          ,BANK_FILIN_BRKDN
          ,WDRW_REQ_AMT
          ,INV_GUNSU
          ,INV_DT
          ,STAT
          ,CL
          ,INSTALL_PEROD
          ,REG_DM
          ,REG_MAN
          ,UPD_DM
          ,UPD_MAN
        ) SELECT a.seq
               , #{accnt_no}
               , #{inv_no}
               , nvl(#{card_cd},' ')
               , REPLACE(#{card_no}, ' ', '')
               , #{expire_date}
               ,  SUBSTR(#{bank_filin_brkdn} || TO_CHAR(${inv_no}),1,8)
               , #{wdrw_req_amt}
               , #{inv_gunsu}

               ,TO_CHAR(SYSDATE,'YYYYMMDD')
               , #{stat}
               , #{cl}
               , 0
               , SYSDATE
               , #{emple_no}
               , SYSDATE
               , #{emple_no}
            FROM (SELECT NVL (MAX (seq) + 1, '1') AS seq
                    FROM CARD_WDRW_REQ
                   WHERE accnt_no = #{accnt_no}) a
    </insert>

    <select id="DlwCmsMap.getDlwWdrwAddData" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectAddDataByAccnt -->


        SELECT /* DlwCmsMap.getDlwWdrwAddData */
               CMEM.ACCNT_NO
             , FN_MEM_NM(MEM.MEM_NO) MEM_NM
             , MEM.HOME_TEL
             , (PROD.EXPR_NO - ACCNT.NEW_CHAN_GUNSU) EXPR_NO
             , FN_YEN_CHE(CMEM.ACCNT_NO) DEL_STAT
             , NVL((SELECT COUNT (SEQ)
                         FROM PAY_MNG
                        WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N'), 0) LAST_NO
             , 0 AS PRE_PAY_GUNSU
             , FN_ACCNT_STAT (CMEM.ACCNT_NO) EVT_YN
             , PROD.PAY_TYPE
             , PROD.PROD_CD
             , PROD.MON_PAY_AMT
             , ACCNT.JOIN_CL
             , CASE WHEN PROD.PROD_NM LIKE '%격월납%' THEN 'Y' ELSE 'N' END SIX_MON_PROD
              <if test="wdrw_gubun == null or wdrw_gubun == ''">
                   , cmem.mem_no
                   , cmem.ichae_dt
                   , cmem.ichae_limit_gunsu
                   , '' CARD_NM
                   , '' CARD_NO
                   , '' PAY_DT
                   , '' EXPIRE_DATE
                   , '' INV_DT
                   , '' CARD_CD
                   , cmem.bank_cd
                   , fn_com_nm ('63', cmem.bank_cd) bank_nm
                   , cmem.bank_accnt_no bank_accnt_no
                   , cmem.birth idn_no
                       <!-- , CONVERT(VARCHAR(MAX), DecryptByKeyAutoCert( cert_ID('CertKeyProtect'), NULL, cmem.idn_no)) idn_no -->
                FROM CMS_MEM cmem
              </if>
              <if test="wdrw_gubun != null and wdrw_gubun != ''">
                  <if test="wdrw_gubun == 'Card'">
                    , '' MEM_NO
                    , '' ICHAE_DT
                    , '' ICHAE_LIMIT_GUNSU
                    , FN_COM_NM('0120', CMEM.CARD_CD) CARD_NM
                    , CMEM.CARD_NO CARD_NO
                    , CMEM.PAY_DT
                    , CMEM.EXPIRE_DATE
                    , CMEM.PAY_DT INV_DT
                    , CMEM.CARD_CD
                    , '' BANK_CD
                    , '' BANK_NM
                    , '' BANK_ACCNT_NO
                    , '' IDN_NO
                FROM CARD_MEM CMEM
                  </if>
              </if>
               INNER JOIN MEM_PROD_ACCNT ACCNT
                   ON ACCNT.ACCNT_NO = CMEM.ACCNT_NO
                      AND ACCNT.ACCNT_NO = #{accnt_no}
               INNER JOIN MEMBER MEM
                   ON MEM.MEM_NO = ACCNT.MEM_NO
               INNER JOIN PRODUCT PROD
                   ON ACCNT.PROD_CD = PROD.PROD_CD
               LEFT OUTER JOIN (
                        SELECT VAD.ACCNT_NO
                          FROM NICE_VRTL_ACCNT_WDRW_REQ_DTL VAD
                               INNER JOIN NICE_VRTL_ACCNT_WDRW_REQ_MST VAM ON VAM.SEQ = VAD.SEQ AND ((VAM.STAT = '02' AND VAM.EXPIRY_YYYYMMDD || VAM.EXPIRY_HHMMSS <![CDATA[>]]>  REPLACE(REPLACE(REPLACE(TO_CHAR(SYSDATE-1/24,'YYYY-MM-DD HH24:MI:SS'), '-', ''), ':', ''),' ','')) OR VAM.STAT = '01')
                      ) VAD ON ACCNT.ACCNT_NO = VAD.ACCNT_NO
         WHERE FN_EVENT(CMEM.ACCNT_NO) != '청약철회'
           AND VAD.ACCNT_NO IS NULL
           <!-- 조건추가 : 콜센터 산출중인건은 조회되지 않도록 수정 BY LBK_2013_09_10 -->
           AND NVL((SELECT COUNT(*) FROM WDRW_REQ_CALL_CENTER WHERE ACCNT_NO = CMEM.ACCNT_NO AND WDRW_REQ_YN = 'N' AND DEL_FG IS NULL), 0) = 0
           AND CMEM.DEL_FG = 'N'
            AND NVL(PROD.PROD_CL, '00') != '03'
           AND FN_ACCNT_STAT (CMEM.ACCNT_NO) = 'Y'
              <if test="wdrw_gubun == null or wdrw_gubun == ''">
                  AND accnt.pay_mthd != '06'
              </if>
              <if test="wdrw_gubun != null and wdrw_gubun != ''">
                  <if test="wdrw_gubun == 'Card'">
                      AND accnt.pay_mthd = '06'
                  </if>
              </if>

                UNION ALL

        SELECT cmem.accnt_no
             , FN_MEM_NM(mem.mem_no) mem_nm
             , mem.home_tel
             , CASE WHEN ALLT.EXPR_NO = PAY1.NO AND PROD.EXPR_NO = PAY.NO THEN PROD.EXPR_NO
                    WHEN ALLT.EXPR_NO = PAY1.NO THEN PROD.EXPR_NO
                    WHEN PROD.EXPR_NO = PAY.NO THEN ALLT.EXPR_NO
                    ELSE PROD.EXPR_NO
               END EXPR_NO
             , CASE WHEN ALLT.EXPR_NO = PAY1.NO AND PROD.EXPR_NO = PAY.NO THEN FN_YEN_CHE(ACCNT.ACCNT_NO)
                    WHEN ALLT.EXPR_NO = PAY1.NO THEN FN_YEN_CHE(ACCNT.ACCNT_NO)
                    WHEN PROD.EXPR_NO = PAY.NO THEN FN_YEN_CHE_COMB(ACCNT.ACCNT_NO)
                    ELSE FN_YEN_CHE(ACCNT.ACCNT_NO)
               END del_stat
             , CASE WHEN ALLT.EXPR_NO = PAY1.NO AND PROD.EXPR_NO = PAY.NO THEN 0
                    WHEN ALLT.EXPR_NO = PAY1.NO THEN PAY.NO
                    WHEN PROD.EXPR_NO = PAY.NO THEN PAY1.NO
                    ELSE PAY.NO
               END last_no
             , 0 pre_pay_gunsu
             , fn_accnt_stat (cmem.accnt_no) EVT_YN
             , prod.PAY_TYPE
             , prod.PROD_CD
             , NVL((SELECT CASE WHEN ALLT.EXPR_NO = PAY1.NO AND PROD.EXPR_NO = PAY.NO THEN 0
                                   WHEN ALLT.EXPR_NO = PAY1.NO THEN MONTH_PAY_AMT
                                   WHEN PROD.EXPR_NO = PAY.NO THEN ALLT_AMT + ADD_AMT
                                   ELSE MONTH_PAY_AMT + ALLT_AMT + ADD_AMT
                              END
                          FROM PRODUCT_DTL
                         WHERE PROD_CD = accnt.PROD_CD AND CASE WHEN ALLT.EXPR_NO = PAY1.NO AND PROD.EXPR_NO = PAY.NO THEN 0
                                                                WHEN ALLT.EXPR_NO = PAY1.NO THEN PAY.NO + 1
                                                                WHEN PROD.EXPR_NO = PAY.NO THEN PAY1.NO + 1
                                                                ELSE PAY.NO + 1
                                                           END BETWEEN ST_NO AND END_NO), 0) mon_pay_amt
             , ACCNT.JOIN_CL
             , case when prod.prod_nm like '%격월납%'
                    then 'Y'
                    else 'N'
               end six_mon_prod

              <if test="wdrw_gubun == null or wdrw_gubun == ''">
               , cmem.mem_no
               , cmem.ichae_dt
               , cmem.ichae_limit_gunsu
               , '' CARD_NM
               , '' CARD_NO
               , '' PAY_DT
               , '' EXPIRE_DATE
               , '' INV_DT
               , '' CARD_CD
               , cmem.bank_cd
               , fn_com_nm ('63', cmem.bank_cd) bank_nm
               , cmem.bank_accnt_no AS bank_accnt_no
               , cmem.birth idn_no

                FROM CMS_MEM cmem
              </if>
              <if test="wdrw_gubun != null and wdrw_gubun != ''">
                  <if test="wdrw_gubun == 'Card'">
                    , '' mem_no
                    , '' ichae_dt
                , '' ichae_limit_gunsu
                    , FN_COM_NM('0120', CMEM.CARD_CD) CARD_NM
                ,  CMEM.CARD_NO AS CARD_NO
                , CMEM.PAY_DT
                , CMEM.EXPIRE_DATE
                , CMEM.PAY_DT INV_DT
                , CMEM.CARD_CD
                , '' bank_cd
                , '' bank_nm
                , '' bank_accnt_no
                , '' idn_no
                    FROM CARD_MEM cmem
                  </if>
              </if>
               INNER JOIN MEM_PROD_ACCNT accnt
                   ON accnt.ACCNT_NO = cmem.ACCNT_NO
                      AND accnt.ACCNT_NO = #{accnt_no}
               INNER JOIN MEMBER mem
                   ON mem.MEM_NO = accnt.MEM_NO
               INNER JOIN PRODUCT prod
                   ON accnt.PROD_CD = prod.PROD_CD
               LEFT OUTER JOIN PAY_MNG pay
                   ON accnt.ACCNT_NO = pay.ACCNT_NO AND pay.DEL_FG = 'N'
                            AND pay.NO =  FN_PAY_MNG(accnt.accnt_no)



               LEFT OUTER JOIN PAY_MNG_DTL pay1
                   ON accnt.ACCNT_NO = pay1.ACCNT_NO
                      AND pay1.DEL_FG = 'N'
                      AND pay1.NO = FN_PAY_MNG_DTL(accnt.accnt_no)
               LEFT OUTER JOIN EVENT EVT
                   ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                      AND EVT.DEL_FG = 'N'
               LEFT OUTER JOIN PAY_MNG_DTL1 pay2
                   ON accnt.ACCNT_NO = pay2.ACCNT_NO
                      AND pay2.DEL_FG = 'N'
                      AND pay2.NO = FN_PAY_MNG_DTL1(accnt.accnt_no)
               LEFT OUTER JOIN (SELECT sum(PD.end_no - PD.st_no + 1) EXPR_NO
                                     , PD.PROD_CD PROD_CD
                                  FROM PRODUCT_DTL PD
                                 WHERE ALLT_AMT<![CDATA[>]]> 0
                                GROUP BY PD.PROD_CD) ALLT
                   ON prod.PROD_CD = ALLT.PROD_CD
               LEFT OUTER JOIN (SELECT sum(PD.end_no - PD.st_no + 1) EXPR_NO
                                     , PD.PROD_CD PROD_CD
                                  FROM PRODUCT_DTL PD
                                 WHERE ADD_AMT<![CDATA[>]]> 0
                                GROUP BY PD.PROD_CD
                               ) ADDAMT
                   ON prod.PROD_CD = ADDAMT.PROD_CD
               LEFT OUTER JOIN (
                    SELECT VAD.ACCNT_NO
                      FROM NICE_VRTL_ACCNT_WDRW_REQ_DTL VAD
                           INNER JOIN NICE_VRTL_ACCNT_WDRW_REQ_MST VAM ON VAM.SEQ = VAD.SEQ AND ((VAM.STAT = '02' AND VAM.EXPIRY_YYYYMMDD || VAM.EXPIRY_HHMMSS <![CDATA[>]]>  REPLACE(REPLACE(REPLACE(TO_CHAR(SYSDATE-1/24,'YYYY-MM-DD HH24:MI:SS'), '-', ''), ':', ''),' ','')) OR VAM.STAT = '01')
                  ) VAD ON ACCNT.ACCNT_NO = VAD.ACCNT_NO
         WHERE FN_EVENT(cmem.accnt_no) != '청약철회'
           AND VAD.ACCNT_NO IS NULL
           <!-- 조건추가 : 콜센터 산출중인건은 조회되지 않도록 수정 BY LBK_2013_09_10 -->
           AND NVL((SELECT COUNT(*) FROM WDRW_REQ_CALL_CENTER WHERE ACCNT_NO = cmem.accnt_no AND WDRW_REQ_YN = 'N' AND DEL_FG IS NULL), 0) = 0
           AND cmem.del_fg = 'N'
           AND NVL(prod.PROD_CL, '00') = '03'
           AND fn_accnt_stat (cmem.accnt_no) = 'Y'


              <if test="wdrw_gubun == null or wdrw_gubun == ''">
                AND accnt.pay_mthd != '06'
              </if>
              <if test="wdrw_gubun != null and wdrw_gubun != ''">
                  <if test="wdrw_gubun == 'Card'">
                    AND accnt.pay_mthd = '06'
                  </if>
              </if>
           AND
           (
            (
              NVL(ADDAMT.EXPR_NO, 0)<![CDATA[>]]> 0 AND
              (
                (PAY.NO = PAY1.NO AND PAY1.NO = PAY2.NO AND PAY.NO != PROD.EXPR_NO)
                OR
                (PAY.NO != PROD.EXPR_NO AND PAY1.NO = ALLT.EXPR_NO AND PAY2.NO = ADDAMT.EXPR_NO)
                OR
                (PAY.NO = PROD.EXPR_NO AND PAY1.NO != ALLT.EXPR_NO AND PAY2.NO != ADDAMT.EXPR_NO AND PAY1.NO = PAY2.NO)
                OR
                (PAY.NO != PROD.EXPR_NO AND PAY1.NO != ALLT.EXPR_NO AND PAY2.NO = ADDAMT.EXPR_NO AND PAY.NO = PAY1.NO)
                OR
                (PAY.NO = PROD.EXPR_NO AND PAY1.NO != ALLT.EXPR_NO AND PAY2.NO = ADDAMT.EXPR_NO)
              )
            )
            OR
            (
              NVL(ADDAMT.EXPR_NO, 0) = 0 AND
              (
                (PAY.NO = PROD.EXPR_NO AND nvl(PAY1.NO,0) != nvl(ALLT.EXPR_NO,0))
                OR
                (PAY.NO != PROD.EXPR_NO AND nvl(PAY1.NO,0) != nvl(ALLT.EXPR_NO,0) AND PAY.NO = PAY1.NO)
                OR
                (PAY.NO != PROD.EXPR_NO AND nvl(PAY1.NO,0) = nvl(ALLT.EXPR_NO,0))

              )
            )
            OR
            (
              NVL(PAY.NO, 0) = 0 AND NVL(PAY1.NO, 0) = 0 AND NVL(PAY2.NO, 0) = 0
            )
            OR
            (
             prod.PROD_CD IN ('S9', 'T0')
             AND
             PAY.NO != prod.EXPR_NO
            )
           )

        UNION ALL

        SELECT cmem.accnt_no
             , FN_MEM_NM(mem.mem_no) mem_nm
             , mem.home_tel
             , CASE WHEN ADDAMT.EXPR_NO IS NULL THEN CASE WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) THEN 0
                                                          ELSE ALLT.EXPR_NO
                                                     END
                    ELSE CASE WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 0) THEN 0
                              WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO != NVL(PAY1.NO, 0) THEN ADDAMT.EXPR_NO
                              WHEN ALLT.EXPR_NO != NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 0) THEN ALLT.EXPR_NO
                              ELSE ALLT.EXPR_NO
                         END
               END EXPR_NO
             , CASE WHEN ADDAMT.EXPR_NO IS NULL THEN CASE WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) THEN ''
                                                          ELSE FN_YEN_CHE_COMB(ACCNT.ACCNT_NO)
                                                     END
                    ELSE CASE WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 0) THEN ''
                              WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO != NVL(PAY1.NO, 0) THEN FN_YEN_CHE_COMB_ADD(ACCNT.ACCNT_NO)
                              WHEN ALLT.EXPR_NO != NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 0) THEN FN_YEN_CHE_COMB(ACCNT.ACCNT_NO)
                              ELSE FN_YEN_CHE_COMB(ACCNT.ACCNT_NO)
                         END
               END del_stat
             , CASE WHEN ADDAMT.EXPR_NO IS NULL THEN CASE WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) THEN 0
                                                          ELSE pay.NO
                                                     END
                    ELSE CASE WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 0) THEN 0
                              WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO != NVL(PAY1.NO, 0) THEN NVL(pay1.NO, 0)
                              WHEN ALLT.EXPR_NO != NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 0) THEN NVL(pay.NO, 0)
                              ELSE pay.NO
                         END
               END last_no
             , 0 pre_pay_gunsu
             , fn_accnt_stat (cmem.accnt_no) EVT_YN
             , prod.PAY_TYPE
             , prod.PROD_CD
             , (SELECT NVL((SELECT CASE WHEN ADDAMT.EXPR_NO IS NULL THEN CASE WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) THEN 0
                                                                                 ELSE ALLT_AMT
                                                                            END
                                           ELSE CASE WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 0) THEN 0
                                                     WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO != NVL(PAY1.NO, 0) THEN ADD_AMT
                                                     WHEN ALLT.EXPR_NO != NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 0) THEN ALLT_AMT
                                                     ELSE ALLT_AMT + ADD_AMT
                                                END
                                      END
                                  FROM PRODUCT_DTL
                                 WHERE PROD_CD = accnt.PROD_CD AND CASE WHEN ADDAMT.EXPR_NO IS NULL THEN CASE WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) THEN 0
                                                                                                              ELSE NVL(PAY.NO, 0) + 1
                                                                                                         END
                                                                        ELSE CASE WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 0) THEN 0
                                                                                  WHEN ALLT.EXPR_NO = NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO != NVL(PAY1.NO, 0) THEN NVL(PAY1.NO, 0)+1
                                                                                  WHEN ALLT.EXPR_NO != NVL(PAY.NO, 0) AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 0) THEN NVL(PAY.NO, 0)+1
                                                                                  ELSE NVL(PAY.NO, 0)+1
                                                                             END
                                                                   END BETWEEN ST_NO AND END_NO), 0) mon_pay_amt FROM DUAL) mon_pay_amt
             , ACCNT.JOIN_CL
             , case when prod.prod_nm like '%격월납%'
                    then 'Y'
                    else 'N'
               end six_mon_prod
              <if test="wdrw_gubun == null or wdrw_gubun == ''">
                   , cmem.mem_no
                   , cmem.ichae_dt
                   , cmem.ichae_limit_gunsu
                   , '' CARD_NM
                   , '' CARD_NO
                   , '' PAY_DT
                   , '' EXPIRE_DATE
                   , '' INV_DT
                   , '' CARD_CD
                   , cmem.bank_cd
                   , fn_com_nm ('63', cmem.bank_cd) bank_nm
                   ,  cmem.bank_accnt_no AS bank_accnt_no
                   , cmem.birth idn_no

                FROM CMS_MEM cmem
              </if>
              <if test="wdrw_gubun != null and wdrw_gubun != ''">
                  <if test="wdrw_gubun == 'Card'">
                    , '' mem_no
                    , '' ichae_dt
                    , '' ichae_limit_gunsu
                    , FN_COM_NM('0120', CMEM.CARD_CD) CARD_NM
                    , CMEM.CARD_NO AS CARD_NO
                    , CMEM.PAY_DT
                    , CMEM.EXPIRE_DATE
                    ,  CMEM.PAY_DT INV_DT
                    , CMEM.CARD_CD
                    , '' bank_cd
                    , '' bank_nm
                    , '' bank_accnt_no
                    , '' idn_no
                FROM CARD_MEM cmem
                  </if>
              </if>
               INNER JOIN MEM_PROD_ACCNT accnt
                   ON accnt.ACCNT_NO = cmem.ACCNT_NO
                      AND accnt.ACCNT_NO = #{accnt_no}
               INNER JOIN MEMBER mem
                   ON mem.MEM_NO = accnt.MEM_NO
               INNER JOIN PRODUCT prod
                   ON accnt.PROD_CD = prod.PROD_CD AND prod.PROD_CD NOT IN ('S9', 'T0')
               LEFT OUTER JOIN PAY_MNG_DTL pay
                   ON accnt.ACCNT_NO = pay.ACCNT_NO
                      AND pay.DEL_FG = 'N'
                      AND pay.NO = FN_PAY_MNG_DTL(accnt.accnt_no)
               LEFT OUTER JOIN EVENT EVT
                   ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                      AND EVT.DEL_FG = 'N'
               LEFT OUTER JOIN PAY_MNG_DTL1 pay1
                   ON accnt.ACCNT_NO = pay1.ACCNT_NO
                      AND pay1.DEL_FG = 'N'
                      AND pay1.NO = FN_PAY_MNG_DTL1(accnt.accnt_no)
               LEFT OUTER JOIN (SELECT sum(PD.end_no - PD.st_no + 1) EXPR_NO
                                     , PD.PROD_CD PROD_CD
                                  FROM PRODUCT_DTL PD
                                 WHERE ALLT_AMT<![CDATA[>]]> 0
                                GROUP BY PD.PROD_CD) ALLT
                   ON prod.PROD_CD = ALLT.PROD_CD
               LEFT OUTER JOIN (SELECT sum(PD.end_no - PD.st_no + 1) EXPR_NO
                                     , PD.PROD_CD PROD_CD
                                  FROM PRODUCT_DTL PD
                                 WHERE ADD_AMT<![CDATA[>]]> 0
                                GROUP BY PD.PROD_CD
                               ) ADDAMT
                   ON prod.PROD_CD = ADDAMT.PROD_CD
               LEFT OUTER JOIN (
                    SELECT VAD.ACCNT_NO
                      FROM NICE_VRTL_ACCNT_WDRW_REQ_DTL VAD
                           INNER JOIN NICE_VRTL_ACCNT_WDRW_REQ_MST VAM ON VAM.SEQ = VAD.SEQ AND ((VAM.STAT = '02' AND VAM.EXPIRY_YYYYMMDD || VAM.EXPIRY_HHMMSS <![CDATA[>]]>  REPLACE(REPLACE(REPLACE(TO_CHAR(SYSDATE-1/24,'YYYY-MM-DD HH24:MI:SS'), '-', ''), ':', ''),' ','')) OR VAM.STAT = '01')
                  ) VAD ON ACCNT.ACCNT_NO = VAD.ACCNT_NO
         WHERE FN_EVENT(cmem.accnt_no) != '청약철회'
           AND VAD.ACCNT_NO IS NULL
           <!-- 조건추가 : 콜센터 산출중인건은 조회되지 않도록 수정 BY LBK_2013_09_10 -->
           AND NVL((SELECT COUNT(*) FROM WDRW_REQ_CALL_CENTER WHERE ACCNT_NO = cmem.accnt_no AND WDRW_REQ_YN = 'N' AND DEL_FG IS NULL), 0) = 0
           AND cmem.del_fg = 'N'
           AND NVL(prod.PROD_CL, '00') = '03'
              <if test="wdrw_gubun == null or wdrw_gubun == ''">
                 AND accnt.pay_mthd != '06'
              </if>
              <if test="wdrw_gubun != null and wdrw_gubun != ''">
                  <if test="wdrw_gubun == 'Card'">
                    AND accnt.pay_mthd = '06'
                  </if>
              </if>
           AND (fn_accnt_stat (cmem.accnt_no) != 'Y' AND NVL(prod.PROD_CL, '00') = '03')
           <!-- 수정 : 해약이면서 결합상품 유형이 상품권이면 산출되지 않도록 수정 BY LBK_2013_03_28 -->
           AND NOT (NVL(prod.JOIN_TYPE, '') = '0002' AND fn_accnt_stat (cmem.accnt_no) IN ('R', 'E'))
           AND
           (
            (ADDAMT.EXPR_NO IS NOT NULL AND PAY.NO = PAY1.NO)
            OR
            (ADDAMT.EXPR_NO IS NOT NULL AND PAY.NO != PAY1.NO AND ALLT.EXPR_NO = PAY.NO AND ADDAMT.EXPR_NO != PAY1.NO)
            OR
            (ADDAMT.EXPR_NO IS NOT NULL AND PAY.NO != PAY1.NO AND ALLT.EXPR_NO != PAY.NO AND ADDAMT.EXPR_NO = PAY1.NO)
            OR
            (ADDAMT.EXPR_NO IS NULL AND ALLT.EXPR_NO != PAY.NO)
            OR
            (ALLT.EXPR_NO IS NOT NULL AND ADDAMT.EXPR_NO IS NOT NULL AND NVL(PAY.NO, 0) = 0 AND NVL(PAY1.NO, 0) = 0)
            OR
            (ALLT.EXPR_NO IS NOT NULL AND ADDAMT.EXPR_NO IS NOT NULL AND ALLT.EXPR_NO = NVL(PAY.NO, 1) AND NVL(PAY1.NO, 0) = 0)
            OR
            (ALLT.EXPR_NO IS NOT NULL AND ADDAMT.EXPR_NO IS NOT NULL AND ADDAMT.EXPR_NO = NVL(PAY1.NO, 1) AND NVL(PAY.NO, 0) = 0)
           )


    </select>

    <select id="DlwCmsMap.getDlwLastPayNo" parameterType="map" resultType="int">
    <!-- DM sql-id : selectPayNoByAccntNo -->
        <!--
    /* sql-cms.xml [CMS 구좌별 최종납입회차 조회] ID : cms.selectPayNoByAccntNo 작성자 : 김원진  */
    /* 수정 : 결합상품이면서 행사가있을 경우 의  납입회차 조회 추가 by lbk_2012_07_21*/
    /* 수정 : 결합상품 산출 업무 변경으로 인한 수정 by lbk_2012_11_24
         1. 정상 구좌인데 상조금,결합금중 하나를 완납하고 나머지 금액만 CMS 청구하는 경우 발생
         2. 행사 구좌인데 할부금, 추가금 중 하나를 완납하고 나머지 금액만 CMS 청구하는 경우 발생 */
         -->
    <!--
        SELECT   isnull (MAX (NO), 0)
               + (SELECT new_chan_gunsu
                    FROM mem_prod_accnt
                   WHERE del_fg = 'N' AND accnt_no = #se.accntNo#)
          FROM pay_mng
         WHERE accnt_no = #se.accntNo# AND del_fg = 'N'
    -->
    <!--
        SELECT isnull((case when isnull(mpa.join_cl, '00') = '03' and dbo.fn_accnt_stat(mpa.accnt_no) != 'Y'
                    then (select isnull(count(seq), 0) from pay_mng_dtl where accnt_no = #se.accntNo# and del_fg = 'N')
                    else (select isnull (MAX (NO), 0)
                        from pay_mng
                       where accnt_no = #se.accntNo# and del_fg = 'N') + isnull(new_chan_gunsu, 0)
               end), 0)
          FROM mem_prod_accnt mpa
         WHERE mpa.accnt_no = #se.accntNo#
       and del_fg = 'N'
     -->


        SELECT  /* DlwCmsMap.getDlwLastPayNo */  NVL((CASE WHEN NVL(P.PROD_CL, '00') = '03'
                            THEN CASE WHEN FN_ACCNT_STAT(MPA.ACCNT_NO) = 'Y'
                                      THEN CASE
                                                WHEN FN_YEN_CHE(MPA.ACCNT_NO) = '만기' THEN PAY1.NO
                                                ELSE CASE
                                                          WHEN FN_YEN_CHE_COMB(MPA.ACCNT_NO) = '만기' THEN PAY.NO
                                                          ELSE PAY.NO
                                                     END
                                           END
                                      ELSE CASE
                                                WHEN FN_YEN_CHE_COMB(MPA.ACCNT_NO) = '만기' THEN PAY2.NO
                                                ELSE CASE
                                                          WHEN FN_YEN_CHE_COMB_ADD(MPA.ACCNT_NO) = '만기' THEN PAY1.NO
                                                          ELSE PAY1.NO
                                                     END
                                           END
                                 END
                                ELSE PAY.NO
                       END
               ), 0)
          FROM MEM_PROD_ACCNT MPA
               INNER JOIN PRODUCT P ON MPA.PROD_CD = P.PROD_CD
               LEFT OUTER JOIN PAY_MNG PAY
               ON MPA.ACCNT_NO = PAY.ACCNT_NO
                  AND PAY.DEL_FG = 'N'
                  AND PAY.NO = FN_PAY_MNG(MPA.ACCNT_NO)
               LEFT OUTER JOIN PAY_MNG_DTL PAY1
               ON MPA.ACCNT_NO = PAY1.ACCNT_NO
                  AND PAY1.DEL_FG = 'N'
                  AND PAY1.NO = FN_PAY_MNG_DTL(MPA.ACCNT_NO)
               LEFT OUTER JOIN PAY_MNG_DTL1 PAY2
               ON MPA.ACCNT_NO = PAY2.ACCNT_NO
                    AND PAY2.DEL_FG = 'N'
                  AND PAY2.NO = FN_PAY_MNG_DTL1(MPA.ACCNT_NO)
         WHERE MPA.ACCNT_NO = #{accnt_no}
           AND MPA.DEL_FG = 'N'
    </select>

    <!--
    ASIS의 DlwCmsMap.insertDlwWdrwCallCenter 쿼리 중 SELECT 절을 분리
    -->
    <select id="DlwCmsMap.getInvNoAndSeq" parameterType="map" resultType="resultMap">
        SELECT /* DlwCmsMap.getInvNoAndSeq */
                TO_CHAR((SELECT NVL((SELECT CASE WHEN NVL(PROD.PROD_CL, '00') = '03'
                                           THEN CASE WHEN FN_ACCNT_STAT(MPA.ACCNT_NO) = 'Y'
                                                 THEN CASE
                                                           WHEN FN_YEN_CHE(MPA.ACCNT_NO) = '만기' THEN PAY1.NO + ${inv_gunsu}
                                                           ELSE CASE
                                                                     WHEN FN_YEN_CHE_COMB(MPA.ACCNT_NO) = '만기' THEN PAY.NO + ${inv_gunsu}
                                                          ELSE PAY.NO + ${inv_gunsu}
                                                                END
                                                      END
                                                 ELSE CASE
                                                           WHEN FN_YEN_CHE_COMB(MPA.ACCNT_NO) = '만기' THEN PAY2.NO + ${inv_gunsu}
                                                           ELSE CASE
                                                                     WHEN FN_YEN_CHE_COMB_ADD(MPA.ACCNT_NO) = '만기' THEN PAY1.NO + ${inv_gunsu}
                                                                     ELSE PAY1.NO + ${inv_gunsu}
                                                                END
                                                      END
                                            END
                                           ELSE PAY.NO + ${inv_gunsu}
                                  END
                             FROM MEM_PROD_ACCNT MPA
                                  INNER JOIN PRODUCT PROD ON MPA.PROD_CD = PROD.PROD_CD
                                  LEFT OUTER JOIN (SELECT * FROM (SELECT ROW_NUMBER()OVER(PARTITION BY ACCNT_NO ORDER BY NO DESC) CNT,PAY_MNG.*
                                                                  FROM PAY_MNG
                                                                  WHERE DEL_FG = 'N')
                                                   WHERE CNT = 1 ) PAY ON MPA.ACCNT_NO = PAY.ACCNT_NO
                                  LEFT OUTER JOIN (SELECT * FROM (SELECT ROW_NUMBER()OVER(PARTITION BY ACCNT_NO ORDER BY NO DESC) CNT,PAY_MNG_DTL.*
                                                                  FROM PAY_MNG_DTL
                                                                  WHERE DEL_FG = 'N')
                                                   WHERE CNT = 1 ) PAY1 ON MPA.ACCNT_NO = PAY1.ACCNT_NO
                                  LEFT OUTER JOIN (SELECT * FROM (SELECT ROW_NUMBER()OVER(PARTITION BY ACCNT_NO ORDER BY NO DESC) CNT,PAY_MNG_DTL1.*
                                                                  FROM PAY_MNG_DTL1
                                                                  WHERE DEL_FG = 'N')
                                                   WHERE CNT = 1 ) PAY2 ON MPA.ACCNT_NO = PAY2.ACCNT_NO
                            WHERE MPA.ACCNT_NO = #{accnt_no}
                              AND MPA.DEL_FG = 'N'),  0 +  ${inv_gunsu})  from dual )) P_INV_NO

               , TO_CHAR( (SELECT CASE WHEN PAY_MTHD = '06' THEN
                                (SELECT NVL(MAX (seq) + 1, '1') AS seq
                                  FROM CARD_WDRW_REQ
                                 WHERE accnt_no = #{accnt_no})
                            ELSE (SELECT NVL(MAX (seq) + 1, '1') AS seq
                                    FROM WDRW_REQ
                                   WHERE accnt_no = #{accnt_no})
                            END
                    FROM MEM_PROD_ACCNT
                   WHERE ACCNT_NO = #{accnt_no})  ) P_SEQ
          FROM DUAL
    </select>

    <!--
    DlwCmsMap.insertDlwWdrwCallCenter 쿼리 2개로 분리
    -->
    <insert id="DlwCmsMap.insertDlwWdrwCallCenter" parameterType="map">
    <!-- DM sql-id : insertCMSWDRWReqCallCenter -->
        INSERT /* DlwCmsMap.insertDlwWdrwCallCenter */
          INTO WDRW_REQ_CALL_CENTER
                    (seq
                    , accnt_no
                    , inv_no
                    , payr_no
                    , bank_cd
                    , bank_accnt_no
                 <!--    , idn_no  -->
                    , bank_filin_brkdn
                    , wdrw_req_amt
                    , inv_gunsu
                    , inv_dt
                    , stat
                    , cl
                    , reg_dm
                    , reg_man
                    , upd_dm
                    , upd_man
                    , note
                    , WDRW_REQ_YN
                    , GUBUN
                    , EXPIRE_DATE
                    , birth
                    ,IDNTT
                    )
               SELECT #{p_seq}
                    , #{accnt_no}
                    , #{p_inv_no}
                    , #{mem_no}
                    , #{bank_cd}
                    , #{bank_accnt_no}
                    , SUBSTR(#{bank_filin_brkdn} || #{p_inv_no}, 1, 8)
                    , #{wdrw_req_amt}
                    , #{inv_gunsu}
                    , #{inv_dt}
                    , #{stat}
                    , '6'
                    , SYSDATE
                    , #{emple_no}
                    , SYSDATE
                    , #{emple_no}
                    , #{note}
                    , 'N'
                    , #{gubun}
                    , #{expire_date}
                    , NVL(#{idn_no},'')
                    ,WDRW_REQ_CALL_CENTER_SEQ.NEXTVAL
                FROM DUAL
    </insert>


    <select id="DlwCmsMap.getDlwWdrwHstr" parameterType="map"
        resultType="resultMap">
        <!-- DM sql-id : selectWDRWHistory -->


        SELECT /*DlwCmsMap.getDlwWdrwHstr*/
        /*+INDEX(REQ IDX_WDRW_REQ_STAT) */
            REQ.SEQ
        , REQ.ACCNT_NO
        , REQ.PAYR_NO
        , MEM.MEM_NM
        , CMEM.ICHAE_DT
        , CMEM.ICHAE_LIMIT_GUNSU
        , PROD.MON_PAY_AMT
        , CASE WHEN NVL(prod.PROD_CL, '00') = '03'
        THEN CASE WHEN ACCNT.KSTBIT NOT IN ( '03','04')
        THEN CASE
        WHEN ACCNT.KSTBIT = '09' THEN (SELECT SUM( END_NO -
        ST_NO + 1 ) FROM PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD AND
        ALLT_AMT<![CDATA[>]]>
        0)
        ELSE CASE
        WHEN ACCNT.KSTBIT = '09' THEN (PROD.EXPR_NO
        -ACCNT.NEW_CHAN_GUNSU)
        ELSE (PROD.EXPR_NO -ACCNT.NEW_CHAN_GUNSU)
        END
        END
        ELSE CASE
        WHEN ACCNT.KSTBIT = '09' THEN (SELECT SUM( END_NO -
        ST_NO + 1 ) FROM PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD AND
        ADD_AMT<![CDATA[>]]>
        0)
        ELSE CASE
        WHEN ACCNT.KSTBIT = '09' THEN (SELECT SUM(
        END_NO - ST_NO + 1 ) FROM PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD
        AND ALLT_AMT<![CDATA[>]]>
        0)
        ELSE (SELECT SUM( END_NO - ST_NO + 1 ) FROM PRODUCT_DTL WHERE PROD_CD
        = PROD.PROD_CD AND ALLT_AMT<![CDATA[>]]>
        0)
        END
        END
        END
        ELSE (PROD.EXPR_NO -ACCNT.NEW_CHAN_GUNSU)
        END EXPR_NO
        , REQ.INV_GUNSU
        , REQ.WDRW_REQ_AMT
        , REQ.BANK_CD
        , FN_COM_NM ('63', REQ.BANK_CD) BANK_NM
        ,REQ.BANK_ACCNT_NO AS BANK_ACCNT_NO
        , req.birth idn_no

        , REQ.BANK_FILIN_BRKDN
        , REQ.INV_NO
        , ACCNT.OLD_MID
        , CMEM.SYNC_NO
        , FN_COM_NM ('67', REQ.CL) CL
        FROM WDRW_REQ REQ
            INNER JOIN MEM_PROD_ACCNT ACCNT  ON ACCNT.ACCNT_NO = REQ.ACCNT_NO AND ACCNT.DEL_FG = 'N'
            INNER JOIN PRODUCT PROD ON PROD.PROD_CD = ACCNT.PROD_CD AND PROD.DEL_FG = 'N'
        LEFT OUTER JOIN CMS_MEM CMEM  ON CMEM.ACCNT_NO = ACCNT.ACCNT_NO AND CMEM.DEL_FG = 'N'
        INNER JOIN MEMBER MEM ON MEM.MEM_NO = ACCNT.MEM_NO AND MEM.DEL_FG = 'N'
        WHERE REQ.STAT = '01'
        <if test="accnt_no != null and accnt_no != ''">
            AND REQ.ACCNT_NO = #{accnt_no}
            <if test="seq != null and seq != ''">
                <if test="seq.equalsIgnoreCase('0')">
                    AND REQ.SEQ = (SELECT MAX (SEQ)
                    FROM CARD_WDRW_REQ
                    WHERE ACCNT_NO = #{accnt_no})
                </if>
                <if test="!seq.equalsIgnoreCase('0')">
                    AND REQ.SEQ = #{seq}
                </if>
            </if>
        </if>
        ORDER BY MEM.MEM_NM
    </select>


    <update id="DlwCmsMap.updateAllWdrwCallCenterTemp" parameterType="map">
        <!-- DM sql-id : updateAllWdrwCallCenterTemp -->
        /* DlwCmsMap.updateAllWdrwCallCenterTemp */


        UPDATE wdrw_req_call_center SET
            WDRW_REQ_YN='N'
            , upd_dm = SYSDATE
            , upd_man = #{emple_no}
        WHERE wdrw_req_yn='Y'
        AND inv_dt = (SELECT  inv_dt FROM wdrw_req WHERE stat ='01' AND cl=6 AND ROWNUM=1)
        AND gubun='CMS'
        AND accnt_no in (SELECT accnt_no FROM wdrw_req WHERE stat='01' AND cl=6)
        AND DEL_FG IS NULL
    </update>

    <delete id="DlwCmsMap.deleteAllWdrwTemp" parameterType="map">
        <!-- DM sql-id : deleteAllWdrwTemp -->
        /* DlwCmsMap.deleteAllWdrwTemp */
        DELETE FROM wdrw_req
               WHERE stat = '01'
    </delete>

 <parameterMap id="selectCmsMemberByIchaeDtMap" type="resultMap"><!-- /*java.util.HashMap*/ -->
        <parameter property="ichae_stt_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="ichae_end_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="INOUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </parameterMap>



   <select id="DlwCmsMap.getCmsMemberByIchaeDt" statementType="CALLABLE" parameterMap="selectCmsMemberByIchaeDtMap">
           {call SP_CMS_ICHAE_DT_WDRW(?, ?, ?, ?)}

    </select>


    <parameterMap id="selectCmsMemberByimsiIchaeDtMap" type="resultMap"><!-- /*java.util.HashMap*/ -->
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="INOUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </parameterMap>



   <select id="DlwCmsMap.getCmsMemberByimsiIchaeDt" statementType="CALLABLE" parameterMap="selectCmsMemberByimsiIchaeDtMap">
           {call SP_CMS_IMSI_ICHAE_DT_WDRW(?, ?)}
    </select>


    <parameterMap id="selectNiceMemberByIchaeDtMap" type="resultMap">
        <parameter property="ichae_stt_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="ichae_end_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="INOUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </parameterMap>

   <select id="DlwCmsMap.getNiceMemberByIchaeDt" statementType="CALLABLE" parameterMap="selectNiceMemberByIchaeDtMap">
      {call SP_NICE_ICHAE_DT_WDRW(?, ?, ?, ?)}
    </select>

    <parameterMap id="selectCmsMemberyencheByIchaeDtMap" type="resultMap"><!-- /*java.util.HashMap*/ -->
        <parameter property="ichae_stt_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="ichae_end_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="INOUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </parameterMap>



   <select id="DlwCmsMap.getCmsMember_yencheByIchaeDt" statementType="CALLABLE" parameterMap="selectCmsMemberyencheByIchaeDtMap">
           {call SP_CMS_ICHAE_DT_WDRW_YENCHE(?, ?, ?, ?)}

    </select>

    <parameterMap id="selectNiceMemberyencheByIchaeDtMap" type="resultMap"><!-- /*java.util.HashMap*/ -->
        <parameter property="ichae_stt_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="ichae_end_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="INOUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </parameterMap>



   <select id="DlwCmsMap.getNiceMember_yencheByIchaeDt" statementType="CALLABLE" parameterMap="selectNiceMemberyencheByIchaeDtMap">
           {call SP_NICE_ICHAE_DT_WDRW_YENCHE(?, ?, ?, ?)}

    </select>




    <select id="DlwCmsMap.getCallWdrwReqCheck" parameterType="map" resultType="int">
        <!-- DM sql-id : callWdrwReqCheck -->

    <!--
        SELECT COUNT(*)
          FROM dbo.WDRW_REQ WR
         WHERE WR.STAT = '01'
           AND WR.ACCNT_NO IN (SELECT ACCNT_NO
                                 FROM dbo.WDRW_REQ_CALL_CENTER WRCC
                                WHERE WRCC.WDRW_REQ_YN = 'N'
                                  AND CONVERT(VARCHAR, WRCC.INV_DT, 111) &lt;= #invDt#
                                  AND GUBUN = 'CMS')
     -->


        SELECT /* DlwCmsMap.getCallWdrwReqCheck */
               COUNT(WRCC.ACCNT_NO)
          FROM WDRW_REQ_CALL_CENTER WRCC
               INNER JOIN MEM_PROD_ACCNT ACCNT ON WRCC.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
         WHERE WRCC.WDRW_REQ_YN = 'N'
           AND WRCC.INV_DT <![CDATA[<=]]>  #{inv_dt}
           AND WRCC.GUBUN = 'CMS'
           AND WRCC.DEL_FG IS NULL
    </select>

    <select id="DlwCmsMap.getCallDupWdrw" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : selectCallDupWdrw -->


        SELECT /* DlwCmsMap.getCallDupWdrw */
                WR.ACCNT_NO accnt_no
          FROM WDRW_REQ WR
               INNER JOIN WDRW_REQ_CALL_CENTER WRCC ON WR.ACCNT_NO = WRCC.ACCNT_NO AND WRCC.GUBUN = 'CMS' AND WRCC.WDRW_REQ_YN = 'N' AND WRCC.DEL_FG IS NULL
         WHERE WR.STAT = '01'
    </select>

    <update id="DlwCmsMap.updateCmsAppStateLrqnt" parameterType="map">
        <!-- DM sql-id : updateCmsAppState1 -->
        UPDATE /* DlwCmsMap.updateCmsAppStateLrqnt */
               WDRW_REQ
           SET stat = '02'
             , inv_dt = #{inv_dt}
         WHERE stat = '01'
    </update>

    <select id="DlwCmsMap.getCmsResultFileNm" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : readCmsResultFileName -->

        SELECT /* DlwCmsMap.getCmsResultFileNm */
                 AA.* FROM (
            select SUBSTR(inv_dt,-6) AS label,SUBSTR(inv_dt,-6) AS data from WDRW_REQ where stat='02' and INV_DT !=' ' group by inv_dt
            UNION ALL
            SELECT
               FILE_NM AS label
             , FILE_NM AS data
          FROM CMS_RESULT_INFO
        GROUP BY FILE_NM
        ) AA
        ORDER BY label DESC
    </select>



    <parameterMap id="getCmsAppIsTransEb22Map" type="map"><!-- /*java.util.HashMap*/ -->
        <parameter property="yymmdd" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="OUT" jdbcType="VARCHAR" javaType="java.lang.String"  />
    </parameterMap>



   <select id="DlwCmsMap.getCmsAppIsTransEb22" statementType="CALLABLE" parameterMap="getCmsAppIsTransEb22Map">
            <!-- DM sql-id : selectCMSAppIsTransByEB22 -->
        <!-- 결과코드
          A : 적용완료
          B : 적용완료(입금건수 0)
          C : 처리 전
          D : 입금시 오류가 발생하였거나 완료 업데이트중 오류 발생
          E : 입금 적용 전 오류 갈생
         -->
           {call SP_TRANSEB22(?, ?)}

    </select>


       <parameterMap id="imsiinsertEb2211Map" type="map"><!-- /*java.util.HashMap*/ -->
        <parameter property="yymmdd" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
    </parameterMap>



   <select id="DlwCmsMap.immsiinsert" statementType="CALLABLE" parameterMap="imsiinsertEb2211Map">

           {call SP_R_INSERT(?)}

    </select>



    <select id="DlwCmsMap.getReadFileCms" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : readFileCms -->


        SELECT /* DlwCmsMap.getReadFileCms */
               CRI.ACCNT_NO AS ACCNT_NO
             , WR.BANK_CD AS BANK_CD
             , FN_COM_NM('63', WR.BANK_CD) AS BANK_NM
             , WR.BANK_ACCNT_NO AS BANK_ACCNT_NO
             , WR.BIRTH AS IDN_NO
             , WR.WDRW_REQ_AMT AS IMPS_AMT
             , CRI.IMPS_CD AS IMPS_CD
             , FN_COM_NM('15', CRI.IMPS_CD) AS IMPS_NM
             , WR.STAT STAT_GUBUN
          FROM CMS_RESULT_INFO CRI
               INNER JOIN WDRW_REQ WR ON WR.ACCNT_NO = CRI.ACCNT_NO AND SUBSTR(WR.INV_DT,-6) = #{yymmdd}
         WHERE CRI.FILE_NM = #{file_nm}
    </select>

    <select id="DlwCmsMap.getEB22WdrwCount" parameterType="map" resultType="int">
        <!-- DM sql-id : selectWdrwCntByDate -->


        SELECT /* DlwCmsMap.getEB22WdrwCount */
               COUNT (*)
          FROM WDRW_REQ
         WHERE SUBSTR(inv_dt, -6) = #{yymmdd}
    </select>


        <select id="DlwCmsMap.CmsMemberByIchaeCount" parameterType="map" resultType="int">
        <!-- DM sql-id : selectWdrwCntByDate -->


        SELECT /* DlwCmsMap.CmsMemberByIchaeCount */
               COUNT (*)
        from WDRW_REQ where stat not in ('03','04','05')
    </select>

    <parameterMap id="cmsResultMap" type="resultMap">
        <parameter property="file_nm" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="pay_dt" mode="IN" jdbcType="VARCHAR" javaType="java.lang.String" />
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="OUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
        <parameter property="gasu" mode="OUT" jdbcType="VARCHAR"  javaType="java.lang.String" />
    </parameterMap>
    <update id="DlwCmsMap.cmsResultProc" statementType="CALLABLE" parameterMap="cmsResultMap">
        <!-- DM sql-id : cmsResultProc -->
        {call SP_CMS_PAY_RESULT_PROC_IPMST(?, ?, ?,?,?)}
    </update>

    <select id="DlwCmsMap.getWdrwHstrByInvDt" parameterType="map" resultType="resultMap" timeout="300">
        <!-- DM sql-id : selectWDRWHistoryByInvDt -->


        SELECT
                /*+INDEX(req IDX_WDRW_REQ_INV_DT) */
                /* DlwCmsMap.getWdrwHstrByInvDt */
                 DISTINCT(ACCNT.ACCNT_NO)
               , FN_DEPT_NM(EMPL.DEPT_CD)AS DEPT_NM
               , EMPL.EMPLE_NM
               , ACCNT.OLD_MID
               , ACCNT.MEM_NM
               , FN_PAY_MNG(ACCNT.ACCNT_NO) LAST_PAY_NO
               , FN_YEN_CHE (ACCNT.ACCNT_NO) YENCHE_STAT
               , REQ.INV_GUNSU
               , REQ.WDRW_REQ_AMT
               , FN_COM_NM ('18', REQ.STAT) STAT
               , REQ.BANK_FILIN_BRKDN
               , REQ.SEQ
               , PAY_APP_DT INV_DT
               , FN_PROD_NM(ACCNT.PROD_CD) PROD_NM
          <if test="wdrw_gubun == null or wdrw_gubun == ''">
               , FN_COM_NM ('15', REQ.IMPS_CD) IMPS_NM
               , '' IMPS_NM2
               ,CMS.CMS_JOIN_DT CMS_JOIN_DT
               , FN_COM_NM ('63', CMS.BANK_CD) BANK_NM
              ,  cms.bank_accnt_no  AS bank_accnt_no
               , 0 INSTALL_PEROD
               , '' CARD_CD
               , '' CARD_NM
               , '' REAL_CARD_NM
               , '' CARD_NO
               , '' EXPIRE_DATE
               , '' PAY_dt
               , '' KCC_SND_CD
               , '' AUTH_NO
           FROM WDRW_REQ req
          </if>
          <if test="wdrw_gubun != null and wdrw_gubun != ''">
              <if test="wdrw_gubun == 'Card'">
               , FN_COM_NM ('0121', REQ.IMPS_CD) IMPS_NM
               , NVL(FN_COM_NM ('0122', REQ.APPRV_CD), '') IMPS_NM2
               , '' CMS_JOIN_DT
               , '' BANK_NM
               , '' BANK_ACCNT_NO
               , REQ.INSTALL_PEROD
               , REQ.CARD_CD
               , FN_COM_NM('0120', REQ.CARD_CD) CARD_NM
               , CASE WHEN  REQ.INV_DT<![CDATA[>]]> '20140213'   THEN FN_COM_NM('0165', REQ.REAL_CARD_CD)
                    ELSE FN_COM_NM('0120', REQ.REAL_CARD_CD) END  REAL_CARD_NM

               , req.CARD_NO  AS CARD_NO
               , req.EXPIRE_DATE
               , cms.PAY_DT
               , req.KCC_SND_CD
               , req.AUTH_NO
            FROM CARD_WDRW_REQ req
              </if>
              <if test="wdrw_gubun == 'CardBatch'">
               , FN_COM_NM ('0121', REQ.IMPS_CD) IMPS_NM
               , NVL(FN_COM_NM ('0122', REQ.APPRV_CD), '') IMPS_NM2
               , '' CMS_JOIN_DT
               , '' BANK_NM
               , '' BANK_ACCNT_NO
               , REQ.INSTALL_PEROD
               , REQ.CARD_CD
               , FN_COM_NM('0120', REQ.CARD_CD) CARD_NM
               , CASE WHEN   REQ.INV_DT<![CDATA[>]]> '2014/02/13' THEN FN_COM_NM('0165', REQ.REAL_CARD_CD)
               ELSE FN_COM_NM('0120', REQ.REAL_CARD_CD) END REAL_CARD_NM
              , req.CARD_NO AS CARD_NO
               , REQ.EXPIRE_DATE
               , REQ.INV_DT  PAY_DT
               , REQ.KCC_SND_CD
               , REQ.AUTH_NO
            FROM CARD_WDRW_REQ REQ
              </if>
          </if>
             LEFT OUTER JOIN (SELECT * FROM  MEM_PROD_ACCNT
                                      LEFT OUTER JOIN  MEMBER  ON MEM_PROD_ACCNT.MEM_NO = MEMBER.MEM_NO  ) ACCNT ON  REQ.ACCNT_NO = ACCNT.ACCNT_NO

             LEFT OUTER JOIN EMPLOYEE   EMPL  ON EMPL.EMPLE_NO = ACCNT.EMPLE_NO

          <if test="wdrw_gubun == null or wdrw_gubun == ''">
                 LEFT OUTER JOIN CMS_MEM CMS ON CMS.ACCNT_NO = ACCNT.ACCNT_NO
          </if>
          <if test="wdrw_gubun != null and wdrw_gubun != ''">
              <if test="wdrw_gubun == 'Card'">
               LEFT OUTER JOIN CARD_MEM CMS  ON CMS.ACCNT_NO = ACCNT.ACCNT_NO AND NVL(CMS.BID, '') != ''
               LEFT OUTER JOIN RT_CARD_PAY_LOG RL ON CMS.ACCNT_NO = RL.ACCNT_NO
                AND RL.MENU_GBN='0004'
              </if>
              <if test="wdrw_gubun == 'CardBatch'">
               LEFT OUTER JOIN CARD_MEM CMS ON CMS.ACCNT_NO = ACCNT.ACCNT_NO AND NVL(CMS.BID, '') != ''
               LEFT OUTER JOIN RT_CARD_PAY_LOG RL ON CMS.ACCNT_NO = RL.ACCNT_NO
                AND RL.MENU_GBN='0003'
              </if>
          </if>
           WHERE 1=1
           <if test="dataAthrQury != null and dataAthrQury != ''">
               ${dataAthrQury}
           </if>
          <if test="wdrw_gubun != null and wdrw_gubun != ''">
              <if test="wdrw_gubun == 'Card'">
                  AND  NVL(req.EXP_FG,'F') ='F'
              </if>
              <if test="wdrw_gubun == 'CardBatch'">
                  AND req.EXP_FG ='B'
              </if>
          </if>
          <if test="inv_stt_dt == 'pre'">
              AND req.stat = '01'
              <if test="inv_end_dt != 'pre'">
                  AND INV_DT <![CDATA[<]]> #{inv_end_dt}
              </if>
          </if>
          <if test="inv_stt_dt != 'pre'">
              <if test="inv_end_dt != 'pre'">
                  AND INV_DT BETWEEN #{inv_stt_dt} AND #{inv_end_dt}
              </if>
              <if test="inv_end_dt == 'pre'">
                  AND INV_DT <![CDATA[>]]> #{inv_stt_dt}
              </if>
          </if>
    </select>

    <select id="DlwCmsMap.getWdrwHstrSttc" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectWDRWHistStatsByInvDt -->


        SELECT /* DlwCmsMap.getWdrwHstrSttc */
              dept_nm as dept_nm
              , count(accnt_no) cnt
              <if test="gubun_fg == 'CMS'">
              , count(accnt_no) * NVL((select WDRW_IMPS_COM from cms_com), 0) wdrw_Charge
              </if>
              <if test="gubun_fg == 'CARD'">
              , '-' wdrw_Charge
              </if>
              , sum(wdrw_req_amt) wdrw_Amt
              , sum(newAmt)+sum(yujiAmt) as real_Amt
              , sum(newCnt) new_Cnt
              , sum(yujiCnt) yuji_Cnt
              , sum(newAmt) new_Amt
              , sum(yujiAmt) yuji_Amt
              <if test="gubun_fg == 'CMS'">
              , (sum(newCnt)+sum(yujiCnt)) * NVL((select WDRW_COM from cms_com), 0) pay_Charge
              , (sum(newCnt)+sum(yujiCnt)) * NVL((select WDRW_COM from cms_com), 0)
                + count(accnt_no) * NVL((select WDRW_IMPS_COM from cms_com), 0) charge
              </if>
              <if test="gubun_fg == 'CARD'">
              , sum(pay_charge) pay_Charge
              , sum(pay_charge) charge
              </if>
        FROM
        (SELECT
            dep.lvl_dept_cd
           , dn.dept_nm
           , wr.stat
           , wr.accnt_no
           , TO_NUMBER(wr.wdrw_req_amt) wdrw_req_amt
            , case when stat='04' and inv_no =1 then 1 else 0 end newCnt
            , case when stat='04' and inv_no<![CDATA[>]]> 1 then 1 else 0 end yujiCnt
            , TO_NUMBER( case when stat='04' and inv_no = 1 then wr.wdrw_req_amt else 0 end) newAmt
            , TO_NUMBER( case when stat='04' and inv_no<![CDATA[>]]> 1 then wr.wdrw_req_amt else 0 end) yujiAmt
            <if test="gubun_fg == 'CARD'">
            , TO_NUMBER(case when stat='04' then convert(int, convert(numeric, wdrw_req_amt)*(0.018)) else 0 end) pay_charge
            </if>
          FROM
          <if test="gubun_fg == 'CMS'">
            WDRW_REQ wr
          </if>
          <if test="gubun_fg == 'CARD'">
            CARD_WDRW_REQ wr
          </if>
          JOIN MEM_PROD_ACCNT mpa on wr.ACCNT_NO = mpa.ACCNT_NO
          INNER JOIN PRODUCT P ON mpa.PROD_CD = P.PROD_CD
          JOIN EMPLOYEE e on e.emple_no=mpa.emple_no
          left JOIN
          (select
            dept_cd
            , lvl
            , case when lvl=1 then dept_cd
                   when lvl=2 then dept_cd
                   when lvl=3 then high_dept_cd
                   when lvl=4 then (SELECT high_dept_Cd FROM department WHERE dept_cd=dp.high_dept_cd)
                   when lvl=5 then  (SELECT high_dept_cd FROM department WHERE dept_cd = (SELECT high_dept_Cd FROM department WHERE dept_cd=dp.high_dept_cd))
                   when lvl=6 then  (SELECT high_dept_cd FROM department
                                      WHERE dept_cd =(SELECT high_dept_cd FROM department
                                                WHERE dept_cd = (SELECT high_dept_Cd FROM department WHERE dept_cd=dp.high_dept_cd)))
                   else dept_cd
            end  as lvl_dept_cd
          FROM department dp
           )dep on e.dept_cd=dep.dept_cd
           JOIN department dn on dn.dept_cd=dep.lvl_dept_cd
         WHERE 1=1
         AND P.PROD_CL != '03'
         AND pay_app_dt between #{inv_stt_dt} and  #{inv_end_dt}
         <if test="inv_stt_dt == 'pre'">
             <if test="inv_end_dt != 'pre'">
                 AND pay_app_dt <![CDATA[<]]> #{inv_end_dt}
             </if>
         </if>
         <if test="inv_stt_dt != 'pre'">
             <if test="inv_end_dt != 'pre'">
                 AND pay_app_dt between #{inv_stt_dt} and #{inv_end_dt}
             </if>
             <if test="inv_end_dt == 'pre'">
                 AND pay_app_dt <![CDATA[>]]> #{inv_stt_dt}
             </if>
         </if>
        )tmp
        group by lvl_dept_cd, dept_Nm
        ORDER BY lvl_dept_cd
    </select>

    <select id="DlwCmsMap.getWdrwHstrStatsSumByInvDt" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectWDRWHistStatsSumByInvDt -->




        SELECT

          /* DlwCmsMap.getWdrwHstrStatsSumByInvDt*/
          '건수' as gbn
          , count(accnt_no) wdrw
          , sum(pay) pay
          , sum(wdrwErr) wdrw_err
          , sum(newTot) new_tot
          , sum(new) new_amt
          , cast((CAST(sum(new) as float)/CAST(sum(newTot) as float))*100 as int) new_per
          , sum(yujiTot) yuji_tot
          , sum(yuji) yuji
          , cast((CAST(sum(yuji) as float)/CAST(sum(yujiTot) as float))*100 as int) yuji_per
          , count(accnt_no) charge
        FROM
        (SELECT
            wr.accnt_no
            , case when stat='04' then 1 else 0 end pay
            , case when stat='04' then 0 else 1 end wdrwErr
            , case when inv_no =1 then 1 else 0 end newTot
            , case when stat='04' and inv_no =1 then 1 else 0 end new
            , case when inv_no<![CDATA[>]]> 1 then 1 else 0 end yujiTot
            , case when stat='04' and inv_no<![CDATA[>]]> 1 then 1 else 0 end yuji
        FROM
        <if test="gubun_fg == 'CMS'">
            WDRW_REQ wr
        </if>
        <if test="gubun_fg == 'CARD'">
            CARD_WDRW_REQ wr
        </if>
          JOIN MEM_PROD_ACCNT mpa on wr.ACCNT_NO = mpa.ACCNT_NO
          inner join employee emp on mpa.emple_no = emp.emple_no
         WHERE 1=1
         <if test="dataAthrQury != null and dataAthrQury != ''">
             ${dataAthrQury}
         </if>

         <if test="wdrw_gubun != null and wdrw_gubun != ''">
             <if test="wdrw_gubun == 'CardBatch'">
                 AND wr.EXP_FG ='B'
             </if>
             <if test="wdrw_gubun == 'Card'">
                 AND isnull(wr.EXP_FG,'F') ='F'
             </if>
         </if>

         <if test="inv_stt_dt == 'pre'">
             <if test="inv_end_dt != 'pre'">
                 AND pay_app_dt <![CDATA[<]]> #{inv_end_dt}
             </if>
         </if>
         <if test="inv_stt_dt != 'pre'">
             <if test="inv_end_dt != 'pre'">
                 AND pay_app_dt between #{inv_stt_dt} and #{inv_end_dt}
             </if>
             <if test="inv_end_dt == 'pre'">
                 AND pay_app_dt <![CDATA[>]]> #{inv_stt_dt}
             </if>
         </if>
        )tmp

    </select>


    <select id="DlwCmsMap.getWdrwHstrStatsCombByInvDt" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectWDRWHistStatsCombByInvDt -->


        SELECT /* DlwCmsMap.getWdrwHstrStatsCombByInvDt */
              NVL(#{cl_nm}, '') as dept_Nm
              , count(accnt_no) cnt
             <if test="gubun_fg == 'CMS'">
                 , count(accnt_no) * NVL((select WDRW_IMPS_COM from cms_com), 0) wdrw_Charge
             </if>
             <if test="gubun_fg == 'CARD'">
                 , '-' wdrw_Charge
             </if>
              , sum(wdrw_req_amt) wdrw_Amt
              , sum(newAmt)+sum(yujiAmt) as real_Amt
              , sum(newCnt) new_Cnt
              , sum(yujiCnt) yuji_Cnt
              , sum(newAmt) new_Amt
              , sum(yujiAmt) yuji_Amt
             <if test="gubun_fg == 'CMS'">
              , (sum(newCnt)+sum(yujiCnt)) * NVL((select WDRW_COM from cms_com), 0) pay_Charge
              , (sum(newCnt)+sum(yujiCnt)) * NVL((select WDRW_COM from cms_com), 0)
                + count(accnt_no) * NVL((select WDRW_IMPS_COM from cms_com), 0) charge
             </if>
             <if test="gubun_fg == 'CARD'">
              , sum(pay_charge) pay_Charge
              , sum(pay_charge) charge
             </if>
            FROM
            (SELECT
                 dept.dept_nm
               , wr.stat
           , accnt.PROD_CD
           , prod.PROD_CL
               , wr.accnt_no
               , wr.wdrw_req_amt
                , case when stat='04' and inv_no = 1 then 1 else 0 end newCnt
                , case when stat='04' and inv_no<![CDATA[>]]> 1 then 1 else 0 end yujiCnt
                , case when stat='04' and inv_no = 1 then wr.wdrw_req_amt else 0 end newAmt
                , case when stat='04' and inv_no<![CDATA[>]]> 1 then wr.wdrw_req_amt else 0 end yujiAmt
             <if test="gubun_fg == 'CARD'">
              , case when stat='04' then  ROUND(wdrw_req_amt*(0.018),1) else 0 end pay_charge
             </if>
              FROM
             <if test="gubun_fg == 'CMS'">
                 WDRW_REQ wr
             </if>
             <if test="gubun_fg == 'CARD'">
                 CARD_WDRW_REQ wr
             </if>
              INNER JOIN MEM_PROD_ACCNT accnt ON wr.ACCNT_NO = accnt.ACCNT_NO
          inner join MEMBER MEM ON accnt.MEM_NO = MEM.MEM_NO
          INNER JOIN PRODUCT prod ON accnt.PROD_CD = prod.PROD_CD
              INNER JOIN EMPLOYEE emp ON emp.emple_no=accnt.emple_no
              INNER JOIN department dept ON dept.dept_cd=emp.dept_cd
             WHERE 1=1
             <if test="dataAthrQury != null and dataAthrQury != ''">
                 ${dataAthrQury}
             </if>

             <if test="gubun_fg == 'CARD'">
                 <if test="wdrw_gubun != null and wdrw_gubun != ''">
                     <if test="wdrw_gubun == 'CardBatch'">
                         AND wr.EXP_FG ='B'
                     </if>
                     <if test="wdrw_gubun == 'Card'">
                         AND NVL(wr.EXP_FG,'F') ='F'
                     </if>
                 </if>
             </if>
             <if test="inv_stt_dt == 'pre'">
                 <if test="inv_end_dt != 'pre'">
                     AND pay_app_dt <![CDATA[<]]> #{inv_end_dt}
                 </if>
             </if>
             <if test="inv_stt_dt != 'pre'">
                 <if test="inv_end_dt != 'pre'">
                     AND pay_app_dt between #{inv_stt_dt} and #{inv_end_dt}
                 </if>
                 <if test="inv_end_dt == 'pre'">
                     AND pay_app_dt <![CDATA[>]]> #{inv_stt_dt}
                 </if>
             </if>
         AND prod.PROD_CL = '03'
         ${condQury}
            )tmp
    </select>

    <update id="DlwCmsMap.updateWdrwApclCancCard"  parameterType="map" >
        <!-- DM sql-id : updateWDRWAppStateFile -->
        UPDATE /* DlwCmsMap.updateWdrwApclCancCard */
               CARD_WDRW_REQ
           SET STAT = '01'
              , INV_DT =''
             , UPD_DM = SYSDATE
         WHERE STAT = '02'
    </update>

    <delete id="DlwCmsMap.deleteNiceCardLog"  parameterType="map" >
        <!-- DM sql-id : deleteNiceCardLog -->
        DELETE /* DlwCmsMap.deleteNiceCardLog */
          FROM RT_CARD_PAY_LOG
         WHERE PAY_DT = #{inv_dt}
           AND MENU_GBN = '0004'
           AND NVL(RESULT_CODE, '99') = '99'
    </delete>

    <update id="DlwCmsMap.updateWdrwApclCancCms"  parameterType="map" >
        <!-- DM sql-id : updateWDRWAppStateCms -->
        UPDATE WDRW_REQ
           SET STAT = '01'
             ,INV_DT = ''
             , UPD_DM = SYSDATE
         WHERE INV_DT = #{inv_dt}
           AND STAT = '02'
    </update>

    <select id="DlwCmsMap.getCmsMem" parameterType="map" resultType="string">
        <!-- DM sql-id : selectIsCMSMem -->


        SELECT /* DlwCmsMap.getCmsMem */
               CASE WHEN  FN_EB11_ACCNT_NO_CNT(#{accnt_no}) = 0
                    THEN 'E'
                    WHEN NVL(SUM(CASE WHEN DEL_FG = 'Y'
                                         THEN 0
                                         ELSE 1
                                     END), 0) = 0
                    THEN 'N'
                ELSE 'Y'
                 END
          FROM CMS_MEM
         WHERE SYNC_NO = #{accnt_no}
    </select>

    <select id="DlwCmsMap.getAccntMemInfoBySyncNo" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectAccntMemInfoBySyncNo -->

        SELECT /* DlwCmsMap.getAccntMemInfoBySyncNo */
               ACCNT.ACCNT_NO
             , ACCNT.MEM_NO
             , MEM.MEM_NM
             , MEM.IDN_NO AS IDN_NO
             , SUBSTR(MEM.BRTH_MON_DAY, -6) AS BRTH_MON_DAY
          FROM MEM_PROD_ACCNT ACCNT INNER JOIN MEMBER MEM
               ON ACCNT.MEM_NO = MEM.MEM_NO
         WHERE ACCNT_NO = #{accnt_no}
            OR OLD_MID = #{accnt_no}

    </select>

    <insert id="DlwCmsMap.insertDlwCmsAppByNomal" parameterType="map">
        <!-- DM sql-id : insertCMSAppByNomal -->

        INSERT INTO /* DlwCmsMap.insertDlwCmsAppByNomal */
                    NEW_CANCL_APP
                    (SEQ
                    , ACCNT_NO
                    , APP_DT
                    , BANK_ACCNT_NO
                <if test="payr_no != null and payr_no != ''">
                    , PAYR_NO
                </if>
                    , BANK_CD
                <if test="depr_nm != null and depr_nm != ''">
                    , DEPR
                </if>
                    , INV_TG_DT
                    , APP_CL
                    , ACPT_MTHD
                    , RELTN
                <if test="depr_cell != null and depr_cell != ''">
                    , DEPR_CELL
                </if>
                <if test="imps_cd != null and imps_cd != ''">
                    , IMPS_CD
                </if>
                    , STAT
                    , REG_DM
                    , REG_MAN
                    , UPD_DM
                    , UPD_MAN
                    , BIRTH
                <if test="area_cd != null and area_cd != ''">
                    , AREA_CODE
                </if>
                    )
           SELECT A.SEQ
                  , #{accnt_no}
                  , TO_CHAR(SYSDATE,'YYYYMMDD')
                  ,  #{bank_accnt_no}
              <if test="payr_no != null and payr_no != ''">
                  , #{payr_no}
              </if>
                  , #{bank_cd}
              <if test="depr_nm != null and depr_nm != ''">
                  , #{depr_nm}
              </if>
                  , #{inv_tg_dt}
                  , #{app_cl}
                  , #{acpt_mthd}
                  , #{rltn_cd}
              <if test="depr_cell != null and depr_cell != ''">
                  , #{depr_cell}
              </if>
              <if test="imps_cd != null and imps_cd != ''">
                  , #{imps_cd}
              </if>
                  , #{stat}
                  , SYSDATE
                  , #{emple_no}
                  , SYSDATE
                  , #{emple_no}
                  , #{idn_no}
              <if test="area_cd != null and area_cd != ''">
                  , #{area_cd}
              </if>
             FROM (SELECT NVL (MAX (seq) + 1, '1') AS SEQ
                     FROM NEW_CANCL_APP
                  ) A


    </insert>

    <select id="DlwCmsMap.getIsRealCmsInfoByBankCancl" parameterType="map" resultType="string">
        <!-- DM sql-id : selectIsRealCmsInfoByBankCancl -->


        SELECT /* DlwCmsMap.getIsRealCmsInfoByBankCancl */
               CASE WHEN BANK_ACCNT_NO  != #{bank_accnt_no}
                    THEN 'N'
                    WHEN cms_join_dt <![CDATA[>]]> TO_CHAR(SYSDATE,'YYYY') || #{mmdd}
                    THEN 'N'
               ELSE 'Y'
                END
          FROM CMS_MEM
         WHERE SYNC_NO = #{accnt_no}
    </select>

    <select id="DlwCmsMap.getCMSInfoByAccnt" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectCMSInfoByAccnt -->


        SELECT /* DlwCmsMap.getCMSInfoByAccnt */
               ACCNT_NO
             , BANK_CD
             , FN_COM_NM('63', BANK_CD) AS BANK_NM
             , BANK_ACCNT_NO AS BANK_ACCNT_NO
             , ICHAE_DT
             , ICHAE_LIMIT_GUNSU
             , NVL(BIRTH,'') IDN_NO
             , DEPR_CELL
             , REPLACE (SUBSTR (DEPR_CELL, 3), '-', '') AS DEPR_CELL1
             ,CASE WHEN DEPR_CELL = ''
                   THEN ''
                   ELSE REPLACE (SUBSTR(SUBSTR(DEPR_CELL, LENGTH(DEPR_CELL) - 5), -4),'-','')
               END AS DEPR_CELL2
             , SUBSTR(DEPR_CELL, -4) AS DEPR_CELL3
             , DEPR
             , RELTN
             , FN_COM_NM ('07', RELTN) RELTN_NM
             , SUBSTR(CMS_JOIN_DT, 1, 8) CMS_JOIN_DT
             , SYNC_NO
          FROM CMS_MEM
         WHERE ACCNT_NO = #{accnt_no}
           AND DEL_FG = 'N'
    </select>

    <!-- 입금 간소화 정보 조회 -->
    <select id="DlwCmsMap.getPaySoftInfo" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : getPaySoftInfo -->
        /* 납입회차 */
        SELECT '납입회차' AS SECTION
            , NVL((SELECT COUNT(NO) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY
            , NVL((SELECT COUNT(NO) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL
            , NVL((SELECT COUNT(NO) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL1
            , 0 TOTAL
            , 0 READY_CASH
            , 0 ALL_TOTAL
        FROM MEM_PROD_ACCNT MPA
        WHERE MPA.ACCNT_NO = #{accnt_no}

        UNION ALL

        /* 잔여회차 */

        SELECT SECTION
            , (TOTAL_PAY_NO - TOTAL_PAY) AS REST_NO_PAY
            , (TOTAL_REL_NO - TOTAL_PAY_DTL) AS REST_NO_REL
            , (TOTAL_ADD_NO - TOTAL_PAY_DTL1) AS REST_NO_ADD
            , 0 TOTAL
            , 0 READY_CASH
            , 0 ALL_TOTAL

        FROM
        (
            SELECT '잔여회차' AS SECTION
                , NVL((SELECT COUNT(NO) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY
                , NVL((SELECT COUNT(NO) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL
                , NVL((SELECT COUNT(NO) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL1
                , NVL((SELECT COUNT(NO) FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND AMT > 0 ), 0) TOTAL_PAY_NO
                , NVL((SELECT COUNT(NO) FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND REL_AMT > 0 ), 0) TOTAL_REL_NO
                , NVL((SELECT COUNT(NO) FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND ADD_AMT > 0 ), 0) TOTAL_ADD_NO
                , 0 TOTAL
                , 0 READY_CASH
                , 0 ALL_TOTAL
            FROM MEM_PROD_ACCNT MPA
            WHERE MPA.ACCNT_NO = #{accnt_no}
        )

        UNION ALL

        /* 납입금액 */
        SELECT SECTION
            , TOTAL_PAY
            , TOTAL_PAY_DTL
            , TOTAL_PAY_DTL1
            , (TOTAL_PAY + TOTAL_PAY_DTL + TOTAL_PAY_DTL1) AS TOTAL
            , 0 AS READY_CASH
            , (TOTAL_PAY + TOTAL_PAY_DTL + TOTAL_PAY_DTL1) ALL_TOTAL
        FROM
        (
            SELECT '납입금액' AS SECTION
                , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY
                , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL
                , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL1
            FROM MEM_PROD_ACCNT MPA
            WHERE MPA.ACCNT_NO = #{accnt_no}
        )

        UNION ALL

        /* 할인금액 */
        SELECT SECTION
            , ((PAY_AMT_BY1+PAY_AMT_BY2) * NEW_CHAN_GUNSU) TOTAL_PAY
            , TOTAL_PAY_DTL
            , TOTAL_PAY_DTL1
            , ((PAY_AMT_BY1+PAY_AMT_BY2) * NEW_CHAN_GUNSU) TOTAL
            , READY_CASH
            , ((PAY_AMT_BY1+PAY_AMT_BY2) * NEW_CHAN_GUNSU) ALL_TOTAL
        FROM
        (
            SELECT '할인금액' AS SECTION
                , NVL((SELECT AMT FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND NO = 1), 0) PAY_AMT_BY1
                , NVL((SELECT REL_AMT FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND NO = 1), 0) PAY_AMT_BY2
                , MPA.NEW_CHAN_GUNSU
                , 0 TOTAL_PAY_DTL
                , 0 TOTAL_PAY_DTL1
                , 0 TOTAL
                , 0 READY_CASH
                , 0 ALL_TOTAL
            FROM MEM_PROD_ACCNT MPA
            WHERE MPA.ACCNT_NO = #{accnt_no}
        )

        UNION ALL

        /* 잔여금액 */
        SELECT SECTION
            , ((TOTAL_PAY_NO - TOTAL_PAY) - ((PAY_AMT_BY1+PAY_AMT_BY2) * NEW_CHAN_GUNSU)) AS REST_NO_PAY
            , (TOTAL_REL_NO - TOTAL_PAY_DTL) AS REST_NO_REL
            , (TOTAL_ADD_NO - TOTAL_PAY_DTL1) AS REST_NO_ADD
            , ((TOTAL_PAY_NO - TOTAL_PAY) + (TOTAL_REL_NO - TOTAL_PAY_DTL) + (TOTAL_ADD_NO - TOTAL_PAY_DTL1) - ((PAY_AMT_BY1+PAY_AMT_BY2) * NEW_CHAN_GUNSU)) TOTAL
            , NVL(READY_CASH,0) READY_CASH
            , ((TOTAL_PAY_NO - TOTAL_PAY) + (TOTAL_REL_NO - TOTAL_PAY_DTL) + (TOTAL_ADD_NO - TOTAL_PAY_DTL1) + NVL(READY_CASH,0) -((PAY_AMT_BY1+PAY_AMT_BY2) * NEW_CHAN_GUNSU))  ALL_TOTAL
        FROM
        (
            SELECT '잔여금액' AS SECTION
                , MPA.NEW_CHAN_GUNSU
                , NVL((SELECT AMT FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND NO = 1), 0) PAY_AMT_BY1
                , NVL((SELECT REL_AMT FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND NO = 1), 0) PAY_AMT_BY2
                , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY
                , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL
                , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL1
                , NVL((SELECT SUM(AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND AMT > 0 ), 0) TOTAL_PAY_NO
                , NVL((SELECT SUM(REL_AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND REL_AMT > 0 ), 0) TOTAL_REL_NO
                , NVL((SELECT SUM(ADD_AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND ADD_AMT > 0 ), 0) TOTAL_ADD_NO
                ,#{ready_cash} AS READY_CASH
                <!-- 
                , (
                        SELECT NVL((SUB_USE_AMT - SUB_CAN_AMT),0) READY_CASH
                        FROM
                        (
                        SELECT
                              SUM(CASE WHEN TYPE = 'U' THEN AMT ELSE 0 END) AS SUB_USE_AMT
                            , SUM(CASE WHEN TYPE = 'C' THEN AMT ELSE 0 END) AS SUB_CAN_AMT
                        FROM CASH_HISTORY@TB_SHOPPING LINK_CH
                        WHERE 1=1
                            AND GOODS_ID = #{accnt_no}
                        GROUP BY GOODS_ID
                        )
                   ) AS READY_CASH
                   
                    -->
            FROM MEM_PROD_ACCNT MPA
            WHERE MPA.ACCNT_NO = #{accnt_no}
        )

        UNION ALL

        /* 합계금액 */
        SELECT SECTION
            , TOTAL_PAY_NO
            , TOTAL_REL_NO
            , TOTAL_ADD_NO
            , (TOTAL_PAY_NO + TOTAL_REL_NO + TOTAL_ADD_NO) TOTAL
            , NVL(READY_CASH,0) READY_CASH
            , ((TOTAL_PAY_NO + TOTAL_REL_NO + TOTAL_ADD_NO) + NVL(READY_CASH,0))  ALL_TOTAL
        FROM
        (
            SELECT '합계금액' AS SECTION
                , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY
                , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL
                , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL1
                , NVL((SELECT SUM(AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND AMT > 0 ), 0) TOTAL_PAY_NO
                , NVL((SELECT SUM(REL_AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND REL_AMT > 0 ), 0) TOTAL_REL_NO
                , NVL((SELECT SUM(ADD_AMT) FROM PRODUCT_NO_DATA WHERE PROD_CD = MPA.PROD_CD AND ADD_AMT > 0 ), 0) TOTAL_ADD_NO
                ,#{ready_cash} AS READY_CASH
                <!-- 
                , (
                        SELECT NVL((SUB_USE_AMT - SUB_CAN_AMT),0) READY_CASH
                        FROM
                        (
                        SELECT
                              SUM(CASE WHEN TYPE = 'U' THEN AMT ELSE 0 END) AS SUB_USE_AMT
                            , SUM(CASE WHEN TYPE = 'C' THEN AMT ELSE 0 END) AS SUB_CAN_AMT
                        FROM CASH_HISTORY@TB_SHOPPING LINK_CH
                        WHERE 1=1
                            AND GOODS_ID =  #{accnt_no}
                        GROUP BY GOODS_ID
                        )
                   ) AS READY_CASH
                   -->
            FROM MEM_PROD_ACCNT MPA
            WHERE MPA.ACCNT_NO = #{accnt_no}
        )
    </select>

    <select id="DlwCmsMap.getNcaIdnNo" parameterType="map" resultType="string">
        <!-- DM sql-id : selectNcaIdnNo -->
        SELECT /* DlwCmsMap.getNcaIdnNo */
               IDN_NO
          FROM (SELECT IDN_NO AS IDN_NO
                  FROM NEW_CANCL_APP NCA
                 WHERE ACCNT_NO = #{accnt_no}
                   AND RELTN = '20'
                   AND (SELECT COUNT(*)
                          FROM TRANSFER_BRKDN
                         WHERE ACCNT_NO = NCA.ACCNT_NO) <![CDATA[<=]]> 0
                 ORDER BY SEQ DESC)
         WHERE ROWNUM = 1
    </select>

    <!-- 청구여부 업데이트 - 산출테이블에서 삭제시 -->
    <update id="DlwCmsMap.updateWdrwReqYn1" parameterType="map">
        <!-- DM sql-id : updateWdrwReqYn1 -->
        UPDATE /* DlwCmsMap.updateWdrwReqYn1 */
               WDRW_REQ_CALL_CENTER
           SET WDRW_REQ_YN = 'N'
         WHERE 1=1
           AND IDNTT = (SELECT IDNTT
                          FROM WDRW_REQ
                         WHERE ACCNT_NO = #{accnt_no}
                           AND SEQ = #{seq})
           AND DEL_FG IS NULL
    </update>

        <!-- 청구여부 업데이트 - 산출테이블에서 일괄삭제시
    <update id="DlwCmsMap.updateWdrwReqYn1all" parameterType="map" >

        UPDATE /* DlwCmsMap.updateWdrwReqYn1all */
               WDRW_REQ_CALL_CENTER
           SET WDRW_REQ_YN = 'N'
        WHERE  gubun='CMS' AND  IDNTT IN (SELECT IDNTT
                          FROM WDRW_REQ
                         WHERE  stat ='01' and cl='6'  )
    </update>
 -->
  <!-- 청구여부 업데이트 - 산출테이블에서 일괄삭제시  -->
    <parameterMap id="getcmsappdeleteall" type="map"><!-- /*java.util.HashMap*/ -->
        <parameter property="gubun" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="OUT" jdbcType="VARCHAR" javaType="java.lang.String"  />
    </parameterMap>
   <select id="DlwCmsMap.updateWdrwReqYn1all" statementType="CALLABLE" parameterMap="getcmsappdeleteall">
            <!-- DM sql-id : updateWdrwReqYn1all -->
           {call SP_WDRW_REQ_CALL_updateALL(?, ?)}
    </select>








    <!-- CMS EB21 산출내역 삭제 -->
    <delete id="DlwCmsMap.deleteWDRWHistory" parameterType="map">
        <!-- DM sql-id : deleteWDRWHistory -->
        DELETE /* DlwCmsMap.deleteWDRWHistory */
          FROM WDRW_REQ
         WHERE SEQ = #{seq}
           AND ACCNT_NO = #{accnt_no}
    </delete>

     <!-- CMS EB21 산출내역 일괄삭제      stat ='01'-->
    <delete id="DlwCmsMap.deleteWDRWHistoryall" parameterType="map">
        <!-- DM sql-id : deleteWDRWHistoryall -->
        DELETE /* DlwCmsMap.deleteWDRWHistoryall */
          FROM WDRW_REQ
         WHERE stat ='01'
    </delete>

     <!-- card 산출내역 일괄삭제      stat ='01'-->
    <delete id="DlwCmsMap.deletecardWDRWHistoryall" parameterType="map">
        <!-- DM sql-id : deletecardWDRWHistoryall -->
        DELETE /* DlwCmsMap.deletecardWDRWHistoryall */
          FROM card_WDRW_REQ
         WHERE stat ='01'
    </delete>

    <!-- 청구여부 업데이트 - 산출테이블에서 삭제시 -->
    <update id="DlwCmsMap.updateWdrwReqYn2" parameterType="map">
        <!-- DM sql-id : updateWdrwReqYn2 -->
        UPDATE /* DlwCmsMap.updateWdrwReqYn2 */
               WDRW_REQ_CALL_CENTER
           SET WDRW_REQ_YN = 'N'
         WHERE 1=1
           AND IDNTT = (SELECT IDNTT
                          FROM CARD_WDRW_REQ
                         WHERE ACCNT_NO = #{accnt_no}
                           AND SEQ = #{seq})
           AND DEL_FG IS NULL
    </update>

    <!-- CMS EB21 산출내역 삭제 -->
    <delete id="DlwCmsMap.deleteCardWdrw" parameterType="map">
        <!-- DM sql-id : deleteCardWdrw -->
        DELETE /* DlwCmsMap.deleteCardWdrw */
          FROM CARD_WDRW_REQ
         WHERE SEQ = #{seq}
           AND ACCNT_NO = #{accnt_no}
    </delete>

    <!-- 구좌번호로 계좌정보조회 -->
    <select id="DlwCmsMap.getAccntInfo" parameterType="map" resultType="resultMap">
        <!-- DM sql-id : selectAccntInfo -->
        SELECT /* DlwCmsMap.getAccntInfo */
               ACCNT_NO
             , BANK_CD
             , BANK_ACCNT_NO AS BANK_ACCNT_NO
             , NVL(BIRTH,'') AS IDN_NO
             , MEM_NO
             , ICHAE_DT
             , DEPR
             , RELTN
             , DEPR_CELL
             , DEL_FG
          FROM CMS_MEM
         WHERE ACCNT_NO = #{accnt_no}
    </select>

    <!-- 입금등록/조회 - 입금/상품/부가정보 조회 -->
    <select id="DlwCmsMap.getPayMngBugaInfo" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectPayMngBugaInfo -->

SELECT /* DlwCmsMap.getPayMngBugaInfo */
               ACCNT_NO
             , PROD_NM
             , PROD_AMT
             , FN_PAY_AMT_BY_CNT(1, LAST_NO, ACCNT_NO) AS MON_PAY_AMT
             , EMPLE_NO
             , EMPLE_NM
             , DEPT_NM
             , EXPR_NO
             , EXPR_NO - NO - NEW_CHAN_GUNSU AS REMAIN_CNT
             , PROD_AMT - PAY_AMT - NEW_CHAN_GUNSU_AMT AS REMAIN_AMT
             , GASU_AMT_TOTAL
             , DC_AMT_TOTAL
             , NEW_CHAN_GUNSU
             , NEW_CHAN_GUNSU_AMT
             , TO_CHAR(THIS_MON_NO) || '회' AS THIS_MON_NO
             , LAST_NO  AS LAST_NO
             , NO + NEW_CHAN_GUNSU AS NEW_CHAN_GUNSU_NO
             , NO AS NO_CNT
             , PAY_AMT
             , FN_YEN_CHE(ACCNT_NO) AS STAT
          FROM (SELECT A.ACCNT_NO
                     , C.PROD_NM
                     , C.PROD_AMT
                     , C.MON_PAY_AMT
                     , C.EXPR_NO
                     , D.EMPLE_NO
                     , D.EMPLE_NM
                     , (FN_DIFF_MONTH(SYSDATE, JOIN_DT) + 1) AS THIS_MON_NO
                     , FN_DEPT_NM(D.DEPT_CD) AS DEPT_NM
                     , A.NEW_CHAN_GUNSU
                     , (A.NEW_CHAN_GUNSU * CAST(C.MON_PAY_AMT AS INT)) AS NEW_CHAN_GUNSU_AMT
                     , COUNT(B.NO) AS NO
                     , NVL(MAX(B.NO), 0) + 1 AS LAST_NO
                     , NVL(SUM(B.PAY_AMT), 0) AS PAY_AMT
                  FROM MEM_PROD_ACCNT A
                  LEFT OUTER JOIN PAY_MNG B
                    ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN PRODUCT C
                    ON A.PROD_CD = C.PROD_CD
                  LEFT OUTER JOIN EMPLOYEE D
                    ON A.EMPLE_NO = D.EMPLE_NO
                 WHERE A.ACCNT_NO = #{accnt_no}
                 GROUP BY A.ACCNT_NO, C.PROD_NM, C.PROD_AMT, C.MON_PAY_AMT, C.EXPR_NO, D.EMPLE_NO, D.EMPLE_NM
                        , (FN_DIFF_MONTH(SYSDATE, JOIN_DT) + 1)
                        , FN_DEPT_NM(D.DEPT_CD), A.NEW_CHAN_GUNSU
                        , (A.NEW_CHAN_GUNSU * CAST(C.MON_PAY_AMT AS INT))
               ) A,
             ( SELECT NVL(SUM(NVL(GASU_AMT, 0) + NVL(GASU_ALLT_AMT, 0) + NVL(GASU_ADD_AMT, 0)), 0) AS GASU_AMT_TOTAL FROM GASU_AMT_REG WHERE ACCNT_NO = #{accnt_no} AND DEL_FG = 'N' ) B,
             ( SELECT NVL(SUM(DC_AMT),0) AS DC_AMT_TOTAL   FROM DC_AMT_REG   WHERE ACCNT_NO = #{accnt_no} AND DEL_FG = 'N' ) C
    </select>

    <!-- 입금전표조회 -->
    <select id="DlwCmsMap.getPayMngList" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectPayMngList -->

        SELECT /* DlwCmsMap.getPayMngList */
               A.ACCNT_NO
             , A.SEQ
             , A.NO
             , A.PAY_AMT
             , A.PAY_DAY AS PAY_DAY
             , A.PAY_MTHD
             , FN_COM_NM('01', A.PAY_MTHD) AS PAY_MTHD_NM
             , A.STAT
             , A.DC_AMT_SEQ
             , CASE WHEN A.STAT = 0 THEN '정상'
                    ELSE (CASE WHEN A.STAT = '1' THEN '선납' ELSE '연체' END)
                END AS STAT_NM
             , TO_CHAR(ADD_MONTHS(TO_DATE(B.JOIN_DT, 'YYYYMMDD'), A.NO-1),'YYYYMM') AS MON_NO
             , C.DC_AMT
             , A.RC_STAT
             , CASE WHEN A.PAY_MTHD ='04' THEN CASE WHEN A.WDRW_INV_DT IS NULL THEN WR.APP_DT ELSE A.WDRW_INV_DT END
                    WHEN A.PAY_MTHD ='06' THEN CASE WHEN A.WDRW_INV_DT IS NULL THEN CWR.APP_DT ELSE A.WDRW_INV_DT END
                    ELSE ''
                END AS APP_DT
             , CASE WHEN (SUBSTR(A.PAY_DAY,1,6) = NVL((SELECT REPLACE(CM.CLOSE_DT,'/','')
                                                                                FROM CLOSE_MNG CM
                                                                               WHERE CM.DEL_FG = 'N'
                                                                                 AND SUBSTR(A.PAY_DAY,1,6) =  REPLACE(CM.CLOSE_DT,'/','')
                                                                                 AND ROWNUM=1), ' ')
                         )
                         AND
                         (SUBSTR(A.PAY_DAY,1,6)  NOT IN (SELECT REPLACE(CER.CLOSE_DT,'/','')
                                                                              FROM CLOSE_EDT_REQ CER
                                                                             WHERE CER.ACCNT_NO = A.ACCNT_NO
                                                                               AND CER.CLOSE_CL = '0001'
                                                                                AND CER.EDT_YN = 'Y'
                                                                               AND CER.DEL_FG = 'N'
                                                                             GROUP BY CER.CLOSE_DT)
                        )
                    THEN 'N'
                    ELSE 'Y'
                END EDT_YN
              , (SELECT COUNT(*) FROM GONGJE_HIST WHERE GBIT <![CDATA[<]]> '03' AND CL IN('P','P_C') AND ACCNT_NO = #{accnt_no}) GCNT
              ,LF_DMUSER.FN_EMPLE_NM(A.REG_MAN) AS REG_MAN
          FROM PAY_MNG A
            INNER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO
            LEFT OUTER JOIN (SELECT * FROM (SELECT DC_AMT_REG.*,ROW_NUMBER() OVER(PARTITION BY ACCNT_NO ORDER BY SEQ DESC) CNT
                                            FROM DC_AMT_REG
                                            WHERE DEL_FG = 'N')
                             WHERE CNT = 1) C ON C.ACCNT_NO = A.ACCNT_NO AND A.DC_AMT_SEQ = C.SEQ AND A.NO = C.CNT
            LEFT JOIN (SELECT A.ACCNT_NO , A.INV_NO , A.APP_DT , B.INV_NO PREV_INV_NO
                       FROM
                          (SELECT /*+INDEX(A IDX_WDRW_REQ_ACCNT_STAT) */ ACCNT_NO, INV_NO, INV_DT AS APP_DT , ROW_NUMBER() OVER(ORDER BY INV_NO ) CNT
                           FROM WDRW_REQ A
                           WHERE ACCNT_NO = #{accnt_no}
                             AND STAT ='04' ) A LEFT OUTER JOIN
                          (SELECT /*+INDEX(A IDX_WDRW_REQ_ACCNT_STAT) */ ACCNT_NO, INV_NO, INV_DT AS APP_DT , ROW_NUMBER() OVER(ORDER BY INV_NO) CNT
                                       FROM WDRW_REQ A
                                      WHERE ACCNT_NO = #{accnt_no}
                                        AND STAT ='04' ) B ON A.ACCNT_NO = B.ACCNT_NO AND A.CNT = B.CNT -1
                                     )WR
              ON WR.ACCNT_NO=B.ACCNT_NO AND (A.NO <![CDATA[<=]]>   WR.INV_NO AND A.NO <![CDATA[>]]>  WR.PREV_INV_NO) AND A.DEL_FG = 'N'
          LEFT JOIN (SELECT ACCNT_NO, INV_NO, MAX(INV_DT) AS APP_DT
                          , NVL((SELECT MAX(B.INV_NO) FROM CARD_WDRW_REQ B WHERE B.ACCNT_NO = A.ACCNT_NO AND B.INV_NO <![CDATA[<]]> A.INV_NO AND STAT ='04'), 0) PREV_INV_NO
                       FROM CARD_WDRW_REQ A
                      WHERE ACCNT_NO = #{accnt_no}
                        AND STAT ='04'
                      GROUP BY ACCNT_NO, INV_NO
                    )CWR
            ON CWR.ACCNT_NO=B.ACCNT_NO AND (A.NO  <![CDATA[<=]]>  CWR.INV_NO AND A.NO <![CDATA[>]]> CWR.PREV_INV_NO)
         WHERE A.DEL_FG = 'N'
           AND A.ACCNT_NO = #{accnt_no}
         ORDER BY A.NO
    </select>

    <!-- 입금전표조회-결합상품할부원금 -->
    <select id="DlwCmsMap.getPayMngDtlList" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectPayMngDtlList -->


        SELECT /* DlwCmsMap.getPayMngDtlList */
               <!-- 추가 : 중복건 제거 2018.01.16 정승철-->
               DISTINCT
               A.ACCNT_NO
             , A.SEQ
             , A.NO
             , A.PAY_AMT
             , A.PAY_DAY AS PAY_DAY
             , A.PAY_MTHD
             , FN_COM_NM('01', A.PAY_MTHD) AS PAY_MTHD_NM
             , A.STAT
             , CASE WHEN A.STAT = 0 THEN '정상'
                    ELSE (CASE WHEN A.STAT = '1' THEN '선납' ELSE '연체' END)
                END AS STAT_NM
             , TO_CHAR(ADD_MONTHS(TO_DATE(B.JOIN_DT, 'YYYYMMDD'), A.NO-1),'YYYYMM') AS MON_NO
             , CASE WHEN A.PAY_MTHD ='04' THEN CASE WHEN A.WDRW_INV_DT IS NULL THEN WR.APP_DT ELSE A.WDRW_INV_DT END
                    WHEN A.PAY_MTHD ='06' THEN CASE WHEN A.WDRW_INV_DT IS NULL THEN CWR.APP_DT ELSE A.WDRW_INV_DT END
                    ELSE ''
                END AS APP_DT
             <!-- 추가 : 마감기능 추가로 인해 수정 가능한지 판단하기 위한 항목 추가 BY LBK_2013_06_15 -->
             , CASE WHEN (SUBSTR(A.PAY_DAY,1,6) = NVL((SELECT REPLACE(CM.CLOSE_DT,'/','')
                                                                                FROM CLOSE_MNG CM
                                                                               WHERE CM.DEL_FG = 'N'
                                                                                 AND SUBSTR(A.PAY_DAY,1,6) = REPLACE(CM.CLOSE_DT,'/','')
                                                                                 AND ROWNUM=1), '')
                         )
                         AND
                         (SUBSTR(A.PAY_DAY, 1,6) NOT IN (SELECT REPLACE(CER.CLOSE_DT,'/','')
                                                                              FROM CLOSE_EDT_REQ CER
                                                                             WHERE CER.ACCNT_NO = A.ACCNT_NO
                                                                               AND CER.CLOSE_CL = '0001'
                                                                               AND CER.EDT_YN = 'Y'
                                                                               AND CER.DEL_FG = 'N'
                                                                             GROUP BY CER.CLOSE_DT)
                         )
                    THEN 'N'
                    ELSE 'Y'
                END EDT_YN
          FROM PAY_MNG_DTL A
         INNER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO
            LEFT JOIN (SELECT A.ACCNT_NO , A.INV_NO , A.APP_DT , B.INV_NO PREV_INV_NO
                       FROM
                          (SELECT /*+INDEX(A IDX_WDRW_REQ_ACCNT_STAT) */ ACCNT_NO, INV_NO, INV_DT AS APP_DT , ROW_NUMBER() OVER(ORDER BY ACCNT_NO ) CNT
                           FROM WDRW_REQ A
                           WHERE ACCNT_NO = #{accnt_no}
                             AND STAT ='04' ) A LEFT OUTER JOIN
                          (SELECT /*+INDEX(A IDX_WDRW_REQ_ACCNT_STAT) */ ACCNT_NO, INV_NO, INV_DT AS APP_DT , ROW_NUMBER() OVER(ORDER BY INV_NO) CNT
                                       FROM WDRW_REQ A
                                      WHERE ACCNT_NO = #{accnt_no}
                                        AND STAT ='04' ) B ON A.ACCNT_NO = B.ACCNT_NO AND A.CNT = B.CNT -1
                                     )WR
              ON WR.ACCNT_NO=B.ACCNT_NO AND (A.NO <![CDATA[<=]]>   WR.INV_NO AND A.NO <![CDATA[>]]>  WR.PREV_INV_NO) AND A.DEL_FG = 'N'
          LEFT JOIN (SELECT ACCNT_NO, INV_NO, MAX(INV_DT) AS APP_DT
                          , NVL((SELECT MAX(B.INV_NO) FROM CARD_WDRW_REQ B WHERE B.ACCNT_NO = A.ACCNT_NO AND B.INV_NO <![CDATA[<]]> A.INV_NO AND STAT ='04'), 0) PREV_INV_NO
                       FROM CARD_WDRW_REQ A
                      WHERE ACCNT_NO = #{accnt_no}
                        AND STAT ='04'
                      GROUP BY ACCNT_NO, INV_NO
                    )CWR
            ON CWR.ACCNT_NO=B.ACCNT_NO AND (A.NO  <![CDATA[<=]]>  CWR.INV_NO AND A.NO <![CDATA[>]]> CWR.PREV_INV_NO)
         WHERE A.DEL_FG = 'N'
           AND A.ACCNT_NO = #{accnt_no}
         ORDER BY A.NO
    </select>

    <!-- 입금전표조회-결합상품추가부담금 -->
    <select id="DlwCmsMap.getPayMngDtl1List" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectPayMngDtl1List -->


        SELECT /* DlwCmsMap.getPayMngDtl1List */
               A.ACCNT_NO
             , A.SEQ
             , A.NO
             , A.PAY_AMT
             , A.PAY_DAY AS PAY_DAY
             , A.PAY_MTHD
             , FN_COM_NM('01', A.PAY_MTHD) AS PAY_MTHD_NM
             , A.STAT
             , CASE WHEN A.STAT = 0 THEN '정상'
               ELSE (CASE WHEN A.STAT = '1' THEN '선납' ELSE '연체' END)
               END AS STAT_NM
             , TO_CHAR(ADD_MONTHS(TO_DATE(B.JOIN_DT, 'YYYYMMDD'), A.NO-1),'YYYYMM') AS MON_NO
             , CASE WHEN A.PAY_MTHD ='04' THEN CASE WHEN A.WDRW_INV_DT IS NULL THEN WR.APP_DT ELSE A.WDRW_INV_DT END
                    WHEN A.PAY_MTHD ='06' THEN CASE WHEN A.WDRW_INV_DT IS NULL THEN CWR.APP_DT ELSE A.WDRW_INV_DT END
                    ELSE ''
                END AS APP_DT
             <!-- 추가 : 마감기능 추가로 인해 수정 가능한지 판단하기 위한 항목 추가 BY LBK_2013_06_15 -->
             , CASE WHEN (SUBSTR(A.PAY_DAY,1,6) = NVL((SELECT REPLACE(CM.CLOSE_DT,'/','')
                                                                                FROM CLOSE_MNG CM
                                                                               WHERE CM.DEL_FG = 'N'
                                                                                 AND SUBSTR(A.PAY_DAY,1,6) = REPLACE(CM.CLOSE_DT,'/','')
                                                                                 AND ROWNUM = 1), ' ')
                         )
                         AND
                         (SUBSTR(A.PAY_DAY,1,6) NOT IN (SELECT REPLACE(CER.CLOSE_DT,1,6)
                                                                              FROM CLOSE_EDT_REQ CER
                                                                             WHERE CER.ACCNT_NO = A.ACCNT_NO
                                                                               AND CER.CLOSE_CL = '0001'
                                                                                AND CER.EDT_YN = 'Y'
                                                                               AND CER.DEL_FG = 'N'
                                                                             GROUP BY CER.CLOSE_DT)
                        )
                    THEN 'N'
                    ELSE 'Y'
                END EDT_YN
          FROM PAY_MNG_DTL1 A
         INNER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO
            LEFT JOIN (SELECT A.ACCNT_NO , A.INV_NO , A.APP_DT , B.INV_NO PREV_INV_NO
                       FROM
                          (SELECT /*+INDEX(A IDX_WDRW_REQ_ACCNT_STAT) */ ACCNT_NO, INV_NO, INV_DT AS APP_DT , ROW_NUMBER() OVER(ORDER BY ACCNT_NO ) CNT
                           FROM WDRW_REQ A
                           WHERE ACCNT_NO = #{accnt_no}
                             AND STAT ='04' ) A LEFT OUTER JOIN
                          (SELECT /*+INDEX(A IDX_WDRW_REQ_ACCNT_STAT) */ ACCNT_NO, INV_NO, INV_DT AS APP_DT , ROW_NUMBER() OVER(ORDER BY INV_NO) CNT
                                       FROM WDRW_REQ A
                                      WHERE ACCNT_NO = #{accnt_no}
                                        AND STAT ='04' ) B ON A.ACCNT_NO = B.ACCNT_NO AND A.CNT = B.CNT -1
                                     )WR
              ON WR.ACCNT_NO=B.ACCNT_NO AND (A.NO <![CDATA[<=]]>   WR.INV_NO AND A.NO <![CDATA[>]]>  WR.PREV_INV_NO) AND A.DEL_FG = 'N'
          LEFT JOIN (SELECT ACCNT_NO, INV_NO, MAX(INV_DT) AS APP_DT
                          , NVL((SELECT MAX(B.INV_NO) FROM CARD_WDRW_REQ B WHERE B.ACCNT_NO = A.ACCNT_NO AND B.INV_NO <![CDATA[<]]> A.INV_NO AND STAT ='04'), 0) PREV_INV_NO
                       FROM CARD_WDRW_REQ A
                      WHERE ACCNT_NO = #{accnt_no}
                        AND STAT ='04'
                      GROUP BY ACCNT_NO, INV_NO
                    )CWR
            ON CWR.ACCNT_NO=B.ACCNT_NO AND (A.NO  <![CDATA[<=]]>  CWR.INV_NO AND A.NO <![CDATA[>]]> CWR.PREV_INV_NO)
         WHERE A.DEL_FG = 'N'
           AND A.ACCNT_NO = #{accnt_no}
         ORDER BY A.NO
    </select>

    <!-- 입금등록/조회 - 입금/상품/부가정보 조회 - 결합상품 할부금액 -->
    <select id="DlwCmsMap.getPayMngDtlBugaInfo" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectPayMngDtlBugaInfo -->


        SELECT /* DlwCmsMap.getPayMngDtlBugaInfo */
               NVL((SELECT MAX(NO) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)+ 1 AS LAST_NO
             , FN_ALLT_AMT_BY_CNT(1, NVL((SELECT MAX(NO) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0), MPA.ACCNT_NO) AS MON_PAY_AMT
             , TO_CHAR(NVL((SELECT SUM(END_NO - ST_NO + 1) FROM PRODUCT_DTL WHERE PROD_CD = MPA.PROD_CD AND ALLT_AMT <![CDATA[>]]> 0), 0) -
                          NVL((SELECT COUNT(NO) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) ) AS REMAIN_CNT
          FROM MEM_PROD_ACCNT MPA
         INNER JOIN PRODUCT PROD ON MPA.PROD_CD = PROD.PROD_CD
         WHERE MPA.ACCNT_NO = #{accnt_no}
           AND PROD.PROD_CL = '03'
         GROUP BY MPA.PROD_CD, MPA.ACCNT_NO
    </select>

    <!-- 입금등록/조회 - 입금/상품/부가정보 조회 - 결합상품 추가금액 -->
    <select id="DlwCmsMap.getPayMngDtl1BugaInfo" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml : selectPayMngDtl1BugaInfo -->


        SELECT /* DlwCmsMap.selectPayMngDtl1BugaInfo */
               NVL((SELECT MAX(NO) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) + 1 AS LAST_NO
             , FN_ADD_AMT_BY_CNT(1, NVL((SELECT MAX(NO) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0), MPA.ACCNT_NO) AS MON_PAY_AMT
             , TO_CHAR(NVL((SELECT SUM(END_NO - ST_NO + 1) FROM PRODUCT_DTL WHERE PROD_CD = MPA.PROD_CD AND ADD_AMT <![CDATA[>]]> 0), 0) -
               NVL((SELECT COUNT(NO) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) ) AS REMAIN_CNT
          FROM MEM_PROD_ACCNT MPA
         INNER JOIN PRODUCT PROD
            ON MPA.PROD_CD = PROD.PROD_CD
         WHERE MPA.ACCNT_NO = #{accnt_no}
           AND PROD.PROD_CL = '03'
         GROUP BY MPA.PROD_CD, MPA.ACCNT_NO
    </select>

    <!-- 환불정보 -->
    <select id="DlwCmsMap.getRefundList" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectRefundList -->


        SELECT /* DlwCmsMap.getRefundList */
               M.MEM_NO
             , MPA.ACCNT_NO
             , M.MEM_NM
             , FN_PROD_NM(MPA.PROD_CD) PROD_NM
             , TBL.NO PAY_NO
             , TBL.PAY_DAY PAY_DAY
             , TBL.PAY_AMT
             , TBL.REFUND_DM REFUND_DM
             , TBL.PAY_CANCEL_NOTE
             , FN_COM_NM('0115', TBL.PAY_CANCEL_CD) PAY_CANCEL_NM
             , FN_COM_NM('01', TBL.PAY_MTHD) PAY_MTHD
          FROM (SELECT ACCNT_NO
                     , NO
                     , PAY_DAY
                     , PAY_AMT
                     , PAY_CANCEL_DAY AS REFUND_DM
                     , PAY_CANCEL_NOTE
                     , PAY_CANCEL_CD
                     , PAY_MTHD
                  FROM PAY_MNG
                 WHERE 1=1
                   <if test="cancl_cl == '01'">
                   AND (PAY_CANCEL_CD = '0001' OR PAY_CANCEL_CD = '0004')
                   </if>
                   <if test="cancl_cl == '02'">
                   AND (PAY_CANCEL_CD = '0002' OR PAY_CANCEL_CD = '0003')
                   </if>
                   AND DEL_FG = 'Y'
                ) TBL
         INNER JOIN MEM_PROD_ACCNT MPA ON TBL.ACCNT_NO = MPA.ACCNT_NO
         INNER JOIN MEMBER M ON MPA.MEM_NO = M.MEM_NO
         WHERE 1=1
           <if test="accnt_no != null and accnt_no != ''">
           AND MPA.ACCNT_NO = #{accnt_no}
           </if>
           <if test="mem_nm != null and mem_nm != ''">
           AND M.MEM_NM LIKE '%' || #{mem_nm} || '%'
           </if>
           <if test="pay_dm_start != null and pay_dm_start != ''">
               <if test="search_sep == '01'">
               AND TBL.PAY_DAY  BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
               <if test="search_sep == '02'">
               AND TBL.REFUND_DM  BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
           </if>
        ORDER BY TBL.pay_day, MPA.ACCNT_NO
    </select>

    <!-- 할부원금 환불정보 -->
    <select id="DlwCmsMap.getRefundDtlList" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectRefundDtlList -->


        SELECT /* DlwCmsMap.getRefundDtlList */
               M.MEM_NO
             , MPA.ACCNT_NO
             , M.MEM_NM
             , FN_PROD_NM(MPA.PROD_CD) PROD_NM
             , TBL.NO PAY_NO
             , TBL.PAY_DAY PAY_DAY
             , TBL.PAY_AMT
             , TBL.REFUND_DM REFUND_DM
             , TBL.PAY_CANCEL_NOTE
             , FN_COM_NM('0115', TBL.PAY_CANCEL_CD) PAY_CANCEL_NM
             , FN_COM_NM('01', TBL.PAY_MTHD) PAY_MTHD
          FROM (
                SELECT ACCNT_NO
                     , NO
                     , PAY_DAY
                     , PAY_AMT
                     , PAY_CANCEL_DAY as REFUND_DM
                     , PAY_CANCEL_NOTE
                     , PAY_CANCEL_CD
                     , PAY_MTHD
                  FROM PAY_MNG_DTL
                 WHERE 1=1
                   <if test="cancl_cl == '01'">
                   AND (PAY_CANCEL_CD = '0001' OR PAY_CANCEL_CD = '0004')
                   </if>
                   <if test="cancl_cl == '02'">
                   AND (PAY_CANCEL_CD = '0002' OR PAY_CANCEL_CD = '0003')
                   </if>
                   AND DEL_FG = 'Y'
               ) TBL
         INNER JOIN MEM_PROD_ACCNT MPA ON TBL.ACCNT_NO = MPA.ACCNT_NO
         INNER JOIN MEMBER M ON MPA.MEM_NO = M.MEM_NO
         WHERE 1=1
           <if test="accnt_no != null and accnt_no != ''">
           AND MPA.ACCNT_NO = #{accnt_no}
           </if>
           <if test="mem_nm != null and mem_nm != ''">
           AND M.MEM_NM LIKE '%' || #{mem_nm} || '%'
           </if>
           <if test="pay_dm_start != null and pay_dm_start != ''">
               <if test="search_sep == '01'">
               AND TBL.PAY_DAY  BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
               <if test="search_sep == '02'">
               AND TBL.REFUND_DM BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
           </if>
        ORDER BY TBL.pay_day, MPA.ACCNT_NO
    </select>

    <!-- 추가부담금 환불정보 -->
    <select id="DlwCmsMap.getRefundDtl1List" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectRefundDtl1List -->


        SELECT /* DlwCmsMap.getRefundDtl1List */
               M.MEM_NO
             , MPA.ACCNT_NO
             , M.MEM_NM
             , FN_PROD_NM(MPA.PROD_CD) PROD_NM
             , TBL.NO PAY_NO
             , TBL.PAY_DAY PAY_DAY
             , TBL.PAY_AMT
             , TBL.REFUND_DM REFUND_DM
             , TBL.PAY_CANCEL_NOTE
             , FN_COM_NM('0115', TBL.PAY_CANCEL_CD) PAY_CANCEL_NM
             , FN_COM_NM('01', TBL.PAY_MTHD) PAY_MTHD
          FROM (
                SELECT ACCNT_NO
                     , NO
                     , PAY_DAY
                     , PAY_AMT
                     , PAY_CANCEL_DAY as REFUND_DM
                     , PAY_CANCEL_NOTE
                     , PAY_CANCEL_CD
                     , PAY_MTHD
                  FROM PAY_MNG_DTL1
                 WHERE 1=1
                   <if test="cancl_cl == '01'">
                   AND (PAY_CANCEL_CD = '0001' OR PAY_CANCEL_CD = '0004')
                   </if>
                   <if test="cancl_cl == '02'">
                   AND (PAY_CANCEL_CD = '0002' OR PAY_CANCEL_CD = '0003')
                   </if>
                   AND DEL_FG = 'Y'
               ) TBL
           INNER JOIN MEM_PROD_ACCNT MPA ON TBL.ACCNT_NO = MPA.ACCNT_NO
           INNER JOIN MEMBER M ON MPA.MEM_NO = M.MEM_NO
           WHERE 1=1
           <if test="accnt_no != null and accnt_no != ''">
           AND MPA.ACCNT_NO = #{accnt_no}
           </if>
           <if test="mem_nm != null and mem_nm != ''">
           AND M.MEM_NM LIKE '%' + #{mem_nm} + '%'
           </if>
           <if test="pay_dm_start != null and pay_dm_start != ''">
               <if test="search_sep == '01'">
               AND TBL.PAY_DAY BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
               <if test="search_sep == '02'">
               AND TBL.REFUND_DM BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
           </if>
        ORDER BY TBL.pay_day, MPA.ACCNT_NO
    </select>

    <!-- 납입건수에 따른 납입금액 계산 -->
    <select id="DlwCmsMap.getPayAmtByPayCnt" parameterType="map" resultType="int">
    <!-- sql-life.xml  : selectPayAmtByPayCnt -->
        SELECT /* DlwCmsMap.getPayAmtByPayCnt */
               FN_PAY_AMT_BY_CNT(${mon_cnt}, ${no}, #{accnt_no})  from dual
    </select>

    <!-- 납입건수에 따른 납입금액 계산 - 결합상품 할부원금 -->
    <select id="DlwCmsMap.getPayAmtDtlByPayCnt" parameterType="map" resultType="int">
    <!-- sql-life.xml  : selectPayAmtDtlByPayCnt -->


        SELECT /* DlwCmsMap.getPayAmtDtlByPayCnt */
               FN_ALLT_AMT_BY_CNT(${mon_cnt}, ${no}, #{accnt_no})  from dual
    </select>

    <!-- 납입건수에 따른 납입금액 계산 - 결합상품 추가 부담금 -->
    <select id="DlwCmsMap.getPayAmtDtl1ByPayCnt" parameterType="map" resultType="int">
    <!-- sql-life.xml  : selectPayAmtDtl1ByPayCnt -->
        SELECT /* DlwCmsMap.getPayAmtDtl1ByPayCnt */
               FN_ADD_AMT_BY_CNT(${mon_cnt}, ${no}, #{accnt_no}) from dual
    </select>

    <!-- 가수금 조회 건수 -->
    <select id="DlwCmsMap.getGasuMngCount" parameterType="map" resultType="int">


          SELECT /* DlwCmsMap.getGasuMngCount */
               COUNT(*)
          FROM (SELECT SEQ
                     , ACCNT_NO
                     , PAY_NO
                     , PAY_DAY
                     , GASU_AMT
                     , GASU_ALLT_AMT
                     , GASU_ADD_AMT
                     , NOTE
                     , FN_COM_NM('01', PAY_MTHD) AS PAY_MTHD
                  FROM GASU_AMT_REG
                 <!-- 2018.06.08 삭제여부(del_fg) 조회조건 추가 -->
                 <!-- WHERE DEL_FG = 'N' -->
                 <if test="del_fg != null and del_fg != ''">
                 WHERE DEL_FG = #{del_fg}
                 </if>

               ) TBL
         INNER JOIN MEM_PROD_ACCNT MPA ON TBL.ACCNT_NO = MPA.ACCNT_NO

          <!-- 2018.03.20 TM40:MG권한 일 경우 -->
          <if test="user_athrCd != null and user_athrCd == 'TM40'">
               INNER JOIN LF_DMUSER.RESN_CREDIT_LIST K
               ON K.ACCNT_NO = MPA.ACCNT_NO
               AND K.DEL_FG = 'N'
               AND K.TARGET_YM = TO_CHAR(SYSDATE, 'YYYYMM')
          </if>

         INNER JOIN MEMBER M ON MPA.MEM_NO = M.MEM_NO
         LEFT JOIN (SELECT * FROM (SELECT ROW_NUMBER()OVER(PARTITION BY MST_SEQ ORDER BY SEQ DESC) CNT,REFUND.*
                                     FROM REFUND
                                     WHERE DEL_FG = 'N')
                     WHERE CNT = 1 ) RF ON TBL.SEQ = RF.MST_SEQ
         WHERE 1=1
         <if test="seq != null and seq != ''">
             AND TBL.SEQ = #{seq}
         </if>
         <if test="accnt_no != null and accnt_no != ''">
             AND MPA.ACCNT_NO = #{accnt_no}
         </if>
         <if test="mem_nm != null and mem_nm != ''">
             AND M.MEM_NM LIKE '%' || #{mem_nm} || '%'
         </if>
         <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
             AND TBL.PAY_DAY BETWEEN #{stt_dt} AND #{end_dt}
         </if>
    </select>

    <!-- 가수금 조회 -->
    <select id="DlwCmsMap.getGasuMngList" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectGasuMngList -->


        SELECT /* DlwCmsMap.getGasuMngList */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*
                  FROM (SELECT TBL.SEQ
                             , TBL.PAY_NO
                             , TBL.PAY_DAY AS PAY_DAY
                             , TBL.GASU_AMT
                             , TBL.GASU_ALLT_AMT
                             , TBL.GASU_ADD_AMT
                             , TBL.NOTE
                             , TBL.PAY_MTHD
                             , MPA.ACCNT_NO
                             , M.MEM_NO
                             , M.MEM_NM
                             , RF.REFUND_AMT
                             , RF.BANK_ACCNT_NO
                             , FN_COM_NM('63',RF.BANK_CD) AS BANK_NM
                             , RF.DEPR
                             , FN_EVENT(MPA.ACCNT_NO) AS JOIN_STAT
                             , RF.REFUND_DAY AS REFUND_DAY
                             , TO_CHAR(TBL.REG_DM, 'YYYY-MM-DD HH24:MI:SS') AS REG_DM
                             , FN_EMPLE_NM(TBL.REG_MAN) AS REG_MAN
                          FROM (SELECT SEQ
                                     , ACCNT_NO
                                     , PAY_NO
                                     , PAY_DAY
                                     , GASU_AMT
                                     , GASU_ALLT_AMT
                                     , GASU_ADD_AMT
                                     , NOTE
                                     , FN_COM_NM('01', PAY_MTHD) AS PAY_MTHD
                                     , REG_DM
                                     , REG_MAN
                                  FROM GASU_AMT_REG
                                 <!-- 2018.06.08 삭제여부(del_fg) 조회조건 추가 -->
                                 <!-- WHERE DEL_FG = 'N' -->
                                 <if test="del_fg != null and del_fg != ''">
                                 WHERE DEL_FG = #{del_fg}
                                 </if>
                               ) TBL
                         INNER JOIN MEM_PROD_ACCNT MPA
                            ON TBL.ACCNT_NO = MPA.ACCNT_NO

                          <!-- 2018.03.20 TM40:MG권한 일 경우 -->
                          <if test="user_athrCd != null and user_athrCd == 'TM40'">
                               INNER JOIN LF_DMUSER.RESN_CREDIT_LIST K
                               ON K.ACCNT_NO = MPA.ACCNT_NO
                               AND K.DEL_FG = 'N'
                               AND K.TARGET_YM = TO_CHAR(SYSDATE, 'YYYYMM')
                          </if>
                         INNER JOIN MEMBER M
                            ON MPA.MEM_NO = M.MEM_NO
                          LEFT JOIN (SELECT * FROM (SELECT ROW_NUMBER()OVER(PARTITION BY MST_SEQ ORDER BY SEQ DESC) CNT,REFUND.*
                                                     FROM REFUND
                                                     WHERE DEL_FG = 'N')
                                     WHERE CNT = 1 ) RF ON TBL.SEQ = RF.MST_SEQ
                         WHERE 1=1
                         <if test="seq != null and seq != ''">
                             AND TBL.SEQ = #{seq}
                         </if>
                         <if test="accnt_no != null and accnt_no != ''">
                             AND MPA.ACCNT_NO = #{accnt_no}
                         </if>
                         <if test="mem_nm != null and mem_nm != ''">
                             AND M.MEM_NM LIKE '%' || #{mem_nm} || '%'
                         </if>
                         <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                             AND TBL.PAY_DAY BETWEEN #{stt_dt} AND #{end_dt}
                         </if>
                       ) X
                 ) Z
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            <![CDATA[
            WHERE PAGE_INDX >= #{startLine}
              AND PAGE_INDX < #{endLine}
            ]]>
        </if>
    </select>

    <!-- CMS EB21 산출내역 삭제 -->
    <delete id="DlwCmsMap.deleteWDRWCall">
    <!-- DM sql-id : deleteWDRWCall -->
    <!-- DELETE /* DlwCmsMap.deleteWDRWCall */
      FROM WDRW_REQ_CALL_CENTER
     WHERE seq = #{seq}
       AND accnt_no = #{accnt_no} -->

       UPDATE /* DlwCmsMap.deleteWDRWCall */
              WDRW_REQ_CALL_CENTER
          SET DEL_FG = 'Y'
            , UPD_DM = SYSDATE
            , UPD_MAN = #{upd_man}
        WHERE 1=1
          <!-- AND seq = #{seq} -->
          AND ACCNT_NO = #{accnt_no}
          AND INV_DT = #{inv_dt}
          AND DEL_FG IS NULL

    </delete>

    <!-- 입금전표조회-총금액 -->
    <select id="DlwCmsMap.getPayTotalList" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectPayTotalList -->


        /* DlwCmsMap.getPayTotalList */

        SELECT '총납입회차' AS SECTION
             , NVL((SELECT COUNT(NO) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY
             , NVL((SELECT COUNT(NO) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL
             , NVL((SELECT COUNT(NO) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL1
             , 0 TOTAL
          FROM MEM_PROD_ACCNT MPA
               INNER JOIN PRODUCT P ON MPA.PROD_CD = P.PROD_CD
         WHERE MPA.ACCNT_NO = #{accnt_no}

        UNION ALL

        SELECT '잔여회차' AS SECTION
             , NVL(P.EXPR_NO,0) - NVL(MPA.NEW_CHAN_GUNSU,0) - NVL((SELECT COUNT(NO) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY
             , NVL((SELECT SUM(END_NO - ST_NO + 1) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD AND ALLT_AMT > 0), 0) -
                  NVL((SELECT COUNT(NO) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL
             , NVL((SELECT SUM(END_NO - ST_NO + 1) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD AND ADD_AMT > 0), 0) -
                  NVL((SELECT COUNT(NO) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL
             , 0 TOTAL
          FROM MEM_PROD_ACCNT MPA
               INNER JOIN PRODUCT P ON MPA.PROD_CD = P.PROD_CD
         WHERE MPA.ACCNT_NO = #{accnt_no}

        UNION ALL

        SELECT '총납입금액' AS SECTION
             , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY
             , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL
             , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL_PAY_DTL1
             , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
                + NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
                + NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0) TOTAL
          FROM MEM_PROD_ACCNT MPA
               INNER JOIN PRODUCT P ON MPA.PROD_CD = P.PROD_CD
         WHERE MPA.ACCNT_NO = #{accnt_no}

        UNION ALL

        SELECT '잔여금액' AS SECTION
             , CASE WHEN P.PAY_TYPE = '001'
                    THEN (P.EXPR_NO - MPA.NEW_CHAN_GUNSU - NVL((SELECT COUNT(NO) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)) * P.MON_PAY_AMT
                    ELSE NVL((SELECT SUM((END_NO - ST_NO + 1) * MONTH_PAY_AMT) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD), 0)
                            - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
               END TOTAL_PAY
             , CASE WHEN P.PAY_TYPE = '001'
                    THEN 0
                    ELSE (SELECT SUM((END_NO - ST_NO + 1) * (ALLT_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD)
                            - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
               END TOTAL_PAY_DTL
             , CASE WHEN P.PAY_TYPE = '001'
                    THEN 0
                    ELSE (SELECT SUM((END_NO - ST_NO + 1) * (ADD_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD)
                            - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
               END TOTAL_PAY_DTL1
             , CASE WHEN P.PAY_TYPE = '001'
                    THEN (P.EXPR_NO - MPA.NEW_CHAN_GUNSU - NVL((SELECT COUNT(NO) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0))*P.MON_PAY_AMT
                    ELSE NVL((SELECT SUM((END_NO - ST_NO + 1) * MONTH_PAY_AMT) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD), 0)
                            - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
               END +
               CASE WHEN P.PAY_TYPE = '001'
                    THEN 0
                    ELSE (SELECT SUM((END_NO - ST_NO + 1) * (ALLT_AMT + ADD_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD)
                            - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
                            - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
               END TOTAL
          FROM MEM_PROD_ACCNT MPA
               INNER JOIN PRODUCT P ON MPA.PROD_CD = P.PROD_CD
         WHERE MPA.ACCNT_NO = #{accnt_no}

        UNION ALL

        SELECT '합계' AS SECTION
             , CASE WHEN P.PAY_TYPE = '001'
                    THEN (P.EXPR_NO - MPA.NEW_CHAN_GUNSU) * P.MON_PAY_AMT
                    ELSE NVL((SELECT SUM((END_NO - ST_NO + 1) * MONTH_PAY_AMT) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD), 0)
               END TOTAL_PAY
             , CASE WHEN P.PAY_TYPE = '001'
                    THEN 0
                    ELSE (SELECT SUM((END_NO - ST_NO + 1) * (ALLT_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD)
               END TOTAL_PAY_DTL
             , CASE WHEN P.PAY_TYPE = '001'
                    THEN 0
                    ELSE (SELECT SUM((END_NO - ST_NO + 1) * (ADD_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD)
               END TOTAL_PAY_DTL1
             , CASE WHEN P.PAY_TYPE = '001'
                    THEN (P.EXPR_NO - MPA.NEW_CHAN_GUNSU) * P.MON_PAY_AMT
                    ELSE NVL((SELECT SUM((END_NO - ST_NO + 1) * MONTH_PAY_AMT) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD), 0)
               END +
               CASE WHEN P.PAY_TYPE = '001'
                    THEN 0
                    ELSE (SELECT SUM((END_NO - ST_NO + 1) * (ALLT_AMT + ADD_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD)
               END TOTAL
          FROM MEM_PROD_ACCNT MPA
               INNER JOIN PRODUCT P ON MPA.PROD_CD = P.PROD_CD

         WHERE MPA.ACCNT_NO = #{accnt_no}
    </select>


    <!-- 입금전표조회-상품정보 -->
    <select id="DlwCmsMap.getProductDtl" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectProductDtl -->


        SELECT /* DlwCmsMap.getProductDtl */
               PROD_CD
             , SEQ
             , ST_NO
             , END_NO
             , MONTH_PAY_AMT
             , ALLT_AMT
             , ADD_AMT
             , (NVL(MONTH_PAY_AMT,0)+ NVL(ALLT_AMT,0)+NVL(ADD_AMT,0)) AS TOTAL_AMT
          FROM PRODUCT_DTL
         WHERE 1=1
           AND PROD_CD = #{prod_cd}
         ORDER BY SEQ
    </select>

    <!-- 회원번호로 상품코드조회 -->
    <select id="DlwCmsMap.getProdCdByAccntNo" parameterType="map" resultType="string">
    <!-- sql-life.xml  : selectProdCdByAccntNo -->


        SELECT /* DlwCmsMap.getProdCdByAccntNo */
               PROD_CD
          FROM MEM_PROD_ACCNT
         WHERE ACCNT_NO = #{accnt_no}
    </select>

    <!-- 가수금 환불 내역조회 -->
    <select id="DlwCmsMap.getGasuDetail" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectGasuDetail -->


        SELECT /* DlwCmsMap.getGasuDetail */
               GR.SEQ AS GASU_SEQ
             , RF.SEQ
             , RF.REFUND_DAY AS REFUND_DAY
             , REFUND_AMT
             , BANK_ACCNT_NO
             , RF.BANK_CD
             , FN_COM_NM('63',BANK_CD) AS BANK_NM
             , DEPR
             , RF.NOTE
             , TO_CHAR(RF.REG_DM, 'YYYYMMDD') AS REG_DM
             , FN_EMPLE_NM(RF.REG_MAN) AS REG_MAN
             , 'N' AS CHK_YN
          FROM REFUND RF
          JOIN GASU_AMT_REG GR ON GR.SEQ = RF.MST_SEQ AND GR.DEL_FG='N'
         WHERE RF.MST_SEQ = #{seq}
           AND RF.DEL_FG='N'
    </select>

    <!-- 가수 환불 상세 내역 입금 -->
    <insert id="DlwCmsMap.insertGasuDtl" parameterType="map">
        <!-- DM sql-id : insertGasuDtl -->
        INSERT /* DlwCmsMap.insertGasuDtl */
          INTO REFUND
             ( MST_SEQ
             , SEQ
             , REFUND_DAY
             , REFUND_AMT
             , BANK_CD
             , BANK_ACCNT_NO
             , DEPR
             , REG_DM
             , REG_MAN
             , UPD_DM
             , UPD_MAN
             , DEL_FG
             , NOTE
             )
        SELECT #{gasu_seq}
             , A.SEQ
             , REPLACE(#{refund_day},'/','')
             , CAST(#{refund_amt} AS NUMERIC)
             , #{bank_cd}
             , #{bank_accnt_no}
             , #{depr}
             , SYSDATE
             , #{reg_man}
             , SYSDATE
             , #{upd_man}
             , 'N'
             , #{note}
          FROM (SELECT NVL(MAX(SEQ) + 1, '1') AS SEQ
                  FROM REFUND WHERE MST_SEQ = #{gasu_seq}
               ) A
    </insert>

    <!-- 가수 환불 상세 내역 수정 -->
    <update id="DlwCmsMap.updateGasuDtl" parameterType="map">
        <!-- DM sql-id : updateGasuDtl -->
        UPDATE /* DlwCmsMap.updateGasuDtl */
               REFUND
           SET REFUND_DAY    = REPLACE(#{refund_day},'/','')
             , REFUND_AMT    = CAST(#{refund_amt} AS NUMERIC)
             , BANK_CD       = #{bank_cd}
             , BANK_ACCNT_NO = #{bank_accnt_no}
             , DEPR          = #{depr}
             , UPD_DM        = SYSDATE
             , UPD_MAN       = #{upd_man}
             , NOTE          = #{note}
         WHERE MST_SEQ       = #{gasu_seq}
           AND SEQ           = #{seq}
    </update>

    <!-- 가수 환불 상세 내역 삭제(논리) -->
    <update id="DlwCmsMap.deleteGasuDtl" parameterType="map">
        <!-- DM sql-id : deleteGasuDtl -->
        UPDATE /* DlwCmsMap.deleteGasuDtl */
               REFUND
           SET DEL_Fg = 'Y'
             , UPD_DM  = SYSDATE
             , UPD_MAN = #{upd_man}
        WHERE MST_SEQ = #{gasu_seq}
        <if test="seq != null and seq != ''">
           AND SEQ = #{seq}
        </if>
    </update>

    <!-- 가수 입금 -->
    <insert id="DlwCmsMap.insertGasuMng" parameterType="map">
        <!-- DM sql-id : insertGasuMng -->
            INSERT /* DlwCmsMap.insertGasuMng */
              INTO GASU_AMT_REG
                 ( SEQ
                 , ACCNT_NO
                 , GASU_AMT
                 , GASU_ALLT_AMT
                 , GASU_ADD_AMT
                 , REG_DM
                 , REG_MAN
                 , UPD_DM
                 , UPD_MAN
                 , DEL_FG
                 , PAY_DAY
                 , NOTE
                 , PAY_NO
                 , PAY_MTHD
                 )
            SELECT A.SEQ
                 , #{accnt_no}
                 , CAST(#{gasu_amt} AS INT)
                 , CAST(#{gasu_allt_amt} AS INT)
                 , CAST(#{gasu_add_amt} AS INT)
                 , SYSDATE
                 , #{reg_man}
                 , SYSDATE
                 , #{upd_man}
                 , 'N'
                 , #{pay_day}
                 , #{note}
                 , CAST(#{pay_no} AS INT)
                 , #{payt_mthd}
              FROM (SELECT NVL(MAX(SEQ) + 1, '1') AS SEQ
                    FROM  GASU_AMT_REG
                   ) A
    </insert>

    <!-- 가수 수정 -->
    <update id="DlwCmsMap.updateGasuMng" parameterType="map">
        <!-- DM sql-id : updateGasuMng -->
        UPDATE /* DlwCmsMap.updateGasuMng */
               GASU_AMT_REG
           SET GASU_AMT      = CAST(#{gasu_amt} AS INT)
             , GASU_ALLT_AMT = CAST(#{gasu_allt_amt} AS INT)
             , GASU_ADD_AMT  = CAST(#{gasu_add_amt} AS INT)
             , UPD_DM        = SYSDATE
             , UPD_MAN       = #{upd_man}
             , PAY_DAY       = #{pay_day}
             , NOTE          = #{note}
             , PAY_NO        = CAST(#{pay_no} AS INT)
        WHERE seq = #{gasu_seq}
    </update>

    <!-- 가수 삭제 -->
    <update id="DlwCmsMap.deleteGasuMng" parameterType="map">
        <!-- DM sql-id : deleteGasuMng -->
        UPDATE /* DlwCmsMap.deleteGasuMng */
               GASU_AMT_REG
           SET DEL_FG  = 'Y'
             , UPD_DM  = SYSDATE
             , UPD_MAN = #{upd_man}
         WHERE SEQ = #{gasu_seq}
    </update >

    <!-- ??? -->
    <insert id="DlwCmsMap.insertEB22ErrorInfo" parameterType="map">
        INSERT /* DlwCmsMap.insertEB22ErrorInfo */
          INTO CMS_RESULT_INFO
        (
               FILE_NM 	/*  */
             , ACCNT_NO	/*  */
             , IMPS_CD 	/*  */
        )
        VALUES
        (
               #{file_nm}
             , #{accnt_no}
             , #{wd_imps_cd}
        )
    </insert>


    <!-- 청구테이블 상태 업데이트 (오류:03 , 성공:04) -->
    <update id="DlwCmsMap.updateWrdwReqStat" parameterType="map">
        UPDATE /* DlwCmsMap.updateWrdwReqStat */
               WDRW_REQ WR
           SET STAT = '11'
             , UPD_DM = SYSDATE
             , UPD_MAN = #{rgsr_id}
         WHERE SUBSTR(INV_DT,3,6) = #{inv_dt}
           AND STAT='02'
           <!-- AND FILE_NM = #{file_nm} -->
    </update >

    <!-- 대명라이프웨이 콜센터 산출 중복건 리스트 -->
    <select id="DlwCmsMap.getCallDupList" parameterType="map" resultType="resultMap">

        SELECT /* DlwCmsMap.getCallDupList */
                WR.ACCNT_NO
          FROM WDRW_REQ WR
               INNER JOIN WDRW_REQ_CALL_CENTER WRCC ON WR.ACCNT_NO = WRCC.ACCNT_NO AND WRCC.GUBUN = 'CMS' AND WRCC.WDRW_REQ_YN = 'N' AND WRCC.DEL_FG IS NULL
         WHERE WR.STAT = '01'

    </select>

     <!-- CMS산출 기초데이터작업(170523) 정기건 -->
     <parameterMap id="selectCmsMemberByIchaeDt_BasicMap" type="resultMap"><!-- /*java.util.HashMap*/ -->
         <parameter property="inv_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="ichae_stt_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="ichae_end_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="INOUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </parameterMap>

   <select id="DlwCmsMap.getCmsMemberByIchaeDt_Basic" statementType="CALLABLE" parameterMap="selectCmsMemberByIchaeDt_BasicMap">
           {call SP_CMS_WDRW_BASIC(?, ?, ?, ?, ?)}
    </select>


    <!-- CMS산출 기초데이터작업(170523) 연체건 등록 -->
    <parameterMap id="selectCmsMemberyencheByIchaeDt_BasicMap" type="resultMap"><!-- /*java.util.HashMap*/ -->
        <parameter property="ichae_stt_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="ichae_end_dt" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="INOUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </parameterMap>

    <select id="DlwCmsMap.getCmsMember_yencheByIchaeDt_Basic" statementType="CALLABLE" parameterMap="selectCmsMemberyencheByIchaeDt_BasicMap">
           {call SP_CMS_WDRW_YENCHE_BASIC(?, ?, ?, ?)}

    </select>


    <!-- CMS산출 기초데이터작업(170523) 임시건 등록 -->
    <parameterMap id="selectCmsimsiIchaeDtMap_Basic" type="resultMap"><!-- /*java.util.HashMap*/ -->
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="INOUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </parameterMap>

   <select id="DlwCmsMap.getCmsimsiIchaeDt_Basic" statementType="CALLABLE" parameterMap="selectCmsimsiIchaeDtMap_Basic">
           {call SP_CMS_WDRW_IMSI_BASIC(?, ?)}
   </select>


    <!-- CMS산출 기초데이터작업(170523) 확정처리 -->
    <parameterMap id="selectCmsWdrw_Fix" type="resultMap"><!-- /*java.util.HashMap*/ -->
        <parameter property="emple_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="INOUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </parameterMap>

   <select id="DlwCmsMap.getBasicWdrwCms_Fix" statementType="CALLABLE" parameterMap="selectCmsWdrw_Fix">
           {call SP_CMS_WDRW_BASIC_TRANS(?, ?)}
   </select>

   <!-- CMS산출 기초데이터작업(170523) -->
    <select id="DlwCmsMap.getDlwWdrwHstr_Basic" parameterType="map"
        resultType="resultMap">

        SELECT /*DlwCmsMap.getDlwWdrwHstr_Basic*/
          REQ.ACCNT_NO
        , REQ.INV_DT
        , MEM.MEM_NM
        , CMEM.ICHAE_DT
        , CMEM.ICHAE_LIMIT_GUNSU
        , PROD.MON_PAY_AMT
        , CASE WHEN NVL(prod.PROD_CL, '00') = '03'
        THEN CASE WHEN ACCNT.KSTBIT NOT IN ( '03','04')
        THEN CASE
        WHEN ACCNT.KSTBIT = '09' THEN (SELECT SUM( END_NO -
        ST_NO + 1 ) FROM PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD AND
        ALLT_AMT<![CDATA[>]]>
        0)
        ELSE CASE
        WHEN ACCNT.KSTBIT = '09' THEN (PROD.EXPR_NO
        -ACCNT.NEW_CHAN_GUNSU)
        ELSE (PROD.EXPR_NO -ACCNT.NEW_CHAN_GUNSU)
        END
        END
        ELSE CASE
        WHEN ACCNT.KSTBIT = '09' THEN (SELECT SUM( END_NO -
        ST_NO + 1 ) FROM PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD AND
        ADD_AMT<![CDATA[>]]>
        0)
        ELSE CASE
        WHEN ACCNT.KSTBIT = '09' THEN (SELECT SUM(
        END_NO - ST_NO + 1 ) FROM PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD
        AND ALLT_AMT<![CDATA[>]]>
        0)
        ELSE (SELECT SUM( END_NO - ST_NO + 1 ) FROM PRODUCT_DTL WHERE PROD_CD
        = PROD.PROD_CD AND ALLT_AMT<![CDATA[>]]>
        0)
        END
        END
        END
        ELSE (PROD.EXPR_NO -ACCNT.NEW_CHAN_GUNSU)
        END EXPR_NO
        , FN_COM_NM ('S020', REQ.CBIT) CBIT_NM
        , REQ.CBIT
        , REQ.PAY_AMT
        , REQ.PAY_DTL_AMT
        , REQ.PAY_DTL1_AMT
        , REQ.PAY_CNT
        , REQ.PAY_DTL_CNT
        , REQ.PAY_DTL1_CNT
        , REQ.BANK_CD
        , FN_COM_NM ('63', REQ.BANK_CD) BANK_NM
        ,REQ.BANK_ACCNT_NO AS BANK_ACCNT_NO
        , req.birth idn_no
        , REQ.INV_NO
        , ACCNT.OLD_MID
        , CMEM.SYNC_NO
        , FN_COM_NM ('67', REQ.CL) CL
        , ACCNT.PROD_CD
        , PROD.PROD_CL
        FROM WDRW_CMS_BASIC REQ
            INNER JOIN MEM_PROD_ACCNT ACCNT  ON ACCNT.ACCNT_NO = REQ.ACCNT_NO AND ACCNT.DEL_FG = 'N'
            INNER JOIN PRODUCT PROD ON PROD.PROD_CD = ACCNT.PROD_CD AND PROD.DEL_FG = 'N'
        LEFT OUTER JOIN CMS_MEM CMEM  ON CMEM.ACCNT_NO = ACCNT.ACCNT_NO AND CMEM.DEL_FG = 'N'
        INNER JOIN MEMBER MEM ON MEM.MEM_NO = ACCNT.MEM_NO AND MEM.DEL_FG = 'N'
        WHERE REQ.CBIT = '01'
          AND REQ.DEL_FG = 'N'
        <if test="accnt_no != null and accnt_no != ''">
            AND REQ.ACCNT_NO = #{accnt_no}
        </if>
        ORDER BY MEM.MEM_NM
    </select>

    <select id="DlwCmsMap.getDlwWdrwReqDtTtamt_Basic" parameterType="map" resultType="string">
        SELECT /* DlwCmsMap.getDlwWdrwReqDtTtamt_Basic */
               TO_CHAR(NVL(SUM(PAY_AMT),0) + NVL(SUM(PAY_DTL_AMT),0) + NVL(SUM(PAY_DTL1_AMT),0))
        FROM WDRW_CMS_BASIC
        WHERE SUBSTR(INV_DT,1,6) = TO_CHAR(SYSDATE, 'YYYYMM')
    </select>

    <!-- CMS 기초데이터 수정 -->
    <update id="DlwCmsMap.updateBasicAmt" parameterType="map">
        UPDATE /* DlwCmsMap.updateBasicAmt */
               <if test="gubun == 'CMS'">
                       WDRW_CMS_BASIC
               </if>
               <if test="gubun == 'CARD'">
                       WDRW_CARD_BASIC
               </if>
           SET PAY_CNT = #{pay_cnt}
             , PAY_AMT = #{pay_amt}
             , PAY_DTL_CNT = #{pay_dtl_cnt}
             , PAY_DTL_AMT = #{pay_dtl_amt}
             , PAY_DTL1_CNT = #{pay_dtl1_cnt}
             , PAY_DTL1_AMT = #{pay_dtl1_amt}
             , UPD_DM = SYSDATE
             , UPD_MAN = #{upd_man}
         WHERE DEL_FG = 'N'
           AND INV_DT = ' '
           AND ACCNT_NO = #{accnt_no}
           <!-- AND FILE_NM = #{file_nm} -->
    </update >

    <!-- 산출테이블에서 개별 삭제시 고객만족센터 청구비트 변경-->
    <update id="DlwCmsMap.updateWdrwReqYn_Basic" parameterType="map">
        <!-- DM sql-id : updateWdrwReqYn1 -->
        UPDATE /* DlwCmsMap.updateWdrwReqYn_Basic */
               WDRW_REQ_CALL_CENTER
           SET WDRW_REQ_YN = 'N',
                  UPD_DM = SYSDATE,
                  UPD_MAN = #{upd_man}
         WHERE WDRW_REQ_YN = 'Y'
           AND IDNTT = #{idntt}
           AND DEL_FG IS NULL
    </update>

    <!-- CMS EB21 산출내역 선택삭제 -->
    <update id="DlwCmsMap.deleteCmsBasic" parameterType="map">
        UPDATE /* DlwCmsMap.deleteCmsBasic */
           WDRW_CMS_BASIC
        SET DEL_FG = 'Y',
            UPD_DM = SYSDATE,
            UPD_MAN = #{upd_man}
         WHERE DEL_FG = 'N'
           AND CBIT = '01'
           AND INV_DT = ' '
           AND ACCNT_NO = #{accnt_no}
    </update>

    <!-- CARD EB21 산출내역 선택삭제 -->
    <update id="DlwCmsMap.deleteCardBasic" parameterType="map">
        UPDATE /* DlwCmsMap.deleteCardBasic */
           WDRW_CARD_BASIC
        SET DEL_FG = 'Y',
            UPD_DM = SYSDATE,
            UPD_MAN = #{upd_man}
         WHERE DEL_FG = 'N'
           AND CBIT = '01'
           AND INV_DT = ' '
           AND ACCNT_NO = #{accnt_no}
    </update>

     <!-- CMS EB21 산출내역 일괄삭제 -->
    <delete id="DlwCmsMap.deleteCmsAllBasic" parameterType="map">
        UPDATE /* DlwCmsMap.deleteCmsAllBasic */
           WDRW_CMS_BASIC
        SET DEL_FG = 'Y',
            UPD_DM = SYSDATE,
            UPD_MAN = #{upd_man}
         WHERE DEL_FG = 'N'
           AND CBIT = '01'
           AND INV_DT = ' '
    </delete>

     <!-- CARD EB21 산출내역 일괄삭제 -->
    <delete id="DlwCmsMap.deleteCardAllBasic" parameterType="map">
        UPDATE /* DlwCmsMap.deleteCardAllBasic */
           WDRW_CARD_BASIC
        SET DEL_FG = 'Y',
            UPD_DM = SYSDATE,
            UPD_MAN = #{upd_man}
         WHERE DEL_FG = 'N'
           AND CBIT = '01'
           AND INV_DT = ' '
    </delete>

    <!-- CMS EB21 청구파일 적용시 산출기초테이블에서 회원 삭제 -->
    <update id="DlwCmsMap.deleteCmsWdrwReq_Basic" parameterType="map">
        UPDATE /* DlwCmsMap.deleteCmsWdrwReq_Basic */
           WDRW_CMS_BASIC
        SET DEL_FG = 'Y',
            UPD_DM = SYSDATE,
            UPD_MAN = #{upd_man}
         WHERE DEL_FG = 'N'
           AND CBIT = '01'
           AND INV_DT = ' '
           AND ACCNT_NO = #{accnt_no}
    </update>

    <!-- CMS산출 고객콜센터 청구파일적용시 CMS기초테이블 삽입 -->
    <parameterMap id="selectCmscall_Basic" type="resultMap"><!-- /*java.util.HashMap*/ -->
        <parameter property="accnt_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="inv_no" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="result" mode="INOUT" jdbcType="INTEGER" javaType="java.lang.Integer" />
    </parameterMap>

   <select id="DlwCmsMap.insertCmsWdrwReqByCall_Basic" statementType="CALLABLE" parameterMap="selectCmscall_Basic">
           {call SP_CMS_WDRW_CALL_BASIC(?, ?, ?)}
   </select>

     <!-- 환불정보 -->
    <select id="DlwCmsMap.getdaRefundList" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectdaRefundList -->


        SELECT /* DlwCmsMap.getdaRefundList */
               M.MEM_NO
             , MPA.ACCNT_NO
             , M.MEM_NM
             , FN_PROD_NM(MPA.PROD_CD) PROD_NM
             , TBL.NO PAY_NO
             , TBL.PAY_DAY PAY_DAY
             , TBL.PAY_AMT
             , TBL.REFUND_DM REFUND_DM
             , TBL.PAY_CANCEL_NOTE
             , FN_COM_NM('0115', TBL.PAY_CANCEL_CD) PAY_CANCEL_NM
             , FN_COM_NM('01', TBL.PAY_MTHD) PAY_MTHD
          FROM (SELECT ACCNT_NO
                     , NO
                     , PAY_DAY
                     , PAY_AMT
                     , PAY_CANCEL_DAY AS REFUND_DM
                     , PAY_CANCEL_NOTE
                     , PAY_CANCEL_CD
                     , PAY_MTHD
                  FROM PAY_MNG
                 WHERE 1=1
                   <if test="cancl_cl == '01'">
                   AND (PAY_CANCEL_CD = '0001' OR PAY_CANCEL_CD = '0004')
                   </if>
                   <if test="cancl_cl == '02'">
                   AND (PAY_CANCEL_CD = '0002' OR PAY_CANCEL_CD = '0003')
                   </if>
                   AND DEL_FG = 'Y'
                ) TBL
         INNER JOIN MEM_PROD_ACCNT MPA ON TBL.ACCNT_NO = MPA.ACCNT_NO
         INNER JOIN MEMBER M ON MPA.MEM_NO = M.MEM_NO
         WHERE 1=1
           <if test="accnt_no != null and accnt_no != ''">
            AND MPA.ACCNT_NO in (${accnt_no})
           </if>

           <if test="pay_dm_start != null and pay_dm_start != ''">
               <if test="search_sep == '01'">
               AND TBL.PAY_DAY  BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
               <if test="search_sep == '02'">
               AND TBL.REFUND_DM  BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
           </if>
        ORDER BY TBL.pay_day, MPA.ACCNT_NO
    </select>

    <!-- 할부원금 환불정보 -->
    <select id="DlwCmsMap.getdaRefundDtlList" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectdaRefundDtlList -->


        SELECT /* DlwCmsMap.getdaRefundDtlList */
               M.MEM_NO
             , MPA.ACCNT_NO
             , M.MEM_NM
             , FN_PROD_NM(MPA.PROD_CD) PROD_NM
             , TBL.NO PAY_NO
             , TBL.PAY_DAY PAY_DAY
             , TBL.PAY_AMT
             , TBL.REFUND_DM REFUND_DM
             , TBL.PAY_CANCEL_NOTE
             , FN_COM_NM('0115', TBL.PAY_CANCEL_CD) PAY_CANCEL_NM
             , FN_COM_NM('01', TBL.PAY_MTHD) PAY_MTHD
          FROM (
                SELECT ACCNT_NO
                     , NO
                     , PAY_DAY
                     , PAY_AMT
                     , PAY_CANCEL_DAY as REFUND_DM
                     , PAY_CANCEL_NOTE
                     , PAY_CANCEL_CD
                     , PAY_MTHD
                  FROM PAY_MNG_DTL
                 WHERE 1=1
                   <if test="cancl_cl == '01'">
                   AND (PAY_CANCEL_CD = '0001' OR PAY_CANCEL_CD = '0004')
                   </if>
                   <if test="cancl_cl == '02'">
                   AND (PAY_CANCEL_CD = '0002' OR PAY_CANCEL_CD = '0003')
                   </if>
                   AND DEL_FG = 'Y'
               ) TBL
         INNER JOIN MEM_PROD_ACCNT MPA ON TBL.ACCNT_NO = MPA.ACCNT_NO
         INNER JOIN MEMBER M ON MPA.MEM_NO = M.MEM_NO
         WHERE 1=1
           <if test="accnt_no != null and accnt_no != ''">
            AND MPA.ACCNT_NO in (${accnt_no})
           </if>

           <if test="pay_dm_start != null and pay_dm_start != ''">
               <if test="search_sep == '01'">
               AND TBL.PAY_DAY  BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
               <if test="search_sep == '02'">
               AND TBL.REFUND_DM BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
           </if>
        ORDER BY TBL.pay_day, MPA.ACCNT_NO
    </select>

    <!-- 추가부담금 환불정보 -->
    <select id="DlwCmsMap.getdaRefundDtl1List" parameterType="map" resultType="resultMap">
    <!-- sql-life.xml  : selectdaRefundDtl1List -->


        SELECT /* DlwCmsMap.getdaRefundDtl1List */
               M.MEM_NO
             , MPA.ACCNT_NO
             , M.MEM_NM
             , FN_PROD_NM(MPA.PROD_CD) PROD_NM
             , TBL.NO PAY_NO
             , TBL.PAY_DAY PAY_DAY
             , TBL.PAY_AMT
             , TBL.REFUND_DM REFUND_DM
             , TBL.PAY_CANCEL_NOTE
             , FN_COM_NM('0115', TBL.PAY_CANCEL_CD) PAY_CANCEL_NM
             , FN_COM_NM('01', TBL.PAY_MTHD) PAY_MTHD
          FROM (
                SELECT ACCNT_NO
                     , NO
                     , PAY_DAY
                     , PAY_AMT
                     , PAY_CANCEL_DAY as REFUND_DM
                     , PAY_CANCEL_NOTE
                     , PAY_CANCEL_CD
                     , PAY_MTHD
                  FROM PAY_MNG_DTL1
                 WHERE 1=1
                   <if test="cancl_cl == '01'">
                   AND (PAY_CANCEL_CD = '0001' OR PAY_CANCEL_CD = '0004')
                   </if>
                   <if test="cancl_cl == '02'">
                   AND (PAY_CANCEL_CD = '0002' OR PAY_CANCEL_CD = '0003')
                   </if>
                   AND DEL_FG = 'Y'
               ) TBL
           INNER JOIN MEM_PROD_ACCNT MPA ON TBL.ACCNT_NO = MPA.ACCNT_NO
           INNER JOIN MEMBER M ON MPA.MEM_NO = M.MEM_NO
           WHERE 1=1
           <if test="accnt_no != null and accnt_no != ''">
           AND MPA.ACCNT_NO in (${accnt_no})
           </if>

           <if test="pay_dm_start != null and pay_dm_start != ''">
               <if test="search_sep == '01'">
               AND TBL.PAY_DAY BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
               <if test="search_sep == '02'">
               AND TBL.REFUND_DM BETWEEN #{pay_dm_start} AND #{pay_dm_end}
               </if>
           </if>
        ORDER BY TBL.pay_day, MPA.ACCNT_NO
    </select>

    <select id="DlwCmsMap.getAcquResultDataMst" parameterType="map" resultType="resultMap">
        SELECT MST_SERIAL_NUM                            /* 등록일련번호              */
              ,STA_RECORD_GB                             /* RECORD구분(STARTLINE)     */
              ,STA_MAKE_DTTM                             /* 파일작성일(STARTLINE)     */
              ,STA_SEND_ID                               /* 전송대상ID(STARTLINE)     */
              ,STA_RECV_DTTM                             /* 매입결과수신일(STARTLINE) */
              ,STA_FILLER                                /* FILLER(STARTLINE)         */
              ,TOT_RECORD_GB                             /* RECORD구분(TOTALLINE)     */
              ,TOT_RECV_DTTM                             /* 매입결과수신일(TOTALLINE) */
              ,TOT_SEND_ID                               /* 전송대상ID(TOTALLINE)     */
              ,TO_NUMBER(TOT_SEND_NUM) AS TOT_SEND_NUM   /* 전송건수(TOTALLINE)       */
              ,TO_NUMBER(TOT_APPY_NUM) AS TOT_APPY_NUM   /* 승인건수(TOTALLINE)       */
              ,TO_NUMBER(TOT_APPY_PAY) AS TOT_APPY_PAY   /* 승인금액(TOTALLINE)       */
              ,TO_NUMBER(TOT_CNCL_NUM) AS TOT_CNCL_NUM   /* 취소건수(TOTALLINE)       */
              ,TO_NUMBER(TOT_CNCL_PAY) AS TOT_CNCL_PAY   /* 취소금액(TOTALLINE)       */
              ,TOT_FILLER                                /* FILLER(TOTALLINE)         */
              ,FILE_NAME                                 /* 파일명                    */
              ,FILE_PATH                                 /* 파일경로                  */
              ,CALC_YN                                   /* 산출여부                  */
              ,RGSR_ID                                   /* 등록자ID                  */
              ,RGSR_DTTM                                 /* 등록일시                  */
              ,DEL_FG                                    /* 삭제여부                  */
          FROM LF_DMUSER.TB_ACQU_RSLT_MST A
         WHERE 1=1
           AND DEL_FG = 'N'
           AND STA_RECORD_GB = 'H'
           <if test="file_name != null and file_name != ''">
             AND FILE_NAME = #{file_name}
           </if>
           <if test="sta_make_dttm != null and sta_make_dttm != ''">
             AND STA_MAKE_DTTM = #{sta_make_dttm}
           </if>
    </select>

    <insert id="DlwCmsMap.insertAcquResultDataMst" parameterType="map">
        INSERT INTO LF_DMUSER.TB_ACQU_RSLT_MST(MST_SERIAL_NUM, STA_RECORD_GB, STA_MAKE_DTTM, STA_SEND_ID,  STA_RECV_DTTM, STA_FILLER,
											   TOT_RECORD_GB,  TOT_RECV_DTTM, TOT_SEND_ID,   TOT_SEND_NUM, TOT_APPY_NUM,  TOT_APPY_PAY,
											   TOT_CNCL_NUM,   TOT_CNCL_PAY,  TOT_FILLER,    FILE_NAME,    FILE_PATH,     CALC_YN,
											   RGSR_ID,        RGSR_DTTM,     DEL_FG)
             VALUES ( (SELECT NVL(MAX(MST_SERIAL_NUM) , 0) + 1 FROM LF_DMUSER.TB_ACQU_RSLT_MST WHERE 1=1),
                      #{sta_record_gb}, #{sta_make_dttm}, #{sta_send_id}, #{sta_recv_dttm}, #{sta_filler},
                      #{tot_record_gb}, #{tot_recv_dttm}, #{tot_send_id}, #{tot_send_num},  #{tot_appy_num}, #{tot_appy_pay},
                      #{tot_cncl_num},  #{tot_cncl_pay},  #{tot_filler},  #{file_name},     #{file_path},    'Y',
                      #{rgsr_id},       SYSDATE,          'N')
    </insert>

    <insert id="DlwCmsMap.insertAcquResultDataDtl" parameterType="map">
        INSERT INTO LF_DMUSER.TB_ACQU_RSLT_DTL(MST_SERIAL_NUM, DTL_SERIAL_NUM, DATA_GB,       DATA_TID,       DATA_FRAN_ID,   DATA_TRAD_GB,
											   DATA_TRAD_DTTM, DATA_PURC_DTTM, DATA_APPY_NUM, DATA_PURC_CRCO, DATA_CARD_GB,   DATA_CARD_NUM,
											   DATA_PURC_PAY,  DATA_FRAN_FEE,  DATA_ETC_FEE,  DATA_AMOT_PAID, DATA_AMOT_DTTM, DATA_TRAD_BLGB,
											   DATA_FILLER,    RGSR_ID,        RGSR_DTTM,     DEL_FG)
             VALUES ( (SELECT NVL(MAX(MST_SERIAL_NUM) , 0) FROM LF_DMUSER.TB_ACQU_RSLT_MST WHERE 1=1),
             		  (SELECT NVL(MAX(DTL_SERIAL_NUM) , 0) + 1 FROM LF_DMUSER.TB_ACQU_RSLT_DTL WHERE 1=1 AND MST_SERIAL_NUM = (SELECT NVL(MAX(MST_SERIAL_NUM) , 0) FROM LF_DMUSER.TB_ACQU_RSLT_MST WHERE 1=1)),
             		  #{data_gb},        #{data_tid},       #{data_fran_id},  #{data_trad_gb},
             		  #{data_trad_dttm}, #{data_purc_dttm}, #{data_appy_num}, #{data_purc_crco}, #{data_card_gb},   #{data_card_num},
             		  #{data_purc_pay},  #{data_fran_fee},  #{data_etc_fee},  #{data_amot_paid}, #{data_amot_dttm}, #{data_blgb},
             		  #{data_filler},    #{rgsr_id},        SYSDATE,          'N')
    </insert>

    <select id="DlwCmsMap.getAcquResultDataListTotalCnt" parameterType="map" resultType="int">
        SELECT  /*DlwCmsMap.getAcquResultDataListTotalCnt*/
        	COUNT(*)
          FROM ( SELECT *
                   FROM LF_DMUSER.TB_ACQU_RSLT_MST A
                   INNER JOIN LF_DMUSER.TB_ACQU_RSLT_DTL B
                           ON A.MST_SERIAL_NUM = B.MST_SERIAL_NUM
                         AND A.DEL_FG = 'N'
                         AND B.DEL_FG = 'N'
                  WHERE 1=1
                  AND A.STA_RECORD_GB = 'H'
                  AND B.DATA_GB = 'D'
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')">
                    AND B.DATA_TRAD_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                    AND B.DATA_PURC_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('03')">
                    AND A.STA_RECV_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('04')">
                    AND A.STA_MAKE_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('05')">
                    AND B.DATA_AMOT_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="data_trad_gb != null and data_trad_gb != ''">
                    AND B.DATA_TRAD_GB = #{data_trad_gb} 
                  </if>
                  <if test="data_appy_num != null and data_appy_num != ''">
                    AND TRIM(B.DATA_APPY_NUM) = #{data_appy_num}
                  </if>
                  <if test="data_purc_crco != null and data_purc_crco != ''">
                    AND TRIM(B.DATA_PURC_CRCO) = #{data_purc_crco}
                  </if>
               ) TBL
          WHERE 1=1
    </select>


    <select id="DlwCmsMap.getAcquResultDataList" parameterType="map" resultType="resultMap">
    	SELECT  /*DlwCmsMap.getAcquResultDataList*/
    		TBL.*
          FROM ( SELECT ROW_NUMBER() OVER(ORDER BY B.DATA_TID ASC) AS PAGE_INDX
                       ,TRIM(A.MST_SERIAL_NUM) AS M_MST_SERIAL_NUM            /* 등록일련번호              */
                       ,TRIM(A.STA_RECORD_GB)  AS M_STA_RECORD_GB             /* RECORD구분(STARTLINE)     */
                       ,TRIM(A.STA_MAKE_DTTM)  AS M_STA_MAKE_DTTM             /* 파일작성일(STARTLINE)     */
                       ,TRIM(A.STA_SEND_ID)    AS M_STA_SEND_ID               /* 전송대상ID(STARTLINE)     */
                       ,TRIM(A.STA_RECV_DTTM)  AS M_STA_RECV_DTTM             /* 매입결과수신일(STARTLINE) */
                       ,TRIM(A.STA_FILLER)     AS M_STA_FILLER                /* FILLER(STARTLINE)         */
                       ,TRIM(A.TOT_RECORD_GB)  AS M_TOT_RECORD_GB             /* RECORD구분(TOTALLINE)     */
                       ,TRIM(A.TOT_RECV_DTTM)  AS M_TOT_RECV_DTTM             /* 매입결과수신일(TOTALLINE) */
                       ,TRIM(A.TOT_SEND_ID)    AS M_TOT_SEND_ID               /* 전송대상ID(TOTALLINE)     */
                       ,TO_NUMBER(A.TOT_SEND_NUM)   AS M_TOT_SEND_NUM         /* 전송건수(TOTALLINE)       */
                       ,TO_NUMBER(A.TOT_APPY_NUM)   AS M_TOT_APPY_NUM         /* 승인건수(TOTALLINE)       */
                       ,TO_NUMBER(A.TOT_APPY_PAY)   AS M_TOT_APPY_PAY         /* 승인금액(TOTALLINE)       */
                       ,TO_NUMBER(A.TOT_CNCL_NUM)   AS M_TOT_CNCL_NUM         /* 취소건수(TOTALLINE)       */
                       ,TO_NUMBER(A.TOT_CNCL_PAY)   AS M_TOT_CNCL_PAY         /* 취소금액(TOTALLINE)       */
                       ,TRIM(A.TOT_FILLER)     AS M_TOT_FILLER                /* FILLER(TOTALLINE)         */
                       ,TRIM(A.FILE_NAME)      AS M_FILE_NAME                 /* 파일명                    */
                       ,TRIM(A.FILE_PATH)      AS M_FILE_PATH                 /* 파일경로                  */
                       ,TRIM(A.CALC_YN)        AS M_CALC_YN                   /* 산출여부                  */
                       ,TRIM(A.RGSR_ID)        AS M_RGSR_ID                   /* 등록자ID                  */
                       ,TRIM(A.RGSR_DTTM)      AS M_RGSR_DTTM                 /* 등록일시                  */
                       ,TRIM(A.DEL_FG)         AS M_DEL_FG                    /* 삭제여부                  */
                       ,TRIM(B.MST_SERIAL_NUM) AS D_MST_SERIAL_NUM            /* 등록일련번호MST           */
                       ,TRIM(B.DATA_GB)        AS D_DATA_GB                   /* RECORD구분(DATALINE)      */
                       ,TRIM(B.DATA_TID)       AS D_DATA_TID                  /* TID(DATALINE)             */
                       ,TRIM(B.DATA_FRAN_ID)   AS D_DATA_FRAN_ID              /* 가맹점ID(DATALINE)        */
                       ,TRIM(B.DATA_TRAD_GB)   AS D_DATA_TRAD_GB              /* 거래구분(DATALINE)        */
                       ,TRIM(B.DATA_TRAD_DTTM) AS D_DATA_TRAD_DTTM            /* 거래일자(DATALINE)        */
                       ,TRIM(B.DATA_PURC_DTTM) AS D_DATA_PURC_DTTM            /* 매입일자(DATALINE)        */
                       ,TRIM(B.DATA_APPY_NUM)  AS D_DATA_APPY_NUM             /* 승인번호(DATALINE)        */
                       ,TRIM(B.DATA_PURC_CRCO) AS D_DATA_PURC_CRCO            /* 매입카드사코드(DATALINE)  */
                       ,TRIM(B.DATA_CARD_GB)   AS D_DATA_CARD_GB              /* 카드구분(DATALINE)        */
                       ,TRIM(B.DATA_CARD_NUM)  AS D_DATA_CARD_NUM             /* 카드번호(DATALINE)        */
                       ,TO_NUMBER(B.DATA_PURC_PAY)  AS D_DATA_PURC_PAY        /* 매입금액(DATALINE)        */
                       ,TO_NUMBER(B.DATA_FRAN_FEE)  AS D_DATA_FRAN_FEE        /* 가맹점수수료(DATALINE)    */
                       ,TO_NUMBER(B.DATA_ETC_FEE)   AS D_DATA_ETC_FEE         /* 기타수수료(DATALINE)      */
                       ,TO_NUMBER(B.DATA_AMOT_PAID) AS D_DATA_AMOT_PAID       /* 지급금액(DATALINE)        */
                       ,TRIM(B.DATA_AMOT_DTTM) AS D_DATA_AMOT_DTTM            /* 지급예정일(DATALINE)      */
                       ,TRIM(B.DATA_TRAD_BLGB) AS D_DATA_TRAD_BLGB            /* 거래구분(DATALINE)        */
                       ,TRIM(B.DATA_FILLER)    AS D_DATA_FILLER               /* FILLER(DATALINE)          */
                       ,TRIM(B.RGSR_ID)        AS D_RGSR_ID                   /* 등록자ID                  */
                       ,TRIM(B.RGSR_DTTM)      AS D_RGSR_DTTM                 /* 등록일시                  */
                       ,TRIM(B.DEL_FG)         AS D_DEL_FG                    /* 삭제여부                  */
                   FROM LF_DMUSER.TB_ACQU_RSLT_MST A
                   INNER JOIN LF_DMUSER.TB_ACQU_RSLT_DTL B
                           ON A.MST_SERIAL_NUM = B.MST_SERIAL_NUM
                         AND A.DEL_FG = 'N'
                         AND B.DEL_FG = 'N'
                  WHERE 1=1
                  AND A.STA_RECORD_GB = 'H'
                  AND B.DATA_GB = 'D'
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')">
                    AND B.DATA_TRAD_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                    AND B.DATA_PURC_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('03')">
                    AND A.STA_RECV_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('04')">
                    AND A.STA_MAKE_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('05')">
                    AND B.DATA_AMOT_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="data_trad_gb != null and data_trad_gb != ''">
                    AND B.DATA_TRAD_GB = #{data_trad_gb} 
                  </if>
                  <if test="data_appy_num != null and data_appy_num != ''">
                    AND TRIM(B.DATA_APPY_NUM) = #{data_appy_num}
                  </if>
                  <if test="data_purc_crco != null and data_purc_crco != ''">
                    AND TRIM(B.DATA_PURC_CRCO) = #{data_purc_crco}
                  </if>
               ) TBL
          WHERE 1=1
          <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
          <![CDATA[
            AND PAGE_INDX >= #{startLine}
            AND PAGE_INDX < #{endLine}
          ]]>
          </if>
    </select>

    <select id="DlwCmsMap.getAcquResultDataListTotalSummary1" parameterType="map" resultType="resultMap">
        SELECT COUNT(*)                 AS M_TOT_SEND_NUM
              ,SUM(TBL.DATA_PURC_PAY)   AS D_DATA_PURC_PAY_SUM
              ,SUM(TBL.DATA_FRAN_FEE)   AS D_DATA_FRAN_FEE_SUM
              ,SUM(TBL.DATA_ETC_FEE)    AS D_DATA_ETC_FEE_SUM
              ,SUM(TBL.DATA_AMOT_PAID)  AS D_DATA_AMOT_PAID_SUM
          FROM ( SELECT *
                   FROM LF_DMUSER.TB_ACQU_RSLT_MST A
                   INNER JOIN LF_DMUSER.TB_ACQU_RSLT_DTL B
                           ON A.MST_SERIAL_NUM = B.MST_SERIAL_NUM
                         AND A.DEL_FG = 'N'
                         AND B.DEL_FG = 'N'
                  WHERE 1=1
                  AND A.STA_RECORD_GB = 'H'
                  AND B.DATA_GB = 'D'
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')">
                    AND B.DATA_TRAD_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                    AND B.DATA_PURC_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('03')">
                    AND A.STA_RECV_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('04')">
                    AND A.STA_MAKE_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('05')">
                    AND B.DATA_AMOT_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="data_trad_gb != null and data_trad_gb != ''">
                    AND B.DATA_TRAD_GB = #{data_trad_gb} 
                  </if>
                  <if test="data_appy_num != null and data_appy_num != ''">
                    AND TRIM(B.DATA_APPY_NUM) = #{data_appy_num} 
                  </if>
               ) TBL
         WHERE 1=1
    </select>

    <select id="DlwCmsMap.getAcquResultDataListTotalSummary2" parameterType="map" resultType="resultMap">
        WITH CALC_RSLT AS
        (
            SELECT DATA_TRAD_GB
                  ,COUNT(*) AS M_TOT_SEND_NUM
                  ,SUM(B.DATA_PURC_PAY) AS D_DATA_PURC_PAY_SUM
                  ,SUM(B.DATA_FRAN_FEE) AS D_DATA_FRAN_FEE_SUM
                  ,SUM(B.DATA_ETC_FEE) AS D_DATA_ETC_FEE_SUM
                  ,SUM(B.DATA_AMOT_PAID) AS D_DATA_AMOT_PAID_SUM
              FROM LF_DMUSER.TB_ACQU_RSLT_MST A                                                          
              INNER JOIN LF_DMUSER.TB_ACQU_RSLT_DTL B                                                    
                      ON A.MST_SERIAL_NUM = B.MST_SERIAL_NUM                                             
                     AND A.DEL_FG = 'N'                                                                   
                     AND B.DEL_FG = 'N'
             WHERE 1=1
             AND A.STA_RECORD_GB = 'H'
             AND B.DATA_GB = 'D'
               <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')">
                   AND B.DATA_TRAD_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
               </if>
               <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                   AND B.DATA_PURC_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
               </if>
               <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('03')">
                   AND A.STA_RECV_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
               </if>
               <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('04')">
                   AND A.STA_MAKE_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
               </if>
               <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('05')">
                   AND B.DATA_AMOT_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
               </if>
               <if test="data_appy_num != null and data_appy_num != ''">
                   AND TRIM(B.DATA_APPY_NUM) = #{data_appy_num} 
               </if>
            GROUP BY DATA_TRAD_GB
        )
                          
        SELECT NVL((SELECT M_TOT_SEND_NUM FROM CALC_RSLT WHERE 1=1 AND DATA_TRAD_GB = '0'), 0) + 
               NVL((SELECT M_TOT_SEND_NUM FROM CALC_RSLT WHERE 1=1 AND DATA_TRAD_GB = '2'), 0) AS M_TOT_SEND_NUM
              ,NVL((SELECT D_DATA_PURC_PAY_SUM FROM CALC_RSLT WHERE 1=1 AND DATA_TRAD_GB = '0'), 0) - 
               NVL((SELECT D_DATA_PURC_PAY_SUM FROM CALC_RSLT WHERE 1=1 AND DATA_TRAD_GB = '2'), 0) AS D_DATA_PURC_PAY_SUM
              ,NVL((SELECT D_DATA_FRAN_FEE_SUM FROM CALC_RSLT WHERE 1=1 AND DATA_TRAD_GB = '0'), 0) - 
               NVL((SELECT D_DATA_FRAN_FEE_SUM FROM CALC_RSLT WHERE 1=1 AND DATA_TRAD_GB = '2'), 0) AS D_DATA_FRAN_FEE_SUM
              ,NVL((SELECT D_DATA_ETC_FEE_SUM FROM CALC_RSLT WHERE 1=1 AND DATA_TRAD_GB = '0'), 0) - 
               NVL((SELECT D_DATA_ETC_FEE_SUM FROM CALC_RSLT WHERE 1=1 AND DATA_TRAD_GB = '2'), 0) AS D_DATA_ETC_FEE_SUM
              ,NVL((SELECT D_DATA_AMOT_PAID_SUM FROM CALC_RSLT WHERE 1=1 AND DATA_TRAD_GB = '0'), 0) - 
               NVL((SELECT D_DATA_AMOT_PAID_SUM FROM CALC_RSLT WHERE 1=1 AND DATA_TRAD_GB = '2'), 0) AS D_DATA_AMOT_PAID_SUM
          FROM DUAL
    </select>
    
    <select id="DlwCmsMap.getAcquResultDataListExcel" parameterType="map" resultType="resultMap">
    	SELECT TBL.*
          FROM ( SELECT ROW_NUMBER() OVER(ORDER BY B.DATA_TID ASC) AS PAGE_INDX
                       ,TRIM(A.MST_SERIAL_NUM) AS M_MST_SERIAL_NUM            /* 등록일련번호              */
                       ,TRIM(A.STA_RECORD_GB)  AS M_STA_RECORD_GB             /* RECORD구분(STARTLINE)     */
                       ,TRIM(A.STA_MAKE_DTTM)  AS M_STA_MAKE_DTTM             /* 파일작성일(STARTLINE)     */
                       ,TRIM(A.STA_SEND_ID)    AS M_STA_SEND_ID               /* 전송대상ID(STARTLINE)     */
                       ,TRIM(A.STA_RECV_DTTM)  AS M_STA_RECV_DTTM             /* 매입결과수신일(STARTLINE) */
                       ,TRIM(A.STA_FILLER)     AS M_STA_FILLER                /* FILLER(STARTLINE)         */
                       ,TRIM(A.TOT_RECORD_GB)  AS M_TOT_RECORD_GB             /* RECORD구분(TOTALLINE)     */
                       ,TRIM(A.TOT_RECV_DTTM)  AS M_TOT_RECV_DTTM             /* 매입결과수신일(TOTALLINE) */
                       ,TRIM(A.TOT_SEND_ID)    AS M_TOT_SEND_ID               /* 전송대상ID(TOTALLINE)     */
                       ,TO_NUMBER(A.TOT_SEND_NUM)   AS M_TOT_SEND_NUM         /* 전송건수(TOTALLINE)       */
                       ,TO_NUMBER(A.TOT_APPY_NUM)   AS M_TOT_APPY_NUM         /* 승인건수(TOTALLINE)       */
                       ,TO_NUMBER(A.TOT_APPY_PAY)   AS M_TOT_APPY_PAY         /* 승인금액(TOTALLINE)       */
                       ,TO_NUMBER(A.TOT_CNCL_NUM)   AS M_TOT_CNCL_NUM         /* 취소건수(TOTALLINE)       */
                       ,TO_NUMBER(A.TOT_CNCL_PAY)   AS M_TOT_CNCL_PAY         /* 취소금액(TOTALLINE)       */
                       ,TRIM(A.TOT_FILLER)     AS M_TOT_FILLER                /* FILLER(TOTALLINE)         */
                       ,TRIM(A.FILE_NAME)      AS M_FILE_NAME                 /* 파일명                    */
                       ,TRIM(A.FILE_PATH)      AS M_FILE_PATH                 /* 파일경로                  */
                       ,TRIM(A.CALC_YN)        AS M_CALC_YN                   /* 산출여부                  */
                       ,TRIM(A.RGSR_ID)        AS M_RGSR_ID                   /* 등록자ID                  */
                       ,TRIM(A.RGSR_DTTM)      AS M_RGSR_DTTM                 /* 등록일시                  */
                       ,TRIM(A.DEL_FG)         AS M_DEL_FG                    /* 삭제여부                  */
                       ,TRIM(B.MST_SERIAL_NUM) AS D_MST_SERIAL_NUM            /* 등록일련번호MST           */
                       ,TRIM(B.DATA_GB)        AS D_DATA_GB                   /* RECORD구분(DATALINE)      */
                       ,TRIM(B.DATA_TID)       AS D_DATA_TID                  /* TID(DATALINE)             */
                       ,TRIM(B.DATA_FRAN_ID)   AS D_DATA_FRAN_ID              /* 가맹점ID(DATALINE)        */
                       ,TRIM(B.DATA_TRAD_GB)   AS D_DATA_TRAD_GB              /* 거래구분(DATALINE)        */
                       ,TRIM(B.DATA_TRAD_DTTM) AS D_DATA_TRAD_DTTM            /* 거래일자(DATALINE)        */
                       ,TRIM(B.DATA_PURC_DTTM) AS D_DATA_PURC_DTTM            /* 매입일자(DATALINE)        */
                       ,TRIM(B.DATA_APPY_NUM)  AS D_DATA_APPY_NUM             /* 승인번호(DATALINE)        */
                       ,TRIM(B.DATA_PURC_CRCO) AS D_DATA_PURC_CRCO            /* 매입카드사코드(DATALINE)  */
                       ,TRIM(B.DATA_CARD_GB)   AS D_DATA_CARD_GB              /* 카드구분(DATALINE)        */
                       ,TRIM(B.DATA_CARD_NUM)  AS D_DATA_CARD_NUM             /* 카드번호(DATALINE)        */
                       ,TO_NUMBER(B.DATA_PURC_PAY)  AS D_DATA_PURC_PAY        /* 매입금액(DATALINE)        */
                       ,TO_NUMBER(B.DATA_FRAN_FEE)  AS D_DATA_FRAN_FEE        /* 가맹점수수료(DATALINE)    */
                       ,TO_NUMBER(B.DATA_ETC_FEE)   AS D_DATA_ETC_FEE         /* 기타수수료(DATALINE)      */
                       ,TO_NUMBER(B.DATA_AMOT_PAID) AS D_DATA_AMOT_PAID       /* 지급금액(DATALINE)        */
                       ,TRIM(B.DATA_AMOT_DTTM) AS D_DATA_AMOT_DTTM            /* 지급예정일(DATALINE)      */
                       ,TRIM(B.DATA_TRAD_BLGB) AS D_DATA_TRAD_BLGB            /* 거래구분(DATALINE)        */
                       ,TRIM(B.DATA_FILLER)    AS D_DATA_FILLER               /* FILLER(DATALINE)          */
                       ,TRIM(B.RGSR_ID)        AS D_RGSR_ID                   /* 등록자ID                  */
                       ,TRIM(B.RGSR_DTTM)      AS D_RGSR_DTTM                 /* 등록일시                  */
                       ,TRIM(B.DEL_FG)         AS D_DEL_FG                    /* 삭제여부                  */
                   FROM LF_DMUSER.TB_ACQU_RSLT_MST A
                   INNER JOIN LF_DMUSER.TB_ACQU_RSLT_DTL B
                           ON A.MST_SERIAL_NUM = B.MST_SERIAL_NUM
                         AND A.DEL_FG = 'N'
                         AND B.DEL_FG = 'N'
                  WHERE 1=1
                  AND A.STA_RECORD_GB = 'H'
                  AND B.DATA_GB = 'D'
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')"> 
                    AND B.DATA_TRAD_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                    AND B.DATA_PURC_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('03')">
                    AND A.STA_RECV_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('04')">
                    AND A.STA_MAKE_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('05')">
                    AND B.DATA_AMOT_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="data_trad_gb != null and data_trad_gb != ''">
                    AND B.DATA_TRAD_GB = #{data_trad_gb} 
                  </if>
                  <if test="data_appy_num != null and data_appy_num != ''">
                    AND TRIM(B.DATA_APPY_NUM) = #{data_appy_num}
                  </if>
               ) TBL
          WHERE 1=1
    </select>
    
    <select id="DlwCmsMap.getNotAuthResultDataCount" parameterType="map" resultType="int">
		SELECT 
		    COUNT(*) AS ICNT
		FROM LF_DMUSER.TB_MEMBER_WDRW_RESULT RST 
		WHERE 1=1
		     AND RST.REQ_DAY BETWEEN #{sta_dttm} AND #{end_dttm}
		     AND RST.AUTH_YN = 'N'
		     AND RST.RESULT_CD = '00'   
		     <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('0')">
		        	AND NVL(RST.CANCEL_YN,'N') = 'N'
		    	</if>
		    	<if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('2')">
		        	AND NVL(RST.CANCEL_YN,'N') = 'Y'
		    	</if>
		    	<if test="data_appy_num != null and data_appy_num != ''">
		        	AND RST.AUTH_CD = #{data_appy_num}
		    	</if>
    	<!--  
        SELECT /* DlwCmsMap.getNotAuthResultDataCount */
            COUNT(*) AS ICNT
        FROM
        (
            SELECT 
                REQ.ACCNT_NO            
            FROM LF_DMUSER.TB_MEMBER_WDRW_REQ REQ INNER JOIN
                LF_DMUSER.PRODUCT PD ON REQ.PROD_CD = PD.PROD_CD LEFT OUTER JOIN 
                LF_DMUSER.TB_MEMBER_WDRW_RESULT RST ON REQ.ACCNT_NO = RST.ACCNT_NO AND REQ.PAY_MTHD = RST.PAY_MTHD AND REQ.REQ_DAY = RST.REQ_DAY AND REQ.RESULT_KEY = RST.RESULT_KEY
            WHERE 1=1
            AND NVL(REQ.AUTH_YN,'Y') = 'N'
            AND RST.RESULT_CD = '00'
            <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                AND REQ.REQ_DAY BETWEEN #{sta_dttm} AND #{end_dttm}
            </if>
            <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('04')">
                AND TO_CHAR(TO_DATE(REQ.REQ_DAY, 'YYYYMMDD') + 1, 'YYYYMMDD') BETWEEN #{sta_dttm} AND #{end_dttm}
            </if>
            <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('05')">
                AND TO_CHAR(TO_DATE(REQ.REQ_DAY, 'YYYYMMDD') + 4, 'YYYYMMDD') BETWEEN #{sta_dttm} AND #{end_dttm}
            </if>
            <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('0')">
                AND RST.CANCEL_YN = 'N'
            </if>
            <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('2')">
                AND RST.CANCEL_YN = 'Y'
            </if>
            <if test="data_appy_num != null and data_appy_num != ''">
                AND RST.AUTH_CD = #{data_appy_num}
            </if>
            <if test="data_purc_crco != null and data_purc_crco != ''">
                AND RST.ICHAE_CD = #{data_purc_crco}
            </if>
        ) MAIN_TBL
        WHERE 1=1
         -->
    </select>


    <select id="DlwCmsMap.getNotAuthResultDataList" parameterType="map" resultType="resultMap">
        SELECT  
        	/* DlwCmsMap.getNotAuthResultDataList */
        	PAGE_INDX,
	        ACCNT_NO, 
	        MEM_NM,
	        REQ_DAY,
	        FILE_MAKE_DAY,
	        '' AS PAYMENT_DAY,
	        CASE WHEN CANCEL_YN = 'Y' THEN CNCL_REQ_NO ELSE REQ_NO  END AS REQ_NO,
	        PAY_KIND,
	        RESULT_KEY,
	        RESULT_CD,
	        RESULT_MSG,
	        PAY_MTHD, 
	        AUTH_DT,
	        AUTH_CD,
	        '' AS ICHAE_CD,
	        '' AS ICHAE_NO,
	        '' AS ETC,                
	        CANCEL_DT,
	        AUTH_YN, 
	        CASE WHEN CANCEL_YN = 'Y' THEN (MON_PAY_AMT * -1) ELSE MON_PAY_AMT END AS MON_PAY_AMT,    
	        CASE WHEN CANCEL_YN = 'Y' THEN (BAS_CMIS_AMT * -1) ELSE BAS_CMIS_AMT END AS BAS_CMIS_AMT,
	        CASE WHEN CANCEL_YN = 'Y' THEN (FRC_CMIS_AMT * -1) ELSE FRC_CMIS_AMT END AS FRC_CMIS_AMT,
	        CASE WHEN CANCEL_YN = 'Y' THEN (ETC_CMIS_AMT * -1) ELSE ETC_CMIS_AMT END AS ETC_CMIS_AMT,
	        CASE WHEN CANCEL_YN = 'Y' THEN (CUR_PAY_AMT * -1) ELSE CUR_PAY_AMT END AS CUR_PAY_AMT,
	        CANCEL_YN    
	    FROM
	    (
	        SELECT 
	            ROWNUM AS PAGE_INDX,
	            RST.ACCNT_NO,
	            LF_DMUSER.FN_MEM_NM(MPA.MEM_NO) AS MEM_NM,
	            RST.REQ_DAY,
	            TO_CHAR(TO_DATE(RST.REQ_DAY, 'YYYYMMDD') + 1, 'YYYYMMDD') AS FILE_MAKE_DAY,
	            REQ.REQ_PAY_NO AS REQ_NO,
	            RST.PAY_KIND,
	            RST.RESULT_KEY, 
	            RST.RESULT_CD,
	            RST.RESULT_MSG,
	            RST.PAY_MTHD,
	            RST.AUTH_DT,
	            RST.AUTH_CD,    
	            CNCL.REQ_DAY AS CANCEL_DT,
	            RST.AUTH_YN,	            
	            PI.PROD_AMT AS MON_PAY_AMT,
	            RST.BAS_CMIS_AMT,
	            PI.PROD_AMT - RST.CUR_PAY_AMT - RST.ETC_CMIS_AMT AS FRC_CMIS_AMT,
	            RST.ETC_CMIS_AMT,
	            RST.CUR_PAY_AMT,
	            NVL(RST.CANCEL_YN,'N') AS CANCEL_YN,
	            CNCL.REQ_PAY_NO AS CNCL_REQ_NO
	        FROM LF_DMUSER.TB_MEMBER_WDRW_RESULT RST LEFT OUTER JOIN
	            LF_DMUSER.TB_MEMBER_WDRW_REQ REQ ON REQ.ACCNT_NO = RST.ACCNT_NO AND REQ.REQ_DAY = RST.REQ_DAY AND REQ.RESULT_KEY = RST.RESULT_KEY LEFT OUTER JOIN
	            LF_DMUSER.TB_MEMBER_REQ_NAUTH_CNCL CNCL ON RST.ACCNT_NO = CNCL.ACCNT_NO AND RST.REQ_DAY = CNCL.REQ_DAY AND RST.RESULT_KEY = CNCL.CC_RESULT_KEY AND CNCL.DEL_FG ='X' INNER JOIN
	            MEM_PROD_ACCNT MPA ON RST.ACCNT_NO = MPA.ACCNT_NO AND MPA.DEL_FG = 'N' INNER JOIN
	            PRODUCT PD ON MPA.PROD_CD = PD.PROD_CD INNER JOIN
                (
                    SELECT 
                        PROD_CD,
                        NO,
                        SUM(AMT) + SUM(REL_AMT) + SUM(ADD_AMT) AS PROD_AMT
                    FROM PRODUCT_NO_DATA
                    GROUP BY PROD_CD, NO
                ) PI ON REQ.PROD_CD = PI.PROD_CD AND REQ.REQ_PAY_NO = PI.NO           
	        WHERE 1=1
	            AND RST.REQ_DAY BETWEEN #{sta_dttm} AND #{end_dttm}
	            AND RST.AUTH_YN = 'N'
	            <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('0')">
                	AND NVL(RST.CANCEL_YN,'N') = 'N'
            	</if>
            	<if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('2')">
                	AND NVL(RST.CANCEL_YN,'N') = 'Y'
            	</if>
            	<if test="data_appy_num != null and data_appy_num != ''">
                	AND RST.AUTH_CD = #{data_appy_num}
            	</if>
	    ) MAIN_TBL
	    WHERE 1=1
	    	AND RESULT_CD = '00'   
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            AND PAGE_INDX <![CDATA[>=]]> #{startLine}
            AND PAGE_INDX <![CDATA[< ]]> #{endLine}
        </if> 
    
    
    	<!--
        SELECT /* DlwCmsMap.getNotAuthResultDataList */
            MAIN_TBL.*
        FROM
        (
            SELECT 
                ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) AS PAGE_INDX,
                RST.ACCNT_NO,
                LF_DMUSER.FN_MEM_NM(REQ.MEM_NO) AS MEM_NM,
                RST.REQ_DAY,
                TO_CHAR(TO_DATE(RST.REQ_DAY, 'YYYYMMDD') + 1, 'YYYYMMDD') AS FILE_MAKE_DAY,
                TO_CHAR(TO_DATE(RST.REQ_DAY, 'YYYYMMDD') + 4, 'YYYYMMDD') AS PAYMENT_DAY,
                RST.REQ_NO,
                RST.PAY_KIND,
                RST.RESULT_KEY,
                RST.RESULT_CD,
                RST.RESULT_MSG,
                RST.PAY_MTHD,
                RST.AUTH_DT,
                RST.AUTH_CD,
                RST.ICHAE_CD,
                RST.ICHAE_NO,
                RST.ETC,
                RST.REG_DM,
                RST.REG_MAN,
                RST.UPD_DM,
                RST.UPD_MAN,
                RST.CANCEL_DT,
                RST.TID,
                RST.AUTH_YN,
                PD.MON_PAY_AMT,
                RST.BAS_CMIS_AMT,
                PD.MON_PAY_AMT - RST.CUR_PAY_AMT - RST.ETC_CMIS_AMT AS FRC_CMIS_AMT,
                RST.ETC_CMIS_AMT,
                RST.CUR_PAY_AMT,
                CASE WHEN RST.CANCEL_YN = 'Y' THEN '2' 
                     WHEN RST.CANCEL_YN = 'N' THEN '0' 
                     ELSE RST.CANCEL_YN 
                END AS CANCEL_YN
            FROM LF_DMUSER.TB_MEMBER_WDRW_REQ REQ INNER JOIN
                LF_DMUSER.PRODUCT PD ON REQ.PROD_CD = PD.PROD_CD LEFT OUTER JOIN 
                LF_DMUSER.TB_MEMBER_WDRW_RESULT RST ON REQ.ACCNT_NO = RST.ACCNT_NO AND REQ.PAY_MTHD = RST.PAY_MTHD AND REQ.REQ_DAY = RST.REQ_DAY AND REQ.RESULT_KEY = RST.RESULT_KEY
            WHERE 1=1
            	AND RST.REQ_DAY BETWEEN #{sta_dttm} AND #{end_dttm}
            	AND RST.AUTH_YN = 'N'
            	AND RST.RESULT_CD = '00'            
            <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('0')">
                AND NVL(RST.CANCEL_YN,'N') = 'N'
            </if>
            <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('2')">
                AND NVL(RST.CANCEL_YN,'N') = 'Y'
            </if>
            <if test="data_appy_num != null and data_appy_num != ''">
                AND RST.AUTH_CD = #{data_appy_num}
            </if>
        ) MAIN_TBL
        WHERE 1=1
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            AND PAGE_INDX <![CDATA[>=]]> #{startLine}
            AND PAGE_INDX <![CDATA[< ]]> #{endLine}
        </if>
         -->
    </select>
    
    <select id="DlwCmsMap.getNotAuthResultDataListTotalSummary1" parameterType="map" resultType="resultMap">
	    SELECT
	        COUNT(*) AS  ICNT,
	        SUM(CASE WHEN CANCEL_YN = 'Y' THEN (NVL(MON_PAY_AMT,0) * -1) ELSE NVL(MON_PAY_AMT,0) END) AS TOT_MON_PAY_AMT,
	        SUM(CASE WHEN CANCEL_YN = 'Y' THEN (NVL(BAS_CMIS_AMT,0) * -1) ELSE NVL(BAS_CMIS_AMT,0) END) AS TOT_BAS_CMIS_AMT,
	        SUM(CASE WHEN CANCEL_YN = 'Y' THEN (NVL(FRC_CMIS_AMT,0) * -1) ELSE NVL(FRC_CMIS_AMT,0) END) AS TOT_FRC_CMIS_AMT,
	        SUM(CASE WHEN CANCEL_YN = 'Y' THEN (NVL(ETC_CMIS_AMT,0) * -1) ELSE NVL(ETC_CMIS_AMT,0) END) AS TOT_ETC_CMIS_AMT,
	        SUM(CASE WHEN CANCEL_YN = 'Y' THEN (NVL(CUR_PAY_AMT,0) * -1) ELSE NVL(CUR_PAY_AMT,0) END) AS TOT_CUR_PAY_AMT
	    FROM 
	    (
	        SELECT 
	            PD.MON_PAY_AMT, 
	            RST.BAS_CMIS_AMT,
	            PD.MON_PAY_AMT - RST.CUR_PAY_AMT - RST.ETC_CMIS_AMT AS FRC_CMIS_AMT,
	            RST.ETC_CMIS_AMT,
	            RST.CUR_PAY_AMT,
	            NVL(RST.CANCEL_YN,'N') AS CANCEL_YN
	        FROM LF_DMUSER.TB_MEMBER_WDRW_RESULT RST LEFT OUTER JOIN
	            LF_DMUSER.TB_MEMBER_WDRW_REQ REQ ON REQ.ACCNT_NO = RST.ACCNT_NO AND REQ.REQ_DAY = RST.REQ_DAY AND REQ.RESULT_KEY = RST.RESULT_KEY LEFT OUTER JOIN
	            LF_DMUSER.TB_MEMBER_REQ_NAUTH_CNCL CNCL ON RST.ACCNT_NO = CNCL.ACCNT_NO AND RST.REQ_DAY = CNCL.REQ_DAY AND RST.RESULT_KEY = CNCL.CC_RESULT_KEY AND CNCL.DEL_FG ='X' INNER JOIN
	            MEM_PROD_ACCNT MPA ON RST.ACCNT_NO = MPA.ACCNT_NO AND MPA.DEL_FG = 'N' INNER JOIN
	            PRODUCT PD ON MPA.PROD_CD = PD.PROD_CD             
	        WHERE 1=1
	            AND RST.REQ_DAY BETWEEN #{sta_dttm} AND #{end_dttm}
	            AND RST.AUTH_YN = 'N'
	            AND REQ.DEL_FG = 'C'
	            <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('0')">
                	AND NVL(RST.CANCEL_YN,'N') = 'N'
            	</if>
            	<if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('2')">
                	AND NVL(RST.CANCEL_YN,'N') = 'Y'
            	</if>
            	<if test="data_appy_num != null and data_appy_num != ''">
                	AND RST.AUTH_CD = #{data_appy_num}
            	</if>
           ) MAIN_TBL	        
	        
    <!-- 
        SELECT /* DlwCmsMap.getNotAuthResultDataListTotalSummary1 */
            RST.CANCEL_YN,
            COUNT(*) AS ICNT,
            NVL(SUM(PD.MON_PAY_AMT), 0) AS TOT_MON_PAY_AMT,
            NVL(SUM(RST.BAS_CMIS_AMT), 0) AS TOT_BAS_CMIS_AMT,
            NVL(SUM(PD.MON_PAY_AMT), 0) - NVL(SUM(RST.CUR_PAY_AMT), 0) - NVL(SUM(RST.ETC_CMIS_AMT), 0) AS TOT_FRC_CMIS_AMT,
            NVL(SUM(RST.ETC_CMIS_AMT), 0) AS TOT_ETC_CMIS_AMT,
            NVL(SUM(RST.CUR_PAY_AMT), 0) AS TOT_CUR_PAY_AMT
        FROM LF_DMUSER.TB_MEMBER_WDRW_REQ REQ INNER JOIN
            LF_DMUSER.PRODUCT PD ON REQ.PROD_CD = PD.PROD_CD LEFT OUTER JOIN 
            LF_DMUSER.TB_MEMBER_WDRW_RESULT RST ON REQ.ACCNT_NO = RST.ACCNT_NO AND REQ.PAY_MTHD = RST.PAY_MTHD AND REQ.REQ_DAY = RST.REQ_DAY AND REQ.RESULT_KEY = RST.RESULT_KEY
        WHERE 1=1
        AND RST.AUTH_YN = 'N'
        AND RST.RESULT_CD = '00'
        <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
            AND RST.REQ_DAY BETWEEN #{sta_dttm} AND #{end_dttm}
        </if>
        <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('04')">
            AND TO_CHAR(TO_DATE(RST.REQ_DAY, 'YYYYMMDD') + 1, 'YYYYMMDD') BETWEEN #{sta_dttm} AND #{end_dttm}
        </if>
        <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('05')">
            AND TO_CHAR(TO_DATE(RST.REQ_DAY, 'YYYYMMDD') + 4, 'YYYYMMDD') BETWEEN #{sta_dttm} AND #{end_dttm}
        </if>
        <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('0')">
            AND RST.CANCEL_YN = 'N'
        </if>
        <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('2')">
            AND RST.CANCEL_YN = 'Y'
        </if>
        <if test="data_appy_num != null and data_appy_num != ''">
            AND RST.AUTH_CD = #{data_appy_num}
        </if>
        <if test="data_purc_crco != null and data_purc_crco != ''">
            AND RST.ICHAE_CD = #{data_purc_crco}
        </if>
        GROUP BY RST.CANCEL_YN
         -->
    </select>
    
    <select id="DlwCmsMap.getNotAuthResultDataCancelList" parameterType="map" resultType="resultMap">
        SELECT  
        	/* DlwCmsMap.getNotAuthResultDataCancelList */
        	PAGE_INDX,
	        ACCNT_NO, 
	        MEM_NM,
	        REQ_DAY,
	        FILE_MAKE_DAY,
	        '' AS PAYMENT_DAY,
	        CASE WHEN CANCEL_YN = 'Y' THEN CNCL_REQ_NO ELSE REQ_NO  END AS REQ_NO,
	        PAY_KIND,
	        RESULT_KEY,
	        RESULT_CD,
	        RESULT_MSG,
	        PAY_MTHD, 
	        AUTH_DT,
	        AUTH_CD,
	        '' AS ICHAE_CD,
	        '' AS ICHAE_NO,
	        '' AS ETC,                
	        CANCEL_DT,
	        AUTH_YN, 
	        MON_PAY_AMT,    
	        BAS_CMIS_AMT,
	        FRC_CMIS_AMT,
	        ETC_CMIS_AMT,
	        CUR_PAY_AMT,
	        CANCEL_YN    
	    FROM
	    (
	        SELECT 
	        	    ROWNUM AS PAGE_INDX,
				    CNC.ACCNT_NO,
				    LF_DMUSER.FN_MEM_NM(MPA.MEM_NO) AS MEM_NM,    
				    CNC.REQ_DAY,
				    TO_CHAR(TO_DATE(CNC.REQ_DAY, 'YYYYMMDD') + 1, 'YYYYMMDD') AS FILE_MAKE_DAY,    
				    CNC.REQ_PAY_NO AS REQ_NO,
				    RST.PAY_KIND,
				    RST.RESULT_KEY, 
				    RST.RESULT_CD,
				    RST.RESULT_MSG,
				    RST.PAY_MTHD,
				    RST.AUTH_DT,
				    RST.AUTH_CD,    
				    CNC.REQ_DAY AS CANCEL_DT,
				    RST.AUTH_YN,	
				    PI.PROD_AMT AS MON_PAY_AMT,
				    RST.BAS_CMIS_AMT,
				    PI.PROD_AMT - RST.CUR_PAY_AMT - RST.ETC_CMIS_AMT AS FRC_CMIS_AMT,
				    RST.ETC_CMIS_AMT,
				    RST.CUR_PAY_AMT,
				    NVL(RST.CANCEL_YN,'N') AS CANCEL_YN,
				    CNC.REQ_PAY_NO AS CNCL_REQ_NO        
				FROM TB_MEMBER_REQ_NAUTH_CNCL CNC INNER JOIN
				    TB_MEMBER_WDRW_RESULT RST ON CNC.CC_RESULT_KEY = RST.RESULT_KEY INNER JOIN
				    MEM_PROD_ACCNT MPA ON CNC.ACCNT_NO = MPA.ACCNT_NO AND MPA.DEL_FG = 'N' INNER JOIN
				    PRODUCT PD ON MPA.PROD_CD = PD.PROD_CD INNER JOIN
				    (
				        SELECT 
				            PROD_CD,
				            NO,
				            SUM(AMT) + SUM(REL_AMT) + SUM(ADD_AMT) AS PROD_AMT
				        FROM PRODUCT_NO_DATA
				        GROUP BY PROD_CD, NO
				    ) PI ON MPA.PROD_CD = PI.PROD_CD AND CNC.REQ_PAY_NO = PI.NO 
				WHERE 1=1
				AND CNC.DEL_FG = 'X'
				AND CNC.REQ_DAY BETWEEN #{sta_dttm} AND #{end_dttm}
	            AND RST.AUTH_YN = 'N'
	            <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('2')">
                	AND NVL(RST.CANCEL_YN,'N') = 'Y'
            	</if>
            	<if test="data_appy_num != null and data_appy_num != ''">
                	AND RST.AUTH_CD = #{data_appy_num}
            	</if>
	    ) MAIN_TBL
	    WHERE 1=1
	    	AND RESULT_CD = '00'   
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            AND PAGE_INDX <![CDATA[>=]]> #{startLine}
            AND PAGE_INDX <![CDATA[< ]]> #{endLine}
        </if> 
    </select>
    
    <select id="DlwCmsMap.getNotAuthResultDataCancelListTotalSummary1" parameterType="map" resultType="resultMap">
	    SELECT
	        COUNT(*) AS  ICNT,
	        SUM(CASE WHEN CANCEL_YN = 'Y' THEN (NVL(MON_PAY_AMT,0) * -1) ELSE NVL(MON_PAY_AMT,0) END) AS TOT_MON_PAY_AMT,
	        SUM(CASE WHEN CANCEL_YN = 'Y' THEN (NVL(BAS_CMIS_AMT,0) * -1) ELSE NVL(BAS_CMIS_AMT,0) END) AS TOT_BAS_CMIS_AMT,
	        SUM(CASE WHEN CANCEL_YN = 'Y' THEN (NVL(FRC_CMIS_AMT,0) * -1) ELSE NVL(FRC_CMIS_AMT,0) END) AS TOT_FRC_CMIS_AMT,
	        SUM(CASE WHEN CANCEL_YN = 'Y' THEN (NVL(ETC_CMIS_AMT,0) * -1) ELSE NVL(ETC_CMIS_AMT,0) END) AS TOT_ETC_CMIS_AMT,
	        SUM(CASE WHEN CANCEL_YN = 'Y' THEN (NVL(CUR_PAY_AMT,0) * -1) ELSE NVL(CUR_PAY_AMT,0) END) AS TOT_CUR_PAY_AMT
	    FROM 
	    (
	        SELECT 
				    PI.PROD_AMT AS MON_PAY_AMT,
				    RST.BAS_CMIS_AMT,
				    PI.PROD_AMT - RST.CUR_PAY_AMT - RST.ETC_CMIS_AMT AS FRC_CMIS_AMT,
				    RST.ETC_CMIS_AMT,
				    RST.CUR_PAY_AMT,
				    NVL(RST.CANCEL_YN,'N') AS CANCEL_YN,
				    CNC.REQ_PAY_NO AS CNCL_REQ_NO        
				FROM TB_MEMBER_REQ_NAUTH_CNCL CNC INNER JOIN
				    TB_MEMBER_WDRW_RESULT RST ON CNC.CC_RESULT_KEY = RST.RESULT_KEY INNER JOIN
				    MEM_PROD_ACCNT MPA ON CNC.ACCNT_NO = MPA.ACCNT_NO AND MPA.DEL_FG = 'N' INNER JOIN
				    PRODUCT PD ON MPA.PROD_CD = PD.PROD_CD INNER JOIN
				    (
				        SELECT 
				            PROD_CD,
				            NO,
				            SUM(AMT) + SUM(REL_AMT) + SUM(ADD_AMT) AS PROD_AMT
				        FROM PRODUCT_NO_DATA
				        GROUP BY PROD_CD, NO
				    ) PI ON MPA.PROD_CD = PI.PROD_CD AND CNC.REQ_PAY_NO = PI.NO 
				WHERE 1=1
				AND CNC.DEL_FG = 'X'
				AND CNC.REQ_DAY BETWEEN #{sta_dttm} AND #{end_dttm}
	            AND RST.AUTH_YN = 'N'
            	<if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('2')">
                	AND NVL(RST.CANCEL_YN,'N') = 'Y'
            	</if>
            	<if test="data_appy_num != null and data_appy_num != ''">
                	AND RST.AUTH_CD = #{data_appy_num}
            	</if>
           ) MAIN_TBL	        
	      
    </select>

    <select id="DlwCmsMap.getNotAuthResultDataListTotalSummary2" parameterType="map" resultType="resultMap">
        /* DlwCmsMap.getNotAuthResultDataListTotalSummary2 */
        WITH CALC_RSLT AS
        (
            SELECT
                *
            FROM
            (     
                SELECT
                    RST.CANCEL_YN,
                    COUNT(*) AS ICNT,
                    NVL(SUM(PD.MON_PAY_AMT), 0) AS TOT_MON_PAY_AMT,
                    NVL(SUM(RST.BAS_CMIS_AMT), 0) AS TOT_BAS_CMIS_AMT,
                    NVL(SUM(PD.MON_PAY_AMT), 0) - NVL(SUM(RST.CUR_PAY_AMT), 0) - NVL(SUM(RST.ETC_CMIS_AMT), 0) AS TOT_FRC_CMIS_AMT,
                    NVL(SUM(RST.ETC_CMIS_AMT), 0) AS TOT_ETC_CMIS_AMT,
                    NVL(SUM(RST.CUR_PAY_AMT), 0) AS TOT_CUR_PAY_AMT
                FROM LF_DMUSER.TB_MEMBER_WDRW_REQ REQ INNER JOIN
                    LF_DMUSER.PRODUCT PD ON REQ.PROD_CD = PD.PROD_CD LEFT OUTER JOIN 
                    LF_DMUSER.TB_MEMBER_WDRW_RESULT RST ON REQ.ACCNT_NO = RST.ACCNT_NO AND REQ.PAY_MTHD = RST.PAY_MTHD AND REQ.REQ_DAY = RST.REQ_DAY AND REQ.RESULT_KEY = RST.RESULT_KEY
                WHERE 1=1
                AND RST.AUTH_YN = 'N'
                AND RST.RESULT_CD = '00'
                <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                    AND RST.REQ_DAY BETWEEN #{sta_dttm} AND #{end_dttm}
                </if>
                <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('04')">
                    AND TO_CHAR(TO_DATE(RST.REQ_DAY, 'YYYYMMDD') + 1, 'YYYYMMDD') BETWEEN #{sta_dttm} AND #{end_dttm}
                </if>
                <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('05')">
                    AND TO_CHAR(TO_DATE(RST.REQ_DAY, 'YYYYMMDD') + 4, 'YYYYMMDD') BETWEEN #{sta_dttm} AND #{end_dttm}
                </if>
                <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('0')">
                    AND RST.CANCEL_YN = 'N'
                </if>
                <if test="data_trad_gb != null and data_trad_gb != '' and data_trad_gb.equalsIgnoreCase('2')">
                    AND RST.CANCEL_YN = 'Y'
                </if>
                <if test="data_appy_num != null and data_appy_num != ''">
                    AND RST.AUTH_CD = #{data_appy_num}
                </if>
                <if test="data_purc_crco != null and data_purc_crco != ''">
                    AND RST.ICHAE_CD = #{data_purc_crco}
                </if>
                GROUP BY RST.CANCEL_YN
            )
            WHERE 1=1
        )
        
        SELECT 
            NVL((SELECT ICNT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'N'), 0) + NVL((SELECT ICNT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'Y'), 0) AS ICNT,
            NVL((SELECT TOT_MON_PAY_AMT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'N'), 0) - NVL((SELECT TOT_MON_PAY_AMT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'Y'), 0) AS TOT_MON_PAY_AMT,
            NVL((SELECT TOT_BAS_CMIS_AMT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'N'), 0) - NVL((SELECT TOT_BAS_CMIS_AMT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'Y'), 0) AS TOT_BAS_CMIS_AMT,
            NVL((SELECT TOT_FRC_CMIS_AMT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'N'), 0) - NVL((SELECT TOT_FRC_CMIS_AMT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'Y'), 0) AS TOT_FRC_CMIS_AMT,
            NVL((SELECT TOT_ETC_CMIS_AMT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'N'), 0) - NVL((SELECT TOT_ETC_CMIS_AMT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'Y'), 0) AS TOT_ETC_CMIS_AMT,
            NVL((SELECT TOT_CUR_PAY_AMT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'N'), 0) - NVL((SELECT TOT_CUR_PAY_AMT FROM CALC_RSLT WHERE 1=1 AND CANCEL_YN = 'Y'), 0) AS TOT_CUR_PAY_AMT
        FROM DUAL
        WHERE 1=1
    </select>
    
    <select id="DlwCmsMap.getAcquInicisResultDataListTotalCnt" parameterType="map" resultType="int">
        SELECT  /*DlwCmsMap.getAcquInicisResultDataListTotalCnt*/
        	COUNT(*)
          FROM ( SELECT *
                   FROM LF_DMUSER.TB_ACQU_INICIS_LIST AIL INNER JOIN 
                        MEM_PROD_ACCNT MPA ON AIL.ACCNT_NO = MPA.ACCNT_NO INNER JOIN 
                        PRODUCT PD ON MPA.PROD_CD = PD.PROD_CD
                  WHERE 1=1
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')">
                    AND AIL.AUTH_DT BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                    AND AIL.ACQU_DT BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="data_purc_crco != null and data_purc_crco != ''">
                    AND TRIM(AIL.CARD_CD) = #{data_purc_crco}
                  </if>
               ) TBL
          WHERE 1=1
    </select>


    <select id="DlwCmsMap.getAcquInicisResultDataList" parameterType="map" resultType="resultMap">
    	SELECT  /*DlwCmsMap.getAcquInicisResultDataList*/
    		TBL.*
        FROM ( SELECT ROW_NUMBER() OVER(ORDER BY AIL.TID ASC) AS PAGE_INDX
				        ,AIL.AUTH_DT
				        ,AIL.AUTH_CD     
				        ,AIL.ACQU_DT
				        ,AIL.ACCNT_NO
				        ,AIL.TID
				        ,AIL.CARD_CD
				        ,LF_DMUSER.FN_COM_NM('0196', AIL.CARD_CD) AS CARD_NM
				        ,AIL.DATA_PUR_PAY
				        ,AIL.DATA_ETC_FEE
				        ,AIL.DATA_AMOT_PAID
				        ,AIL.CANCEL_DT
				        ,AIL.RAW_DATA
				        ,AIL.REG_DM
				        ,AIL.REG_MAN
                        ,PD.PROD_NM
                        ,CASE WHEN SUBSTR(AIL.TID, 11, 10) IN ('daemyunhn1', 'daemyunhn2') THEN '장기할부'
                              ELSE '' END AS LONGTERM_YN
                   FROM LF_DMUSER.TB_ACQU_INICIS_LIST AIL INNER JOIN 
                        MEM_PROD_ACCNT MPA ON AIL.ACCNT_NO = MPA.ACCNT_NO INNER JOIN 
                        PRODUCT PD ON MPA.PROD_CD = PD.PROD_CD
                  WHERE 1=1
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')">
                    AND AIL.AUTH_DT BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                    AND AIL.ACQU_DT BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="data_purc_crco != null and data_purc_crco != ''">
                    AND TRIM(AIL.CARD_CD) = #{data_purc_crco}
                  </if>
               ) TBL
          WHERE 1=1
          <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
          <![CDATA[
            AND PAGE_INDX >= #{startLine}
            AND PAGE_INDX < #{endLine}
          ]]>
          </if>
    </select>                              

    <select id="DlwCmsMap.getAcquInicisResultDataListTotalSummary1" parameterType="map" resultType="resultMap">
        SELECT COUNT(*)                 AS M_TOT_SEND_NUM
              ,SUM(TBL.DATA_PUR_PAY)    AS D_DATA_PUR_PAY_SUM
              ,SUM(TBL.DATA_ETC_FEE)    AS D_DATA_ETC_FEE_SUM
              ,SUM(TBL.DATA_AMOT_PAID)  AS D_DATA_AMOT_PAID_SUM
          FROM ( SELECT *
                   FROM LF_DMUSER.TB_ACQU_INICIS_LIST AIL
                  WHERE 1=1
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')">
                    AND AIL.AUTH_DT BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                    AND AIL.ACQU_DT BETWEEN #{sta_dttm} AND #{end_dttm}
                  </if>
                  <if test="data_purc_crco != null and data_purc_crco != ''">
                    AND TRIM(AIL.CARD_CD) = #{data_purc_crco}
                  </if>
               ) TBL
         WHERE 1=1
    </select>
    
    <update id="DlwCmsMap.updatePurchResultAccntNo" parameterType="map">         
        UPDATE /* DlwCmsMap.updatePurchResultAccntNo */
            TB_ACQU_RSLT_DTL ARD
        SET ACCNT_NO = (
                           SELECT 
                               RST.ACCNT_NO 
                           FROM TB_MEMBER_WDRW_RESULT RST INNER JOIN
                               CARD_MEM CARD ON RST.ACCNT_NO = CARD.ACCNT_NO AND CARD.DEL_FG = 'N'
                           WHERE 1=1 
                           AND RST.PAY_MTHD = '06' 
                           AND ARD.DATA_TRAD_DTTM = RST.REQ_DAY 
                           AND ARD.DATA_APPY_NUM = RST.AUTH_CD
                           AND SUBSTR(ARD.DATA_CARD_NUM, 0, 6) = SUBSTR(CARD.CARD_NO, 0, 6)
                       )
           /* ,DATA_TID = NVL( (
                           SELECT 
                               SUBSTR(RST.TID, 0, 30)
                           FROM TB_MEMBER_WDRW_RESULT RST INNER JOIN
                               CARD_MEM CARD ON RST.ACCNT_NO = CARD.ACCNT_NO AND CARD.DEL_FG = 'N'
                           WHERE 1=1 
                           AND RST.PAY_MTHD = '06' 
                           AND ARD.DATA_TRAD_DTTM = RST.REQ_DAY 
                           AND ARD.DATA_APPY_NUM = RST.AUTH_CD
                           AND SUBSTR(ARD.DATA_CARD_NUM, 0, 6) = SUBSTR(CARD.CARD_NO, 0, 6)
                       ), 'UnknownCARDTID') */
        WHERE 1=1 
        AND ARD.DEL_FG = 'N' 
        AND ARD.DATA_GB = 'P' 
        AND ARD.ACCNT_NO IS NULL
    </update>
    
    <insert id="DlwCmsMap.insertPurchResultMst" parameterType="map">
        <!--
        INSERT INTO LF_DMUSER.TB_ACQU_RSLT_MST(MST_SERIAL_NUM, STA_RECORD_GB, STA_SEND_ID, STA_RECV_DTTM, TOT_RECV_DTTM, TOT_SEND_ID, 
											   TOT_SEND_NUM, TOT_APPY_NUM, TOT_APPY_PAY, TOT_CNCL_NUM, TOT_CNCL_PAY, 
											   FILE_NAME, CALC_YN, RGSR_ID, RGSR_DTTM, DEL_FG)
             VALUES ( (SELECT NVL(MAX(MST_SERIAL_NUM) , 0) + 1 FROM LF_DMUSER.TB_ACQU_RSLT_MST WHERE 1=1),
                      'P', #{sta_make_dttm}, #{sta_send_id}, #{sta_recv_dttm}, #{sta_filler},
                      #{tot_record_gb}, #{tot_recv_dttm}, #{tot_send_id}, #{tot_send_num},  #{tot_appy_num}, #{tot_appy_pay},
                      #{tot_cncl_num},  #{tot_cncl_pay},  #{tot_filler},  #{file_name},     #{file_path},    'Y',
                      #{rgsr_id},       SYSDATE,          'N')
        -->
        /* DlwCmsMap.insertPurchResultMst */
        INSERT INTO LF_DMUSER.TB_ACQU_RSLT_MST(MST_SERIAL_NUM, STA_RECORD_GB, STA_SEND_ID, STA_RECV_DTTM, TOT_RECV_DTTM, TOT_SEND_ID, FILE_NAME, CALC_YN, RGSR_ID, RGSR_DTTM, DEL_FG)
        VALUES((SELECT NVL(MAX(MST_SERIAL_NUM) , 0) + 1 FROM LF_DMUSER.TB_ACQU_RSLT_MST WHERE 1=1), 'P', 'purch000m', TO_CHAR(SYSDATE, 'YYYYMMDD'), TO_CHAR(SYSDATE, 'YYYYMMDD'), 
               'purch000m', #{file_name}, 'Y', #{rgsr_id}, SYSDATE, 'N')
    </insert>
    
    <select id="DlwCmsMap.getLoanPurchResultDataTotalCnt" parameterType="map" resultType="int">
        SELECT /* DlwCmsMap.getLoanPurchResultDataTotalCnt */
            COUNT(*) AS ICNT
        FROM LF_DMUSER.TB_ACQU_RSLT_DTL ARD
        WHERE 1=1
        AND ARD.DATA_FRAN_ID = 'purch000m'
        
        <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')">
            AND ARD.DATA_TRAD_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
        </if>
        <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
            AND ARD.DATA_PURC_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
        </if>
        <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('03')">
            AND ARD.DATA_AMOT_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
        </if>
        <if test="data_trad_gb != null and data_trad_gb != ''">
            AND ARD.DATA_TRAD_GB = #{data_trad_gb} 
        </if>
        <if test="data_appy_num != null and data_appy_num != ''">    
            AND ARD.DATA_APPY_NUM = #{data_appy_num}
        </if>        
	     <if test="chk_conn != null and chk_conn.equalsIgnoreCase('Y')">
	            AND NVL(DATA_TID,'NOT CONNECT') = 'NOT CONNECT'
	     </if>        
                
    </select>

    <select id="DlwCmsMap.getLoanPurchResultDataList" parameterType="map" resultType="resultMap">
        SELECT /* DlwCmsMap.getLoanPurchResultDataList */
        	MAIN_TBL.*
        FROM
        (
            SELECT
                ROW_NUMBER() OVER(ORDER BY ARD.ACCNT_NO ASC) AS PAGE_INDX,
                ARD.ACCNT_NO,
                ARD.DATA_TRAD_DTTM,
                ARD.DATA_PURC_DTTM,
                ARD.DATA_APPY_NUM,
                ARD.DATA_PURC_CRCO,
                ARD.DATA_CARD_GB,
                ARD.DATA_CARD_NUM,
                ARD.DATA_PURC_PAY,
                ARD.DATA_FRAN_FEE,
                ARD.DATA_ETC_FEE,
                ARD.PURCH_CMIS_TOT,
                ARD.PURCH_CMIS_POINT,
                ARD.DATA_AMOT_DTTM,
                ARD.DATA_TRAD_GB,
                ARD.DATA_TID,
                ARD.PRE_TRAD_DTTM,
                ARD.RGSR_ID,       
                ARD.RGSR_DTTM,   
                ARD.DEL_FG
            FROM LF_DMUSER.TB_ACQU_RSLT_DTL ARD                         
            WHERE 1=1
			AND ARD.DATA_FRAN_ID = 'purch000m'
            <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')">
                AND ARD.DATA_TRAD_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
            </if>
            <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
                AND ARD.DATA_PURC_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
            </if>
            <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('03')">
                AND ARD.DATA_AMOT_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
            </if>
            <if test="data_trad_gb != null and data_trad_gb != ''">   
                AND ARD.DATA_TRAD_GB = #{data_trad_gb} 
            </if>
            <if test="data_appy_num != null and data_appy_num != ''">   
                AND ARD.DATA_APPY_NUM = #{data_appy_num}
            </if>
	        <if test="chk_conn != null and chk_conn.equalsIgnoreCase('Y')">
	            AND NVL(DATA_TID,'NOT CONNECT') = 'NOT CONNECT'
	        </if>            
        ) MAIN_TBL
        WHERE 1=1		
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
            AND PAGE_INDX <![CDATA[>=]]> #{startLine}
            AND PAGE_INDX <![CDATA[< ]]> #{endLine}
        </if>
    </select>                              

    <select id="DlwCmsMap.getLoanPurchResultDataListTotalSummary" parameterType="map" resultType="resultMap">
        SELECT /* DlwCmsMap.getLoanPurchResultDataListTotalSummary */
            COUNT(*) AS ICNT,
            SUM(ARD.DATA_PURC_PAY) AS TOT_MON_PURCH_AMT
        FROM LF_DMUSER.TB_ACQU_RSLT_DTL ARD
        WHERE 1=1
        AND ARD.DATA_FRAN_ID = 'purch000m'
        <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('01')">
            AND ARD.DATA_TRAD_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
        </if>
        <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('02')">
            AND ARD.DATA_PURC_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
        </if>
        <if test="dt_type != null and dt_type != '' and dt_type.equalsIgnoreCase('03')">
            AND ARD.DATA_AMOT_DTTM BETWEEN #{sta_dttm} AND #{end_dttm}
        </if>
        <if test="data_trad_gb != null and data_trad_gb != ''">
            AND ARD.DATA_TRAD_GB = #{data_trad_gb} 
        </if>
        <if test="data_appy_num != null and data_appy_num != ''">
            AND ARD.DATA_APPY_NUM = #{data_appy_num}
        </if>
    </select>
    
    <update id="DlwCmsMap.updateLoanPurchResultAccntNoRealTID" parameterType="map" >
        /* DlwCmsMap.updateLoanPurchResultAccntNoRealTID */
        BEGIN 
            /* 1. 승인일자 + 승인번호 + 카드번호로 회원 연결 */
            MERGE INTO TB_ACQU_RSLT_DTL AA
            USING
            (
                SELECT
                    AAA.DATA_TRAD_DTTM,
                    AAA.DATA_PURC_DTTM,
                    AAA.DATA_APPY_NUM,
                    CARD.CARD_NO,  
                    CARD.TID,
                    CARD.ACCNT_NO
                FROM TB_ACQU_RSLT_DTL AAA LEFT OUTER JOIN
                    (
                        SELECT
                            RST.ACCNT_NO,
                            RST.TID,
                            RST.REQ_DAY,
                            RST.AUTH_CD,
                            SUBSTR(CM.CARD_NO,0,6) AS CARD_NO
                        FROM TB_MEMBER_WDRW_RESULT RST INNER JOIN
                            CARD_MEM CM ON RST.ACCNT_NO = CM.ACCNT_NO AND CM.DEL_FG = 'N'
                        WHERE 1=1
                        AND NVL(RST.INI_YN,'N') = 'N'
                    ) CARD ON AAA.DATA_TRAD_DTTM = CARD.REQ_DAY AND AAA.DATA_APPY_NUM = CARD.AUTH_CD AND SUBSTR(AAA.DATA_CARD_NUM,0,6) = CARD.CARD_NO
                WHERE 1=1
                    AND AAA.DATA_TRAD_DTTM  = #{req_day}
                    AND AAA.DATA_TRAD_GB = 0
                    AND AAA.DATA_FRAN_ID = 'purch000m'
                    AND LENGTH(NVL(CARD.TID,'N')) <![CDATA[<]]> 40
            ) BB
            ON (AA.DATA_FRAN_ID = 'purch000m' AND AA.DATA_TRAD_DTTM = BB.DATA_TRAD_DTTM  AND DATA_TRAD_GB = 0 AND AA.DATA_APPY_NUM = BB.DATA_APPY_NUM AND SUBSTR(AA.DATA_CARD_NUM,0,6) = BB.CARD_NO)
            WHEN MATCHED THEN
                UPDATE SET AA.DATA_TID = BB.TID, AA.ACCNT_NO = BB.ACCNT_NO;
            
            COMMIT;
            
            /* 2. 승인일자 + 승인번호로 회원 연결 */
            MERGE INTO TB_ACQU_RSLT_DTL AA
            USING
            (
                SELECT
                    DATA_TRAD_DTTM,
                    DATA_APPY_NUM,
                    TID,
                    ACCNT_NO
                FROM
                (
                    SELECT 
                        DATA_TRAD_DTTM,
                        DATA_APPY_NUM,
                        MAX(RST.TID) AS TID,
                        MAX(RST.ACCNT_NO) AS ACCNT_NO
                    FROM TB_ACQU_RSLT_DTL AAA INNER JOIN
                        TB_MEMBER_WDRW_RESULT RST ON AAA.DATA_TRAD_DTTM = RST.REQ_DAY AND AAA.DATA_APPY_NUM = RST.AUTH_CD
                    WHERE 1=1
                        AND AAA.DATA_TRAD_DTTM  = #{req_day}
                        AND AAA.DATA_TRAD_GB = 0
                        AND AAA.DATA_FRAN_ID = 'purch000m'
                        AND NVL(DATA_TID,'NOT CONNECT') = 'NOT CONNECT'
                        AND NVL(RST.INI_YN,'N') = 'N'
                    GROUP BY DATA_TRAD_DTTM, DATA_APPY_NUM
                    HAVING COUNT(*) = 1
                )
            ) BB
            ON (AA.DATA_FRAN_ID = 'purch000m' AND AA.DATA_TRAD_DTTM = BB.DATA_TRAD_DTTM  AND DATA_TRAD_GB = 0 AND AA.DATA_TRAD_DTTM = BB.DATA_TRAD_DTTM AND AA.DATA_APPY_NUM = BB.DATA_APPY_NUM)
            WHEN MATCHED THEN
                UPDATE SET AA.DATA_TID = BB.TID, AA.ACCNT_NO = BB.ACCNT_NO;
                 
            COMMIT;
            
            /* 3. 승인 취소 승인일자 + 승인번호로 회원 연결 */
            MERGE INTO TB_ACQU_RSLT_DTL AA
			USING
			(
			    SELECT 
			        BBB.ACCNT_NO,
			        BBB.TID,
			        AAA.DATA_TRAD_DTTM,
			        BBB.CARD_NO,
			        AAA.DATA_APPY_NUM,
			        BBB.REQ_DAY
			    FROM TB_ACQU_RSLT_DTL AAA INNER JOIN
			    (
			        SELECT     
			            TO_CHAR(RFD.CANCEL_DT,'YYYYMMDD') AS CANCEL_DT,
			            SUBSTR(CARD_NO, 0,6) AS CARD_NO,
			            RST.REQ_DAY,
			            RST.AUTH_CD,
			            RST.ACCNT_NO,
			            RST.TID
			        FROM TB_MEMBER_REQ_REFUND RFD INNER JOIN 
			            TB_MEMBER_WDRW_RESULT RST ON RFD.ACCNT_NO = RST.ACCNT_NO AND RFD.REQ_DAY = RST.REQ_DAY AND RFD.RESULT_KEY = RFD.RESULT_KEY  INNER JOIN
			            CARD_MEM CM ON RST.ACCNT_NO = CM.ACCNT_NO AND CM.DEL_FG = 'N'
			        WHERE 1=1
			        AND RFD.PAY_MTHD = '06'
			
			    ) BBB ON AAA.DATA_TRAD_DTTM = BBB.CANCEL_DT AND AAA.DATA_APPY_NUM = BBB.AUTH_CD
			    WHERE 1=1        
			        AND DATA_TRAD_DTTM  = #{req_day}
			        AND DATA_FRAN_ID = 'purch000m'
			        AND DATA_TRAD_GB  = 2
			        AND NVL(DATA_TID,'NOT CONNECT') = 'NOT CONNECT'
			) BB 
			ON (AA.DATA_TRAD_DTTM = BB.DATA_TRAD_DTTM AND AA.DATA_APPY_NUM = BB.DATA_APPY_NUM AND DATA_TRAD_GB  = 2)
			WHEN MATCHED THEN UPDATE SET AA.DATA_TID = BB.TID, AA.ACCNT_NO = BB.ACCNT_NO ;
			  
			COMMIT;
        END;
    </update>
    
    <select id="DlwCmsMap.getMemberWdrwResultAuthList" parameterType="map" resultType="resultMap">
        <!--
        SELECT /* DlwCmsMap.getMemberWdrwResultAuthList */
            ACCNT_NO,
            TID,
            REQ_DAY,
            AUTH_CD,
            '0' AS DATA_TRAD_GB
        FROM TB_MEMBER_WDRW_RESULT
        WHERE 1=1
        AND REQ_DAY = #{req_day}
        AND NVL(INI_YN,'N') = 'N'
        AND AUTH_CD = #{auth_cd}
        -->
        
        SELECT /* DlwCmsMap.getMemberWdrwResultAuthList */
            RST.ACCNT_NO,
            RST.TID,
            RST.REQ_DAY,
            RST.AUTH_CD,
            CM.CARD_NO AS CARD_NO,
            '0' AS DATA_TRAD_GB
        FROM TB_MEMBER_WDRW_RESULT RST INNER JOIN
            CARD_MEM CM ON RST.ACCNT_NO = CM.ACCNT_NO
        WHERE 1=1
        AND RST.REQ_DAY = #{req_day}
        AND NVL(RST.INI_YN,'N') = 'N'
        AND RST.AUTH_CD = #{auth_cd}
        AND SUBSTR(CM.CARD_NO, 0 ,6) = SUBSTR(#{card_no}, 0 ,6)
    </select>
    
    <select id="DlwCmsMap.getMemberWdrwResultCancelList" parameterType="map" resultType="resultMap">
        SELECT /* DlwCmsMap.getMemberWdrwResultCancelList */
            MRF.ACCNT_NO,
            RST.REQ_DAY, 
            (REQ.PAY_AMT * -1) AS PAY_AMT,
            TO_CHAR(MRF.CANCEL_DT,'YYYYMMDD') AS CANCEL_DT,
            RST.AUTH_CD, 
            RST.TID,
            (SELECT SUBSTR(CARD_NO,0,6) || '-****-'|| SUBSTR(CARD_NO,-3) FROM CARD_MEM WHERE ACCNT_NO = MRF.ACCNT_NO AND DEL_FG = 'N') AS CARD_NO,
            '2' AS DATA_TRAD_GB
        FROM TB_MEMBER_REQ_REFUND MRF INNER JOIN
            TB_MEMBER_WDRW_REQ REQ ON MRF.ACCNT_NO = REQ.ACCNT_NO AND MRF.REQ_DAY = REQ.REQ_DAY AND MRF.RESULT_KEY = REQ.RESULT_KEY INNER JOIN     
            TB_MEMBER_WDRW_RESULT RST ON REQ.ACCNT_NO = RST.ACCNT_NO AND REQ.REQ_DAY = RST.REQ_DAY AND REQ.RESULT_KEY = RST.RESULT_KEY     
        WHERE 1=1
        AND RST.REQ_DAY = #{cancel_dt}  
        AND RST.ICHAE_CD = '02'
        AND REQ.PAY_AMT = ABS(#{pay_amt})
        AND MRF.DEL_FG = 'N'
        AND MRF.PAY_MTHD = '06'
        AND NVL(MRF.AUTH_YN,'Y') = 'Y'
        AND EXISTS (SELECT ACCNT_NO FROM TB_ACQU_RSLT_DTL WHERE DATA_FRAN_ID = 'purch000m' AND DATA_TID = 'NOT CONNECT' AND DATA_TRAD_DTTM = TO_CHAR(MRF.CANCEL_DT,'YYYYMMDD'))
    </select>
    
    <update id="DlwCmsMap.updateLoanPurchMemberWdrwResultAuth" parameterType="map" >
        /* DlwCmsMap.updateLoanPurchMemberWdrwResultAuth */
        UPDATE LF_DMUSER.TB_ACQU_RSLT_DTL
        SET ACCNT_NO = #{accnt_no},
        	DATA_TID = #{tid}
        WHERE 1=1
        AND DATA_FRAN_ID = 'purch000m'
        AND DATA_TID = 'NOT CONNECT'
        AND DATA_TRAD_GB = #{data_trad_gb}
        AND DATA_TRAD_DTTM = #{req_day}
        AND DATA_APPY_NUM = #{auth_cd}
        AND SUBSTR(DATA_CARD_NUM, 0, 6) = SUBSTR(#{card_no}, 0, 6)
    </update>
    
    <update id="DlwCmsMap.updateLoanPurchMemberWdrwResultCancel" parameterType="map" >
        /* DlwCmsMap.updateLoanPurchMemberWdrwResultCancel */
        UPDATE LF_DMUSER.TB_ACQU_RSLT_DTL
        SET ACCNT_NO = #{accnt_no},
        	DATA_TID = #{tid}
        WHERE 1=1
        AND DATA_FRAN_ID = 'purch000m'
        AND DATA_TID = 'NOT CONNECT'
        AND DATA_TRAD_GB = #{data_trad_gb}
        AND DATA_TRAD_DTTM = #{cancel_dt}
        AND DATA_APPY_NUM = #{auth_cd}
        AND PRE_TRAD_DTTM = #{req_day}
        AND DATA_PURC_PAY = #{pay_amt}
        AND SUBSTR(DATA_CARD_NUM, 0, 6) = SUBSTR(#{card_no}, 0, 6)
    </update>
    
    <select id="DlwCmsMap.getDlwCmsEb11List" parameterType="map" resultType="resultMap">
	        SELECT 
	        	* 
	        FROM LF_DMUSER.TB_CMS_EB11_LIST
	        WHERE 1=1
	            <if test="ext_dt != null and ext_dt != ''">
                	AND EXT_DT = #{ext_dt}
            	</if>
    </select>
    
    <insert id="DlwCmsMap.insertDlwCmsDataInsert" parameterType="map">
		INSERT INTO LF_DMUSER.TB_CMS_EB11_LIST (
			EXT_DT,
			APP_CL,
			ACCNT_NO,
			BANK_CD,
			BANK_ACCNT_NO,
			IDN_NO,
			AREA_CD,
			DEL_FG,
			REG_DM,
			REG_MAN
		)
		VALUES(		
		    #{ext_dt},
		    #{app_cl}, 
		    TRIM(#{accnt_no}),
		    TRIM(#{bank_cd}),
		    TRIM(#{bank_accnt_no}),
		    TRIM(#{idn_no}),
		    #{area_cd}, 
		    'N',
		    SYSDATE,
		    #{upd_man}    
		)
    </insert>
    
    <insert id="DlwCmsMap.insertDlwCmsHistoryInsert" parameterType="map">
    	BEGIN
			 <!--[001] EB11 CMS이력등록 (해지) -->
			
			INSERT INTO NEW_CANCL_APP
			( 
			    SEQ,
			    ACCNT_NO,
			    BANK_ACCNT_NO,
			    APP_DT,
			    PAYR_NO,
			    BANK_CD,
			    DEPR,
			    INV_TG_DT,
			    APP_CL,
			    ACPT_MTHD,
			    RELTN,
			    STAT,
			    REG_DM,
			    REG_MAN,
			    UPD_DM,
			    UPD_MAN,
			    BIRTH,
			    DEPR_CELL
			)
			SELECT 
			    (SELECT MAX(SEQ) FROM NEW_CANCL_APP) + ROWNUM AS SEQ,
			    EB.ACCNT_NO,
			    EB.BANK_ACCNT_NO,
			    EB.EXT_DT AS APP_DT,
			    MPA.MEM_NO AS PAYR_NO,
			    EB.BANK_CD,
			    CM.DEPR,
			    CM.ICHAE_DT AS INV_TG_DT,
			    EB.APP_CL,
			    CM.ACPT_MTHD,
			    CM.RELTN,
			    '04' AS STAT,
			    SYSDATE AS REG_DM,
			    'EB11_AUTO' AS REG_MAN,
			    SYSDATE AS UPD_DM,
			    '' AS UPD_MAN,
			    EB.IDN_NO AS BIRTH,
			    '' AS DEPR_CELL    
			FROM TB_CMS_EB11_LIST EB INNER JOIN
			    MEM_PROD_ACCNT MPA ON EB.ACCNT_NO = MPA.ACCNT_NO AND MPA.DEL_FG = 'N' LEFT OUTER JOIN
			    CMS_MEM CM ON EB.ACCNT_NO = CM.ACCNT_NO AND CM.DEL_FG = 'N'
			WHERE EXT_DT = #{ext_dt}
			AND MPA.PAY_MTHD = '04'
			AND EB.APP_CL IN (3,7);
			
			<!-- [002] EB11 CMS이력등록 (신규) --> 
			INSERT INTO NEW_CANCL_APP
			( 
			    SEQ,
			    ACCNT_NO,
			    BANK_ACCNT_NO,
			    APP_DT,
			    PAYR_NO,
			    BANK_CD,
			    DEPR,
			    INV_TG_DT,
			    APP_CL,
			    ACPT_MTHD,
			    RELTN,
			    STAT,
			    REG_DM,
			    REG_MAN,
			    UPD_DM,
			    UPD_MAN,
			    BIRTH,
			    DEPR_CELL
			)
			SELECT 
			    (SELECT MAX(SEQ) FROM NEW_CANCL_APP) + ROWNUM AS SEQ,
			    EB.ACCNT_NO,
			    EB.BANK_ACCNT_NO,
			    EB.EXT_DT AS APP_DT,
			    MPA.MEM_NO AS PAYR_NO,
			    EB.BANK_CD,
			    CM.DEPR,
			    CM.ICHAE_DT AS INV_TG_DT,
			    EB.APP_CL,
			    CM.ACPT_MTHD,
			    CM.RELTN,
			    '04' AS STAT,
			    SYSDATE AS REG_DM, 
			    'EB11_AUTO' AS REG_MAN,
			    SYSDATE AS UPD_DM,
			    '' AS UPD_MAN,
			    EB.IDN_NO AS BIRTH,
			    '' AS DEPR_CELL    
			FROM TB_CMS_EB11_LIST EB INNER JOIN
			    MEM_PROD_ACCNT MPA ON EB.ACCNT_NO = MPA.ACCNT_NO AND MPA.DEL_FG = 'N' LEFT OUTER JOIN
			    CMS_MEM CM ON EB.ACCNT_NO = CM.ACCNT_NO AND CM.DEL_FG = 'N'
			WHERE EXT_DT = #{ext_dt}
			AND MPA.PAY_MTHD = '04'
			AND EB.APP_CL = 1;
		
			COMMIT;
		
		END;
    </insert>    
    
        <!--EB11 CMS결제정보변경-->
    <update id="DlwCmsMap.updateDlwCmsInfo" parameterType="map">  
    	BEGIN      
			<!-- [003] EB11 CMS등록정보삭제 --> 
			DELETE FROM CMS_MEM_DAMO
			WHERE ACCNT_NO IN 
			(
			    SELECT 
			        EB.ACCNT_NO 
			    FROM TB_CMS_EB11_LIST EB INNER JOIN
			        MEM_PROD_ACCNT MPA ON EB.ACCNT_NO = MPA.ACCNT_NO AND MPA.DEL_FG = 'N' 
			    WHERE EXT_DT = #{ext_dt}
			    AND MPA.PAY_MTHD = '04'
			    AND EB.APP_CL IN (3,7)
			)
			AND ACCNT_NO NOT IN 
			(
			    SELECT 
			        ACCNT_NO    
			    FROM TB_CMS_EB11_LIST
			    WHERE EXT_DT = #{ext_dt}
			    GROUP BY ACCNT_NO
			    HAVING COUNT(*) > 1
			);						
									
			<!-- [004] EB11 CMS등록정보수정 --> 
			MERGE INTO CMS_MEM_DAMO CM
			USING(
			    SELECT 
			        EXT_DT,
			        ACCNT_NO,
			        BANK_CD,
			        BANK_ACCNT_NO,
			        IDN_NO
			    FROM TB_CMS_EB11_LIST
			    WHERE 1=1
			    AND APP_CL = 1
			    AND ACCNT_NO IN 
			    (
			        SELECT 
			            ACCNT_NO    
			        FROM TB_CMS_EB11_LIST
			        WHERE EXT_DT =  #{ext_dt}
			        GROUP BY ACCNT_NO
			        HAVING COUNT(*) > 1
			    )
			) TBL  
			ON (CM.ACCNT_NO = TBL.ACCNT_NO AND CM.DEL_FG = 'N')
			WHEN MATCHED THEN 
			UPDATE SET  
			    CM.BANK_CD = TBL.BANK_CD, 
			    CM.SEC_BANK_ACCNT_NO = DAMO.ENC_VARCHAR_B64('LF_DMUSER','CMS_MEM','BANK_ACCNT_NO',TBL.BANK_ACCNT_NO),
			    CM.SEC_IDN_NO = DAMO.ENC_VARCHAR_B64('LF_DMUSER','CMS_MEM','IDN_NO',TBL.IDN_NO),
			    CM.UPD_MAN = 'EB11_AUTO',
			    CM.UPD_DM = SYSDATE ;			    			 
			    
			<!-- [004] EB11 개인정보 비식별 처리 --> 
			
			UPDATE TB_CMS_EB11_LIST
			SET BANK_ACCNT_NO = '****-****-' || SUBSTR(TRIM(BANK_ACCNT_NO),-4),
				IDN_NO	= '***' || SUBSTR(TRIM(IDN_NO),-3)
			WHERE EXT_DT = #{ext_dt};
			
			COMMIT;
			
		END;
    </update>
</mapper>
