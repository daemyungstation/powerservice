<?xml version="1.0" encoding="utf-8"?>
<Script type="xscript4.0"><![CDATA[

// ========================================================================================
// Grid 관련 공통함수
// function 명은 gfn_ 을 Prefix로 사용함.
// ========================================================================================

var CONST_ASC_MARK = "▲";
var CONST_DESC_MARK = "▼";


/*****************************************************************************************
 * 함  수  명 : _gfn_gridPagingSearch
 * 입      력 : objDsCondition - 조회조건 데이타셋
                 objDs    - 검색결과 데이타셋
                 ds_inqCndt
 * 반      환 : none
 * 기      능 : 정렬된 결과 재조회
  *****************************************************************************************/
function _gfn_gridPagingSearch(ds_inqCndt, bindDs, ds_otherList) 
{
    if(ds_otherList == null) ds_otherList = ds_list_tmp;
   
	var szSvcid       = "orderByList";
	var szController  = ds_inqCndt.getColumn(0, "sController");
	var szInDs        = "ds_input="+ds_inqCndt.name;
	var szOutDs       = ds_otherList.name+"=" + ds_inqCndt.getColumn(0, "dsName");
	var szParam       = "";
	var szRetCallback = "";

	// 트랜젝션 공통함수 호출
	gfn_transaction(this, szSvcid, szController, szInDs, szOutDs, szParam, szRetCallback, false);

	if (ds_otherList.name != bindDs.name) {
		bindDs.assign(ds_otherList);
		bindDs.addColumn(gfn_getColNmChk(), "string");
		bindDs.addColumn("rowCheck", "string");
		ds_otherList.clearData();
	}
}

function _gfnGridInit(objGrid:Grid) {

	if (objGrid.addevent != "true") {
		objGrid.oncolresized.addHandler(gfn_grdColresized);
		
		if (objGrid.useGridPopup == "Y") {
			// Grid Sort 처리
			objGrid.onheadclick.addHandler(gfn_grdHeadClick);
			
			
		}
	}
}

/*****************************************************************************************
 * 함  수  명 : gfn_grdHeadClick
 * 입      력 : obj : Grid Object
                e   : GridClickEventInfo
                objDsCondition : 페이징 검색조건 데이타셋
 * 반      환 : none
 * 기      능 : 시스템공통 - Grid Head 클릭시 전체선택/정렬 중 선택처리 함수
 *****************************************************************************************/
//function gfn_grdHeadClick(obj:Grid, e:GridClickEventInfo, objDsCondition, sortColNm)
function gfn_grdHeadClick(obj:Grid, e:GridClickEventInfo, objDsSch, sortColNm, objOtherDs, objOtherDs1)
{
	var objDsCondition = obj.userDsCondition;		//페이징 검색조건 데이타셋
	if (gfn_isNull(objDsCondition))
		objDsCondition = objDsSch;

    var sTitleText = obj.getCellProperty("head", e.cell, "text");
    var sTitleType = obj.getCellProperty("head", e.cell, "displaytype");
	var strHeadId = obj.getCellProperty("Head", e.cell, "id");

    if(gfn_getLength(sTitleText) <= 0 || sTitleText == 0 || sTitleText == 1 || sTitleText == "NO" || strHeadId == "notSort") {
        if(sTitleType == "checkbox")
            gfn_setGridCheckAll(obj, e);
        else
            return;
    } else {
        gfn_gridSort(obj, e, objDsCondition, sortColNm, objOtherDs , objOtherDs1);
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_grdColresized
 * 입      력 : obj : Grid Object
                 e   : GridSizeChangedEventInfo
 * 반      환 : none
 * 기      능 : 시스템공통 - Grid Head 칼럼사이즈 변경시 최소사이즈 설정
                칼럼사이즈를 최소사이즈로 변경한 후에는 공통기능버튼(칼럼 보이기/숨기기)으로 다시 보이기 처리
							
 *****************************************************************************************/
function gfn_grdColresized(obj:Grid, e:GridSizeChangedEventInfo) {

	if(e.newvalue == 0) {
		obj.setRealColSize(e.formatindex, 10);
	}
}

/*******************************************************************************
 ★ Function명 : gfn_gridSort()
 ★ 설명
    Grid의 Sort를 처리한다.
 ★ Parameter 
    1. object Grid / GridClickEventInfo e
 ★ Return 
    - None ▲△ ▼▽ ↑↓
******************************************************************************/
function gfn_gridSort(obj:Grid, e:GridClickEventInfo, objDsSch, sortColNm, objOtherDs , objOtherDs1)
{ 
	// Grid Bind Dataset 추출
	var dsObj = eval(obj.binddataset);
	if (dsObj.rowcount == 0) return false;
	
    var nCell  = e.cell;
	
	var strHeadText;				// Head Text + SortMark
	var sortCol;   					// 선택된 Head의 Column Index
	var sortSpan;    				// 선택된 Head의 ColSpan 정보
	var splitCol;					// Grid body Column의 text의 colid 추출 : ex)bind:Col1 - split처리(":")
	var sortColumns = "";  			// Grid Sort 대상 Column
	var rowDepth;
	var resetCol = "";
	
	var headCnt = obj.getCellCount("head");    // Grid Head Cell Count
	var bodyCnt = obj.getCellCount("body");    // Grid Body Cell Count

	var sortRow = obj.getCellProperty("head",nCell,"row");
	
    if(obj.getCellProperty("head",nCell,"displaytype")=="checkbox") return;
    
	for (var iHead=0; iHead<headCnt; iHead++) {
		rowDepth = obj.getCellProperty("head", iHead, "row");
		if ( (nCell == iHead) && (sortRow == rowDepth) ) break;
	}
	
	sortCol = obj.getCellProperty("head", iHead, "col");
	
	var bodyRow = gfn_grdBodyDepth(obj);
	
	for (var iBody=0; iBody<bodyCnt; iBody++) {
		if (bodyRow > 0) {
			if ( (sortCol == obj.getCellProperty("body", iBody, "col")) &&
				 (sortRow == obj.getCellProperty("body", iBody, "row")) ) break;
		} else {
			if (sortCol == obj.getCellProperty("body", iBody, "col")) break;
		}
	}
	
	// 페이징 처리에 의한 조회조건을 데이타셋을 처리.
	var strHeadId = obj.getCellProperty("Head", nCell, "id");

			
	// Grid Head의 해당 Column이 Asc(▲) 인 경우
	//if (obj.getCellProperty("head", nCell, "text") != undefined)
	
	if (obj.getCellProperty("head", nCell, "text").indexOf(CONST_ASC_MARK) > -1) {
		if(objDsSch!=null){
			objDsSch.addColumn("tranId" ,"string");	
			if(objOtherDs1 != null) objDsSch.setColumn(0, "tranId", objOtherDs1.name);
			objDsSch.setColumn(0, "orderBy", strHeadId);
			objDsSch.setColumn(0, "orderDirection", "desc");
			_gfn_gridPagingSearch(objDsSch, dsObj, objOtherDs);
		}
		if (obj.getCellProperty("head", nCell, "colspan") > 1) {		
			sortSpan = obj.getCellProperty("head", iHead, "colspan");

			for (var ii=0; ii<bodyCnt; ii++) {
				if ( (obj.getCellProperty("body", ii, "col") >= sortCol) && 
					obj.getCellProperty("body", ii, "col") < (Math.abs(sortCol) + Math.abs(sortSpan) ) ) {
					
					if (obj.getCellProperty("body", ii, "text").length > 0) {
						splitCol = obj.getCellProperty("body", ii, "text").split(":");
						sortColumns += "-" + splitCol[1];
					}
				}
			}
		} else {
			splitCol = obj.getCellProperty("body", iBody, "text").split(":");
			sortColumns += "-" + splitCol[1];
		}
		
		strHeadText = obj.getCellProperty("head",nCell,"text");
		strHeadText = strHeadText.replace(CONST_ASC_MARK, CONST_DESC_MARK);
	
	// Grid Head의 해당 Column이 Desc(▼) 인 경우
	} else if (obj.getCellProperty("head", nCell, "text").indexOf(CONST_DESC_MARK) > -1) {
		if(objDsSch!=null){
			objDsSch.addColumn("tranId" ,"string");	
			if(objOtherDs1 != null) objDsSch.setColumn(0, "tranId", objOtherDs1.name);
			objDsSch.setColumn(0, "orderBy", strHeadId);
			objDsSch.setColumn(0, "orderDirection", "asc");
			_gfn_gridPagingSearch(objDsSch, dsObj, objOtherDs);
		}
		
		var sortIdx = 0;
		// Sort Mark 제거 시 해당 Grid의 Column Index에 대해서 Sort 처리(Max 3 Column)
		if (resetCol == null || resetCol == "") {
			for (var ii=0; ii<bodyCnt; ii++) {
				gfn_clearSortMark(obj, ii);
				/*
				if (obj.getCellProperty("body", ii, "text").length > 1) {
					splitCol = obj.getCellProperty("body", ii, "text").split(":");
					sortColumns += "+" + splitCol[1];
					sortIdx++;
				}
				*/
				if (sortIdx == 3) break;
			}
		
		// Reset Column이 정의된 경우(Default Sort 컬럼. 미사용)
		} else {
			sortColumns = gfn_defaultSortCols(resetCol);	// Sort Column이 정의된 경우(매개변수)
		}
		
		strHeadText = obj.getCellProperty("head", nCell, "text");
		strHeadText = strHeadText.replace(CONST_DESC_MARK, "");
		
	// 초기값인 경우(Sort 미 적용) 시
	} else {
		if(objDsSch!=null){
			objDsSch.addColumn("tranId" ,"string");	
			if(objOtherDs1 != null) objDsSch.setColumn(0, "tranId", objOtherDs1.name);
			objDsSch.setColumn(0, "orderBy", strHeadId);
			objDsSch.setColumn(0, "orderDirection", "");
			_gfn_gridPagingSearch(objDsSch, dsObj, objOtherDs);
		}
		if (obj.getCellProperty("head",nCell,"colspan") > 1) {
			sortSpan = obj.getCellProperty("head", iHead, "colspan");
			
			for (var ii=0; ii<bodyCnt; ii++) {
				if ( (obj.getCellProperty("body", ii, "col") >= sortCol) && 
					obj.getCellProperty("body", ii, "col") < (Math.abs(sortCol) + Math.abs(sortSpan) ) ){

					if (obj.getCellProperty("body", ii, "text").length > 0) {
						splitCol = obj.getCellProperty("body", ii, "text").split(":");
						sortColumns += "+" + splitCol[1];
					}                    
				}
			}
			
		} else {    
			splitCol = obj.getCellProperty("body", iBody, "text").split(":");
			sortColumns += "+" + splitCol[1];
		}
		
		strHeadText = obj.getCellProperty("head", nCell, "text");
		strHeadText = strHeadText + CONST_ASC_MARK;		
	}
	
	// 해당 Column에 대한 Sort 처리
	if (sortColumns == "reset") dsObj.reset();
	else dsObj.keystring = "S:" + sortColumns;
	
	// Grid의 Row Position 설정(Sort 처리 시 Row Position 변경)
	dsObj.rowposition = 0;
	
	// 선택 Head의 Text 변경 (Sort Mark 적용)
	obj.setCellProperty("head", nCell, "text", strHeadText);
	
	// Selected Column을 제외한 Sort Mark 제거
	gfn_clearSortMark(obj, nCell);
	
	if (objDsSch != null && !gfn_isNull(objDsSch.getColumnInfo("szCallback"))) {
		this[objDsSch.getColumn(objDsSch.rowposition, "szCallback")]();
	}
}

/*****************************************************************************************
 * 함  수  명 : gfn_gridSort
 * 입      력 : object Grid
 *              GridClickEventInfo e
 * 반      환 : none
 * 기      능 : Grid의 Head 클릭시 Sort 처리 함수
  *****************************************************************************************/
// function gfn_gridSort(obj:Grid, e:GridClickEventInfo, ds_inqCndt, sortColNm)
// {
//     // 컬럼의 정렬방식을 'head'의 text에 "↑,↓"여부로 판단.
//     // 이미지로 대체 가능.
//     var bindDs = eval(obj.binddataset);
//     if (bindDs.rowcount == 0) return false;
// 
//     var CONST_SORT_MARK = "";
//     var BodyColId = (obj.getCellProperty("body", e.col,"text")).toString().split(":");    // e.col : 바인드된 컬럼.
// 
//     if (BodyColId[0] != "bind") {
//         return false;
//     }
// 
//     if(sortColNm != null) BodyColId[1] = sortColNm;
// 
//     for (var i = 0; i < obj.getCellCount("head"); i++) {
//         if(obj.getCellText(-1, i)=="undefined")
//             continue;
// 
// 		var strHeadId = obj.getCellProperty("Head", i, "id");
// 		var strHeadText = obj.getCellText(-1, i);
// 
//         if(i==e.cell){
//             if (strHeadText.substr(strHeadText.length-1) == CONST_ASC_MARK) {
// 				ds_inqCndt.setColumn(0, "orderBy", strHeadId);
// 				ds_inqCndt.setColumn(0, "orderDirection", "desc");
// 				_gfn_gridPagingSearch(ds_inqCndt, bindDs);
// 				
//                 obj.setCellProperty( "head", i, "text", strHeadText.substr(0, strHeadText.length - 2)+" "+CONST_DESC_MARK);
//                 bindDs.keystring = "S:-"+BodyColId[1];
//                 bindDs.rowposition = 0;
//             } else if (strHeadText.substr(strHeadText.length-1) == CONST_DESC_MARK) {
// 				ds_inqCndt.setColumn(0, "orderBy", strHeadId);
// 				ds_inqCndt.setColumn(0, "orderDirection", "asc");
// 				_gfn_gridPagingSearch(ds_inqCndt, bindDs);
// 				
//                 obj.setCellProperty( "head", i, "text", strHeadText.substr(0, strHeadText.length - 2)+" "+CONST_ASC_MARK);
//                 bindDs.keystring = "S:+"+BodyColId[1];
//                 bindDs.rowposition = 0;
//             } else {
// 				ds_inqCndt.setColumn(0, "orderBy", strHeadId);
// 				ds_inqCndt.setColumn(0, "orderDirection", "asc");
// 				_gfn_gridPagingSearch(ds_inqCndt, bindDs);
// 				
// 				obj.setCellProperty( "head", i, "text", strHeadText+" "+CONST_ASC_MARK);
// 				bindDs.keystring = "S:+"+BodyColId[1];
// 				bindDs.rowposition = 0;
// 			}
//         } else {
//             if (strHeadText.substr(strHeadText.length-1) == CONST_ASC_MARK || strHeadText.substr(strHeadText.length-1) == CONST_DESC_MARK) {
//                 obj.setCellProperty( "head", i, "text", strHeadText.substr(0, strHeadText.length - 2));
//             }
//         }
//     }
// }


/*****************************************************************************************
 * 함  수  명 : gfn_clearSortMark
 * 입      력 : object Grid
 * 반      환 : none
 * 기      능 : Grid Head의 Sort Mark를 Clear처리하는 함수
 *****************************************************************************************/
// function gfn_clearSortMark(obj:Grid)
// {
//     var bindDs = eval(obj.binddataset);
//     for (var i = 0; i < obj.getCellCount("head"); i++) {
//         if(obj.getCellText(-1, i)=="undefined") {
//             continue;
//         } else if(obj.getCellText(-1, i) == "1") {
//             obj.setCellProperty( "head", i, "text", 0);   // 체크박스 예외처리
//             continue;
//         }
// 
//         var strHeadText = obj.getCellText(-1, i);
// 
//         if (strHeadText.substr(strHeadText.length-1) == CONST_ASC_MARK || strHeadText.substr(strHeadText.length-1) == CONST_DESC_MARK) {
//             obj.setCellProperty( "head", i, "text", strHeadText.substr(0, strHeadText.length - 2));
//         }
//     }
// }

/***********************************************************************
* 인      수 : grdObj	- Sorting 처리 Grid Object
*     			nCell	- Sort 적용 Column
* 반      환 : N/A
* 기      능 : Seleted Column을 제외한 Sort Mark 제거 Clear처리
* 예      시 : gfn_clearSortMark(grdObj, nCell)
***********************************************************************/
function gfn_clearSortMark(grdObj, nCell) {

	var nColCnt = grdObj.getCellCount("head");
	var sRepText;    
		
	for(var ii=0; ii<nColCnt; ii++) {
		if (nCell != null && nCell == ii) continue;	// 선택한 Cell을 제외하고 처리
	
		if(gfn_isNull(grdObj.getCellProperty("head",ii,"text"))==false)
		{
			sRepText = grdObj.getCellProperty("head",ii,"text");
			sRepText = sRepText.replace(CONST_ASC_MARK, "");
			sRepText = sRepText.replace(CONST_DESC_MARK, "");
			grdObj.setCellProperty("head",ii,"text", sRepText);
		}
	}
}

/*****************************************************************************************
 * 함  수  명 : gfn_clearTextSortMark
 * 입      력 : strHeadText String
 * 반      환 : none
 * 기      능 : 입력받은 텍스트의 Sort Mark를 Clear처리하는 함수
 *****************************************************************************************/
function gfn_clearTextSortMark(strHeadText)
{
    if (strHeadText.substr(strHeadText.length-1) == CONST_ASC_MARK || strHeadText.substr(strHeadText.length-1) == CONST_DESC_MARK) {
        strHeadText = strHeadText.substr(0, strHeadText.length - 2);
    }

    return strHeadText;
}

/***********************************************************************
* 기  능 : Grid Head(band)의 Row Depth 계산
* 인  수 : GridObject	- Sorting 처리 Grid Object
* Return : Head(band) Row Depth(Number)
* 예  시 : _utlf_grdBodyDepth(grdObj)
***********************************************************************/
function gfn_grdBodyDepth(grdObj) {
	var rtnVal = 0;
	var rowDepth = 0;
    
	var bodyCnt = grdObj.getCellCount("body");    // Grid Body Cell Count
	
	for (var i=0; i<bodyCnt; i++) {
		rowDepth = grdObj.getCellProperty("body",i,"row");
		if (rowDepth > rtnVal) rtnVal = rowDepth;
	}
	
	return rtnVal;
}


function gfn_resetColsize(obj:Grid) {

	var sizeType = obj.cellsizingtype;
	var autoType = obj.autofittype;

	if (sizeType =='none')	return;
	if (autoType =!'none')	
		obj.autofittype = 'none';

	for (var nCol=0;nCol<obj.getCellCount("head");nCol++)
	{
		var nColSpan 	= obj.getCellProperty("head", nCol, "colspan");
		
		var sTitleText	= obj.getCellProperty("head", nCol, "text");
		var nCol 		= obj.getCellProperty("head", nCol, "col");
		var sColType	= obj.getCellProperty("head", nCol, "displaytype");

		var nSize 		= obj.getFormatColSize(nCol) <= 0 ? 80 : obj.getFormatColSize(nCol);
		
		if(nColSpan == 1) {
			if(gfn_getLength(sTitleText) <= 0 || sTitleText == 0 || sTitleText == 1) {
				if(nSize > 0) {
					if(sColType == "checkbox")
						nSize = 35;					// 공통체크박스 예외처리
				}	
			}

			obj.setRealColSize(nCol, nSize, false);	
		} else {
			for(var j=nCol;j<(nCol+nColSpan);j++)
			{
				if(sColType == "checkbox")
					nSize = 35;					// 공통체크박스 예외처리

				obj.setRealColSize(j, nSize, false);	
			}
		}		
	}
	obj.autofittype = autoType;

}



/*****************************************************************************************
 * 함  수  명 : gfn_gridColSelect
 * 입      력 : objGrid : Grid Object
 * 반      환 : none
 * 기      능 : 시스템공통 - Grid 칼럼 보이기/숨기기처리 공통팝업 호출 함수
 *****************************************************************************************/
function gfn_gridColSelect(objGrid)
{
    objGrid.enableevent = false;
    var strParam = {pv_objGrid:objGrid};
    var reVal = gfn_diaLog("Comm_GrdColSelect", -1, -1, 274, 346, "COMM::Comm_GrdColSelect.xfdl", false, strParam, false, true, true);
    objGrid.enableevent = true;
}

/*****************************************************************************************
 * 함  수  명 : gfn_gridMultiSort
 * 입      력 : objGrid : Grid Object
 * 반      환 : none
 * 기      능 : 시스템공통 - Grid 다중정렬처리 공통팝업 호출 함수
 *****************************************************************************************/
function gfn_gridMultiSort(objGrid)
{
    var strParam = {pv_objGrid:objGrid};
    var reVal = gfn_diaLog("Comm_GrdColSort", -1, -1, 274, 346, "COMM::Comm_GrdColSort.xfdl", false, strParam, false, true, true);

    if(reVal instanceof Object) {

        // Grid Head Text 초기화
        gfn_clearSortMark(objGrid);

        // Keystirng 처리
        var objDs = this[objGrid.binddataset];
        objDs.keystring.current = reVal["KeyString"];

        // Grid Head Text 처리
        var arrSortList = String(reVal["SortString"]).split(",");
        for(var i=0;i<arrSortList.length;i++)
        {
            var arrSort = String(arrSortList[i]).split(":");
            if (arrSort[0] == "+") {
                objGrid.setCellProperty( "head", arrSort[1], "text", objGrid.getCellProperty("head", arrSort[1], "text")+" "+CONST_ASC_MARK);
            } else if (arrSort[0] == "-") {
                objGrid.setCellProperty( "head", arrSort[1], "text", objGrid.getCellProperty("head", arrSort[1], "text")+" "+CONST_DESC_MARK);
            }
        }
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_setGridCheckAll
 * 입      력 : obj : Grid Object
 *              e   : GridClickEventInfo
 * 반      환 : none
 * 기      능 : Grid Head 클릭시 해당칼럼 체크박스 전체체크/체크해제 처리 함수
 *              그리드 헤드 예) <Cell displaytype="checkbox" edittype="checkbox" text="expr:0"/> 로 해야함.
 *              스크립트 예)  gfn_setGridCheckAll(obj,e);
 *****************************************************************************************/
function gfn_setGridCheckAll(obj:Grid, e:GridClickEventInfo)
{
    var strType;
    var vl_chk;
    var strVal;
    var strChkVal;
    var objDS;
    var nCell = e.cell;
    var nSubCnt = obj.getSubCellCount("head",nCell);

    objDS  = eval(obj.binddataset);
    strChkVal = gfn_transNullToEmpty(obj.getCellProperty("body", nCell, "text"));

    if (gfn_isNull(strChkVal)) return;
    

    strChkVal = strChkVal.replace("bind:", "");

    if (nSubCnt > 0) {    // Merge한 셀이 있는 경우
        var nChkIdx = -1;
        for ( var i = 0; i < nSubCnt; i++)
        {
            strType = obj.getSubCellProperty("head",e.cell,i,"displaytype");

            if(strType == "checkbox") {
                nChkIdx =  i;
                break;
            }
        }
        if (nChkIdx == -1)
            return;

        // Head셋팅
        strVal = obj.getSubCellProperty("head", nCell, nChkIdx, "text");

        if (strVal == "0" || gfn_isNull(strVal)) {
            obj.setSubCellProperty("head",nCell,nChkIdx,"text", '1');
            vl_chk="1";
        } else {
            obj.setSubCellProperty("head",nCell,nChkIdx,"text", '0');
            vl_chk="0";
        }

    } else { // Merge한 셀이 없는 경우
        strType = obj.getCellProperty("head", e.cell, "displaytype");

        if(strType != "checkbox") {
            return;
        }

        // Head셋팅
        strVal = obj.getCellProperty("head", nCell, "text");

        if (strVal == "0" || gfn_isNull(strVal)) {
            obj.setCellProperty("head", nCell, "text", '1');
            vl_chk="1";
        } else {
            obj.setCellProperty("head", nCell, "text", '0');
            vl_chk="0";
        }
    }

    // Body셋팅
	for(var i=0 ; i< objDS.rowcount ; i++){
		objDS.setColumn(i, strChkVal, vl_chk);
	}

}


/*****************************************************************************************
 * 함  수  명 : gfn_moveGridHScroll
 * 입      력 : obj         Grid Object
                e         MouseWheelEventInfo
 * 반      환 : none
 * 기      능 : 시스템공통 - Grid 수평스크롤 단축키 처리
 *****************************************************************************************/
function gfn_moveGridHScroll(obj, e)
{
    if(e.shiftKey == true)
    {
        obj.hscrollbar.pos = e.amount;
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_setGridToolTip
 * 입      력 : objGrid : Grid Object
                e       : MouseWheelEventInfo
 * 반      환 : none
 * 기      능 : 그리드 ToolTip 함수
 *****************************************************************************************/
function gfn_setGridToolTip(objGrid, e)
{
    if(e.row >= 0 && e.cell >= 0) {
        var sToolTipText = objGrid.getCellText(e.row, e.cell);
        objGrid.tooltiptext = sToolTipText;
    } else {
        objGrid.tooltiptext = "";
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_setGridClearToolTip
 * 입      력 : objGrid : Grid Object
 * 반      환 : none
 * 기      능 : 그리드 ToolTip Clear 함수
 *****************************************************************************************/
function gfn_setGridClearToolTip(objGrid)
{
    objGrid.tooltiptext = "";
}

/*****************************************************************************************
 * 함  수  명 : gfn_openGridToolTip
 * 입      력 : objGrid : Grid Object
                e       : GridClickEventInfo
 * 반      환 : none
 * 기      능 : 그리드 사용자정의 Tooltip Open 함수
 *****************************************************************************************/
function gfn_openGridToolTip(objGrd, e)
{
    var sPopupDivNm = "_pdv_GridToolTip";
    var sTextAreaNm = "_txa_GridToolTip";
    var nW = 300;
    var nH = 200;

    var bRet = isValidObject(sPopupDivNm);

    if(!bRet) {
        var objPopupDiv = new PopupDiv;
        objPopupDiv.init(sPopupDivNm, 0, 0, nW, nH);
        this.addChild(sPopupDivNm, objPopupDiv);
        objPopupDiv.style = "background:transparent;border:0 none #808080ff;";
        objPopupDiv.show();

        var objTxa = new TextArea;
        objTxa.init(sTextAreaNm, 0, 0, nW, nH);
        objPopupDiv.addChild(sTextAreaNm, objTxa);
        objTxa.show();

        objTxa.value = objGrd.getCellText(e.row, e.cell);
    } else {
        var objTxa = _pdv_GridToolTip._txa_GridToolTip;
        objTxa.value = objGrd.getCellText(e.row, e.cell);
    }

    objTxa.scrollbars = "autovert";
    objTxa.wordwrap   = "word";

    var sEditType = objGrd.getCellProperty("Body", e.cell, "edittype");

    if(sEditType == "none" || sEditType == "readonly" || sEditType == undefined) {
        objTxa.enable = false;
    } else {
        objTxa.enable = true;
    }

    var rv = _pdv_GridToolTip.trackPopup(e.screenX,e.screenY);

    if(objTxa.enable == true) {
        var sModifyText = objTxa.value;
        var bSuccess = objGrd.setCellProperty("body", e.cell, "text", sModifyText);
    }
}

var tmpStrClipboard = "";
var strSeparator = "    ";
var arrEditColor;
arrEditColor = new Array();
arrEditColor[0] = "#FFFFFF";    // EDIT_AUTH_COLOR
arrEditColor[1] = "#C6E2FF";    // RAMP_UP_COLOR
arrEditColor[2] = "#FFD0DC";    // EOS_DELAY_COLOR
arrEditColor[3] = "#8BF1FF";    // TOUCH_AUTH_COLOR
arrEditColor[4] = "#EEEEDD";    // RATIO_AUTH_COLOR

/*****************************************************************************************
 * 함  수  명 : gfn_gridCopyPaste
 * 입      력 : objGrid : Grid Object
                e       : KeyEventInfo
 * 반      환 : return true/false
 * 기      능 : 그리드 Ctrl+C, Ctrl+V 단축키 입력시에 Copy or Paste 처리 함수
 *****************************************************************************************/
function gfn_gridCopyPaste(objGrid, e)
{
     // Editing Grid autoselect=true인 경우 예외처리
     if(e.ctrlKey == true) objGrid.showEditor(false);

    if(e.ctrlKey == true && e.keycode == 67) {
         var sText = gfn_trim(objGrid.getEditSelectedText());
         if(sText == "") gfn_clipboardCopy(objGrid, strSeparator);
    } else if (e.ctrlKey == true && e.keycode == 86) {
        gfn_clipboardPaste(objGrid, strSeparator);
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_clipboardCopy
 * 입      력 : objGrid      : Grid Object
                strSeparator : 구분자
 * 반      환 : none
 * 기      능 : Grid Data 영역을 선택해서 Clipboard에 Copy하는  함수
 *****************************************************************************************/
function gfn_clipboardCopy(objGrid, strSeparator) {

    var orgDataset = eval(objGrid.binddataset);

    var strColID;
    var strValue;

    var strClipboard = "";

    var nAreaStartRow;
    var nAreaEndRow;
    var nAreaStartCol;
    var nAreaEndCol;

    if(objGrid.selecttype == "area") {
        nAreaStartRow = objGrid.selectstartrow;
        nAreaEndRow   = objGrid.selectendrow;
        nAreaStartCol = objGrid.selectstartcol;
        nAreaEndCol   = objGrid.selectendcol;
    } else if (objGrid.selecttype == "row" || objGrid.selecttype == "currow") {
        nAreaStartRow = objGrid.currentrow ;
        nAreaEndRow   = objGrid.currentrow ;
        nAreaStartCol = 0;
        nAreaEndCol   = objGrid.getCellCount("body")-1;
    } else if (objGrid.selecttype == "cell") {
        nAreaStartRow = objGrid.currentrow ;
        nAreaEndRow   = objGrid.currentrow ;
        nAreaStartCol = objGrid.currentcell;
        nAreaEndCol   = objGrid.currentcell;
    } else {
        nAreaStartRow = objGrid.currentrow ;
        nAreaEndRow   = objGrid.currentrow ;
        nAreaStartCol = objGrid.currentcell;
        nAreaEndCol   = objGrid.currentcell+1;
    }

    for(var nRow = parseInt(nAreaStartRow); nRow <= parseInt(nAreaEndRow); nRow++) {
        for(var nCell = parseInt(nAreaStartCol); nCell <= parseInt(nAreaEndCol); nCell++) {
            var nColW = objGrid.getRealColSize(nCell);    // Col Width "0"인 경우는 Pass

            if(nColW > 0) {
                strColID = objGrid.getCellProperty("body",nCell,"text");
                if(strColID.substr(0,5) == "bind:") {
                    strValue = orgDataset.getColumn(nRow,strColID.substr(5));
                    strClipboard = strClipboard + strValue + strSeparator;
                } else {
                    strValue = "";
                    strClipboard = strClipboard + strValue + strSeparator;
                }
            }
        }

        strClipboard = strClipboard.substr(0,strClipboard.length-1);
        strClipboard = strClipboard + String.fromCharCode(10);
    }

    strClipboard = strClipboard.substr(0, strClipboard.length-1);

    tmpStrClipboard = strClipboard;

    system.setClipboard("CF_TEXT",strClipboard);

    return;
}

/*****************************************************************************************
 * 함  수  명 : gfn_getCellBindCol
 * 입      력 : objGrid : Grid Object
                nCell   : 대상 Cell
 * 반      환 : string - 칼럼ID
 * 기      능 : Grid Cell값을 받아서 bind된 Dataset의 Column명을 얻는  함수
 *****************************************************************************************/
function gfn_getCellBindCol(objGrid, nCell)
{
    var text = gfn_trim(objGrid.getCellProperty("body", nCell, "text"));
    return text.replace(/bind:/, "").replace(/BIND:/, "");
}

/*****************************************************************************************
 * 함  수  명 : gfn_clipboardPaste
 * 입      력 : objGrid      : Grid Object
                strSeparator : 구분자
 * 반      환 : none
 * 기      능 : Clipboard에 저장된 Data를 Grid Data 영역에 Paste하는  함수
 *****************************************************************************************/
function gfn_clipboardPaste(objGrid, strSeparator, arrEditColorobj) {

    var orgDataset = eval(objGrid.binddataset);
    var ClipboardType = "";
    var nSearchRow = 0;
    var nSearchCol = 0;
    var strColID;
    var strValue;
    var strBgColor;

    orgDataset.enableevent = false;

    // 숫자 자릿수 구분은 comma 를 사용하기 때문에 호환을 위해서 comma 를 제거한다.
    var strClipboardData = String(system.getClipboard("CF_TEXT").replace(",","")).trim();

    if(strClipboardData!=tmpStrClipboard){
        ClipboardType = "EXCEL";
    }

    var strClipboardRecord = strClipboardData.split("\n");
    var strClipboardColunm;

    var nAreaStartRow    = 0;
    var nAreaEndRow        = 0;
    var nAreaStartCol    = 0;
    var nAreaEndCol        = 0;

    if(objGrid.selecttype == "area") {
        nAreaStartRow = objGrid.selectstartrow;
        nAreaEndRow   = objGrid.selectendrow;
        nAreaStartCol = objGrid.selectstartcol;
        nAreaEndCol   = objGrid.selectendcol;
    } else {
        nAreaStartRow = objGrid.currentrow ;
        nAreaEndRow   = objGrid.currentrow ;
        nAreaStartCol = objGrid.currentcell;
        nAreaEndCol   = objGrid.currentcell+1;
    }

    for(var nRow = parseInt(nAreaStartRow); nRow < (parseInt(nAreaStartRow) + parseInt(strClipboardRecord.length)); nRow++) {

        strClipboardColunm = strClipboardRecord[nSearchRow].split(strSeparator);

        nSearchCol = 0;

        var nAreaCell = parseInt(nAreaStartCol) + parseInt(strClipboardColunm.length);

        for(var nCell = parseInt(nAreaStartCol); nCell < parseInt(nAreaCell) && nCell < objGrid.getFormatColCount(); nCell++) {

            var nColW     = objGrid.getRealColSize(nCell);    // Col Width "0"인 경우는 Pass
            var sEditType = objGrid.getCellProperty("body",nCell,"edittype");

            if(nColW > 0 && _gfn_getGridCellEditYn(sEditType)) {

                strColID = objGrid.getCellProperty("body",nCell,"text").substr(5);
                if(objGrid.getCellProperty("body",nCell,"text") != "undefined" && objGrid.getCellProperty("body",nCell,"text") != null){
                    strColID = objGrid.getCellProperty("body",nCell,"text").substr(5);
                }

                strValue = strClipboardColunm[nSearchCol];

                if(strValue != "undefined") {
                    if(strValue != null && !(ClipboardType=="EXCEL" && (parseInt(nRow)+1) > (parseInt(nAreaStartRow) + parseInt(strClipboardRecord.length)))){
                        // 날짜형(YYYY-MM-DD -> YYYYMMDD) 로 변환해서 Paste 처리
                        if(gfn_isDateByFullType(strValue.trim())) {
                            orgDataset.setColumn(nRow,strColID,gfn_getDateByFullType(strValue.trim()));
                        } else {
                            orgDataset.setColumn(nRow,strColID,strValue.trim());
                        }

                        if(orgDataset.getColumn(nRow, gfn_getColNmStatus()) != gfn_getRowTypeInsert()) {
                            orgDataset.setColumn(nRow, gfn_getColNmStatus(), gfn_getRowTypeUpdate());    // 로우상태값 "Update"로 변경
                        }
                    }
                    nSearchCol++;
                }
            }
            nAreaCell++;
        }
        nSearchRow++;
    }

    orgDataset.enableevent = true;

    return;
}

/*****************************************************************************************
 * 함  수  명 : _gfn_getGridCellEditYn
 * 입      력 : objGrid : Grid Object
                e       : GridClickEventInfo
                nW      : Width Size
                nH      : Heigth Size
 * 반      환 : return true/false
 * 기      능 : 그리드 EDIT여부체크 함수
 *****************************************************************************************/
function _gfn_getGridCellEditYn(sEditType)
{
    if(sEditType == "none"
        || sEditType == "readonly"
        || sEditType == "undefined"
        || sEditType == undefined) {

        return false;
    }

    return true;
}

/*****************************************************************************************
 * 함  수  명 : gfn_viewGridToolTip
 * 입      력 : objGrid : Grid Object
                e       : GridClickEventInfo
                nW      : Width Size
                nH      : Heigth Size
 * 반      환 : none
 * 기      능 : 그리드 사용자정의 ToolTip 처리 함수
 *****************************************************************************************/
function gfn_viewGridToolTip(objGrd, e, nW, nH)
{
    var sPopupDivNm = "_pdv_GridToolTip";
    var sTextAreaNm = "_txa_GridToolTip";

    if(gfn_isNull(nW)) nW = objGrd.getRealColSize(e.cell);
    if(gfn_isNull(nH)) nH = objGrd.getRealRowSize(e.row)+100;

    var bRet = isValidObject(sPopupDivNm);

    var sOriText = objGrd.getCellValue(e.row, e.cell);

    if(!bRet) {
        var objPopupDiv = new PopupDiv;
        objPopupDiv.init(sPopupDivNm, 0, 0, nW, nH);
        this.addChild(sPopupDivNm, objPopupDiv);
        objPopupDiv.style = "background:transparent;border:0 none #808080ff;";
        objPopupDiv.show();

        var objTxa = new TextArea;
        objTxa.init(sTextAreaNm, 0, 0, nW, nH);
        objPopupDiv.addChild(sTextAreaNm, objTxa);
        objTxa.show();
    } else {
        var objTxa = _pdv_GridToolTip._txa_GridToolTip;
        objTxa.resize(nW, nH);
    }

    objTxa.value = sOriText;

    objTxa.scrollbars = "autovert";
    objTxa.wordwrap   = "word";

    //자릿수 제한
    objTxa.lengthunit = objGrd.getCellProperty( "Body", e.cell, "editlengthunit");
    objTxa.maxlength = objGrd.getCellProperty( "Body", e.cell, "editlimit" );

    var sDisplayType = objGrd.getCellProperty("Body", e.cell, "displaytype");
    var sEditType    = objGrd.getCurEditType();

    if(sDisplayType != undefined
        && sDisplayType != "text"
        //&& sDisplayType != "currency"
        //&& sDisplayType != "number"
        && sDisplayType != "normal") return;

    if(sEditType == "none" || sEditType == "readonly" || sEditType == undefined) {
        //objTxa.enable = false;
        objTxa.readonly = true;
        objTxa.style.background = "URL('theme://images/bg_compN.png') stretch 5,5";
    } else {
        objTxa.enable = true;
    }

    var arr  = objGrd.getCellRect(e.row, e.cell);
    var arr2 = objGrd.getCellRect(e.row+1, e.cell);

    var rv = _pdv_GridToolTip.trackPopupByComponent(objGrd, arr.left, arr2.top, nW, nH);

    if(objTxa.enable == true) {
        var sModifyText = objTxa.value;
        var objDs     = this[objGrd.binddataset];
        var BodyColId = (objGrd.getCellProperty("body", e.col,"text")).toString().split(":");    // e.col : 바인드된 컬럼.
        var nRow      = objGrd.getDatasetRow(e.row);

        if (BodyColId[0] != "bind") {
            return false;
        }

        if(sOriText != sModifyText) {
            objDs.setColumn(nRow, BodyColId[1], sModifyText);
        }
    }
}

/*****************************************************************************************
 * 함  수  명 : gfn_setCellPosGrid
 * 입      력 : objGrid : Grid Object
                nRow
                nCol
 * 반      환 :
 * 기      능 : 그리드 특정셀에 포커싱을 주기위한 함수
 *****************************************************************************************/
function gfn_setCellPosGrid(objGrid, nRow, nCol)
{
    var objDs = this.objects[objGrid.binddataset];
    objDs.rowposition = nRow;
    objGrid.setCellPos(nCol);
    objGrid.setFocus();
}

/*****************************************************************************************
 * 함  수  명 : gfn_dropdownCombo
 * 입      력 : objGrid : Grid Object
 * 반      환 :
 * 기      능 : 그리드 셀 원클릭시에 콤보 드롭다운리스트 나타나도록 하는 함수
 *****************************************************************************************/
function gfn_dropdownCombo(objGrid)
{
    if(!objGrid.isDropdownCombo()) {
        objGrid.dropdownCombo();
    }
}

//임시 정훈
//************************************************************************************************
//sort setting :sort 조건 셋팅
//srchDs: 검색부 ds ,sControllerUrl :컨트롤러URL, inDsName:컨트롤러에서 out Ds으로 설정된 name
//inDs:실제 바인딩될 Ds, inComponent : 총건수가 표시될 컴포넌트 name, cnt : 총 보여질갯수, 
//totalCntVal : 데이터셋에서 가져온 총갯수 
function gfn_sortSetting(srchDs, sControllerUrl, inDsName, inDs, inComponent, cnt ,totalCntVal){
	srchDs.setColumn(0, "sController", sControllerUrl);//컨트롤러 URL 셋팅
	srchDs.setColumn(0, "dsName", inDsName);

	if(!gfn_pageSearch(gfn_getCommTypeOrderBy(), inDs, inComponent, cnt, totalCntVal)) return;
}


/*****************************************************************************************
 * 함  수  명 : gfn_chkSelectValidation
 * 입      력 : inDs =확인 데이터셋
 * 반      환 : true,false
 * 기      능 : 체크가 1건이라도 있는지 없는지 체크
 *****************************************************************************************/
function gfn_chkSelectValidation(inDs)
{
	var chkfg = false;
	for(var i=0;i<inDs.rowcount;i++)
	{
		if(inDs.getColumn(i, "_chk") == 1) { // 체크 여부 확인
			chkfg = true;
			break;
		}
	}
	return chkfg;
}

//체크박스 수행
function gfn_chkProcedureFulfill(inDs ,pKeyStr, flag){
	var pKey = "";
	for(var i=inDs.rowcount-1; i>=0; i--) {
		if(inDs.getColumn(i, "_chk") == 1) {
			if (pKey == "") {
				pKey = inDs.getColumn(i, pKeyStr);
			} else {
				pKey += "," + inDs.getColumn(i, pKeyStr);
			}
			
			if(flag == "delete"){
				inDs.deleteRow(i);
			}
		}
	}
	return pKey;
}

//체크박스 전체 체크/체크해제
function gfn_toggleGridCheck(obj:Grid) {
	var i, oldRowType;
	var chkVal = obj.getCellProperty("Head", 0, "expr");
	if ("1" == chkVal) {
		chkVal = "";
	} else {
		chkVal = "1";
	}
	
	obj.setCellProperty("Head", 0, "expr", chkVal);
	
	var ds:Dataset = this[obj.binddataset];
	ds.enableevent = false;
	ds.updatecontrol = false;
	
	for (i=0; i<ds.rowcount; ++i) {
		oldRowType = ds.getRowType(i);
		ds.setColumn(i, "chk", chkVal);
		ds.setRowType(i, oldRowType);
	}
	
	ds.updatecontrol = true;
	ds.enableevent = true;
}]]></Script>
