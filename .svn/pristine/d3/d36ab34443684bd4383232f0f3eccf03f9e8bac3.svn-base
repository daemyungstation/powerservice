<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="DlwNewTypeEvntMap">

    <!-- 행사현황 건수 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEventCount" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeEvntMap.getNewTypeEventCount */
               COUNT(*)
          FROM (SELECT NVL(CASE WHEN EVENT.EVENT_PLACE_CL = '0001'
                             THEN (SELECT FUNRL_NM
                                     FROM FUNRL_HALL
                                    WHERE FUNRL_CD = EVENT.FUNRL_HALL)
                             ELSE CASE WHEN (EVENT.ETC_ZIP IS NULL OR EVENT.ETC_ZIP = '') AND (EVENT.ETC_ADDR2 IS NULL OR EVENT.ETC_ADDR2 = '')
                                       THEN ''
                                       WHEN (EVENT.ETC_ZIP IS NULL OR EVENT.ETC_ZIP = '') AND (EVENT.ETC_ADDR2 IS NOT NULL AND EVENT.ETC_ADDR2 != '')
                                       THEN NVL(EVENT.ETC_ADDR2, '')
                                       ELSE NVL(EVENT.ETC_ZIP, '') || ')' || NVL(EVENT.ETC_ADDR1, '') || ' ' || NVL(EVENT.ETC_ADDR2, '')
                                  END
                        END, '') AS EVENT_PLACE
                     , CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), '') = ''
                            THEN ''
                            ELSE NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), '')
                       END AS BRANCH_CL
                  FROM EVENT
                 INNER JOIN MEM_PROD_ACCNT M ON EVENT.ACCNT_NO = M.ACCNT_NO AND M.DEL_FG = 'N'
                 INNER JOIN MEMBER MM ON M.MEM_NO = MM.MEM_NO
                 INNER JOIN EMPLOYEE E ON M.EMPLE_NO = E.EMPLE_NO
                  LEFT OUTER JOIN (SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                     FROM EVENT_MNGR_REG
                                    WHERE DEL_FG = 'N'
                                      AND EVT_MNGR_GUBUN = '0001'
                                    GROUP BY EVT_SEQ
                                  ) EMR ON EVENT.SEQ = EMR.EVT_SEQ
                  LEFT OUTER JOIN FUNRL_RPT FR ON FR.SEQ = EVENT.SEQ AND FR.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_OUTSRC_MST FOM ON FOM.SEQ = EVENT.SEQ AND FOM.DEL_FG = 'N'
                 WHERE 1=1
                   AND NVL(EVENT.CNL_REASON_CD, ' ') NOT IN ('02', '003')
                 <if test="dataAthrQury != null and dataAthrQury != ''">
                     ${dataAthrQury}
                 </if>
                 <if test="event_yn.equalsIgnoreCase('N')">
                   AND EVENT.DEL_FG = 'N'
                 </if>
                 <if test="event_yn.equalsIgnoreCase('Y')">
                   AND EVENT.DEL_FG = 'Y'
                     <if test="cncl_work.equalsIgnoreCase('Y')">
                         AND EVENT.CNL_WORK_YN = 'Y'
                     </if>
                     <if test="cncl_work.equalsIgnoreCase('N')">
                         AND NVL(EVENT.CNL_WORK_YN,'N') = 'N'
                     </if>
                 </if>
                 <if test="event_comp_day.equalsIgnoreCase('N')">
                     AND EVENT_COMP_DAY <![CDATA[<]]> TO_CHAR(SYSDATE, 'YYYYMMDD')
                 </if>
                 <if test="event_comp_day.equalsIgnoreCase('Y')">
                     AND EVENT_COMP_DAY <![CDATA[>=]]> TO_CHAR(SYSDATE, 'YYYYMMDD')
                 </if>
                 <if test="event != null and event != ''">
                     AND SORT = #{event}
                 </if>
                 <if test="prod_cd != null and prod_cd != ''">
                     AND M.PROD_CD = #{prod_cd}
                 </if>
                 <if test="pay_mthd != null and pay_mthd != ''">
                     AND EVENT.SORT = #{pay_mthd}
                 </if>
                 <if test="accnt_no != null and accnt_no != ''">
                     AND EVENT.ACCNT_NO like '%' || #{accnt_no} || '%'
                 </if>

                 <!-- 아래 조건과 겹쳐 임시 주석처리.. -->
                 <!--
                 <if test="dt_typ == null or dt_typ == ''">
                     <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                         AND EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                     </if>
                 </if>

                 /*SMS 장의 행사 조회를 위해 분리 by ejkim 2012.06.04*/
                 <if test="sms_stt_dt != null and sms_stt_dt != '' and sms_end_dt != null and sms_end_dt != ''">
                     AND EVENT_PROC_DAY BETWEEN #{sms_stt_dt} AND #{sms_end_dt}
                 </if>
                  -->

                 <!-- 사원 인트라넷용 추가 : 담당자, 모집자 다 보기 위해 추가  start by ejkim 2012_05_17 -->
                 <!-- 사원 인트라넷용 추가 : 추천인 보기 위해 추가  start by lgl 2012_08_06 -->
                 <if test="emple_no != null and emple_no != ''">
                     <if test="emple_gbn == '00'">
                        AND (M.EMPLE_NO = #{emple_no} OR M.BEF_EMPLE_CD = #{emple_no} OR M.RECOMMEND_EMPLE_NO = #{emple_no})
                     </if>
                     <if test="emple_gbn == '01'">
                        AND M.EMPLE_NO = #{emple_no}
                     </if>
                     <if test="emple_gbn == '02'">
                        AND M.BEF_EMPLE_CD = #{emple_no}
                     </if>
                     <if test="emple_gbn == null or emple_gbn == ''">
                        AND M.EMPLE_NO = #{emple_no}
                     </if>
                 </if>

                 <if test="mem_nm != null and mem_nm != ''">
                     AND MM.MEM_NM LIKE '%' || #{mem_nm} || '%'
                 </if>
                 <if test="dead_man_nm != null and dead_man_nm != ''">
                     AND EVENT.VAL1 LIKE '%' || #{dead_man_nm} || '%'
                 </if>
                 <if test="sangju_nm != null and sangju_nm != ''">
                     AND EVENT.VAL2 LIKE '%' || #{sangju_nm} || '%'
                 </if>
                 <if test="cp_nm != null and cp_nm != ''">
                     AND (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) like '%' || #{cp_nm} || '%'
                 </if>

                 <!-- 행사현황에서 조회시 -->
                 <if test="dt_typ != null and dt_typ != ''">
                     <if test="dt_typ == '01'">
                        <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                            AND EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                        </if>
                     </if>
                     <if test="dt_typ == '02'">
                        <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                            AND EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                        </if>
                     </if>
                     <if test="dt_typ == '03'">
                        <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                            AND EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                        </if>
                     </if>
                 </if>

                <!-- 행사현황 외에서 조회시 : 기존대로 조회 -->
                <if test="dt_typ == null or dt_typ == ''">
                    <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                        AND EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                    </if>
                    <if test="sms_stt_dt != null and sms_stt_dt != '' and sms_end_dt != null and sms_end_dt != ''">
                        AND EVENT_PROC_DAY BETWEEN #{sms_stt_dt} AND #{sms_end_dt}
                    </if>

                </if>
                ) TBL
            WHERE 1=1
            <if test="event_place != null and event_place != ''">
                AND TBL.EVENT_PLACE LIKE '%' || #{event_place} || '%'
            </if>
            <if test="branch_cl != null and branch_cl != ''">
                AND TBL.BRANCH_CL LIKE '%' || #{branch_cl} || '%'
            </if>
    </select>

    <!-- 행사현황 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEventList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEventList -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeEventList */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*
                  FROM (SELECT TBL.*
                             , WH_MOVE_GUBUN(TBL.ACCNT_NO) AS WHMV_YN
                          FROM (SELECT EVENT.ACCNT_NO
                                     , EVENT.SEQ
                                     , SUBSTR(EVENT_REG_DAY,1,4)||'/'||SUBSTR(EVENT_REG_DAY,5,2)||'/'||SUBSTR(EVENT_REG_DAY,7,2) AS EVENT_REG_DAY
                                     , REPLACE(EVENT_PROC_DAY,'19000101','') AS EVENT_PROC_DAY
                                     , REPLACE(EVENT_COMP_DAY,'19000101','') AS EVENT_COMP_DAY
                                     , FN_COM_NM('61',EVENT_MAN) AS EVENT_MAN
                                     , FN_COM_NM('02',SORT) AS SORT_NAME
                                     , SORT
                                     , VAL1
                                     , VAL2
                                     , VAL3
                                     , VAL4
                                     , VAL5
                                     , CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), '') = ''
                                            THEN NVL(VAL6, '')
                                            ELSE NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), '')
                                       END AS VAL6
                                     , VAL7
                                     , VAL7 AS ENT_DAY
                                     , VAL7_H AS ENT_TM
                                     , TO_CHAR(TO_DATE(EVENT_COMP_DAY),'YYYY-MM-DD') || ' ' || NVL(COMP_H,'00') || ':' || NVL(COMP_M,'00') AS COMP_DT
                                     , TO_CHAR(TO_DATE(VAL8),'YYYY-MM-DD') || ' ' || NVL(VAL8_H,'00') || ':' || NVL(VAL8_M,'00') AS VAL8
                                     , VAL8 AS ACCEPT_DAY
                                     , VAL8_H AS ACCEPT_TM
                                     , TO_CHAR(TO_DATE(VAL9),'YYYY-MM-DD') || ' ' || NVL(VAL9_H,'00') || ':' || NVL(VAL9_M,'00') AS VAL9
                                     , VAL9 AS MOVE_DAY
                                     , VAL9_H AS MOVE_TM
                                     , FN_COM_NM('62',WEDDING_OPT) WEDDING_OPT
                                     , SUBSTR(EVENT.ANNV,1,4)||'/'||SUBSTR(EVENT.ANNV,5,2)||'/'||SUBSTR(EVENT.ANNV,7,2) AS ANNV
                                     , NVL(CASE WHEN EVENT.EVENT_PLACE_CL = '0001'
                                             THEN (SELECT FUNRL_NM
                                                     FROM FUNRL_HALL
                                                    WHERE FUNRL_CD = EVENT.FUNRL_HALL)
                                             ELSE CASE WHEN (EVENT.ETC_ZIP IS NULL OR EVENT.ETC_ZIP = '') AND (EVENT.ETC_ADDR2 IS NULL OR EVENT.ETC_ADDR2 = '')
                                                       THEN ''
                                                       WHEN (EVENT.ETC_ZIP IS NULL OR EVENT.ETC_ZIP = '') AND (EVENT.ETC_ADDR2 IS NOT NULL AND EVENT.ETC_ADDR2 != '')
                                                       THEN NVL(EVENT.ETC_ADDR2, '')
                                                       ELSE NVL(EVENT.ETC_ZIP, '') || ')' || NVL(EVENT.ETC_ADDR1, '') || ' ' || NVL(EVENT.ETC_ADDR2, '')
                                                  END
                                        END, '') AS EVENT_PLACE
                                     , EVENT.NOTE
                                     , (SELECT NVL(SUM(PAY_AMT),0)
                                          FROM PAY_MNG
                                         WHERE ACCNT_NO = EVENT.ACCNT_NO
                                           AND DEL_FG = 'N' ) AS PAY_AMT
                                     , (SELECT M.NEW_CHAN_GUNSU+NVL(COUNT(PAY_AMT),0)
                                          FROM PAY_MNG
                                         WHERE ACCNT_NO = EVENT.ACCNT_NO
                                           AND DEL_FG = 'N' ) AS PAY_AMT_COUNT
                                     , SUBSTR(JOIN_DT,1,4)||'/'||SUBSTR(JOIN_DT,5,2)||'/'||SUBSTR(JOIN_DT,7,2) AS JOIN_DT
                                     , E.EMPLE_NM
                                     , FN_DEPT_NM(E.DEPT_CD) AS DEPT_NM
                                     , ERG_TEL
                                     , EVENT.SEX
                                     , FN_COM_NM('0123', EVENT.SEX) AS SEX_NM
                                     , REL
                                     , AGERNG
                                     , DIE_RESON
                                     , LOC
                                     , BCNM
                                     , BCLOC
                                     , CFN_DT
                                     , CFN_DT AS CFN_DAY
                                     , CFN_H AS CFN_TM
                                     , RMK
                                     , CNL_RESON
                                     , FN_PROD_NM(M.PROD_CD) AS PROD_NM
                                     , MM.MEM_NM
                                     , MM.MEM_NO
                                     , E.EMPLE_NO
                                     , E.CELL AS EMP_CELL
                                     , MM.CELL
                                     , MM.SMS_CHK
                                     , CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), '') = ''
                                            THEN NVL(WORKDEPT, '')
                                            ELSE NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), '')
                                       END AS WORK_DEPT
                                     , CASE WHEN NVL((SELECT EVT_MNGR_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), '') = ''
                                            THEN NVL(WORKDEPT, '')
                                            ELSE NVL((SELECT (SELECT Z.BRANCH_CD FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), '')
                                       END AS BRANCH_CD
                                     , EVENT.DEL_FG
                                     , FN_EMPLE_NM(M.BEF_EMPLE_CD) AS BEF_EMPLE_NM
                                     , FN_COM_NM('113',NVL(M.JOIN_CL,'01')) AS JOIN_CL
                                     , TO_CHAR(TO_DATE(ARRIVE_DT),'YYYY-MM-DD') || ' ' || NVL(ARR_H,'00') || ':' || NVL(ARR_M,'00') AS ARRIVE_DT
                                     , CASE WHEN NVL(BUR_CRE_CL, '') = '0001'
                                            THEN '매장'
                                            WHEN NVL(BUR_CRE_CL, '') = '0002'
                                            THEN '화장'
                                            WHEN NVL(BUR_CRE_CL, '') = '0003'
                                            THEN '탈관'
                                            ELSE ''
                                       END AS BUR_CRE_CL
                                     , NVL(FN_COM_NM('0142', EVENT.BRPLOT), '') AS BRPLOT
                                     , CASE WHEN FR.SAVE_CL IN ('0001','0002')
                                            THEN FN_COM_NM('0149', FR.SAVE_CL)||'(직영)'
                                            WHEN FOM.SAVE_CL IN ('0001','0002')
                                            THEN FN_COM_NM('0149', FOM.SAVE_CL)||'(외주)'
                                            ELSE ''
                                       END AS RPT_YN
                                     , CASE WHEN FR.SAVE_CL IN ('0001','0002')
                                            THEN FR.RPT_NO
                                            WHEN FOM.SAVE_CL IN ('0001','0002')
                                            THEN FOM.FUNRL_OUTSRC_NO
                                            ELSE ''
                                       END AS RPT_NO
                                     , CASE WHEN FR.SAVE_CL IN ('0001','0002')
                                            THEN '직영'
                                            WHEN FOM.SAVE_CL IN ('0001','0002')
                                            THEN '외주'
                                            ELSE ''
                                       END AS RPT_CL
                                     , EVENT.EVENT_PLACE AS EVENT_PLACE1
                                     , EVENT.VAL6 AS JIDOSA
                                     , EVENT.WORKDEPT AS WORK_DEPT1
                                     , CASE WHEN FN_YEN_CHE(M.ACCNT_NO) = '만기'
                                            THEN '만기'
                                            ELSE ''
                                       END AS YENCHE
                                     , CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), '') = ''
                                            THEN ''
                                            ELSE NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), '')
                                       END AS BRANCH_CL
                                     , CASE WHEN (SELECT COUNT(*) FROM MONTR_RPT_MST WHERE DEL_FG = 'N' AND ACCNT_NO = M.ACCNT_NO) > 0
                                            THEN 'Y'
                                            ELSE 'N'
                                       END AS MON_TR_YN
                                     , NVL((SELECT MODEL_CL_NM FROM PRODUCT_MODEL_CL_CD WHERE MODEL_CL_CD = M.PROD_MODEL_KIND), '') AS MODEL_CL_NM
                                     , CASE WHEN EVENT.DEL_FG = 'N' THEN TRUNC(MOD((CA_DT.A - CA_DT.B), 1) * 24) || '시간 ' || TRUNC(ROUND(MOD((CA_DT.A - CA_DT.B) * 24, 1) * 60)) || '분'
                                            ELSE TRUNC(MOD((CA_DT.C - CA_DT.B), 1) * 24) || '시간 ' || TRUNC(ROUND(MOD((CA_DT.C - CA_DT.B) * 24, 1) * 60)) || '분' END AS CADT
                                     , CASE WHEN TRUNC(MOD((CA_DT.A - CA_DT.B), 1) * 24) >= 2 THEN '1' ELSE '0' END CA_GUBUN
                                     , (SELECT CD_NM FROM COM_CD WHERE GRP_CD = '0125' AND COM_CD = B2B.SALE_TYPE) SALE_TYPE_NM
                                     , TO_CHAR(M.REG_DM, 'YYYYMMDD') AS REG_DM
                                  FROM EVENT
                                 INNER JOIN MEM_PROD_ACCNT M ON EVENT.ACCNT_NO = M.ACCNT_NO AND M.DEL_FG = 'N'
                                 LEFT OUTER JOIN B2BCOMCD B2B ON M.B2B_COMP_CD = B2B.COM_CD
                                 INNER JOIN MEMBER MM ON M.MEM_NO = MM.MEM_NO
                                 INNER JOIN EMPLOYEE E ON M.EMPLE_NO = E.EMPLE_NO
                                  LEFT OUTER JOIN (SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                     FROM EVENT_MNGR_REG
                                                    WHERE DEL_FG = 'N'
                                                      AND EVT_MNGR_GUBUN = '0001'
                                                    GROUP BY EVT_SEQ
                                                  ) EMR ON EVENT.SEQ = EMR.EVT_SEQ
                                  LEFT OUTER JOIN FUNRL_RPT FR ON FR.SEQ = EVENT.SEQ AND FR.DEL_FG = 'N'
                                  LEFT OUTER JOIN FUNRL_OUTSRC_MST FOM ON FOM.SEQ = EVENT.SEQ AND FOM.DEL_FG = 'N'
                                  LEFT OUTER JOIN(SELECT TO_DATE(VAL8 || ' ' || NVL(VAL8_H,'00') || ':' || NVL(VAL8_M,'00'), 'YYYYMMDDHH24:MI') B,
                                                         TO_DATE(ARRIVE_DT || ' ' || NVL(ARR_H,'00') || ':' || NVL(ARR_M,'00'), 'YYYYMMDDHH24:MI') A,
                                                         TO_DATE(NVL(TO_CHAR(CANCL_REG_DM, 'YYYYMMDD'),'99991231') || ' ' || NVL(TO_CHAR(CANCL_REG_DM,'HH24'),'00') || ':' || NVL(TO_CHAR(CANCL_REG_DM,'MI'),'00'), 'YYYYMMDDHH24:MI') C,
                                                         ACCNT_NO,
                                                         SEQ
                                                  FROM EVENT
                                                  )CA_DT ON CA_DT.ACCNT_NO = EVENT.ACCNT_NO AND EVENT.SEQ = CA_DT.SEQ
                                 WHERE 1=1
                                   AND   NVL(EVENT.CNL_REASON_CD, ' ') NOT IN ('02', '003')
                                 <if test="dataAthrQury != null and dataAthrQury != ''">
                                     ${dataAthrQury}
                                 </if>
                                 <if test="event_yn.equalsIgnoreCase('N')">
                                   AND EVENT.DEL_FG = 'N'
                                 </if>
                                 <if test="event_yn.equalsIgnoreCase('Y')">
                                   AND EVENT.DEL_FG = 'Y'
                                     <if test="cncl_work.equalsIgnoreCase('Y')">
                                         AND EVENT.CNL_WORK_YN = 'Y'
                                     </if>
                                     <if test="cncl_work.equalsIgnoreCase('N')">
                                         AND NVL(EVENT.CNL_WORK_YN,'N') = 'N'
                                     </if>
                                 </if>
                                 <if test="event_comp_day.equalsIgnoreCase('N')">
                                     AND EVENT_COMP_DAY <![CDATA[<]]> TO_CHAR(SYSDATE, 'YYYYMMDD')
                                 </if>
                                 <if test="event_comp_day.equalsIgnoreCase('Y')">
                                     AND EVENT_COMP_DAY <![CDATA[>=]]> TO_CHAR(SYSDATE, 'YYYYMMDD')
                                 </if>
                                 <if test="event != null and event != ''">
                                     AND SORT = #{event}
                                 </if>
                                 <if test="prod_cd != null and prod_cd != ''">
                                     AND M.PROD_CD = #{prod_cd}
                                 </if>
                                 <if test="pay_mthd != null and pay_mthd != ''">
                                     AND EVENT.SORT = #{pay_mthd}
                                 </if>
                                 <if test="accnt_no != null and accnt_no != ''">
                                     AND EVENT.ACCNT_NO like '%' || #{accnt_no} || '%'
                                 </if>

                                 <!-- 아래 조건과 겹쳐 임시 주석처리.. -->
                                 <!--
                                 <if test="dt_typ == null or dt_typ == ''">
                                     <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                         AND EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                     </if>
                                 </if>

                                 /*SMS 장의 행사 조회를 위해 분리 by ejkim 2012.06.04*/
                                 <if test="sms_stt_dt != null and sms_stt_dt != '' and sms_end_dt != null and sms_end_dt != ''">
                                     AND EVENT_PROC_DAY BETWEEN #{sms_stt_dt} AND #{sms_end_dt}
                                 </if>
                                  -->

                                 <!-- 사원 인트라넷용 추가 : 담당자, 모집자 다 보기 위해 추가  start by ejkim 2012_05_17 -->
                                 <!-- 사원 인트라넷용 추가 : 추천인 보기 위해 추가  start by lgl 2012_08_06 -->
                                 <if test="emple_no != null and emple_no != ''">
                                     <if test="emple_gbn == '00'">
                                        AND (M.EMPLE_NO = #{emple_no} OR M.BEF_EMPLE_CD = #{emple_no} OR M.RECOMMEND_EMPLE_NO = #{emple_no})
                                     </if>
                                     <if test="emple_gbn == '01'">
                                        AND M.EMPLE_NO = #{emple_no}
                                     </if>
                                     <if test="emple_gbn == '02'">
                                        AND M.BEF_EMPLE_CD = #{emple_no}
                                     </if>
                                     <if test="emple_gbn == null or emple_gbn == ''">
                                        AND M.EMPLE_NO = #{emple_no}
                                     </if>
                                 </if>

                                 <if test="mem_nm != null and mem_nm != ''">
                                     AND MM.MEM_NM LIKE '%' || #{mem_nm} || '%'
                                 </if>
                                 <if test="dead_man_nm != null and dead_man_nm != ''">
                                     AND EVENT.VAL1 LIKE '%' || #{dead_man_nm} || '%'
                                 </if>
                                 <if test="sangju_nm != null and sangju_nm != ''">
                                     AND EVENT.VAL2 LIKE '%' || #{sangju_nm} || '%'
                                 </if>
                                 <if test="cp_nm != null and cp_nm != ''">
                                     AND (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) like '%' || #{cp_nm} || '%'
                                 </if>

                                 <!-- 행사현황에서 조회시 -->
                                 <if test="dt_typ != null and dt_typ != ''">
                                     <if test="dt_typ == '01'">
                                        <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                            AND EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                        </if>
                                     </if>
                                     <if test="dt_typ == '02'">
                                        <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                            AND EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                        </if>
                                     </if>
                                     <if test="dt_typ == '03'">
                                        <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                            AND EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                        </if>
                                     </if>
                                 </if>

                                <!-- 행사현황 외에서 조회시 : 기존대로 조회 -->
                                <if test="dt_typ == null or dt_typ == ''">
                                    <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                        AND EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                    </if>
                                    <if test="sms_stt_dt != null and sms_stt_dt != '' and sms_end_dt != null and sms_end_dt != ''">
                                        AND EVENT_PROC_DAY BETWEEN #{sms_stt_dt} AND #{sms_end_dt}
                                    </if>

                                </if>
                                ) TBL
                            WHERE 1=1
                            <if test="event_place != null and event_place != ''">
                                AND TBL.EVENT_PLACE LIKE '%' || #{event_place} || '%'
                            </if>
                            <if test="branch_cl != null and branch_cl != ''">
                                AND TBL.BRANCH_CL LIKE '%' || #{branch_cl} || '%'
                            </if>
                            <if test="branch_cd != null and branch_cd != ''">
                                AND TBL.BRANCH_CD = #{branch_cd}
                            </if>
                       ) X
                       <!-- 2017.11.28 정승철  1순위(행사종료일) + 2순위(이름명) 오름차순 정렬 : 김지연매니저 요청 -->
                       ORDER BY X.EVENT_COMP_DAY, X.MEM_NM
                ) Z
        <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
         <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
         ]]>
        </if>
    </select>

    <!-- [행사통계] -->
    <select id="DlwNewTypeEvntMap.getNewTypeEventStats" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEventStats -->

            SELECT /* DlwNewTypeEvntMap.getNewTypeEventStats */
                       COUNT(*) AS TOT_CNT
                     , SUM(CASE WHEN EVENT_COMP_DAY IS NOT NULL AND EVENT_COMP_DAY != '19000101' AND SUBSTR(EVENT_COMP_DAY,1,4) = TO_CHAR(SYSDATE, 'YYYY') THEN 1
                       ELSE 0
                       END ) AS CUR_YEAR_CNT
                     , SUM(CASE WHEN EVENT_COMP_DAY IS NOT NULL AND EVENT_COMP_DAY != '19000101' AND SUBSTR(EVENT_COMP_DAY,1,6) = TO_CHAR(ADD_MONTHS(SYSDATE, -1), 'YYYYMM') THEN 1
                       ELSE 0
                       END ) AS LAST_MON_CNT
                     , SUM(CASE WHEN EVENT_COMP_DAY IS NOT NULL AND EVENT_COMP_DAY != '19000101' AND SUBSTR(EVENT_COMP_DAY,1,6) = TO_CHAR(SYSDATE, 'YYYYMM') THEN 1
                               ELSE 0
                       END ) AS CUR_MON_CNT
                     , SUM(CASE WHEN EVENT_PROC_DAY IS NOT NULL AND EVENT_PROC_DAY != '19000101' AND EVENT_PROC_DAY = TO_CHAR(SYSDATE, 'YYYYMMDD') THEN 1
                               ELSE 0
                           END ) AS EVT_1D_CNT
                     , SUM(CASE WHEN EVENT_PROC_DAY IS NOT NULL AND EVENT_PROC_DAY != '19000101' AND EVENT_PROC_DAY = TO_CHAR(SYSDATE-1, 'YYYYMMDD') THEN 1
                               ELSE 0
                           END ) AS EVT_2D_CNT
                     , SUM(CASE WHEN CFN_DT IS NOT NULL AND CFN_DT != '19000101'
                       <if test="dt_typ != null and dt_typ != ''">
                           <if test="dt_typ == '01'">
                              <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                  AND EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                              </if>
                           </if>
                           <if test="dt_typ == '02'">
                              <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                  AND EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                              </if>
                           </if>
                           <if test="dt_typ == '03'">
                              <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                  AND EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                              </if>
                           </if>
                       </if>
                               THEN 1
                       ELSE 0
                       END) AS CFN_CNT
                     , NVL(SUM(CAPI), 0) AS CAPI
                     , NVL(SUM(NO_CAPI), 0) AS NO_CAPI
                     , NVL(SUM(DIR_CNT), 0) AS DIR_CNT
                     , NVL(SUM(OUT_CNT), 0) AS OUT_CNT
                     , 0 AMT
                   <!--
                   2017.12.05 김찬영 조회 시 오래 걸리는 부분 제외...(부금계)
                   , SUM(NVL(A.PAMT,0) + NVL(B.PAMT,0) + NVL(C.PAMT,0)) AMT
                   -->
            FROM (
                    SELECT EVT.ACCNT_NO
                         , EVT.EVENT_REG_DAY
                         , EVT.EVENT_PROC_DAY
                         , EVT.EVENT_COMP_DAY
                         , CASE WHEN NVL(EVT.ETC_PRN_SI_NM, '') IN ('서울', '경기', '인천') THEN 1
                                ELSE 0 END AS CAPI
                         , CASE WHEN NVL(EVT.ETC_PRN_SI_NM, '') IN ('서울', '경기', '인천') THEN 0
                                ELSE 1 END AS NO_CAPI
                         , CASE WHEN B.SEQ IS NULL THEN 0 ELSE 1 END DIR_CNT
                         , CASE WHEN C.SEQ IS NULL THEN 0 ELSE 1 END OUT_CNT
                         , CFN_DT
                    FROM EVENT EVT LEFT OUTER JOIN (SELECT SEQ FROM FUNRL_RPT WHERE DEL_FG = 'N' GROUP BY SEQ ) B ON EVT.SEQ = B.SEQ
                               LEFT OUTER JOIN (SELECT SEQ FROM FUNRL_OUTSRC_MST WHERE DEL_FG = 'N' GROUP BY SEQ ) C ON EVT.SEQ = C.SEQ
                    WHERE DEL_FG = 'N'
                ) TBL
                <!--
                    2017.12.05 김찬영 조회 시 오래 걸리는 부분 제외...(부금계)
                    LEFT OUTER JOIN (SELECT /*+INDEX(PAY_MNG IDX_PAY_MNG_REAL_IMST) */ ACCNT_NO, SUM(PAY_AMT) PAMT
                                     FROM PAY_MNG
                                     WHERE DEL_FG = 'N'
                                     GROUP BY ACCNT_NO) A ON TBL.ACCNT_NO = A.ACCNT_NO
                    LEFT OUTER JOIN (SELECT /*+INDEX(PAY_MNG_DTL IDX_PAY_MNG_DTL_REAL_MST) */ ACCNT_NO, SUM(PAY_AMT) PAMT
                                     FROM PAY_MNG_DTL
                                     WHERE DEL_FG = 'N'
                                     GROUP BY ACCNT_NO) B ON TBL.ACCNT_NO = B.ACCNT_NO
                    LEFT OUTER JOIN (SELECT ACCNT_NO, SUM(PAY_AMT) PAMT
                                     FROM PAY_MNG_DTL1
                                     WHERE DEL_FG = 'N'
                                     GROUP BY ACCNT_NO) C ON TBL.ACCNT_NO = C.ACCNT_NO
                -->
    </select>


    <!-- 행사 상세 정보 -->
    <select id="DlwNewTypeEvntMap.getNewTypeDetailEvent" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : detailEvent -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeDetailEvent */
               EVENT.ACCNT_NO
             , FN_RPT_NO(EVENT.ACCNT_NO) AS RPT_NO
             , FN_RPT_GUBUN(EVENT.ACCNT_NO) AS RPT_GUBUN
             , EVENT.SEQ
             , M.MEM_NO
             , EVENT_REG_DAY AS EVENT_REG_DAY
             , EVENT_PROC_DAY AS EVENT_PROC_DAY
             , EVENT_COMP_DAY AS EVENT_COMP_DAY
             , '00' AS PROC_TM
             , '00' AS PROC_MM
             , CASE WHEN EVENT_PROC_DAY IS NULL THEN
                        ''
                    ELSE
                        '0000'
                    END PROC_TM_MM
             , '00' AS COMP_TM
             , '00' AS COMP_MM
             , CASE WHEN EVENT_PROC_DAY IS NULL THEN
                        ''
                    ELSE
                        '0000'
                    END COMP_TM_MM
             , EVENT_MAN
             , CASE WHEN EVENT_MAN = '01'
                    THEN '본인'
                    WHEN EVENT_MAN = '02'
                    THEN '양도'
                    ELSE ''
                END AS EVENT_NM
             , SORT
             , CASE WHEN SORT = '01'
                    THEN '장의'
                    WHEN SORT = '02'
                    THEN '결혼'
                    WHEN SORT = '03'
                    THEN '이벤트'
                    WHEN SORT = '04'
                    THEN '여행'
                    WHEN SORT = '05'
                    THEN '잔치'
                    ELSE ''
                END AS SORT_NM
             , VAL1
             , VAL2
             , VAL3
             , VAL4
             , VAL5
             , VAL6
             , VAL7
             , NVL(VAL7,' ') AS ENT_DAY
             , NVL(VAL7_H, ' ') AS ENT_TM
             , NVL(VAL7_M, ' ') AS ENT_MM
             , NVL(VAL7_H, ' ') || NVL(VAL7_M, ' ') AS ENT_TM_MM
             , VAL8
             , NVL(VAL8,' ') AS ACCEPT_DAY
             , NVL(VAL8_H, ' ') AS ACCEPT_TM
             , NVL(VAL8_M, ' ') AS ACCEPT_MM
             , NVL(VAL8_H, ' ') || NVL(VAL8_M, ' ') AS ACCEPT_TM_MM
             , VAL9
             , NVL(VAL9,' ') AS MOVE_DAY
             , NVL(VAL9_H, ' ') AS MOVE_TM
             , NVL(VAL9_M, ' ') AS MOVE_MM
             , NVL(VAL9_H, ' ') || NVL(VAL9_M, ' ') AS MOVE_TM_MM
             , WEDDING_OPT
             , CASE WHEN WEDDING_OPT = '01'
                    THEN '여행/야외촬영'
                    WHEN WEDDING_OPT = '02'
                    THEN '여행'
                    WHEN WEDDING_OPT = '03'
                    THEN '야외촬영'
                    ELSE ''
                END AS WEDDING_OPT_NM
             , ANNV
             , SOL_LUN
             , CASE WHEN SOL_LUN = '0'
                    THEN '양력'
                    WHEN SOL_LUN = '1'
                    THEN '음력'
                    ELSE ''
                END AS SOL_LUN_NM
             , EVENT_PLACE
             , NOTE
             , (SELECT NVL(SUM(PAY_AMT),0)
                  FROM PAY_MNG
                 WHERE PAY_MNG.ACCNT_NO = M.ACCNT_NO
                   AND DEL_FG = 'N' ) AS PAY_AMT
             , (SELECT NVL(SUM(DC_AMT),0)
                  FROM DC_AMT_REG
                 WHERE DC_AMT_REG.ACCNT_NO = M.ACCNT_NO ) AS DC_AMT
             , FN_MEM_NM(M.MEM_NO) AS MEM_NM
             , (SELECT HOME_TEL
                  FROM MEMBER
                 WHERE MEM_NO = M.MEM_NO ) AS HOME_TEL
             , FN_EMPLE_NM(M.EMPLE_NO) AS EMPLE_NM
             , M.EMPLE_NO
             , ERG_TEL
             , SEX
             , REL
             , AGERNG
             , DIE_RESON
             , LOC
             , BCNM
             , BCLOC
             , CFN_DT
             , NVL(CFN_DT,' ') AS CFN_DAY
             , NVL(CFN_H, ' ') AS CFN_TM
             , NVL(CFN_M, ' ') AS CFN_MM
             , NVL(CFN_H, ' ') || NVL(CFN_M, ' ') AS CFN_TM_MM
             , BRPLOT
             , RMK
             , CNL_RESON
             , CNL_REASON_CD
             , EVENT.NEW_YN
             , NVL((SELECT MAX(NO) FROM PAY_MNG WHERE ACCNT_NO = M.ACCNT_NO AND DEL_FG='N' GROUP BY ACCNT_NO ),0) AS NO
             , M.JOIN_DT
             , CASE WHEN P.PROD_CL ='03'
                    THEN TPD.TOT_MONTH_PAY_AMT
                    ELSE P.PROD_AMT
                END AS PROD_MO
             , (M.NEW_CHAN_GUNSU * P.MON_PAY_AMT ) AS NEW_CHAN_MONEY
             , FN_PROD_NM(M.PROD_CD) AS PROD_NM
             , SALE_CHN
             , CEMETERY
             , JIDOSATEL AS JIDOSA_TEL
             , WORKDEPT AS WORK_DEPT
             , NVL(ARRIVE_DT,' ') AS ARRIVE_DAY
             , NVL(ARR_H, ' ') AS ARRIVE_TM
             , NVL(ARR_M, ' ') AS ARRIVE_MM
             , NVL(ARR_H, ' ') || NVL(ARR_M, ' ') AS ARRIVE_TM_MM
             , NVL((SELECT SUM(PAY_AMT)
                  FROM PAY_MNG
                 WHERE ACCNT_NO = EVENT.ACCNT_NO
                   AND PAY_DAY > EVENT.EVENT_PROC_DAY
                   AND DEL_FG = 'N'
               ), 0) AS PAY_AFTER_EVENT
             , (NVL(TPD.TOT_ALLT_AMT,0) + NVL(TPD.TOT_ADD_AMT,0)) AS TOT_ALLT_AMT
             , (SELECT NVL(SUM(PAY_AMT),0) FROM PAY_MNG_DTL WHERE ACCNT_NO =M.ACCNT_NO AND DEL_FG = 'N') AS ALLT_AMT
             , (SELECT NVL(SUM(PAY_AMT),0) FROM PAY_MNG_DTL1 WHERE ACCNT_NO =M.ACCNT_NO AND DEL_FG = 'N') AS ADD_AMT
             , NVL(TPD.TOT_ALLT_AMT,0) AS EXTR_ALLT_AMT
             , NVL(TPD.TOT_ADD_AMT,0) AS EXTR_ADD_AMT
             , CASE WHEN P.PROD_CL = '03'
                    THEN NVL(TPD.TOT_MONTH_PAY_AMT, 0)
                    ELSE P.EXPR_NO * P.MON_PAY_AMT
                END AS TOT_MONTH_PAY_AMT
             , CASE WHEN P.PROD_CL = '03'
                    THEN NVL(TPD.TOT_CNT, 0)
                    ELSE P.EXPR_NO
                END AS TOT_CNT
             , NVL(( SELECT SUM(END_NO -ST_NO+1) FROM PRODUCT_DTL WHERE PROD_CD = M.PROD_CD AND ALLT_AMT > 0), 0) AS TOT_ALLT_CNT
             , NVL(( SELECT SUM(END_NO -ST_NO+1) FROM PRODUCT_DTL WHERE PROD_CD = M.PROD_CD AND ADD_AMT > 0), 0) AS TOT_ADD_CNT
             , NVL((SELECT NVL(COUNT(NO),0) FROM PAY_MNG_DTL WHERE ACCNT_NO =M.ACCNT_NO AND DEL_FG = 'N'), 0) AS ALLT_CNT
             , NVL((SELECT NVL(COUNT(NO),0) FROM PAY_MNG_DTL1 WHERE ACCNT_NO =M.ACCNT_NO AND DEL_FG = 'N'), 0) AS ADD_CNT
             , NVL(TPD.TOT_ALLT_AMT,0) - (SELECT NVL(SUM(PAY_AMT),0) FROM PAY_MNG_DTL WHERE ACCNT_NO =M.ACCNT_NO AND DEL_FG = 'N') AS REMAIN_ALLT_AMT
             , NVL(TPD.TOT_ADD_AMT,0) - (SELECT NVL(SUM(PAY_AMT),0) FROM PAY_MNG_DTL1 WHERE ACCNT_NO =M.ACCNT_NO AND DEL_FG = 'N') AS REMAIN_ADD_AMT
             , CASE WHEN P.PROD_CL = '03'
                    THEN NVL(TPD.TOT_MONTH_PAY_AMT,0) - (SELECT NVL(SUM(PAY_AMT),0) FROM PAY_MNG WHERE ACCNT_NO =M.ACCNT_NO AND DEL_FG = 'N') -  NVL(P.MON_PAY_AMT * NVL(M.NEW_CHAN_GUNSU,0),0)
                    ELSE ((SELECT NVL(PROD_AMT,0) FROM PRODUCT WHERE PROD_CD = M.PROD_CD AND DEL_FG = 'N') - (SELECT NVL(SUM(PAY_AMT),0) FROM PAY_MNG WHERE PAY_MNG.ACCNT_NO = M.ACCNT_NO  AND DEL_FG = 'N' ) -  (M.NEW_CHAN_GUNSU * (SELECT CAST(MON_PAY_AMT AS INT) FROM PRODUCT WHERE PROD_CD = M.PROD_CD AND DEL_FG = 'N')))
                END AS REMAIN_AMT
             , NVL(EVENT.CMS_WDRW_REQ_YN, 'N') AS CMS_WDRW_REQ_YN
             , M.JOIN_CL
             , CASE WHEN M.PAY_MTHD='04'
                    THEN CASE WHEN (SELECT NVL(DEL_FG,'Y') FROM CMS_MEM WHERE ACCNT_NO = M.ACCNT_NO) = 'N'
                              THEN 'N'
                              ELSE 'Y'
                          END
                    ELSE 'Y'
                END AS CMS_YN
            , NVL(CNL_WORK_YN,'N') AS CNL_WORK_YN
            , P.PROD_CL
            , (SELECT CELL
                 FROM MEMBER
                WHERE MEM_NO = M.MEM_NO ) AS CELL
            , FUNRL_PROC_YN AS FUNRL_PROC_YN
            , EVENT_PLACE_CL AS EVENT_PLACE_CL
            , FUNRL_HALL AS FUNRL_CD
            , (SELECT FUNRL_NM FROM FUNRL_HALL WHERE FUNRL_CD = EVENT.FUNRL_HALL) AS FUNRL_NM
            , (SELECT FUNRL_ZIP_CD || ')' || FUNRL_ADDR || NVL(' ' || FUNRL_ADDR2, '') FROM FUNRL_HALL WHERE FUNRL_CD = EVENT.FUNRL_HALL) AS FUNRL_ADDR
            , NVL(ETC_ZIP, '') AS ZIP
            , NVL(ETC_ADDR1, '') AS ADDR1
            , NVL(ETC_ADDR2, '') AS ADDR2
            , BUR_CRE_CL
            , CREMATION_CD
            , FN_COM_NM('0140', CREMATION_CD) AS CREMATION_NM
            , SHROUD_YN
            , CANCL_REG_MAN AS CNL_EMPLE_NO
            , FN_EMPLE_NM(CANCL_REG_MAN) AS CNL_EMPLE_NM
            , NVL(TO_CHAR(CANCL_REG_DM,'YYYYMMDD'), '') AS CANCEL_ACCEPT_DAY
            , NVL(TO_CHAR(CANCL_REG_DM,'HH24'), '') AS ca_tm /* jcy.track 미사용 */
            , NVL(TO_CHAR(CANCL_REG_DM,'MI'), '') AS ca_mm /* jcy.track 미사용 */

            /* , NVL(REPLACE(SUBSTR(CONVERT(VARCHAR,CANCL_REG_DM, 24),1,5),':',''),'') + '00000' AS ca_tm_mm jcy.track.01 화면에서 사용여부 검토, 임시로 아래라인으로 교체 */
            , '00000' AS ca_tm_mm /* jcy.track.01 화면에서 사용여부 검토 */

            , CANCL_NOTE AS CNL_RESULT
            , DEATHDAY AS DEATH_DAY
            , (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) EVT_MNGR_NM
            , (SELECT CELL FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) EVT_CELL
            , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), '') AS BRANCH
            , NVL(FN_DEPT_NM((SELECT DEPT_CD FROM EMPLOYEE WHERE EMPLE_NO = M.EMPLE_NO)), '') AS DEPT_NM
            , NVL((SELECT CELL FROM EMPLOYEE WHERE EMPLE_NO = M.EMPLE_NO), '') AS EMP_CELL
            , M.NEW_CHAN_GUNSU
            , NVL((SELECT CI_VAL FROM MEMBER WHERE MEM_NO = M.MEM_NO), '') AS CI_VAL
            , NVL((SELECT MAX(ORD_DT) FROM ORD_MST WHERE DEL_FG = 'N' AND RPT_NO = (SELECT RPT_NO FROM FUNRL_RPT WHERE DEL_FG = 'N' AND SEQ = EVENT.SEQ)), '') AS ORD_DT
            , NVL((SELECT MODEL_CL_NM FROM PRODUCT_MODEL_CL_CD WHERE MODEL_CL_CD = M.PROD_MODEL_KIND), '') AS MODEL_CL_NM
            , COMP_H
            , COMP_M
            , VAL7_H
            , VAL7_M
            , CFN_H
            , CFN_M
            , VAL8_H
            , VAL8_M
            , VAL9_H
            , VAL9_M
            , ARR_H
            , ARR_M
            , (SELECT CELL FROM MEMBER WHERE MEM_NO = M.MEM_NO) AS HTEL
            , M.PROD_CD
            , EVENT.EVT_ACCNO
            , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = M.ACCNT_NO AND DEL_FG = 'N' AND PAY_MTHD = '06'),0)
            + NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = M.ACCNT_NO AND DEL_FG = 'N' AND PAY_MTHD = '06'),0)
            + NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = M.ACCNT_NO AND DEL_FG = 'N' AND PAY_MTHD = '06'),0) PAY_CARD_AMT
            , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = M.ACCNT_NO AND DEL_FG = 'N' AND PAY_MTHD != '06'),0)
            + NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = M.ACCNT_NO AND DEL_FG = 'N' AND PAY_MTHD != '06'),0)
            + NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = M.ACCNT_NO AND DEL_FG = 'N' AND PAY_MTHD != '06'),0) PAY_CASH_AMT
           , (SELECT COUNT(*) FROM GONGJE_HIST WHERE GBIT <![CDATA[<]]> '03' AND CL IN('E','E_C') AND ACCNT_NO = #{accnt_no}) GCNT
           <!-- [ 실 사용금액  = 사용금액 - 취소금액 ]    (2018.01.30) 김찬영-->
           <!-- 
            , ( SELECT NVL(SUM(NVL(SUB_USE_AMT,0)) - SUM(NVL(SUB_CAN_AMT,0)) ,0)
                  FROM ( SELECT CASE WHEN TYPE = 'U' THEN SUM(AMT) ELSE 0 END AS SUB_USE_AMT 
                              , CASE WHEN TYPE = 'C' THEN SUM(AMT) ELSE 0 END AS SUB_CAN_AMT 
                           FROM CASH_HISTORY@TB_SHOPPING LINK_CH
                          WHERE 1=1
                            AND GOODS_ID =  #{accnt_no}
                          GROUP BY TYPE
                       )
              ) AS SHOP_USE_AMT
           -->
         FROM EVENT
        INNER JOIN MEM_PROD_ACCNT M
           ON M.ACCNT_NO = EVENT.ACCNT_NO
        INNER JOIN PRODUCT P
           ON P.PROD_CD = M.PROD_CD
         LEFT JOIN (SELECT ACCNT_NO
                         , MAX(NO)AS NO
                         , SUM(PAY_AMT) AS PAY_AMT_DTL
                      FROM PAY_MNG_DTL
                     WHERE DEL_FG='N'
                       AND ACCNT_NO = #{accnt_no}
                     GROUP BY ACCNT_NO
                   ) PD
           ON M.ACCNT_NO = PD.ACCNT_NO
         LEFT JOIN (SELECT PROD_CD
                         , SUM((END_NO -ST_NO+1) * MONTH_PAY_AMT) AS TOT_MONTH_PAY_AMT
                         , SUM((END_NO -ST_NO+1) * ALLT_AMT) AS TOT_ALLT_AMT
                         , SUM((END_NO -ST_NO+1) * ADD_AMT) AS TOT_ADD_AMT
                         , SUM(END_NO -ST_NO+1)  AS TOT_CNT
                           FROM PRODUCT_DTL
                           GROUP BY PROD_CD
                    ) TPD
           ON TPD.PROD_CD = M.PROD_CD
         LEFT OUTER JOIN(SELECT EVT_SEQ
                              , MAX(EVT_MNGR_CD) EVT_MNGR_CD
                           FROM EVENT_MNGR_REG
                          WHERE DEL_FG = 'N'
                            AND EVT_MNGR_GUBUN = '0001'
                          GROUP BY EVT_SEQ
                        )EMR
           ON EMR.EVT_SEQ = EVENT.SEQ
        WHERE EVENT.ACCNT_NO = #{accnt_no}
        <!-- 취소내역이 여러번 발생할 수 있으므로  seq를 이용해 상세 정보 조회 by lbk_2012_11_21 -->
          AND EVENT.SEQ = #{seq}
          <if test="event_stat_fg != null and event_stat_fg != ''">
            AND EVENT.DEL_FG = #{event_stat_fg}
          </if>
          AND M.PROD_CD = P.PROD_CD
    </select>

    <!-- 행사 매니저 등록? 정보 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtMngrRegList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtMngrRegList -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtMngrRegList */
               CASE WHEN A.EVT_MNGR_GUBUN = '0001'
                         AND
                         (
                          NVL((SELECT COUNT(*) FROM FUNRL_RPT WHERE DEL_FG = 'N' AND SEQ = #{evt_seq}), 0)
                          +
                          NVL((SELECT COUNT(*) FROM FUNRL_OUTSRC_MST WHERE DEL_FG = 'N' AND SEQ = #{evt_seq}), 0)
                         ) > 0
                    THEN 'F'
                    ELSE 'false'
               END CHKYN
             , 'RR' CRUD
             , A.IDNTT
             , A.EVT_SEQ
             , A.EVT_MNGR_GUBUN
             , A.EVT_MNGR_CD
             , (SELECT REAL_EVT_MNGR_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = A.EVT_MNGR_CD) AS REAL_EVT_MNGR_CD
             , (SELECT EMM.EVT_MNGR_NM FROM EVENT_MANAGER_MNG EMM WHERE EMM.EVT_MNGR_CD = A.EVT_MNGR_CD) AS EVT_MNGR_NM
             , A.WORK_DM
             , A.START_TIME
             , A.END_TIME
             , A.NUMBER_OF_DAY
             , A.OVER_TIME
             , A.PAY_AMT
             , A.PAY_ADD_AMT
             , GIVE_PAY_DM
             , A.NOTE
             , NVL(B.HMH_ADAY, 0) AS HMH_ADAY
             , NVL(B.HMM_ADAY, 0) AS HMM_ADAY
             , NVL(B.HMM_ADD_TIME, 0) AS HMM_ADD_TIME
          FROM EVENT_MNGR_REG A
          LEFT OUTER JOIN EVT_MNGR_ALOW_DATA B
            ON A.EVT_MNGR_GUBUN = B.EVT_MNGR_CL AND B.DEL_FG = 'N'
         WHERE A.EVT_SEQ = #{evt_seq}
           AND A.DEL_FG = 'N'
    </select>

    <!-- CP 직영, 외주 구분 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCpGubun" parameterType="map" resultType="string">
    <!-- DM sql-id : sql-task.xml : selectCpGubun -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeCpGubun */
               CASE WHEN NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMM.EVT_MNGR_CD)), '') = '0001'
                    THEN '직영'
                    WHEN NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMM.EVT_MNGR_CD)), '') = '0002'
                    THEN '외주'
                    ELSE ''
               END AS EMP_GUBUN
          FROM EVENT_MANAGER_MNG EMM
         WHERE EVT_MNGR_CD = #{evt_mngr_cd}
    </select>












    <!-- 직영 마스터 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirMst" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirMst -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirMst */
               RPT_NO
             , RPT_DT
             , SAVE_CL
             , FN_COM_NM('0149', SAVE_CL) AS SAVE_CL_NM
             , REMAIN_AMT
             , ADD_AMT
             , TOT_RECV_AMT
             , DEDUCT_AMT
             , TOT_COST_AMT
             , CARD_PAY_AMT
             , CASH_PAY_AMT
             , EVENT_NOTE
             , SEQ
             , PAY_CNT
             , PAYDTL_CNT
             , PAYDTL1_CNT
             , JOIN_ADD_IN_AMT
          FROM FUNRL_RPT
         WHERE DEL_FG = 'N'
           AND SEQ = #{seq}
    </select>

    <!-- 직영 행사품목(장례용품) 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirGdsList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirGdsList -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirGdsList */
               FRG.RPT_NO
             , FRG.DTL_SEQ
             , FRG.GDS_CD
             , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD) AS GDS_NM
             , FRG.QTY
             , FRG.UNIT_COST
             , FRG.AMT
             , FRG.BYUING_CD AS BUYING_COM
             , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = FRG.BYUING_CD) AS BUYING_COM_NM
             , FRG.PAY_OPT
             , FRG.NOTE
             , FRG.SITE_BUY_YN
             , FRG.GDS_CL
             , '' AS CHK_YN
             , 'RR' AS CRUD
             , NVL((SELECT STOCK_MNG_YN FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD), 'N') AS STOCK_MNG_YN
          FROM FUNRL_RPT FR
         INNER JOIN FUNRL_RPT_GOODS FRG
            ON FR.RPT_NO = FRG.RPT_NO
         LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON FRG.GDS_CD = B.GDS_CD
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
           AND FRG.GDS_CL = '0001'
           AND FRG.FRG_CL = '0001'
         ORDER BY B.PRN_ORDR_NO
    </select>

    <!-- 직영 행사품목(현장발주) 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirGdsListB" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirGdsListB -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirGdsListB */
               FRG.RPT_NO
             , FRG.DTL_SEQ
             , FRG.GDS_CD
             , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD) AS GDS_NM
             , FRG.QTY
             , FRG.UNIT_COST
             , FRG.AMT
             , FRG.BYUING_CD AS BUYING_COM
             , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = FRG.BYUING_CD) AS BUYING_COM_NM
             , FRG.BYUING_CD AS CUST_MR_CD
             , (SELECT STAFF_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = FRG.BYUING_CD) AS CUST_MR_CHARG_NM
             , FRG.PAY_OPT
             , FRG.NOTE
             , FRG.SITE_BUY_YN
             , FRG.GDS_CL
             , '' AS CHK_YN
             , 'RR' AS CRUD
             , NVL((SELECT STOCK_MNG_YN FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD), 'N') AS STOCK_MNG_YN
          FROM FUNRL_RPT FR
         INNER JOIN FUNRL_RPT_GOODS FRG
            ON FR.RPT_NO = FRG.RPT_NO
         LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON FRG.GDS_CD = B.GDS_CD
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
           AND FRG.GDS_CL = '0001'
           AND FRG.FRG_CL = '0002'
         ORDER BY B.PRN_ORDR_NO
    </select>

    <!-- 직영 행사품목(장례식장) 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirGdsListC" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirGdsListC -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirGdsListC */
               FRG.RPT_NO
             , FRG.DTL_SEQ
             , FRG.GDS_CD
             , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD) AS GDS_NM
             , FRG.QTY
             , FRG.UNIT_COST
             , FRG.AMT
             , FRG.BYUING_CD AS BUYING_COM
             , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = FRG.BYUING_CD) AS BUYING_COM_NM
             , FRG.PAY_OPT
             , FRG.NOTE
             , FRG.SITE_BUY_YN
             , FRG.GDS_CL
             , '' AS CHK_YN
             , 'RR' AS CRUD
             , NVL((SELECT STOCK_MNG_YN FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD), 'N') AS STOCK_MNG_YN
          FROM FUNRL_RPT FR
         INNER JOIN FUNRL_RPT_GOODS FRG
            ON FR.RPT_NO = FRG.RPT_NO
         LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON FRG.GDS_CD = B.GDS_CD
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
           AND FRG.GDS_CL = '0001'
           AND FRG.FRG_CL = '0003'
         ORDER BY B.PRN_ORDR_NO
    </select>

    <!-- 직영 행사품목(협력업체) 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirGdsListD" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirGdsListD -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirGdsListD */
               FRG.RPT_NO
             , FRG.DTL_SEQ
             , FRG.GDS_CD
             , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD) AS GDS_NM
             , FRG.QTY qty
             , FRG.UNIT_COST
             , FRG.AMT
             , FRG.BYUING_CD AS BUYING_COM
             , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = FRG.BYUING_CD) AS BUYING_COM_NM
             , FRG.PAY_OPT
             , FRG.NOTE
             , FRG.SITE_BUY_YN
             , FRG.GDS_CL
             , '' AS CHK_YN
             , 'RR' AS CRUD
             , NVL((SELECT STOCK_MNG_YN FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD), 'N') AS STOCK_MNG_YN
          FROM FUNRL_RPT FR
         INNER JOIN FUNRL_RPT_GOODS FRG
            ON FR.RPT_NO = FRG.RPT_NO
         LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON FRG.GDS_CD = B.GDS_CD
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
           AND FRG.GDS_CL = '0001'
           AND FRG.FRG_CL = '0004'
         ORDER BY B.PRN_ORDR_NO
    </select>

    <!-- 직영 행사품목(기타(용품/인력)) 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirGdsListE" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirGdsListE -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirGdsListE */
               FRG.RPT_NO
             , FRG.DTL_SEQ
             , FRG.GDS_CD
             , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD) AS GDS_NM
             , FRG.QTY
             , FRG.UNIT_COST
             , FRG.AMT
             , FRG.BYUING_CD AS BUYING_COM
             , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = FRG.BYUING_CD) AS BUYING_COM_NM
             , FRG.PAY_OPT
             , FRG.NOTE
             , FRG.SITE_BUY_YN
             , FRG.GDS_CL
             , '' AS CHK_YN
             , 'RR' AS CRUD
             , NVL((SELECT STOCK_MNG_YN FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD), 'N') AS STOCK_MNG_YN
          FROM FUNRL_RPT FR
         INNER JOIN FUNRL_RPT_GOODS FRG
            ON FR.RPT_NO = FRG.RPT_NO
         LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON FRG.GDS_CD = B.GDS_CD
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
           AND FRG.GDS_CL = '0001'
           AND FRG.FRG_CL = '0005'
         ORDER BY B.PRN_ORDR_NO
    </select>

    <!-- 직영 추가매출1 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirAddSale1List" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirAddSale1List -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirAddSale1List */
               FRG.RPT_NO
             , FRG.DTL_SEQ
             , FRG.GDS_CD
             , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD) AS GDS_NM
             , FRG.QTY
             , FRG.UNIT_COST
             , FRG.AMT
             , FRG.BYUING_CD AS BUYING_COM
             , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = FRG.BYUING_CD) AS BUYING_COM_NM
             , FRG.PAY_OPT
             , FRG.NOTE
             , FRG.SITE_BUY_YN
             , FRG.GDS_CL
             , FRG.SALES_AMT
             , FRG.BASIC_COST
             , FRG.MARGIN
             , '' AS CHK_YN
             , 'RR' AS CRUD
             , NVL((SELECT STOCK_MNG_YN FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FRG.GDS_CD), 'N') AS STOCK_MNG_YN
          FROM FUNRL_RPT FR
         INNER JOIN FUNRL_RPT_GOODS FRG
            ON FR.RPT_NO = FRG.RPT_NO
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
           AND FRG.GDS_CL = '0002'
    </select>

    <!-- 직영 추가매출2 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirAddSale2List" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirAddSale2List -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirAddSale2List */
               FRS.RPT_NO
             , FRS.DTL_SEQ
             , FRS.ITEM_CD
             , FRS.SALES_AMT
             , FRS.FEE_AMT
             , FRS.DC_RT
             , FRS.MARGIN
             , FRS.IPDATE
             , FRS.SALES_CD AS BUYING_CD
             , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = FRS.SALES_CD) AS BUYING_COM_NM
             , FRS.NOTE note
             , '' AS CHK_YN
             , 'RR' AS CRUD
          FROM FUNRL_RPT FR
         INNER JOIN FUNRL_RPT_SALES2 FRS
            ON FR.RPT_NO = FRS.RPT_NO
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
    </select>

    <!-- 직영 일반경비 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirNormlCostList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirNormlCostList -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirNormlCostList */
               FRC.RPT_NO
             , FRC.DTL_SEQ
             , FRC.COST_CD
             , FRC.PAY_OPT
             , FRC.AMT
             , FRC.NOTE
             , '' AS CHK_YN
             , 'RR' AS CRUD
          FROM FUNRL_RPT FR
         INNER JOIN FUNRL_PRT_COST FRC
            ON FR.RPT_NO = FRC.RPT_NO
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
    </select>

    <!-- 직영 결제정보 관련 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirPayList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirPayList -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirPayList */
               FRP.RPT_NO
             , FRP.DTL_SEQ
             , FRP.PAY_OPT
             , FRP.CARD_CD
             , FRP.APPR_NO
             , FRP.AMT
             , FRP.CARD_APPR_MTH
             , FRP.CARD_FEE
             , CARD_APP_DT
             , FRP.PAY_DT
             , '' AS CHK_YN
             , 'RR' AS CRUD
             , NVL(FRP.PAY_AMT_CASH, 0) AS PAY_AMT_CASH
             , NVL(FRP.ISU_NO, '') AS ISU_NO
          FROM FUNRL_RPT FR
         INNER JOIN FUNRL_RPT_PAYMENT FRP
            ON FR.RPT_NO = FRP.RPT_NO
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
    </select>

    <!-- 직영 결제정보 관련 조회 2 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptDirPayInfo" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptDirPayInfo -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptDirPayInfo */
               CASE WHEN TBL.payNo > (TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0)) THEN TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0) ELSE TBL.payNo END AS PAY_NO
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN FN_PAY_AMT_BY_CNT(TBL.payNo, 0, TBL.ACCNT_NO)
                    ELSE TBL.MON_PAY_AMT * CASE WHEN TBL.payNo > (TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0)) THEN TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0) ELSE TBL.payNo END
               END, 0) AS TOTAL_AMT
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN CONVERT(INT, FN_PAY_AMT_BY_CNT(TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0), 0, TBL.ACCNT_NO)) - CONVERT(INT, FN_PAY_AMT_BY_CNT(CASE WHEN TBL.payNo > (TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0)) THEN TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0) ELSE TBL.payNo END, 0, TBL.ACCNT_NO))
                    ELSE TBL.MON_PAY_AMT * (TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0)) - TBL.MON_PAY_AMT * CASE WHEN TBL.payNo > (TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0)) THEN TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0) ELSE TBL.payNo END
               END, 0) AS REMAIN_AMT
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN TBL.payAlltNo
                    ELSE 0
               END, 0) AS PAY_ALLT_NO
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN FN_ALLT_AMT_BY_CNT(TBL.payAlltNo, 0, TBL.ACCNT_NO)
                    ELSE 0
               END, 0) AS TOTAL_ALLT_AMT
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN CONVERT(INT, FN_ALLT_AMT_BY_CNT(TBL.ALLT_EXPR_NO, 0, TBL.ACCNT_NO)) - CONVERT(INT, FN_ALLT_AMT_BY_CNT(TBL.payAlltNo, 0, TBL.ACCNT_NO))
                    ELSE 0
               END, 0) AS REMAIN_ALLT_AMT
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN TBL.payAddNo
                    ELSE 0
               END, 0) AS PAY_ADD_NO
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN FN_ADD_AMT_BY_CNT(TBL.payAddNo, 0, TBL.ACCNT_NO)
                    ELSE 0
               END, 0) AS TOTAL_ADD_AMT
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN CONVERT(INT, FN_ADD_AMT_BY_CNT(TBL.ADD_EXPR_NO, 0, TBL.ACCNT_NO)) - CONVERT(INT, FN_ADD_AMT_BY_CNT(TBL.payAddNo, 0, TBL.ACCNT_NO))
                    ELSE 0
               END, 0) AS REMAIN_ADD_AMT
             , NVL(TBL.EXPR_NO, 0) AS EXPR_NO
             , NVL(TBL.ALLT_EXPR_NO, 0) AS ALLT_EXPR_NO
             , NVL(TBL.ADD_EXPR_NO, 0) AS ADD_EXPR_NO
             , NVL(TBL.PAY_TYPE, '0000') AS JOIN_TYPE
          FROM (
                SELECT
                     <if test="pay_no == null or pay_no == ''">
                       NVL(CASE WHEN NVL((SELECT PAY_CNT FROM FUNRL_RPT WHERE DEL_FG = 'N' AND SEQ = #{seq}), 0) != 0
                            THEN (SELECT PAY_CNT FROM FUNRL_RPT WHERE DEL_FG = 'N' AND SEQ = #{seq})
                            ELSE (SELECT MAX(NO) FROM PAY_MNG WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no})
                       END, 0) AS PAY_NO
                     </if>
                     <if test="pay_no != null and pay_no != ''">
                       #pay_no# AS PAY_NO
                     </if>
                     <if test="pay_allt_no == null or pay_allt_no == ''">
                     , NVL(CASE WHEN NVL((SELECT PAYDTL_CNT FROM FUNRL_RPT WHERE DEL_FG = 'N' AND SEQ = #{seq}), 0) != 0
                            THEN (SELECT PAYDTL_CNT FROM FUNRL_RPT WHERE DEL_FG = 'N' AND SEQ = #{seq})
                            ELSE (SELECT MAX(NO) FROM PAY_MNG_DTL WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no})
                       END, 0) AS PAY_ALLT_NO
                     </if>
                     <if test="pay_allt_no != null and pay_allt_no != ''">
                     , #pay_allt_no# AS PAY_ALLT_NO
                     </if>
                     <if test="pay_add_no == null or pay_add_no == ''">
                     , NVL(CASE WHEN NVL((SELECT PAYDTL1_CNT FROM FUNRL_RPT WHERE DEL_FG = 'N' AND SEQ = #{seq}), 0) != 0
                            THEN (SELECT PAYDTL1_CNT FROM FUNRL_RPT WHERE DEL_FG = 'N' AND SEQ = #{seq})
                            ELSE (SELECT MAX(NO) FROM PAY_MNG_DTL1 WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no})
                       END, 0) AS PAY_ADD_NO
                     </if>
                     <if test="pay_add_no != null and pay_add_no != ''">
                     , #payAddNo# AS PAY_ADD_NO
                     </if>

                     , NVL(PAY_TYPE, '000') AS PAY_TYPE
                     , MON_PAY_AMT
                     , #{accnt_no} AS ACCNT_NO
                     , CASE WHEN NVL(PAY_TYPE, '0000') = '002'
                            THEN (SELECT SUM(END_NO - ST_NO + 1) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD AND MONTH_PAY_AMT > 0)
                            ELSE EXPR_NO
                       END AS EXPR_NO
                     , CASE WHEN NVL(PAY_TYPE, '0000') = '002'
                            THEN (SELECT SUM(END_NO - ST_NO + 1) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD AND ALLT_AMT > 0)
                            ELSE EXPR_NO
                       END AS ALLT_EXPR_NO
                     , CASE WHEN NVL(PAY_TYPE, '0000') = '002'
                            THEN (SELECT SUM(END_NO - ST_NO + 1) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD AND ADD_AMT > 0)
                            ELSE EXPR_NO
                       END AS ADD_EXPR_NO
                  FROM PRODUCT P
                 WHERE PROD_CD = RIGHT(LEFT(#{accnt_no}, 6), 2)
               ) TBL
    </select>

    <!-- 외주 마스터 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptOutMst" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptOutMst -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptOutMst */
               FUNRL_OUTSRC_NO
             , RPT_DT
             , SAVE_CL
             , FN_COM_NM('0149', SAVE_CL) AS SAVE_CL_NM
             , REMAIN_AMT
             , EVENT_NOTE
             , PAY_CNT
             , PAY_DTL_CNT
             , PAY_DTL1_CNT
             , OUTSRC_CUSTMR_CD
             , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = OUTSRC_CUSTMR_CD) AS OUTSRC_CUSTMR_NM
             , OUTSRC_AMT
             , ADD_AMT
             , JOIN_ADD_IN_AMT
             , TOT_RECV_AMT
             <!-- , CASH_APPR_NO cashApprNo
             , APPR_AMT apprAmt -->
             , CARD_PAY_AMT
             , CASH_PAY_AMT
             , DEDUCT_AMT AS OUT_TOT_DED_AMT
             , NVL(CASE WHEN EVT_COST_OUT IS NULL
                           THEN (SELECT EVT_COST_OUT FROM PRODUCT WHERE PROD_CD = RIGHT(LEFT(#{accnt_no}, 6), 2))
                           ELSE EVT_COST_OUT
                       END, 0) AS EVT_COST_OUT
             , NVL(HQ_GDS_AMT, 0) AS HQ_GDS_AMT
             , NVL(TOT_EVT_COST_OUT, 0) AS TOT_EVT_COST_OUT
          FROM FUNRL_OUTSRC_MST
         WHERE DEL_FG = 'N'
           AND SEQ = #{seq}
    </select>

    <!-- 외주 행사 사용내역 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptOutDtl1List" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptOutDtl1List -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptOutDtl1List */
               FSD.FUNRL_OUTSRC_NO AS RPT_NO
             , FSD.DTL_SEQ
             , FSD.SERVICE_CONTENT
             , FSD.SERVICE_GDS
             , FSD.CUSTMR_NM
             , FSD.ADD_SERVICE
             , FSD.AMT
             , FSD.ALTERNATIVE_PROVIDERS
             , '' AS CHK_YN
             , 'RR' AS CRUD
          FROM FUNRL_OUTSRC_MST FR
         INNER JOIN FUNRL_SERVICE_DTL FSD
            ON FR.FUNRL_OUTSRC_NO = FSD.FUNRL_OUTSRC_NO
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
        ORDER BY FSD.DTL_SEQ
    </select>

    <!-- 외주 행사 사용물품 등록 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptOutDtl2List" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptOutDtl2List -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptOutDtl2List */
               FOG.FUNRL_OUTSRC_NO AS RPT_NO
             , FOG.DTL_SEQ
             , FOG.GDS_CD
             , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FOG.GDS_CD) AS GDS_NM
             , FOG.QTY
             , FOG.UNIT_COST
             , FOG.AMT
             , FOG.BYUING_CD AS BUYING_COM
             , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = FOG.BYUING_CD) AS BUYING_COM_NM
             , FOG.PAY_OPT
             , FOG.NOTE
             , '' AS CHK_YN
             , 'RR' AS CRUD
             , NVL((SELECT STOCK_MNG_YN FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FOG.GDS_CD), 'N') AS STOCK_MNG_YN
             , NVL(FOG.ADD_SALES_YN, '') AS ADD_SALES_YN
             , NVL(FOG.SALES_AMT, 0) AS SALES_AMT
             , NVL(FOG.MARGIN, 0) AS MARGIN
          FROM FUNRL_OUTSRC_MST FR
         INNER JOIN FUNRL_OUTSRC_GOODS FOG
            ON FR.FUNRL_OUTSRC_NO = FOG.FUNRL_OUTSRC_NO AND FOG_CL = '0002'
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
    </select>

    <!-- 외주 결제정보 관련 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptOutDtl4List" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptOutDtl4List -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptOutDtl4List */
               FRP.RPT_NO
             , FRP.DTL_SEQ
             , FRP.PAY_OPT
             , FRP.CARD_CD
             , FRP.APPR_NO
             , FRP.AMT
             , FRP.CARD_APPR_MTH
             , CARD_APP_DT
             , FRP.PAY_DT
             , '' AS CHK_YN
             , 'RR' AS CRUD
             , NVL(FRP.PAY_AMT_CASH, 0) AS PAY_AMT_CASH
             , NVL(FRP.ISU_NO, '') AS ISU_NO
          FROM FUNRL_OUTSRC_MST FR
         INNER JOIN FUNRL_OUTSRC_PAYMENT FRP
            ON FR.FUNRL_OUTSRC_NO = FRP.RPT_NO
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
    </select>

    <!-- 외주 행사 사용물품 등록 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptOutDtl5List" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptOutDtl5List -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptOutDtl5List */
               FOG.FUNRL_OUTSRC_NO AS RPT_NO
             , FOG.DTL_SEQ
             , FOG.GDS_CD
             , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FOG.GDS_CD) AS GDS_NM
             , FOG.QTY
             , FOG.UNIT_COST
             , FOG.AMT
             , FOG.BYUING_CD AS BUYING_COM
             , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = FOG.BYUING_CD) AS BUYING_COM_NM
             , FOG.PAY_OPT
             , FOG.NOTE
             , '' AS CHK_YN
             , 'RR' AS CRUD
             , NVL((SELECT STOCK_MNG_YN FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = FOG.GDS_CD), 'N') AS STOCK_MNG_YN
             , NVL(FOG.ADD_SALES_YN, '') AS ADD_SALES_YN
             , NVL(FOG.SALES_AMT, 0) AS SALES_AMT
             , NVL(FOG.MARGIN, 0) AS MARGIN
          FROM FUNRL_OUTSRC_MST FR
         INNER JOIN FUNRL_OUTSRC_GOODS FOG
            ON FR.FUNRL_OUTSRC_NO = FOG.FUNRL_OUTSRC_NO AND FOG_CL = '0001'
         WHERE FR.DEL_FG = 'N'
           AND FR.SEQ = #{seq}
    </select>

    <!-- 외주 행사 결제 정보 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRptOutPayInfo" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtRptOutPayInfo -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRptOutPayInfo */
               CASE WHEN TBL.payNo > (TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0)) THEN TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0) ELSE TBL.payNo END AS PAY_NO
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN FN_PAY_AMT_BY_CNT(TBL.payNo, 0, TBL.ACCNT_NO)
                    ELSE TBL.MON_PAY_AMT * CASE WHEN TBL.payNo > (TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0)) THEN TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0) ELSE TBL.payNo END
               END, 0) AS TOTAL_AMT
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN CONVERT(INT, FN_PAY_AMT_BY_CNT(TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0), 0, TBL.ACCNT_NO)) - CONVERT(INT, FN_PAY_AMT_BY_CNT(CASE WHEN TBL.payNo > (TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0)) THEN TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0) ELSE TBL.payNo END, 0, TBL.ACCNT_NO))
                    ELSE TBL.MON_PAY_AMT * (TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0)) - TBL.MON_PAY_AMT * CASE WHEN TBL.payNo > (TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0)) THEN TBL.EXPR_NO - NVL((SELECT NEW_CHAN_GUNSU FROM MEM_PROD_ACCNT WHERE ACCNT_NO = #{accnt_no}), 0) ELSE TBL.payNo END
               END, 0) AS remainAmt
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN TBL.payAlltNo
                    ELSE 0
               END, 0) AS PAY_ALLT_NO
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN FN_ALLT_AMT_BY_CNT(TBL.payAlltNo, 0, TBL.ACCNT_NO)
                    ELSE 0
               END, 0) AS TOTAL_ALLT_AMT
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN CONVERT(INT, FN_ALLT_AMT_BY_CNT(TBL.ALLT_EXPR_NO, 0, TBL.ACCNT_NO)) - CONVERT(INT, FN_ALLT_AMT_BY_CNT(TBL.payAlltNo, 0, TBL.ACCNT_NO))
                    ELSE 0
               END, 0) AS remain_Allt_Amt
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN TBL.payAddNo
                    ELSE 0
               END, 0) AS PAY_ADD_NO
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN FN_ADD_AMT_BY_CNT(TBL.payAddNo, 0, TBL.ACCNT_NO)
                    ELSE 0
               END, 0) AS TOTAL_ADD_AMT
             , NVL(CASE WHEN TBL.PAY_TYPE = '002'
                    THEN CONVERT(INT, FN_ADD_AMT_BY_CNT(TBL.ADD_EXPR_NO, 0, TBL.ACCNT_NO)) - CONVERT(INT, FN_ADD_AMT_BY_CNT(TBL.payAddNo, 0, TBL.ACCNT_NO))
                    ELSE 0
               END, 0) AS REMAIN_ADD_AMT
             , NVL(TBL.EXPR_NO, 0) AS EXPR_NO
             , NVL(TBL.ALLT_EXPR_NO, 0) AS ALLT_EXPR_NO
             , NVL(TBL.ADD_EXPR_NO, 0) AS ADD_EXPR_NO
             , NVL(TBL.PAY_TYPE, '0000') AS JOIN_TYPE
             , NVL((SELECT EVT_COST_OUT FROM PRODUCT WHERE PROD_CD = RIGHT(LEFT(#{accnt_no}, 6), 2)), 0) AS EVT_COST_OUT
          FROM (
                SELECT
                     <if test="pay_no == null or pay_no == ''">
                       NVL(CASE WHEN NVL((SELECT PAY_CNT FROM FUNRL_OUTSRC_MST WHERE DEL_FG = 'N' AND SEQ = #{seq}), 0) != 0
                            THEN (SELECT PAY_CNT FROM FUNRL_OUTSRC_MST WHERE DEL_FG = 'N' AND SEQ = #{seq})
                            ELSE (SELECT MAX(NO) FROM PAY_MNG WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no})
                       END, 0) AS PAY_NO
                     </if>
                     <if test="pay_no != null and pay_no != ''">
                       #pay_no# AS PAY_NO
                     </if>
                     <if test="pay_allt_no == null or pay_allt_no == ''">
                     , NVL(CASE WHEN NVL((SELECT PAY_DTL_CNT FROM FUNRL_OUTSRC_MST WHERE DEL_FG = 'N' AND SEQ = #{seq}), 0) != 0
                            THEN (SELECT PAY_DTL_CNT FROM FUNRL_OUTSRC_MST WHERE DEL_FG = 'N' AND SEQ = #{seq})
                            ELSE (SELECT MAX(NO) FROM PAY_MNG_DTL WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no})
                       END, 0) AS PAY_ALLT_NO
                     </if>
                     <if test="pay_allt_no != null and pay_allt_no != ''">
                     , #pay_allt_no# AS PAY_ALLT_NO
                     </if>
                     <if test="pay_add_no == null or pay_add_no == ''">
                     , NVL(CASE WHEN NVL((SELECT PAY_DTL1_CNT FROM FUNRL_OUTSRC_MST WHERE DEL_FG = 'N' AND SEQ = #{seq}), 0) != 0
                            THEN (SELECT PAY_DTL1_CNT FROM FUNRL_OUTSRC_MST WHERE DEL_FG = 'N' AND SEQ = #{seq})
                            ELSE (SELECT MAX(NO) FROM PAY_MNG_DTL1 WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no})
                       END, 0) AS PAY_ADD_NO
                     </if>
                     <if test="pay_add_no != null and pay_add_no != ''">
                     , #payAddNo# AS PAY_ADD_NO
                     </if>
                     , NVL(PAY_TYPE, '0000') AS PAY_TYPE
                     , MON_PAY_AMT
                     , #{accnt_no} AS ACCNT_NO
                     , CASE WHEN NVL(PAY_TYPE, '0000') = '002'
                            THEN (SELECT SUM(END_NO - ST_NO + 1) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD AND MONTH_PAY_AMT > 0)
                            ELSE EXPR_NO
                       END AS EXPR_NO
                     , CASE WHEN NVL(PAY_TYPE, '0000') = '002'
                            THEN (SELECT SUM(END_NO - ST_NO + 1) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD AND ALLT_AMT > 0)
                            ELSE EXPR_NO
                       END AS ALLT_EXPR_NO
                     , CASE WHEN NVL(PAY_TYPE, '0000') = '002'
                            THEN (SELECT SUM(END_NO - ST_NO + 1) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD AND ADD_AMT > 0)
                            ELSE EXPR_NO
                       END AS ADD_EXPR_NO
                  FROM PRODUCT P
                 WHERE PROD_CD = RIGHT(LEFT(#{accnt_no}, 6), 2)
               ) TBL
    </select>

    <!-- 외주 행사 결제 정보 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeWhMvYn" parameterType="map" resultType="string">
    <!-- DM sql-id : sql-task.xml : selectWhMvYn -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeWhMvYn */
               CASE WHEN NVL((SELECT COUNT(*)
                            FROM WH_MV_MST WMM
                                 INNER JOIN WH_MV_DTL WMD ON WMD.WH_MV_NO = WMM.WH_MV_NO
                           WHERE DEL_FG = 'N'
                             AND WH_OUT_NO IN (SELECT WH_OUT_NO
                                                 FROM WH_OUT_MST
                                                WHERE OUT_CL = '0002'
                                                  AND DEL_FG = 'N'
                                                  AND RPT_NO = (SELECT RPT_NO
                                                                  FROM FUNRL_RPT
                                                                 WHERE DEL_FG = 'N'
                                                                   AND SEQ = #{seq}))), 0) > 0
                    THEN 'Y'
                    ELSE 'N'
               END
         FROM DUAL
    </select>

    <!-- 외주 행사 결제 정보 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypePayAmtCash" parameterType="map" resultType="int">
    <!-- DM sql-id : sql-task.xml : selectPayAmtCash -->
        SELECT /* DlwNewTypeEvntMap.getNewTypePayAmtCash */
                (
                NVL((SELECT SUM(PAY_AMT)
                       FROM PAY_MNG
                      WHERE DEL_FG = 'N'
                        AND PAY_MTHD != '06'
                        AND ACCNT_NO = #{accnt_no}
                        AND PAY_DAY <![CDATA[<]]> (SELECT EVENT_PROC_DAY
                                                     FROM EVENT
                                                    WHERE DEL_FG = 'N'
                                                      AND ACCNT_NO = #{accnt_no})), 0)
                +
                NVL((SELECT SUM(PAY_AMT)
                       FROM PAY_MNG_DTL
                      WHERE DEL_FG = 'N'
                        AND PAY_MTHD != '06'
                        AND ACCNT_NO = #{accnt_no}
                        AND PAY_DAY <![CDATA[<]]> (SELECT EVENT_PROC_DAY
                                                     FROM EVENT
                                                    WHERE DEL_FG = 'N'
                                                      AND ACCNT_NO = #{accnt_no})), 0)
                +
                NVL((SELECT SUM(PAY_AMT)
                       FROM PAY_MNG_DTL1
                      WHERE DEL_FG = 'N'
                        AND PAY_MTHD != '06'
                        AND ACCNT_NO = #{accnt_no}
                        AND PAY_DAY <![CDATA[<]]> (SELECT EVENT_PROC_DAY
                                                     FROM EVENT
                                                    WHERE DEL_FG = 'N'
                                                      AND ACCNT_NO = #{accnt_no})), 0)
               )
          FROM DUAL
    </select>

    <!-- 장례식장 목록 건수 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeFunrlHallCount" parameterType="map" resultType="int">


        SELECT /* DlwNewTypeEvntMap.getNewTypeFunrlHallCount */
               COUNT(*)
          FROM FUNRL_HALL H
         WHERE 1=1
         <if test="funrl_nm != null and funrl_nm != ''">
             AND FUNRL_NM LIKE '%' || #{funrl_nm} ||'%'
         </if>
         <if test="loc_nm != null and loc_nm != ''">
             AND FUNRL_ADDR LIKE '%' || #{loc_nm} || '%'
         </if>
         <if test="gugun_nm != null and gugun_nm != ''">
             AND FUNRL_ADDR LIKE '%' || #{gugun_nm} || '%'
         </if>
    </select>

    <!-- 장례식장 목록 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeFunrlHallList" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectFunrlHallList -->

        SELECT /* DlwNewTypeEvntMap.getNewTypeFunrlHallList */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY ${orderBy} ${orderDirection}) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*
                  FROM (SELECT FUNRL_CD
                             , FUNRL_NM
                             , FUNRL_TEL
                             , REPLACE(SUBSTR(FUNRL_TEL,1,3), '-','') AS FUNRL_TEL1
                             , CASE WHEN FUNRL_TEL = ''
                                    THEN ''
                                    ELSE REPLACE(SUBSTR(SUBSTR(FUNRL_TEL, 1, LENGTH(FUNRL_TEL)-5),-4), '-', '')
                                END AS FUNRL_TEL2
                             , SUBSTR(FUNRL_TEL, -4) AS FUNRL_TEL3
                             , FUNRL_FAX
                             , REPLACE(SUBSTR(FUNRL_FAX,1,3), '-','') AS FUNRL_FAX1
                             , CASE WHEN LENGTH(NVL(FUNRL_FAX, '')) <![CDATA[<]]> 12 THEN '' ELSE REPLACE(SUBSTR(SUBSTR(FUNRL_FAX, 1, LENGTH(FUNRL_FAX)-5),-4), '-', '') END AS FUNRL_FAX2
                             , SUBSTR(FUNRL_FAX, -4) AS FUNRL_FAX3
                             , FUNRL_ZIP_CD
                             , FUNRL_ADDR
                             , FUNRL_ADDR2
                             , '' AS LOC_NM
                             , FUNRL_NOTE
                             , NVL(FUNRL_ZIP_CD || ')' || FUNRL_ADDR || NVL(FUNRL_ADDR2, ''), '') AS ADDR
                             , FUNRL_ZIP_CD || ')' || FUNRL_ADDR || NVL(' ' || FUNRL_ADDR2, '') AS FUNRL_ADDRESS
                          FROM FUNRL_HALL H
                         WHERE 1=1
                         <if test="funrl_nm != null and funrl_nm != ''">
                             AND FUNRL_NM LIKE '%' || #{funrl_nm} ||'%'
                         </if>
                         <if test="loc_nm != null and loc_nm != ''">
                             AND FUNRL_ADDR LIKE '%'|| #{loc_nm} ||'%'
                         </if>
                         <if test="gugun_nm != null and gugun_nm != ''">
                             AND FUNRL_ADDR LIKE '%'|| #{gugun_nm} ||'%'
                         </if>
                       ) X
                ) Z
     <if test="startLine != null and startLine != '' and endLine != null and endLine != ''">
         <![CDATA[
         WHERE PAGE_INDX >= #{startLine}
           AND PAGE_INDX < #{endLine}
         ]]>
     </if>
    </select>

    <!-- 행사등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeEvent" parameterType="map">
    <!-- DM sql-id : sql-task.xml : insertEvent -->
        /* DlwNewTypeEvntMap.insertNewTypeEvent */
        DECLARE
            SI                  VARCHAR2(20);
            ETC_PRN_SI_NM       VARCHAR2(20);
            ETC_LOC_NM          VARCHAR2(20);
            FUNRL_PRN_SI_NM     VARCHAR2(20);
            FUNRL_LOC_NM        VARCHAR2(20);
        BEGIN

        <if test="event_place_cl == 0001">
            ETC_PRN_SI_NM   := '';
            ETC_LOC_NM      := '';

            SELECT SUBSTR(NVL(MAX(B.FUNRL_ADDR),' '), 1, 3)
              INTO SI
              FROM FUNRL_HALL B
             WHERE B.FUNRL_CD = #{funrl_cd};

            FUNRL_PRN_SI_NM := CASE SI WHEN '강원도' THEN '강원'
                                            WHEN '경기도' THEN '경기'
                                            WHEN '경상남' THEN '경남'
                                            WHEN '경상북' THEN '경북'
                                            WHEN '광주광' THEN '광주'
                                            WHEN '대구광' THEN '대구'
                                            WHEN '대전광' THEN '대전'
                                            WHEN '부산광' THEN '부산'
                                            WHEN '서울특' THEN '서울'
                                            WHEN '세종특' THEN '세종'
                                            WHEN '울산광' THEN '울산'
                                            WHEN '인천광' THEN '인천'
                                            WHEN '전라남' THEN '전남'
                                            WHEN '전라북' THEN '전북'
                                            WHEN '제주특' THEN '제주'
                                            WHEN '충청남' THEN '충남'
                                            WHEN '충청북' THEN '충북'
                                            ELSE CASE SUBSTR(SI, 1, 2) WHEN '강원' THEN '강원'
                                                                   WHEN '경기' THEN '경기'
                                                                   WHEN '경남' THEN '경남'
                                                                   WHEN '경북' THEN '경북'
                                                                   WHEN '광주' THEN '광주'
                                                                   WHEN '대구' THEN '대구'
                                                                   WHEN '대전' THEN '대전'
                                                                   WHEN '부산' THEN '부산'
                                                                   WHEN '서울' THEN '서울'
                                                                   WHEN '세종' THEN '세종'
                                                                   WHEN '울산' THEN '울산'
                                                                   WHEN '인천' THEN '인천'
                                                                   WHEN '전남' THEN '전남'
                                                                   WHEN '전북' THEN '전북'
                                                                   WHEN '제주' THEN '제주'
                                                                   WHEN '충남' THEN '충남'
                                                                   WHEN '충북' THEN '충북'
                                                                   ELSE ''
                                                  END
                                    END;

            FUNRL_LOC_NM := CASE FUNRL_PRN_SI_NM WHEN '강원' THEN '강원'
                                                      WHEN '경기' THEN '경기'
                                                      WHEN '경남' THEN '경남'
                                                      WHEN '경북' THEN '경북'
                                                      WHEN '광주' THEN '전남'
                                                      WHEN '대구' THEN '경북'
                                                      WHEN '대전' THEN '충남'
                                                      WHEN '부산' THEN '경남'
                                                      WHEN '서울' THEN '서울'
                                                      WHEN '세종' THEN '충북'
                                                      WHEN '울산' THEN '경남'
                                                      WHEN '인천' THEN '인천'
                                                      WHEN '전남' THEN '전남'
                                                      WHEN '전북' THEN '전북'
                                                      WHEN '제주' THEN '제주'
                                                      WHEN '충남' THEN '충남'
                                                      WHEN '충북' THEN '충북'
                                                      ELSE ''
                                 END;
        </if>
        <if test="event_place_cl == 0002">

            SI              := NVL(SUBSTR(#{addr1},1,3), ' ');
            FUNRL_PRN_SI_NM := '';
            FUNRL_LOC_NM    := '';
            ETC_PRN_SI_NM   := CASE SI WHEN '강원도' THEN '강원'
                                          WHEN '경기도' THEN '경기'
                                          WHEN '경상남' THEN '경남'
                                          WHEN '경상북' THEN '경북'
                                          WHEN '광주광' THEN '광주'
                                          WHEN '대구광' THEN '대구'
                                          WHEN '대전광' THEN '대전'
                                          WHEN '부산광' THEN '부산'
                                          WHEN '서울특' THEN '서울'
                                          WHEN '세종특' THEN '세종'
                                          WHEN '울산광' THEN '울산'
                                          WHEN '인천광' THEN '인천'
                                          WHEN '전라남' THEN '전남'
                                          WHEN '전라북' THEN '전북'
                                          WHEN '제주특' THEN '제주'
                                          WHEN '충청남' THEN '충남'
                                          WHEN '충청북' THEN '충북'
                                          ELSE CASE SUBSTR(SI, 1, 2) WHEN '강원' THEN '강원'
                                                                 WHEN '경기' THEN '경기'
                                                                 WHEN '경남' THEN '경남'
                                                                 WHEN '경북' THEN '경북'
                                                                 WHEN '광주' THEN '광주'
                                                                 WHEN '대구' THEN '대구'
                                                                 WHEN '대전' THEN '대전'
                                                                 WHEN '부산' THEN '부산'
                                                                 WHEN '서울' THEN '서울'
                                                                 WHEN '세종' THEN '세종'
                                                                 WHEN '울산' THEN '울산'
                                                                 WHEN '인천' THEN '인천'
                                                                 WHEN '전남' THEN '전남'
                                                                 WHEN '전북' THEN '전북'
                                                                 WHEN '제주' THEN '제주'
                                                                 WHEN '충남' THEN '충남'
                                                                 WHEN '충북' THEN '충북'
                                                                 ELSE ''
                                                END
                                  END;

            ETC_LOC_NM := CASE ETC_PRN_SI_NM WHEN '강원' THEN '강원'
                                                  WHEN '경기' THEN '경기'
                                                  WHEN '경남' THEN '경남'
                                                  WHEN '경북' THEN '경북'
                                                  WHEN '광주' THEN '전남'
                                                  WHEN '대구' THEN '경북'
                                                  WHEN '대전' THEN '충남'
                                                  WHEN '부산' THEN '경남'
                                                  WHEN '서울' THEN '서울'
                                                  WHEN '세종' THEN '충북'
                                                  WHEN '울산' THEN '경남'
                                                  WHEN '인천' THEN '인천'
                                                  WHEN '전남' THEN '전남'
                                                  WHEN '전북' THEN '전북'
                                                  WHEN '제주' THEN '제주'
                                                  WHEN '충남' THEN '충남'
                                                  WHEN '충북' THEN '충북'
                                                  ELSE ''
                               END;
        </if>


        INSERT INTO EVENT
             ( SEQ
             , ACCNT_NO
             , EVENT_REG_DAY
             , EVENT_PROC_DAY
             , EVENT_COMP_DAY
             , COMP_H
             , COMP_M
             , EVENT_MAN
             , SORT
             , VAL1
             , VAL2
             , VAL3
             , VAL4
             , VAL5
             , VAL6
             , VAL7
             , VAL7_H
             , VAL7_M
             , VAL8
             , VAL8_H
             , VAL8_M
             , VAL9
             , VAL9_H
             , VAL9_M
             , WEDDING_OPT
             , ANNV
             , SOL_LUN
             , REG_DM
             , REG_MAN
             , NEW_YN
             , ERG_TEL
             , SEX
             , REL
             , AGERNG
             , DIE_RESON
             , LOC
             , BCNM
             , BCLOC
             , BRPLOT
             , CFN_DT
             , CFN_H
             , CFN_M
             , RMK
             , CNL_RESON
             , SALE_CHN
             , CEMETERY
             , WORKDEPT
             , JIDOSATEL
             , ARRIVE_DT
             , ARR_H
             , ARR_M
             , CMS_WDRW_REQ_YN
             , FUNRL_PROC_YN
             , BUR_CRE_CL
             , CREMATION_CD
             , SHROUD_YN
             , EVENT_PLACE_CL
             , FUNRL_HALL
             , ETC_ZIP
             , ETC_ADDR1
             , ETC_ADDR2
             , DEATHDAY
             , EVENT_PLACE<!-- 의전 전체 반영시 제거LBK_IMSI -->
             , DEL_FG
             , ETC_PRN_SI_NM
             , ETC_LOC_NM
             , EVT_ACCNO
             )
        SELECT A.SEQ
             , #{accnt_no}
             , #{event_reg_day}
             , #{event_proc_day}
             , #{event_comp_day}
             , #{comp_h}
             , #{comp_m}
             , #{event_man}
             , #{sort}
             , #{val1}
             , #{val2}
             , #{val3}
             , #{val4}
             , #{val5}
             , #{val6}
             , #{ent_day}
             , #{val7_h}
             , #{val7_m}
             , #{arrive_day}
             , #{val8_h}
             , #{val8_m}
             , #{move_day}
             , #{val9_h}
             , #{val9_m}
             , #{wedding_opt}
             , #{annv}
             , #{sol_lun}
             , SYSDATE
             , #{reg_man}
             , 'Y'
             , #{erg_tel}
             , #{sex}
             , #{rel}
             , #{agerng}
             , #{die_reson}
             , #{loc}
             , #{bcnm}
             , #{bcloc}
             , #{brplot}
             , #{cfn_day}
             , #{cfn_h}
             , #{cfn_m}
             , #{rmk}
             , #{cnl_reson}
             , #{sale_chn}
             , #{cemetery}
             , #{work_dept}
             , #{jidosa_tel}
             , #{arrive_day}
             , #{arr_h}
             , #{arr_m}
             , #{cms_wdrw_req_yn}
             , #{funrl_proc_yn}
             , #{bur_cre_cl}
             , #{cremation_cd}
             , #{shroud_yn}
             , #{event_place_cl}
             , #{funrl_cd}
             , #{zip}
             , #{addr1}
             , #{addr2}
             , #{death_day}
             , #{event_place}<!-- 의전 전체 반영시 제거lbk_imsi -->
             , 'N'
             <if test="event_place_cl == '0001'">
             , FUNRL_PRN_SI_NM
             , FUNRL_LOC_NM
             </if>
             <if test="event_place_cl == '0002'">
             , ETC_PRN_SI_NM
             , ETC_LOC_NM
             </if>
             <if test="event_place_cl == null or event_place_cl == ''">
             , ''
             , ''
             </if>
             , #{evt_accno}
          FROM (SELECT NVL(MAX(SEQ) + 1, '1') AS SEQ
                  FROM EVENT
               ) A
         WHERE (SELECT COUNT(*)
                  FROM EVENT
                 WHERE ACCNT_NO = #{accnt_no}
                   AND DEL_FG = 'N') <![CDATA[<=]]> 0;
        END;
    </insert>

    <!-- 행사수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeEvent" parameterType="map">
    <!-- DM sql-id : sql-task.xml : updateEvent -->
        /* DlwNewTypeEvntMap.updateNewTypeEvent */
        DECLARE
            SI              VARCHAR2(20);
            ETC_PRN_SI_NM   VARCHAR2(20);
            ETC_LOC_NM      VARCHAR2(20);
            FUNRL_PRN_SI_NM VARCHAR2(20);
            FUNRL_LOC_NM    VARCHAR2(20);

        BEGIN
        <if test="event_place_cl == '0001'">
            ETC_PRN_SI_NM   := '';
            ETC_LOC_NM      := '';

            SELECT SUBSTR(NVL(MAX(B.FUNRL_ADDR),' '), 1, 3)
              INTO SI
              FROM FUNRL_HALL B
             WHERE B.FUNRL_CD = #{funrl_cd};

            FUNRL_PRN_SI_NM := CASE SI WHEN '강원도' THEN '강원'
                                            WHEN '경기도' THEN '경기'
                                            WHEN '경상남' THEN '경남'
                                            WHEN '경상북' THEN '경북'
                                            WHEN '광주광' THEN '광주'
                                            WHEN '대구광' THEN '대구'
                                            WHEN '대전광' THEN '대전'
                                            WHEN '부산광' THEN '부산'
                                            WHEN '서울특' THEN '서울'
                                            WHEN '세종특' THEN '세종'
                                            WHEN '울산광' THEN '울산'
                                            WHEN '인천광' THEN '인천'
                                            WHEN '전라남' THEN '전남'
                                            WHEN '전라북' THEN '전북'
                                            WHEN '제주특' THEN '제주'
                                            WHEN '충청남' THEN '충남'
                                            WHEN '충청북' THEN '충북'
                                            ELSE CASE SUBSTR(SI, 1, 2) WHEN '강원' THEN '강원'
                                                                   WHEN '경기' THEN '경기'
                                                                   WHEN '경남' THEN '경남'
                                                                   WHEN '경북' THEN '경북'
                                                                   WHEN '광주' THEN '광주'
                                                                   WHEN '대구' THEN '대구'
                                                                   WHEN '대전' THEN '대전'
                                                                   WHEN '부산' THEN '부산'
                                                                   WHEN '서울' THEN '서울'
                                                                   WHEN '세종' THEN '세종'
                                                                   WHEN '울산' THEN '울산'
                                                                   WHEN '인천' THEN '인천'
                                                                   WHEN '전남' THEN '전남'
                                                                   WHEN '전북' THEN '전북'
                                                                   WHEN '제주' THEN '제주'
                                                                   WHEN '충남' THEN '충남'
                                                                   WHEN '충북' THEN '충북'
                                                                   ELSE ''
                                                  END
                                    END;

            FUNRL_LOC_NM := CASE FUNRL_PRN_SI_NM WHEN '강원' THEN '강원'
                                                      WHEN '경기' THEN '경기'
                                                      WHEN '경남' THEN '경남'
                                                      WHEN '경북' THEN '경북'
                                                      WHEN '광주' THEN '전남'
                                                      WHEN '대구' THEN '경북'
                                                      WHEN '대전' THEN '충남'
                                                      WHEN '부산' THEN '경남'
                                                      WHEN '서울' THEN '서울'
                                                      WHEN '세종' THEN '충북'
                                                      WHEN '울산' THEN '경남'
                                                      WHEN '인천' THEN '인천'
                                                      WHEN '전남' THEN '전남'
                                                      WHEN '전북' THEN '전북'
                                                      WHEN '제주' THEN '제주'
                                                      WHEN '충남' THEN '충남'
                                                      WHEN '충북' THEN '충북'
                                                      ELSE ''
                                 END;
        </if>
        <if test="event_place_cl == '0002'">
            SI              := NVL(SUBSTR(#{addr1}, 1, 3), '');
            FUNRL_PRN_SI_NM := '';
            FUNRL_LOC_NM    := '';

            ETC_PRN_SI_NM   := CASE SI WHEN '강원도' THEN '강원'
                                      WHEN '경기도' THEN '경기'
                                      WHEN '경상남' THEN '경남'
                                      WHEN '경상북' THEN '경북'
                                      WHEN '광주광' THEN '광주'
                                      WHEN '대구광' THEN '대구'
                                      WHEN '대전광' THEN '대전'
                                      WHEN '부산광' THEN '부산'
                                      WHEN '서울특' THEN '서울'
                                      WHEN '세종특' THEN '세종'
                                      WHEN '울산광' THEN '울산'
                                      WHEN '인천광' THEN '인천'
                                      WHEN '전라남' THEN '전남'
                                      WHEN '전라북' THEN '전북'
                                      WHEN '제주특' THEN '제주'
                                      WHEN '충청남' THEN '충남'
                                      WHEN '충청북' THEN '충북'
                                      ELSE CASE SUBSTR(SI, 1, 2) WHEN '강원' THEN '강원'
                                                             WHEN '경기' THEN '경기'
                                                             WHEN '경남' THEN '경남'
                                                             WHEN '경북' THEN '경북'
                                                             WHEN '광주' THEN '광주'
                                                             WHEN '대구' THEN '대구'
                                                             WHEN '대전' THEN '대전'
                                                             WHEN '부산' THEN '부산'
                                                             WHEN '서울' THEN '서울'
                                                             WHEN '세종' THEN '세종'
                                                             WHEN '울산' THEN '울산'
                                                             WHEN '인천' THEN '인천'
                                                             WHEN '전남' THEN '전남'
                                                             WHEN '전북' THEN '전북'
                                                             WHEN '제주' THEN '제주'
                                                             WHEN '충남' THEN '충남'
                                                             WHEN '충북' THEN '충북'
                                                             ELSE ''
                                            END
                              END;

            ETC_LOC_NM := CASE ETC_PRN_SI_NM WHEN '강원' THEN '강원'
                                              WHEN '경기' THEN '경기'
                                              WHEN '경남' THEN '경남'
                                              WHEN '경북' THEN '경북'
                                              WHEN '광주' THEN '전남'
                                              WHEN '대구' THEN '경북'
                                              WHEN '대전' THEN '충남'
                                              WHEN '부산' THEN '경남'
                                              WHEN '서울' THEN '서울'
                                              WHEN '세종' THEN '충북'
                                              WHEN '울산' THEN '경남'
                                              WHEN '인천' THEN '인천'
                                              WHEN '전남' THEN '전남'
                                              WHEN '전북' THEN '전북'
                                              WHEN '제주' THEN '제주'
                                              WHEN '충남' THEN '충남'
                                              WHEN '충북' THEN '충북'
                                              ELSE ''
                           END;
        </if>


        UPDATE EVENT
           SET EVENT_REG_DAY   = #{event_reg_day}
             <if test="event_proc_day != null and event_proc_day != ''">
             , EVENT_PROC_DAY  = #{event_proc_day}
             </if>
             <if test="event_comp_day != null and event_comp_day != ''">
             , EVENT_COMP_DAY  = #{event_comp_day}
             </if>
             <if test="comp_h != null and comp_h != ''">
             , COMP_H  = #{comp_h}
             </if>
             <if test="comp_m != null and comp_m != ''">
             , COMP_M  = #{comp_m}
             </if>
             , EVENT_MAN       = #{event_man}
             , SORT            = #{sort}
             , VAL1            = #{val1}
             <if test="val2 != null and val2 != ''">
             , VAL2            = #{val2}
             </if>
             <if test="val3 != null and val3 != ''">
             , VAL3            = #{val3}
             </if>
             <if test="val4 != null and val4 != ''">
             , VAL4            = #{val4}
             </if>
             <if test="val5 != null and val5 != ''">
             , VAL5            = #{val5}
             </if>
             <if test="val6 != null and val6 != ''">
             , VAL6            = #{val6}
             </if>
             <if test="ent_day != null and ent_day != ''">
             , VAL7            = #{ent_day}
             </if>
             <if test="val7_h != null and val7_h != ''">
             , VAL7_H          = #{val7_h}
             </if>
             <if test="val7_m != null and val7_m != ''">
             , VAL7_M          = #{val7_m}
             </if>
             <if test="arrive_day != null and arrive_day != ''">
             , VAL8            = #{accept_day}
             </if>
             <if test="val8_h != null and val8_h != ''">
             , VAL8_H          = #{val8_h}
             </if>
             <if test="val8_m != null and val8_m != ''">
             , VAL8_M          = #{val8_m}
             </if>
             <if test="move_day != null and move_day != ''">
             , VAL9            = #{move_day}
             </if>
             <if test="val9_h != null and val9_h != ''">
             , VAL9_H          = #{val9_h}
             </if>
             <if test="val9_m != null and val9_m != ''">
             , VAL9_M          = #{val9_m}
             </if>
             <if test="erg_tel != null and erg_tel != ''">
             , ERG_TEL         = #{erg_tel}
             </if>
             <if test="sex != null and sex != ''">
             , SEX             = #{sex}
             </if>
             <if test="rel != null and rel != ''">
             , REL             = #{rel}
             </if>
             <if test="agerng != null and agerng != ''">
             , AGERNG          = #{agerng}
             </if>
             <if test="die_reson != null and die_reson != ''">
             , DIE_RESON       = #{die_reson}
             </if>
             <if test="loc != null and loc != ''">
             , LOC             = #{loc}
             </if>
             <if test="bcnm != null and bcnm != ''">
             , BCNM            = #{bcnm}
             </if>
             <if test="bcloc != null and bcloc != ''">
             , BCLOC           = #{bcloc}
             </if>

             <if test="cfn_day != null and cfn_day != ''">
             , CFN_DT          = #{cfn_day}
             </if>
             <if test="cfn_h != null and cfn_h != ''">
             , CFN_H           = #{cfn_h}
             </if>
             <if test="cfn_m != null and cfn_m != ''">
             , CFN_M           = #{cfn_m}
             </if>
             <if test="rmk != null and rmk != ''">
             , RMK             = #{rmk}
             </if>
             <if test="cnl_reson != null and cnl_reson != ''">
             , CNL_RESON       = #{cnl_reson}
             </if>
             <if test="brplot != null and brplot != ''">
             , BRPLOT          = #{brplot}
             </if>
             <if test="wedding_opt != null and wedding_opt != ''">
             , WEDDING_OPT     = #{wedding_opt}
             </if>
             <if test="annv != null and annv != ''">
             , ANNV            = #{annv}
             </if>

             <if test="sol_lun != null and sol_lun != ''">
             , SOL_LUN         = #{sol_lun}
             </if>
             , EVENT_PLACE     = #{event_place}
             , UPD_DM          = SYSDATE
             , UPD_MAN         = #{upd_man}
             <if test="del_fg == 'Y'">
             , DEL_FG          = #{del_fg}
             </if>
             <if test="sale_chn != null and sale_chn != ''">
             , SALE_CHN        = #{sale_chn}
             </if>
             <if test="cemetery != null and cemetery != ''">
             , CEMETERY        = #{cemetery}
             </if>
             <if test="jidosa_tel != null and jidosa_tel != ''">
             , JIDOSATEL       = #{jidosa_tel}
             </if>
             <if test="work_dept != null and work_dept != ''">
             , WORKDEPT        = #{work_dept}
             </if>
             <if test="arrive_day != null and arrive_day != ''">
             , ARRIVE_DT       = #{arrive_day}
             </if>
             <if test="arr_h != null and arr_h != ''">
             , ARR_H           = #{arr_h}
             </if>
             <if test="arr_m != null and arr_m != ''">
             , ARR_M           = #{arr_m}
             </if>
             <if test="cnl_reason_cd != null and cnl_reason_cd != ''">
             , CNL_REASON_CD   = #{cnl_reason_cd}
             </if>
             <if test="cms_wdrw_req_yn != null and cms_wdrw_req_yn != ''">
             , CMS_WDRW_REQ_YN = #{cms_wdrw_req_yn}
             </if>
             <if test="cnl_work_yn != null and cnl_work_yn != ''">
             , CNL_WORK_YN     = #{cnl_work_yn}
             </if>
             <if test="evt_accno != null and evt_accno != ''">
             , EVT_ACCNO       = #{evt_accno}
             </if>
             , FUNRL_PROC_YN   = NVL(#{funrl_proc_yn}, '')
             , BUR_CRE_CL      = NVL(#{bur_cre_cl}, '')
             , CREMATION_CD    = NVL(#{cremation_cd}, '')
             , SHROUD_YN       = NVL(#{shroud_yn}, '')
             , EVENT_PLACE_CL  = NVL(#{event_place_cl}, '')

             , FUNRL_HALL      = NVL(#{funrl_cd}, '')
             , ETC_ZIP         = NVL(#{zip}, '')
             , ETC_ADDR1       = NVL(#{addr1}, '')

             , ETC_ADDR2       = NVL(#{addr2}, '')

             , CANCL_REG_MAN   = NVL(#{cnl_emple_no}, '')
             <if test="cancel_accept_day != null and cancel_accept_day != ''">
             , CANCL_REG_DM    = NVL(#{cancel_accept_day}, '')
             </if>

             <if test="cancel_accept_day == null or cancel_accept_day == ''">
             , CANCL_REG_DM    = NULL
             </if>
             , CANCL_NOTE  = NVL(#{cnl_result}, '')

             <if test="death_day != null and death_day != ''">
             , DEATHDAY        = #{death_day}
             </if>
             <if test="death_day == null or death_day == ''">
             , DEATHDAY        = NULL
             </if>
             <if test="event_place_cl == '0001'">
             , ETC_PRN_SI_NM   = FUNRL_PRN_SI_NM
             , ETC_LOC_NM      = FUNRL_LOC_NM
             </if>
             <if test="event_place_cl == '0002'">
             , ETC_PRN_SI_NM   = ETC_PRN_SI_NM
             , ETC_LOC_NM      = ETC_LOC_NM
             </if>
             <if test="event_place_cl == null or event_place_cl == ''">
             , ETC_PRN_SI_NM   = ''
             , ETC_LOC_NM      = ''
             </if>

         WHERE ACCNT_NO        = #{accnt_no}
           AND SEQ             = #{seq};

        END;
    </update>

    <!-- 마감데이터 확인 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCloseDataSaveYnChk" parameterType="map" resultType="string">
    <!-- DM sql-id : sql-task.xml : closeDataSaveYnChk -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeCloseDataSaveYnChk */
               CASE WHEN NVL((SELECT CASE WHEN (RESN.RESN_CL = '02' OR (RESN.RESN_CL != '02' AND NVL(RESN.RESN_PROC_YN, 'N') = 'Y'))
                                             THEN 'PROC'
                                             ELSE 'NOPROC'
                                         END
                                   FROM RESCISSION RESN
                                  WHERE RESN.DEL_FG = 'N'
                                    AND RESN.ACCNT_NO = #{accnt_no}), ' ') = 'NOPROC'
                    THEN 'Y'
                    WHEN ( <!-- 마감권한없으면 어떤경우도 수정X -->
                          SUBSTR(#{close_dt},1,6) = NVL((SELECT CM.CLOSE_DT
                                                           FROM CLOSE_MNG CM
                                                          WHERE CM.DEL_FG = 'N'
                                                            AND SUBSTR(#{close_dt},1,6) = CM.CLOSE_DT), ' ')
                         )
                         AND
                         (
                          NVL((SELECT AUTH_GRP_CD
                                    FROM EMPLE_AUTH
                                   WHERE AUTH_GRP_CD = '0029'
                                     AND EMPLE_NO = #{emple_no}), ' ') != '0029'
                         )
                    THEN 'N'
                    WHEN ( <!-- 마감권한있어도 요청없으면 수정X -->
                          SUBSTR(#{close_dt},1,6) = NVL((SELECT CM.CLOSE_DT
                                                           FROM CLOSE_MNG CM
                                                          WHERE CM.DEL_FG = 'N'
                                                            AND SUBSTR(#{close_dt},1,6) = CM.CLOSE_DT), ' ')
                         )
                         AND
                         (
                          SUBSTR(#{close_dt},1,6) != NVL((SELECT CER.CLOSE_DT
                                                            FROM CLOSE_EDT_REQ CER
                                                           WHERE CER.ACCNT_NO = #{accnt_no}
                                                             AND CER.CLOSE_CL = #{close_cl}
                                                             AND CER.EDT_YN = 'Y'
                                                             AND CER.DEL_FG = 'N'
                                                           GROUP BY CER.CLOSE_DT), ' ')
                         )
                         AND
                         (
                          NVL((SELECT AUTH_GRP_CD
                            FROM EMPLE_AUTH
                           WHERE AUTH_GRP_CD = '0029'
                             AND EMPLE_NO = #{emple_no}), ' ') = '0029'
                         )
                    THEN 'N'
                    ELSE 'Y' <!-- 나머지는 모두 수정 가능 -->
               END EDT_YN
        FROM DUAL
    </select>

    <!-- 행사순번 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtSeq" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : selectEvtSeq -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtSeq */
               SEQ
             , SEQ      AS EVT_SEQ
             , ACCNT_NO
             , DEL_FG   AS EVENT_STAT_FG
          FROM EVENT
         WHERE DEL_FG = 'N'
           AND ACCNT_NO = #{accnt_no}
    </select>

    <!-- 취소 내역 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeCnclReg" parameterType="map">
    <!-- DM sql-id : sql-task.xml : cnclReg -->
        INSERT /* DlwNewTypeEvntMap.insertNewTypeCnclReg */
          INTO CNCL_BRKDN_MNG
             ( SEQ
             , ACCNT_NO
             , CL
             , REG_DM
             , REG_MAN
             )
        SELECT A.SEQ
             , #{accnt_no}
             , #{cl}
             , SYSDATE
             , #{reg_man}
          FROM (SELECT NVL(MAX(SEQ) + 1, '1') AS SEQ
                  FROM CNCL_BRKDN_MNG
               ) A
    </insert>

    <!-- 행사 등록 여부 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEventCheck" parameterType="map" resultType="int">
    <!-- DM sql-id : sql-task.xml : eventCheck -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeEventCheck */
               COUNT(1)
          FROM EVENT
         WHERE ACCNT_NO = #{accnt_no}
           AND DEL_FG = 'N'
    </select>

    <!-- 해약 처리 유무 검색 -->
    <select id="DlwNewTypeEvntMap.getNewTypeResnCheck" parameterType="map" resultType="int">
    <!-- DM sql-id : sql-task.xml : resnCheck -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeResnCheck */
               COUNT(*)
          FROM RESCISSION
         WHERE ACCNT_NO = #{accnt_no}
           AND DEL_FG = 'N'
    </select>

    <!-- 세무 처리 유무 검색 -->
    <select id="DlwNewTypeEvntMap.getNewTypeTaxtCheck" parameterType="map" resultType="int">
    <!-- DM sql-id : sql-task.xml : taxtCheck -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeTaxtCheck */
               COUNT(*)
          FROM TAXT_PROC
         WHERE SEQ = (SELECT SEQ
                        FROM TAXT_PROC
                       WHERE accnt_no = #{accnt_no}
                         AND REVL_DAY IS NULL)
           AND DEL_FG = 'N'
    </select>

    <!-- CMS 처리 유무 검색 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCmsCheck" parameterType="map" resultType="int">
    <!-- DM sql-id : sql-task.xml : cmsCheck -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeCmsCheck */
               COUNT(*)
          FROM CMS_MEM
         WHERE ACCNT_NO = #{accnt_no}
           AND DEL_FG = 'N'
    </select>

    <!-- 해약 시 CMS청구내역 신청전,신청중 건수 확인 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCmsReqCnt" parameterType="map" resultType="int">
    <!-- DM sql-id : sql-task.xml : cmsReqCnt -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeCmsReqCnt */
               (SELECT COUNT(*) AS CNT
                  FROM WDRW_REQ
                 WHERE ACCNT_NO = #{accnt_no}
                   AND (STAT ='01' OR STAT ='02'))
             + (SELECT COUNT(*) AS CNT
                  FROM CARD_WDRW_REQ
                 WHERE ACCNT_NO = #{accnt_no}
                   AND (STAT ='01' OR STAT ='02'))
          FROM DUAL
    </select>

    <!-- 상품구분 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeProdCl" parameterType="map" resultType="string">
    <!-- DM sql-id : sql-task.xml : selectProdCl -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeProdCl */
               PROD_CL
          FROM MEM_PROD_ACCNT MPA
         INNER JOIN PRODUCT PROD
            ON PROD.PROD_CD = MPA.PROD_CD
         WHERE MPA.ACCNT_NO = #{accnt_no}
    </select>

    <!-- jointype 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeJoinType" parameterType="map" resultType="string">
    <!-- DM sql-id : sql-task.xml : selectJoinType -->


        SELECT /* DlwNewTypeEvntMap.getNewTypeJoinType */
               NVL(JOIN_TYPE, '')
          FROM MEM_PROD_ACCNT MPA
         INNER JOIN PRODUCT PROD
            ON PROD.PROD_CD = MPA.PROD_CD
         WHERE MPA.ACCNT_NO = #{accnt_no}
    </select>

    <!-- 입금 총납입부금 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeAccntSearch" parameterType="map" resultType="resultMap">
    <!-- DM sql-id : sql-task.xml : accntSearch -->

        SELECT /* DlwNewTypeEvntMap.getNewTypeAccntSearch */
               JOIN_DT
             , NVL(B.NO,0) AS NO
             , CASE WHEN P.PROD_CL = '03' THEN TPD.TOT_MONTH_PAY_AMT
                    ELSE P.PROD_AMT
                END AS PROD_MO
             , M.NEW_CHAN_GUNSU * P.MON_PAY_AMT AS NEW_CHAN_MONEY
             , (SELECT NVL(SUM(DC_AMT),0)
                  FROM DC_AMT_REG
                 WHERE DC_AMT_REG.ACCNT_NO = M.ACCNT_NO) AS DC_AMT
             , NVL(TPD.TOT_ALLT_AMT,0) + NVL(TPD.TOT_ADD_AMT,0) AS TOT_ALLT_AMT
             , M.JOIN_CL
             , CASE WHEN P.PROD_CL = '03' THEN NVL(TPD.TOT_MONTH_PAY_AMT, 0)
                    ELSE P.EXPR_NO * P.MON_PAY_AMT
                END AS TOT_AMT
             , NVL(TPD.TOT_ALLT_AMT,0) AS EXTR_ALLT_AMT
             , NVL(TPD.TOT_ADD_AMT,0) AS EXTR_ADD_AMT
             , NVL(B.PAY_AMT,0) AS PAY_AMT
             , NVL(PD.PAY_AMT_DTL,0) AS ALLT_AMT
             , NVL(PD1.PAY_AMT_DTL1, 0) AS ADD_AMT
             , CASE WHEN P.PROD_CL = '03'
                    THEN NVL(TPD.TOT_MONTH_PAY_AMT,0) - B.PAY_AMT
                    ELSE ((SELECT NVL(PROD_AMT,0) FROM PRODUCT WHERE PROD_CD = M.PROD_CD AND DEL_FG = 'N') - B.PAY_AMT)
                END REMAIN_AMT
             , NVL(TPD.TOT_ALLT_AMT,0) - PD.PAY_AMT_DTL AS REMAIN_ALLT_AMT
             , NVL(TPD.TOT_ADD_AMT,0) - PD1.PAY_AMT_DTL1 AS REMAIN_ADD_AMT
             , P.PROD_CL
             , P.PROD_CD
             <!-- [ 실 사용금액  = 사용금액 - 취소금액 ]    (2018.01.25) -->
             <!-- 
             , ( SELECT NVL(SUM(NVL(SUB_USE_AMT,0)) - SUM(NVL(SUB_CAN_AMT,0)) ,0)
                   FROM ( SELECT CASE WHEN TYPE = 'U' THEN SUM(AMT) ELSE 0 END AS SUB_USE_AMT 
                               , CASE WHEN TYPE = 'C' THEN SUM(AMT) ELSE 0 END AS SUB_CAN_AMT 
                            FROM CASH_HISTORY@TB_SHOPPING LINK_CH
                           WHERE 1=1
                             AND GOODS_ID =  #{accnt_no}
                           GROUP BY TYPE
                        )
               ) AS SHOP_USE_AMT
            -->
          FROM MEM_PROD_ACCNT M
         INNER JOIN PRODUCT P ON P.PROD_CD = M.PROD_CD
                      LEFT JOIN (SELECT ACCNT_NO, MAX(NO)AS NO, SUM(PAY_AMT) AS PAY_AMT
                                   FROM PAY_MNG
                                  WHERE DEL_FG='N'
                                    AND ACCNT_NO = #{accnt_no}
                                  GROUP BY ACCNT_NO) B ON M.ACCNT_NO = B.ACCNT_NO
                       LEFT JOIN (SELECT ACCNT_NO, MAX(NO)AS NO, SUM(PAY_AMT) AS PAY_AMT_DTL
                                    FROM PAY_MNG_DTL
                                   WHERE DEL_FG='N'
                                     AND ACCNT_NO = #{accnt_no}
                                   GROUP BY ACCNT_NO) PD
                              ON M.ACCNT_NO = PD.ACCNT_NO
                       LEFT JOIN (SELECT ACCNT_NO, MAX(NO)AS NO, SUM(PAY_AMT) AS PAY_AMT_DTL1
                                    FROM PAY_MNG_DTL1
                                   WHERE DEL_FG='N'
                                     AND ACCNT_NO = #{accnt_no}
                                   GROUP BY ACCNT_NO) PD1 ON M.ACCNT_NO = PD.ACCNT_NO
                       LEFT JOIN (SELECT PROD_CD
                                       , SUM((END_NO - ST_NO+1) * MONTH_PAY_AMT) AS TOT_MONTH_PAY_AMT
                                       , SUM((END_NO - ST_NO+1) * ALLT_AMT) AS TOT_ALLT_AMT
                                       , SUM((END_NO - ST_NO+1) * ADD_AMT) AS TOT_ADD_AMT
                                    FROM PRODUCT_DTL
                                   GROUP BY PROD_CD
                                )TPD ON TPD.PROD_CD = M.PROD_CD
         WHERE M.ACCNT_NO = #{accnt_no}
           AND M.DEL_FG = 'N'
    </select>

    <!-- 행사 삭제 (MEM_PROD_ACCNT) -->
    <update id="DlwNewTypeEvntMap.deleteNewTypeEvent" parameterType="map">
    <!-- DM sql-id : sql-task.xml : eventDel -->
        UPDATE /* DlwNewTypeEvntMap.deleteNewTypeEvent */
               EVENT
           SET DEL_FG        = 'Y'
             , NEW_YN        = 'N'
             , CNL_REASON_CD = #{cnl_reason_cd}
             , CNL_RESON     = #{cnl_reson}
             , CNL_WORK_YN   = #{cnl_work_yn}
             , CANCL_REG_MAN = #{cnl_emple_no}
             <if test="cancel_accept_day != null and cancel_accept_day != ''">
             , CANCL_REG_DM  = TO_DATE(#{cancel_accept_day},'YYYYMMDDHH24MI')
             </if>
             <if test="cancel_accept_day == null or cancel_accept_day == ''">
             , CANCL_REG_DM  = NULL
             </if>
             , CANCL_NOTE    = #{cnl_result}
         WHERE ACCNT_NO = #{accnt_no}
           AND SEQ = #{seq}
           AND DEL_FG = 'N'

        <!--  UPDATE MEM_PROD_ACCNT
           SET LS_SND_END_YN = NULL
         WHERE ACCNT_NO = #{accnt_no}
           AND LS_SND_END_YN = 'Y' -->
    </update>

    <!-- 행사 newYn 체크 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtNewYnChk" parameterType="map" resultType="string">
    <!-- DM sql-id : sql-task.xml : evtNewYnChk -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtNewYnChk */
               NEW_YN
          FROM EVENT
         WHERE ACCNT_NO = #{accnt_no}
           AND DEL_FG = 'N'
    </select>

    <!-- 행사보고서 생성여부 체크 -->
    <select id="DlwNewTypeEvntMap.getNewTypeIsEvtRptGen" parameterType="map" resultType="string">
    <!-- DM sql-id : sql-task.xml : isEvtRptGen -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeIsEvtRptGen */
               CASE WHEN (NVL((SELECT COUNT(*)
                                    FROM FUNRL_RPT
                                   WHERE DEL_FG = 'N'
                                     AND SEQ = #{seq}), 0)
                               +
                          NVL((SELECT COUNT(*)
                                    FROM FUNRL_OUTSRC_MST
                                   WHERE DEL_FG = 'N'
                                     AND SEQ = #{seq}), 0)) > 0
                    THEN 'Y'
                    ELSE 'N'
               END
          FROM DUAL
    </select>

    <!-- 행사/해약 시 결합상품 할부원금 확인] Y(해지가능), F(해지불가) -->
    <select id="DlwNewTypeEvntMap.getNewTypeCheckB2bPay" parameterType="map" resultType="string">
    <!-- DM sql-id : sql-task.xml : checkB2bPay -->
        SELECT /* DlwNewTypeEvntMap.getNewTypeCheckB2bPay */
               CASE WHEN PT.PROD_CL = '03'
                    THEN CASE WHEN FN_EVENT(A.ACCNT_NO) = '청약철회' OR PM.PAY_NO <![CDATA[>=]]> PDENDNO
                              THEN 'Y'
                              ELSE 'F'
                          END
                    ELSE 'Y'
                END CHKFG
          FROM MEM_PROD_ACCNT A
         INNER JOIN PRODUCT PT ON PT.PROD_CD=A.PROD_CD
          LEFT JOIN (SELECT ACCNT_NO, MAX(NO) AS PAY_NO
                       FROM PAY_MNG
                      WHERE DEL_FG = 'N'
                        AND ACCNT_NO = #{accnt_no}
                      GROUP BY ACCNT_NO
                    ) PM
            ON A.ACCNT_NO = PM.ACCNT_NO
          LEFT JOIN (SELECT PROD_CD, MAX(PDENDNO) AS PDENDNO
                       FROM (SELECT P.PROD_CD
                                  , CASE WHEN (END_NO-ST_NO+1) * (PD.ALLT_AMT+ PD.ADD_AMT) <![CDATA[>]]> 0
                                         THEN END_NO
                                         ELSE 0
                                     END PDENDNO
                               FROM PRODUCT P
                               JOIN PRODUCT_DTL PD
                                 ON PD.PROD_CD = P.PROD_CD
                              WHERE P.PROD_CL ='03'
                             ) A
                      GROUP BY PROD_CD
                    ) P
            ON P.PROD_CD = A.PROD_CD
         WHERE A.DEL_FG ='N'
           AND A.ACCNT_NO = #{accnt_no}
    </select>

    <!-- 행사자 팝업 목록 건수 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeDlwManrCount" parameterType="map" resultType="int">

        SELECT /* DlwNewTypeEvntMap.getNewTypeDlwManrCount */
               COUNT(*)
          FROM EVENT_MANAGER_MNG A
            LEFT OUTER JOIN EVT_MNGR_ALOW_DATA B ON A.JOB_DUTY = B.EVT_MNGR_CL AND B.DEL_FG = 'N'
         WHERE A.DEL_FG = 'N'
           AND A.USE_YN = 'Y'
         <if test="mngr_nm != null and mngr_nm != ''">
             AND A.EVT_MNGR_NM LIKE '%' || #{mngr_nm} ||'%'
         </if>
         <if test="reg != null and reg != ''">
             <if test="reg = 'CP' ">
                 AND A.JOB_DUTY = '0001'
             </if>
         </if>
    </select>

    <!-- 행사자 팝업 목록 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeDlwMngrList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeDlwMngrList */
               *
          FROM (SELECT <if test="orderBy != null and orderBy != ''">
                           ROW_NUMBER() OVER(ORDER BY CNT) PAGE_INDX,
                       </if>
                       <if test="orderBy == null or orderBy == ''">
                           '' AS PAGE_INDX,
                       </if>
                       X.*
                  FROM (SELECT
                              ROW_NUMBER() OVER (ORDER BY A.EVT_MNGR_CD) AS CNT,
                              FN_COM_NM('0138', A.JOB_DUTY) GUBUN,
                              A.EVT_MNGR_NM AS MNGR_NM,
                              A.IDN_NO,
                              A.CELL,
                              A.REAL_EVT_MNGR_CD AS MNGR_CD,
                              A.JOB_DUTY,
                              A.EVT_MNGR_CD,
                              B.HMH_ADAY,
                              B.HMM_ADAY,
                              B.HMM_ADD_TIME,
                              A.EMP_GUBUN,
                              CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = A.EVT_MNGR_CD), '') = '' THEN NVL(A.BRANCH, '')
                                  ELSE NVL((SELECT (SELECT Z.BRANCH_CD FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = A.EVT_MNGR_CD)), '') 
                              END AS BRANCH,
                              CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = A.EVT_MNGR_CD), '') = '' THEN NVL(A.BRANCH, '')
                                  ELSE NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = A.EVT_MNGR_CD)), '') 
                              END AS BRANCH_NM
                        FROM EVENT_MANAGER_MNG A
                            LEFT OUTER JOIN EVT_MNGR_ALOW_DATA B ON A.JOB_DUTY = B.EVT_MNGR_CL AND B.DEL_FG = 'N'
                         WHERE A.DEL_FG = 'N'
                           AND A.USE_YN = 'Y'
                         <if test="mngr_nm != null and mngr_nm != ''">
                             AND A.EVT_MNGR_NM LIKE '%' || #{mngr_nm} ||'%'
                         </if>
                         <if test="reg != null and reg != ''">
                             <if test="reg = 'CP' ">
                                 AND A.JOB_DUTY = '0001'
                             </if>
                         </if>
                       ) X
                ) Z
    </select>

    <!-- 거래처 장례식장 팝업 목록 건수 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeFunrCount" parameterType="map" resultType="int">

        SELECT /* DlwNewTypeEvntMap.getNewTypeFunrCount */
               COUNT(*)
          FROM CUSTMR_MNG
         WHERE DEL_FG = 'N'
           AND CUSTMR_FG = '0004'
         <if test="custmr_nm != null and custmr_nm != ''">
             AND CUSTMR_NM LIKE '%' || #{custmr_nm} ||'%'
         </if>
         <if test="custmr_cd != null and custmr_cd != ''">
             AND CUSTMR_CD LIKE '%' || #{custmr_cd} ||'%'
         </if>
    </select>

    <!-- 거래처 장례식장 팝업 목록 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeFunrList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeFunrList */
               ROW_NUMBER() OVER(ORDER BY CUSTMR_CD) SEQ, CUSTMR_CD, CUSTMR_NM
          FROM CUSTMR_MNG
         WHERE DEL_FG = 'N'
           AND CUSTMR_FG = '0004'
         <if test="custmr_nm != null and custmr_nm != ''">
             AND CUSTMR_NM LIKE '%' || #{custmr_nm} ||'%'
         </if>
         <if test="custmr_cd != null and custmr_cd != ''">
             AND CUSTMR_CD LIKE '%' || #{custmr_cd} ||'%'
         </if>
    </select>

    <!-- 거래처 매입업체 팝업 목록 건수 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCustmrPopCount" parameterType="map" resultType="int">

        SELECT /* DlwNewTypeEvntMap.getNewTypeCustmrPopCount */
               COUNT(*)
          FROM CUSTMR_MNG
         WHERE DEL_FG = 'N'
           AND CUSTMR_FG = '0001'
         <if test="custmr_nm != null and custmr_nm != ''">
             AND CUSTMR_NM LIKE '%' || #{custmr_nm} ||'%'
         </if>
         <if test="custmr_cd != null and custmr_cd != ''">
             AND CUSTMR_CD LIKE '%' || #{custmr_cd} ||'%'
         </if>
    </select>

    <!-- 거래처 매입업체 팝업 목록 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCustmrPopList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeCustmrPopList */
               ROW_NUMBER() OVER(ORDER BY CUSTMR_CD) SEQ, CUSTMR_CD, CUSTMR_NM
          FROM CUSTMR_MNG
         WHERE DEL_FG = 'N'
           AND CUSTMR_FG = '0001'
         <if test="custmr_nm != null and custmr_nm != ''">
             AND CUSTMR_NM LIKE '%' || #{custmr_nm} ||'%'
         </if>
         <if test="custmr_cd != null and custmr_cd != ''">
             AND CUSTMR_CD LIKE '%' || #{custmr_cd} ||'%'
         </if>
    </select>

        <!-- 거래처 행사외주업체 팝업 목록 건수 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCustmrOutCount" parameterType="map" resultType="int">

        SELECT /* DlwNewTypeEvntMap.getNewTypeCustmrOutCount */
               COUNT(*)
          FROM CUSTMR_MNG
         WHERE DEL_FG = 'N'
           AND CUSTMR_FG = '0002'
         <if test="custmr_nm != null and custmr_nm != ''">
             AND CUSTMR_NM LIKE '%' || #{custmr_nm} ||'%'
         </if>
         <if test="custmr_cd != null and custmr_cd != ''">
             AND CUSTMR_CD LIKE '%' || #{custmr_cd} ||'%'
         </if>
    </select>

    <!-- 거래처 행사외주업체 팝업 목록 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCustmrOutList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeCustmrOutList */
               ROW_NUMBER() OVER(ORDER BY CUSTMR_CD) SEQ, CUSTMR_CD, CUSTMR_NM
          FROM CUSTMR_MNG
         WHERE DEL_FG = 'N'
           AND CUSTMR_FG = '0002'
         <if test="custmr_nm != null and custmr_nm != ''">
             AND CUSTMR_NM LIKE '%' || #{custmr_nm} ||'%'
         </if>
         <if test="custmr_cd != null and custmr_cd != ''">
             AND CUSTMR_CD LIKE '%' || #{custmr_cd} ||'%'
         </if>
    </select>

    <!-- 행사자 목록 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntMngrList" parameterType="map" resultType="resultMap">

            SELECT /* DlwNewTypeEvntMap.getNewTypeEvntMngrList */
                   A.IDNTT,
                   A.EVT_SEQ,
                   FN_COM_NM('0138',A.EVT_MNGR_GUBUN) MNGR_GUBUN,
                   A.EVT_MNGR_GUBUN AS JOB_DUTY,
                   B.REAL_EVT_MNGR_CD AS MNGR_CD,
                   A.EVT_MNGR_CD AS EVT_MNGR_CD,
                   B.EVT_MNGR_NM AS MNGR_NM,
                   A.WORK_DM,
                   A.START_TIME,
                   A.END_TIME,
                   A.NUMBER_OF_DAY,
                   A.OVER_TIME,
                   A.PAY_AMT,
                   A.PAY_ADD_AMT,
                   A.GIVE_PAY_DM,
                   (NVL(A.PAY_AMT,0) + NVL(A.PAY_ADD_AMT,0)) - NVL(TRUNC((NVL(A.PAY_AMT,0) + NVL(A.PAY_ADD_AMT,0)) * 0.03),0) - NVL(TRUNC(TRUNC((NVL(A.PAY_AMT,0) + NVL(A.PAY_ADD_AMT,0)) * 0.03) * 0.1),0) SAMT,
                   A.NOTE,
                   ' ' AS CHK,
                   B.EMP_GUBUN,
                   NVL(SUBSTR(B.IDN_NO,1,6),' ') IDN_NO
            FROM EVENT_MNGR_REG A
              LEFT OUTER JOIN EVENT_MANAGER_MNG B ON A.EVT_MNGR_CD = B.EVT_MNGR_CD AND B.DEL_FG = 'N'
            WHERE EVT_SEQ = #{evt_seq}
              AND A.DEL_FG = 'N'
            ORDER BY A.EVT_MNGR_GUBUN, A.IDNTT, B.EVT_MNGR_NM
    </select>

    <!-- 행사자 기초 수당 자료 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntMngrPayList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeEvntMngrPayList */
            EVT_MNGR_ALOW_CD,
            EVT_MNGR_CL,
            APP_DT,
            HMH_ADAY,
            HMM_ADAY,
            HMM_ADD_TIME,
            ALOW_RATE
        FROM EVT_MNGR_ALOW_DATA
        WHERE DEL_FG = 'N'
          AND APP_DT <![CDATA[<=]]> (SELECT EVENT_COMP_DAY FROM EVENT WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no})

    </select>

    <!-- 행사자 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeevntMngr" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.updateNewTypeevntMngr */
          EVENT_MNGR_REG
        SET EVT_MNGR_GUBUN = #{job_duty},
            EVT_MNGR_CD = #{evt_mngr_cd},
            WORK_DM = #{work_dm},
            START_TIME = #{start_time},
            END_TIME = #{end_time},
            NUMBER_OF_DAY = #{number_of_day},
            OVER_TIME = #{over_time},
            PAY_AMT = #{pay_amt},
            PAY_ADD_AMT = #{pay_add_amt},
            GIVE_PAY_DM = #{give_pay_dm},
            NOTE = #{note},
            UPD_DM = sysdate,
            UPD_MAN = #{upd_man}
        WHERE IDNTT = #{idntt}
    </update>

    <!-- 행사자 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeevntMngr" parameterType="map">
		BEGIN
	        INSERT /* DlwNewTypeEvntMap.insertNewTypeevntMngr */
	        INTO EVENT_MNGR_REG(EVT_SEQ, EVT_MNGR_GUBUN, EVT_MNGR_CD, WORK_DM,
	                            START_TIME, END_TIME, NUMBER_OF_DAY, OVER_TIME,
	                            PAY_AMT, PAY_ADD_AMT, GIVE_PAY_DM, NOTE, REG_DM, REG_MAN, DEL_FG)
	        VALUES(#{evt_seq}, #{job_duty}, #{evt_mngr_cd}, #{work_dm},
	               #{start_time}, #{end_time}, #{number_of_day}, #{over_time},
	               #{pay_amt}, #{pay_add_amt}, #{give_pay_dm}, #{note}, SYSDATE,  #{reg_man}, 'N') ;

        END;
    </insert>

    <!-- 행사자 삭제 -->
    <update id="DlwNewTypeEvntMap.deleteNewTypeRowMngr" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.deleteNewTypeRowMngr */
          EVENT_MNGR_REG
        SET DEL_FG = 'Y'
        WHERE IDNTT = #{idntt}
    </update>

    <!-- 품목 팝업 목록 조회 건수 -->
    <select id="DlwNewTypeEvntMap.getNewTypeGoodsCount" parameterType="map" resultType="int">

        SELECT /* DlwNewTypeEvntMap.getNewTypeGoodsCount */
               COUNT(*)
        FROM EVENT_GOODS_MNG_MST A
            LEFT OUTER JOIN EVENT_GOODS_MNG_DTL B ON A.GDS_CD = B.GDS_CD AND B.DEL_FG = 'N' AND B.MAJOR_ACCNT = 'Y'
        WHERE A.DEL_FG = 'N'
          AND NVL(A.STOCK_MNG_YN,' ') = 'Y'
         <if test="gds_cd != null and gds_cd != ''">
             AND A.REAL_GDS_CD LIKE '%' || #{gds_cd} || '%'
         </if>
         <if test="gds_nm != null and gds_nm != ''">
             AND A.GDS_NM LIKE '%' || #{gds_nm} || '%'
         </if>
    </select>

    <!-- 품목 팝업 조회 리스트-->
    <select id="DlwNewTypeEvntMap.getNewTypeGoodsList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeGoodsList */
               ROW_NUMBER()OVER(ORDER BY A.GDS_CD) CNT,
               A.REAL_GDS_CD,
               A.GDS_NM,
               A.STANDARD,
               A.GDS_CD,
               NVL(B.BUYING_COST,0) BUYING_COST,
               A.UNIT
        FROM EVENT_GOODS_MNG_MST A
            LEFT OUTER JOIN EVENT_GOODS_MNG_DTL B ON A.GDS_CD = B.GDS_CD AND B.DEL_FG = 'N' AND B.MAJOR_ACCNT = 'Y'
        WHERE A.DEL_FG = 'N'
          AND NVL(A.STOCK_MNG_YN,' ') = 'Y'
         <if test="gds_cd != null and gds_cd != ''">
             AND A.REAL_GDS_CD LIKE '%' || #{gds_cd} || '%'
         </if>
         <if test="gds_nm != null and gds_nm != ''">
             AND A.GDS_NM LIKE '%' || #{gds_nm} || '%'
         </if>
        ORDER BY A.GDS_CD
    </select>

    <!-- 행사보고서(직영) - 첫번째TAB (장례용품) 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeTab1JikList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeTab1JikList */
               '' AS CHK,
               A.SITE_BUY_YN,
               B.CUSTMR_NM AS BYUING_NM,
               A.BYUING_CD,
               C.GDS_NM,
               A.GDS_CD,
               A.QTY,
               A.UNIT_COST,
               A.AMT,
               A.PAY_OPT,
               A.NOTE,
               A.DTL_SEQ
        FROM FUNRL_RPT_GOODS A
            LEFT OUTER JOIN CUSTMR_MNG B ON A.BYUING_CD = B.CUSTMR_CD
            LEFT OUTER JOIN EVENT_GOODS_MNG_MST C ON A.GDS_CD = C.GDS_CD
        WHERE A.DEL_FG = 'N'
          AND A.RPT_NO = #{rpt_no}
          AND A.FRG_CL = '0001'
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(직영) - TAB_1 (장례용품) 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeJiktab1" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeJiktab1 */
              FUNRL_RPT_GOODS
          SET GDS_CD = #{gds_cd},
              QTY = #{qty},
              UNIT_COST = #{unit_cost},
              AMT = #{amt},
              BYUING_CD = #{byuing_cd},
              PAY_OPT = #{pay_opt},
              NOTE = #{note},
              UPD_DM = SYSDATE,
              UPD_MAN = #{upd_man},
              SITE_BUY_YN = #{site_buy_yn}
          WHERE RPT_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
            AND FRG_CL = '0001'
    </update>

    <!-- 행사보고서(직영) - TAB_1 (장례용품) 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeJiktab1" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeJiktab1 */
              INTO FUNRL_RPT_GOODS(RPT_NO, DTL_SEQ, GDS_CD, QTY, UNIT_COST,
                                   AMT, BYUING_CD, PAY_OPT, NOTE, REG_DM,
                                   REG_MAM, DEL_FG, SITE_BUY_YN, GDS_CL, FRG_CL)
            VALUES (#{rpt_no}
            , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_RPT_GOODS WHERE RPT_NO = #{rpt_no})
            , #{gds_cd}, #{qty}, #{unit_cost},
                    #{amt}, #{byuing_cd}, #{pay_opt}, #{note}, SYSDATE,
                    #{reg_man}, 'N', #{site_buy_yn}, '0001', '0001')
    </insert>

    <!-- 행사보고서(직영) - 두번째TAB (현장발주) 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeTab2JikList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeTab2JikList */
               '' AS CHK,
               A.SITE_BUY_YN,
               B.CUSTMR_NM AS BYUING_NM,
               A.BYUING_CD,
               C.GDS_NM,
               A.GDS_CD,
               A.QTY,
               A.UNIT_COST,
               A.AMT,
               A.PAY_OPT,
               A.NOTE,
               A.DTL_SEQ
        FROM FUNRL_RPT_GOODS A
            LEFT OUTER JOIN CUSTMR_MNG B ON A.BYUING_CD = B.CUSTMR_CD
            LEFT OUTER JOIN EVENT_GOODS_MNG_MST C ON A.GDS_CD = C.GDS_CD
        WHERE A.DEL_FG = 'N'
          AND A.RPT_NO = #{rpt_no}
          AND A.FRG_CL = '0002'
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(직영) - TAB_2 (현장발주) 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeJiktab2" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeJiktab2 */
              FUNRL_RPT_GOODS
          SET GDS_CD = #{gds_cd},
              QTY = #{qty},
              UNIT_COST = #{unit_cost},
              AMT = #{amt},
              BYUING_CD = #{byuing_cd},
              PAY_OPT = #{pay_opt},
              NOTE = #{note},
              UPD_DM = SYSDATE,
              UPD_MAN = #{upd_man},
              SITE_BUY_YN = #{site_buy_yn}
          WHERE RPT_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
            AND FRG_CL = '0002'
    </update>

    <!-- 행사보고서(직영) - TAB_2 (현장발주) 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeJiktab2" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeJiktab2 */
              INTO FUNRL_RPT_GOODS(RPT_NO, DTL_SEQ, GDS_CD, QTY, UNIT_COST,
                                   AMT, BYUING_CD, PAY_OPT, NOTE, REG_DM,
                                   REG_MAM, DEL_FG, SITE_BUY_YN, GDS_CL, FRG_CL)
            VALUES (#{rpt_no}
            , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_RPT_GOODS WHERE RPT_NO = #{rpt_no})
            , #{gds_cd}, #{qty}, #{unit_cost},
                    #{amt}, #{byuing_cd}, #{pay_opt}, #{note}, SYSDATE,
                    #{reg_man}, 'N', #{site_buy_yn}, '0001', '0002')
    </insert>

    <!-- 행사보고서(직영) - 세번째TAB (장례식장) 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeTab3JikList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeTab3JikList */
               '' AS CHK,
               A.SITE_BUY_YN,
               B.CUSTMR_NM AS BYUING_NM,
               A.BYUING_CD,
               C.GDS_NM,
               A.GDS_CD,
               A.QTY,
               A.UNIT_COST,
               A.AMT,
               A.PAY_OPT,
               A.NOTE,
               A.DTL_SEQ
        FROM FUNRL_RPT_GOODS A
            LEFT OUTER JOIN CUSTMR_MNG B ON A.BYUING_CD = B.CUSTMR_CD
            LEFT OUTER JOIN EVENT_GOODS_MNG_MST C ON A.GDS_CD = C.GDS_CD
        WHERE A.DEL_FG = 'N'
          AND A.RPT_NO = #{rpt_no}
          AND A.FRG_CL = '0003'
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(직영) - 세번째TAB (장례식장) 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeJiktab3" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeJiktab3 */
              FUNRL_RPT_GOODS
          SET GDS_CD = #{gds_cd},
              QTY = #{qty},
              UNIT_COST = #{unit_cost},
              AMT = #{amt},
              BYUING_CD = #{byuing_cd},
              PAY_OPT = #{pay_opt},
              NOTE = #{note},
              UPD_DM = SYSDATE,
              UPD_MAN = #{upd_man},
              SITE_BUY_YN = #{site_buy_yn}
          WHERE RPT_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
            AND FRG_CL = '0003'
    </update>

    <!-- 행사보고서(직영) - 세번째TAB (장례식장) 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeJiktab3" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeJiktab3 */
              INTO FUNRL_RPT_GOODS(RPT_NO, DTL_SEQ, GDS_CD, QTY, UNIT_COST,
                                   AMT, BYUING_CD, PAY_OPT, NOTE, REG_DM,
                                   REG_MAM, DEL_FG, SITE_BUY_YN, GDS_CL, FRG_CL)
            VALUES (#{rpt_no}
            , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_RPT_GOODS WHERE RPT_NO = #{rpt_no})
            , #{gds_cd}, #{qty}, #{unit_cost},
                    #{amt}, #{byuing_cd}, #{pay_opt}, #{note}, SYSDATE,
                    #{reg_man}, 'N', #{site_buy_yn}, '0001', '0003')
    </insert>

    <!-- 행사보고서(직영) - 네번째TAB (협력업체) 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeTab4JikList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeTab4JikList */
               '' AS CHK,
               A.SITE_BUY_YN,
               B.CUSTMR_NM AS BYUING_NM,
               A.BYUING_CD,
               C.GDS_NM,
               A.GDS_CD,
               A.QTY,
               A.UNIT_COST,
               A.AMT,
               A.PAY_OPT,
               A.NOTE,
               A.DTL_SEQ
        FROM FUNRL_RPT_GOODS A
            LEFT OUTER JOIN CUSTMR_MNG B ON A.BYUING_CD = B.CUSTMR_CD
            LEFT OUTER JOIN EVENT_GOODS_MNG_MST C ON A.GDS_CD = C.GDS_CD
        WHERE A.DEL_FG = 'N'
          AND A.RPT_NO = #{rpt_no}
          AND A.FRG_CL = '0004'
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(직영) - 네번째TAB (협력업체) 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeJiktab4" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeJiktab4 */
              FUNRL_RPT_GOODS
          SET GDS_CD = #{gds_cd},
              QTY = #{qty},
              UNIT_COST = #{unit_cost},
              AMT = #{amt},
              BYUING_CD = #{byuing_cd},
              PAY_OPT = #{pay_opt},
              NOTE = #{note},
              UPD_DM = SYSDATE,
              UPD_MAN = #{upd_man},
              SITE_BUY_YN = #{site_buy_yn}
          WHERE RPT_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
            AND FRG_CL = '0004'
    </update>

    <!-- 행사보고서(직영) - 네번째TAB (협력업체) 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeJiktab4" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeJiktab4 */
              INTO FUNRL_RPT_GOODS(RPT_NO, DTL_SEQ, GDS_CD, QTY, UNIT_COST,
                                   AMT, BYUING_CD, PAY_OPT, NOTE, REG_DM,
                                   REG_MAM, DEL_FG, SITE_BUY_YN, GDS_CL, FRG_CL)
            VALUES (#{rpt_no}
            , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_RPT_GOODS WHERE RPT_NO = #{rpt_no})
            , #{gds_cd}, #{qty}, #{unit_cost},
                    #{amt}, #{byuing_cd}, #{pay_opt}, #{note}, SYSDATE,
                    #{reg_man}, 'N', #{site_buy_yn}, '0001', '0004')
    </insert>

    <!-- 행사보고서(직영) - 다섯번째TAB (기타 용품/입력) 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeTab5JikList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeTab5JikList */
               '' AS CHK,
               A.SITE_BUY_YN,
               B.CUSTMR_NM AS BYUING_NM,
               A.BYUING_CD,
               C.GDS_NM,
               A.GDS_CD,
               A.QTY,
               A.UNIT_COST,
               A.AMT,
               A.PAY_OPT,
               A.NOTE,
               A.DTL_SEQ
        FROM FUNRL_RPT_GOODS A
            LEFT OUTER JOIN CUSTMR_MNG B ON A.BYUING_CD = B.CUSTMR_CD
            LEFT OUTER JOIN EVENT_GOODS_MNG_MST C ON A.GDS_CD = C.GDS_CD
        WHERE A.DEL_FG = 'N'
          AND A.RPT_NO = #{rpt_no}
          AND A.FRG_CL = '0005'
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(직영) - 다섯번째TAB (기타 용품/입력) 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeJiktab5" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeJiktab5 */
              FUNRL_RPT_GOODS
          SET GDS_CD = #{gds_cd},
              QTY = #{qty},
              UNIT_COST = #{unit_cost},
              AMT = #{amt},
              BYUING_CD = #{byuing_cd},
              PAY_OPT = #{pay_opt},
              NOTE = #{note},
              UPD_DM = SYSDATE,
              UPD_MAN = #{upd_man},
              SITE_BUY_YN = #{site_buy_yn}
          WHERE RPT_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
            AND FRG_CL = '0005'
    </update>

    <!-- 행사보고서(직영) - 다섯번째TAB (기타 용품/입력) 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeJiktab5" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeJiktab5 */
              INTO FUNRL_RPT_GOODS(RPT_NO, DTL_SEQ, GDS_CD, QTY, UNIT_COST,
                                   AMT, BYUING_CD, PAY_OPT, NOTE, REG_DM,
                                   REG_MAM, DEL_FG, SITE_BUY_YN, GDS_CL, FRG_CL)
            VALUES (#{rpt_no}
            , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_RPT_GOODS WHERE RPT_NO = #{rpt_no})
            , #{gds_cd}, #{qty}, #{unit_cost},
                    #{amt}, #{byuing_cd}, #{pay_opt}, #{note}, SYSDATE,
                    #{reg_man}, 'N', #{site_buy_yn}, '0001', '0005')
    </insert>

    <!-- 행사보고서(직영) - 여섯번째TAB 일반경비 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeTab6JikList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeTab6JikList */
               '' AS CHK,
               A.DTL_SEQ,
               A.COST_CD,
               A.RPT_NO,
               A.PAY_OPT,
               A.AMT,
               A.NOTE
        FROM FUNRL_PRT_COST A
        WHERE A.DEL_FG = 'N'
          AND A.RPT_NO = #{rpt_no}
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(직영) - 여섯번째TAB 일반경비 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeJiktab6" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeJiktab6 */
                  FUNRL_PRT_COST
          SET COST_CD = #{cost_cd},
                PAY_OPT = #{pay_opt},
                AMT     = #{amt},
                NOTE    = #{note},
                UPD_MAN = #{upd_man},
                UPD_DM  = SYSDATE
          WHERE RPT_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
    </update>

    <!-- 행사보고서(직영) - 여섯번째TAB 일반경비 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeJiktab6" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeJiktab6 */
                INTO FUNRL_PRT_COST(RPT_NO, DTL_SEQ, COST_CD, PAY_OPT, AMT, NOTE, DEL_FG, REG_DM, GRE_MAN)
            VALUES (#{rpt_no}
            , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_PRT_COST WHERE RPT_NO = #{rpt_no})
            , #{cost_cd}, #{pay_opt}, #{amt}, #{note}, 'N', SYSDATE, #{reg_man})
     </insert>

    <!-- 행사보고서(직영) - 일곱번째TAB 추가매출1 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeTab7JikList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeTab7JikList */
               '' AS CHK,
               A.SITE_BUY_YN,
               B.CUSTMR_NM AS BYUING_NM,
               A.BYUING_CD,
               C.GDS_NM,
               A.GDS_CD,
               A.QTY,
               A.UNIT_COST,
               A.AMT,
               A.PAY_OPT,
               A.NOTE,
               A.DTL_SEQ,
               A.SALES_AMT,
               A.BASIC_COST,
               A.MARGIN
        FROM FUNRL_RPT_GOODS A
            LEFT OUTER JOIN CUSTMR_MNG B ON A.BYUING_CD = B.CUSTMR_CD
            LEFT OUTER JOIN EVENT_GOODS_MNG_MST C ON A.GDS_CD = C.GDS_CD
        WHERE A.DEL_FG = 'N'
          AND A.RPT_NO = #{rpt_no}
          AND A.GDS_CL = '0002'
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(직영) - 일곱번째TAB 추가매출1 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeJiktab7" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeJiktab7 */
              FUNRL_RPT_GOODS
          SET GDS_CD = #{gds_cd},
              QTY = #{qty},
              UNIT_COST = #{unit_cost},
              AMT = #{amt},
              BYUING_CD = #{byuing_cd},
              PAY_OPT = #{pay_opt},
              NOTE = #{note},
              UPD_DM = SYSDATE,
              UPD_MAN = #{upd_man},
              SITE_BUY_YN = #{site_buy_yn},
              SALES_AMT = #{sales_amt},
              BASIC_COST = #{basic_cost},
              MARGIN = #{margin}
          WHERE RPT_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
            AND GDS_CL = '0002'
    </update>

    <!-- 행사보고서(직영) - 일곱번째TAB 추가매출1 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeJiktab7" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeJiktab7 */
              INTO FUNRL_RPT_GOODS(RPT_NO, DTL_SEQ, GDS_CD, QTY, UNIT_COST,
                                   AMT, BYUING_CD, PAY_OPT, NOTE, REG_DM,
                                   REG_MAM, DEL_FG, SITE_BUY_YN, GDS_CL,
                                   SALES_AMT, BASIC_COST, MARGIN)
            VALUES (#{rpt_no}
            , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_RPT_GOODS WHERE RPT_NO = #{rpt_no})
            , #{gds_cd}, #{qty}, #{unit_cost},
                    #{amt}, #{byuing_cd}, #{pay_opt}, #{note}, SYSDATE,
                    #{reg_man}, 'N', #{site_buy_yn}, '0002',
                    #{sales_amt}, #{basic_cost}, #{margin})
    </insert>

    <!-- 행사보고서(직영) - 여덟번째TAB 추가매출2 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeTab8JikList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeTab8JikList */
               '' AS CHK,
               A.RPT_NO,
               A.DTL_SEQ,
               A.ITEM_CD,
               A.SALES_AMT,
               A.DC_RT,
               A.MARGIN,
               A.IPDATE,
               A.SALES_CD,
               B.CUSTMR_NM AS SALES_NM,
               A.NOTE,
               A.FEE_AMT
        FROM FUNRL_RPT_SALES2 A
            LEFT OUTER JOIN CUSTMR_MNG B ON A.SALES_CD = B.CUSTMR_CD
        WHERE A.RPT_NO = #{rpt_no}
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(직영) - 여덟번째TAB 추가매출2 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeJiktab8" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeJiktab8 */
              FUNRL_RPT_SALES2
          SET ITEM_CD   = #{item_cd},
                SALES_AMT = #{sales_amt},
                DC_RT     = #{dc_rt},
                MARGIN    = #{margin},
                IPDATE    = #{ipdate},
                FEE_AMT   = #{fee_amt},
                SALES_CD  = #{sales_cd},
                NOTE      = #{note},
                UPD_DM    = SYSDATE,
                UPD_MAN   = #{upd_man}
          WHERE RPT_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
    </update>

    <!-- 행사보고서(직영) - 여덟번째TAB 추가매출2 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeJiktab8" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeJiktab8 */
              INTO FUNRL_RPT_SALES2(RPT_NO, DTL_SEQ, ITEM_CD, SALES_AMT, DC_RT,
                                     MARGIN, IPDATE, SALES_CD, NOTE, REG_DM, REG_MAN, FEE_AMT)
            VALUES (#{rpt_no}
            , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_RPT_SALES2 WHERE RPT_NO = #{rpt_no})
            , #{item_cd}, #{sales_amt}, #{dc_rt}, #{margin}, #{ipdate}, #{sales_cd}, #{note}, SYSDATE, #{reg_man}, #{fee_amt})
    </insert>

    <!-- 행사보고서(직영) - 이홉번째TAB 결제정보 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeTab9JikList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeTab9JikList */
               '' AS CHK,
               A.RPT_NO,
               A.DTL_SEQ,
               A.PAY_OPT,
               A.CARD_CD,
               A.APPR_NO,
               A.AMT,
               A.CARD_APPR_MTH,
               A.CARD_APP_DT,
               A.PAY_DT,
               A.CARD_FEE,
               A.PAY_AMT_CASH,
               A.ISU_NO
        FROM FUNRL_RPT_PAYMENT A
        WHERE A.RPT_NO = #{rpt_no}
          AND A.DEL_FG = 'N'
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(직영) - 이홉번째TAB 결제정보 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeJiktab9" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeJiktab9 */
              FUNRL_RPT_PAYMENT
          SET 	PAY_OPT   = #{pay_opt},
                CARD_CD   = #{card_cd},
                APPR_NO   = #{appr_no},
                AMT       = #{amt},
                CARD_APPR_MTH = #{card_appr_mth},
                PAY_DT    = #{pay_dt},
                CARD_APP_DT = #{card_app_dt},
                CARD_FEE  = #{card_fee},
                PAY_AMT_CASH = #{pay_amt_cash},
                ISU_NO    = #{isu_no},
                UPD_DM    = SYSDATE,
                UPD_MAN   = #{upd_man}
          WHERE RPT_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
    </update>

    <!-- 행사보고서(직영) - 이홉번째TAB 결제정보 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeJiktab9" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeJiktab9 */
              INTO FUNRL_RPT_PAYMENT(RPT_NO, DTL_SEQ, PAY_OPT, CARD_CD, APPR_NO,
                                     AMT, CARD_APPR_MTH, PAY_DT, CARD_APP_DT, CARD_FEE,
                                     PAY_AMT_CASH, ISU_NO, REG_MAN, REG_DM, DEL_FG)
            VALUES (#{rpt_no}
                , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = #{rpt_no})
                , #{pay_opt}, #{card_cd}, #{appr_no}
                , #{amt}, #{card_appr_mth}, #{pay_dt}, #{card_app_dt} , #{card_fee}
                , #{pay_amt_cash}, #{isu_no}, #{reg_man}, SYSDATE, 'N')
    </insert>

    <!-- 행사보고서(직영) - TAB_1 (장례용품) 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsTab1" parameterType="map">

        DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsTab1 */
            FROM FUNRL_RPT_GOODS
        WHERE RPT_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
    </delete>

    <!-- 행사보고서(직영) - TAB_2 (현장발주) 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsTab2" parameterType="map">

        DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsTab2 */
            FROM FUNRL_RPT_GOODS
        WHERE RPT_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
    </delete>

    <!-- 행사보고서(직영) - TAB_3 (장례식장) 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsTab3" parameterType="map">

        DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsTab3 */
            FROM FUNRL_RPT_GOODS
        WHERE RPT_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
    </delete>

    <!-- 행사보고서(직영) - TAB_4 (협력업체) 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsTab4" parameterType="map">

        DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsTab4 */
            FROM FUNRL_RPT_GOODS
        WHERE RPT_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
    </delete>

    <!-- 행사보고서(직영) - TAB_5 (기타용품) 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsTab5" parameterType="map">

        DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsTab5 */
            FROM FUNRL_RPT_GOODS
        WHERE RPT_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
    </delete>

    <!-- 행사보고서(직영) - TAB_6 (일반경비) 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsTab6" parameterType="map">

        DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsTab6 */
            FROM FUNRL_PRT_COST
        WHERE RPT_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
    </delete>

    <!-- 행사보고서(직영) - TAB_7 (추가매출1) 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsTab7" parameterType="map">

        DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsTab7 */
            FROM FUNRL_RPT_GOODS
        WHERE RPT_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
          AND GDS_CL = '0002'
    </delete>

    <!-- 행사보고서(직영) - TAB_8 (추가매출2) 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsTab8" parameterType="map">

        DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsTab8 */
            FROM FUNRL_RPT_SALES2
        WHERE RPT_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
    </delete>

    <!-- 행사보고서(직영) - TAB_9 (결제정보관련) 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsTab9" parameterType="map">

        DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsTab9 */
            FROM FUNRL_RPT_PAYMENT
        WHERE RPT_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
    </delete>

    <!-- 카드수수료 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCardFeeList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeCardFeeList */
               CARD_CD,
               FN_COM_NM('0120',CARD_CD) AS CARD_NM,
               START_DT,
               END_DT,
               FEE_RT
        FROM CARD_FEE_RT
    </select>

    <!-- 행사보고서(외주) - 제공용품1 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeOutsrc_1" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeOutsrc_1 */
               '' AS CHK,
               A.FUNRL_OUTSRC_NO,
               A.DTL_SEQ,
               A.SERVICE_CONTENT,
               A.SERVICE_GDS,
               A.CUSTMR_NM,
               A.ADD_SERVICE,
               A.ALTERNATIVE_PROVIDERS
        FROM FUNRL_SERVICE_DTL A
        WHERE A.FUNRL_OUTSRC_NO = #{rpt_no}
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(외주) - 추가매출1 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeOutsrc_2" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeOutsrc_2 */
               '' AS CHK,
               A.FUNRL_OUTSRC_NO,
               A.DTL_SEQ,
               A.GDS_CD,
               B.GDS_NM,
               A.QTY,
               A.UNIT_COST,
               A.AMT,
               A.BYUING_CD,
               C.CUSTMR_NM AS BYUING_NM,
               A.PAY_OPT,
               A.ADD_SALES_YN,
               A.SALES_AMT,
               A.MARGIN,
               A.FOG_CL,
               A.NOTE
        FROM FUNRL_OUTSRC_GOODS A
            LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD
            LEFT OUTER JOIN CUSTMR_MNG C ON A.BYUING_CD = C.CUSTMR_CD
        WHERE A.FUNRL_OUTSRC_NO = #{rpt_no}
          AND A.FOG_CL = '0001'
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(외주) - 제공용품2 및 추가매출2 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeOutsrc_3" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeOutsrc_3 */
               '' AS CHK,
               A.FUNRL_OUTSRC_NO,
               A.DTL_SEQ,
               A.GDS_CD,
               B.GDS_NM,
               A.QTY,
               A.UNIT_COST,
               A.AMT,
               A.BYUING_CD,
               C.CUSTMR_NM AS BYUING_NM,
               A.PAY_OPT,
               A.ADD_SALES_YN,
               A.SALES_AMT,
               A.MARGIN,
               A.FOG_CL,
               A.NOTE
        FROM FUNRL_OUTSRC_GOODS A
            LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD
            LEFT OUTER JOIN CUSTMR_MNG C ON A.BYUING_CD = C.CUSTMR_CD
        WHERE A.FUNRL_OUTSRC_NO = #{rpt_no}
          AND A.FOG_CL = '0002'
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(외주) - 결제정보 관련 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeOutsrc_4" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeOutsrc_4 */
               '' AS CHK,
               A.RPT_NO,
               A.DTL_SEQ,
               A.PAY_OPT,
               A.CARD_CD,
               A.APPR_NO,
               A.AMT,
               A.CARD_APPR_MTH,
               A.CARD_APP_DT,
               A.PAY_DT,
               A.PAY_AMT_CASH,
               A.ISU_NO
        FROM FUNRL_OUTSRC_PAYMENT A
        WHERE A.RPT_NO = #{rpt_no}
          AND A.DEL_FG = 'N'
        ORDER BY A.DTL_SEQ
    </select>

    <!-- 행사보고서(외주) - 제공용품1 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeOutsrc_1" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeOutsrc_1 */
              FUNRL_SERVICE_DTL
          SET 	SERVICE_CONTENT       = #{service_content},
                SERVICE_GDS           = #{service_gds},
                CUSTMR_NM             = #{custmr_nm},
                ALTERNATIVE_PROVIDERS = #{alternative_providers},
                UPD_DM    = SYSDATE,
                UPD_MAN   = #{upd_man}
          WHERE FUNRL_OUTSRC_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
    </update>

    <!-- 행사보고서(외주) - 제공용품1 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeOutsrc_1" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeOutsrc_1 */
              INTO FUNRL_SERVICE_DTL(FUNRL_OUTSRC_NO, DTL_SEQ, SERVICE_CONTENT, SERVICE_GDS, CUSTMR_NM,
                                     ALTERNATIVE_PROVIDERS, REG_DM, REG_MAN)
            VALUES (#{rpt_no}
                , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = #{rpt_no})
                , #{service_content}, #{service_gds}, #{custmr_nm}
                , #{alternative_providers}, SYSDATE, #{reg_man})
    </insert>

    <!-- 행사보고서(외주) - 추가매출1 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeOutsrc_2" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeOutsrc_2 */
              FUNRL_OUTSRC_GOODS
          SET GDS_CD = #{gds_cd},
              QTY = #{qty},
              UNIT_COST = #{unit_cost},
              AMT = #{amt},
              BYUING_CD = #{byuing_cd},
              PAY_OPT = #{pay_opt},
              NOTE = #{note},
              UPD_DM = SYSDATE,
              UPD_MAN = #{upd_man},
              ADD_SALES_YN = #{add_sales_yn},
              SALES_AMT = #{sales_amt},
              MARGIN = #{margin}
          WHERE FUNRL_OUTSRC_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
            AND FOG_CL = '0001'
    </update>

    <!-- 행사보고서(외주) - 추가매출1 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeOutsrc_2" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeOutsrc_2 */
              INTO FUNRL_OUTSRC_GOODS(FUNRL_OUTSRC_NO, DTL_SEQ, GDS_CD, QTY, UNIT_COST,
                                   AMT, BYUING_CD, PAY_OPT, NOTE, REG_DM,
                                   REG_MAM, ADD_SALES_YN, FOG_CL, SALES_AMT,  MARGIN)
            VALUES (#{rpt_no}
            , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_OUTSRC_GOODS WHERE FUNRL_OUTSRC_NO = #{rpt_no})
            , #{gds_cd}, #{qty}, #{unit_cost},
                    #{amt}, #{byuing_cd}, #{pay_opt}, #{note}, SYSDATE,
                    #{reg_man}, #{add_sales_yn}, '0001', #{sales_amt}, #{margin})
    </insert>

    <!-- 행사보고서(외주) - 제공용품2 및 추가매출2 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeOutsrc_3" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeOutsrc_3 */
              FUNRL_OUTSRC_GOODS
          SET GDS_CD = #{gds_cd},
              QTY = #{qty},
              UNIT_COST = #{unit_cost},
              AMT = #{amt},
              BYUING_CD = #{byuing_cd},
              PAY_OPT = #{pay_opt},
              NOTE = #{note},
              UPD_DM = SYSDATE,
              UPD_MAN = #{upd_man},
              ADD_SALES_YN = #{add_sales_yn},
              SALES_AMT = #{sales_amt},
              MARGIN = #{margin}
          WHERE FUNRL_OUTSRC_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
            AND FOG_CL = '0002'
    </update>

    <!-- 행사보고서(외주) - 제공용품2 및 추가매출2 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeOutsrc_3" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeOutsrc_3 */
              INTO FUNRL_OUTSRC_GOODS(FUNRL_OUTSRC_NO, DTL_SEQ, GDS_CD, QTY, UNIT_COST,
                                   AMT, BYUING_CD, PAY_OPT, NOTE, REG_DM,
                                   REG_MAM, ADD_SALES_YN, FOG_CL, SALES_AMT,  MARGIN)
            VALUES (#{rpt_no}
            , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_OUTSRC_GOODS WHERE FUNRL_OUTSRC_NO = #{rpt_no})
            , #{gds_cd}, #{qty}, #{unit_cost},
                    #{amt}, #{byuing_cd}, #{pay_opt}, #{note}, SYSDATE,
                    #{reg_man}, #{add_sales_yn}, '0002', #{sales_amt}, #{margin})
    </insert>

    <!-- 행사보고서(외주) - 결제정보 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeOutsrc_4" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeOutsrc_4 */
              FUNRL_OUTSRC_PAYMENT
          SET 	PAY_OPT   = #{pay_opt},
                CARD_CD   = #{card_cd},
                APPR_NO   = #{appr_no},
                AMT       = #{amt},
                CARD_APPR_MTH = #{card_appr_mth},
                PAY_DT    = #{pay_dt},
                CARD_APP_DT = #{card_app_dt},
                PAY_AMT_CASH = #{pay_amt_cash},
                ISU_NO    = #{isu_no},
                UPD_DM    = SYSDATE,
                UPD_MAN   = #{upd_man}
          WHERE RPT_NO = #{rpt_no}
            AND DTL_SEQ = #{dtl_seq}
    </update>

    <!-- 행사보고서(외주) - 결제정보 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeOutsrc_4" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT FN_RPT_NO(#{accnt_no}) AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeOutsrc_4 */
              INTO FUNRL_OUTSRC_PAYMENT(RPT_NO, DTL_SEQ, PAY_OPT, CARD_CD, APPR_NO,
                                         AMT, CARD_APPR_MTH, PAY_DT, CARD_APP_DT, DEL_FG,
                                        PAY_AMT_CASH, ISU_NO, REG_MAN, REG_DM)
            VALUES (#{rpt_no}
                , (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = #{rpt_no})
                , #{pay_opt}, #{card_cd}, #{appr_no}
                , #{amt}, #{card_appr_mth}, #{pay_dt}, #{card_app_dt}, 'N'
                , #{pay_amt_cash}, #{isu_no}, #{reg_man}, SYSDATE)
    </insert>

    <!-- 행사보고서(외주) - 제공용품1 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsOutds1" parameterType="map">
          DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsOutds1 */
            FROM FUNRL_SERVICE_DTL
        WHERE FUNRL_OUTSRC_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
    </delete>

    <!-- 행사보고서(외주) - 추가매출1 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsOutds2" parameterType="map">
          DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsOutds2 */
            FROM FUNRL_OUTSRC_GOODS
        WHERE FUNRL_OUTSRC_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
          AND FOG_CL = '0001'
    </delete>

    <!-- 행사보고서(외주) - 제공용품2 및 추가매출2 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsOutds3" parameterType="map">
          DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsOutds3 */
            FROM FUNRL_OUTSRC_GOODS
        WHERE FUNRL_OUTSRC_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
          AND FOG_CL = '0002'
    </delete>

    <!-- 행사보고서(외주) - 결제정보 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeGoodsOutds4" parameterType="map">
          DELETE /* DlwNewTypeEvntMap.deleteNewTypeGoodsOutds4 */
            FROM FUNRL_OUTSRC_PAYMENT
        WHERE RPT_NO = #{rpt_no}
          AND DTL_SEQ = #{dtl_seq}
    </delete>

    <!-- 행사현황 분석 및 조회(메인) 건수 -->
    <select id="DlwNewTypeEvntMap.getNewTypeAnnlCount" parameterType="map" resultType="int">

        SELECT /* DlwNewTypeEvntMap.getNewTypeAnnlCount */
                COUNT(*)
        FROM (
                SELECT /* DlwNewTypeEvntMap.getAnnlList */
                        ROW_NUMBER() OVER(ORDER BY A.ACCNT_NO) CNT,
                        A.EVENT_PROC_DAY,
                        A.EVENT_COMP_DAY,
                        FN_MEM_NM(B.MEM_NO) AS MEM_NM,
                        FN_PROD_NM(B.PROD_CD) AS PROD_NM,
                           CASE WHEN A.EVENT_COMP_DAY IS NOT NULL AND A.EVENT_COMP_DAY != '19000101' AND SUBSTR(A.EVENT_COMP_DAY,1,6) = SUBSTR(B.JOIN_DT,1,6)
                         THEN '신규'
                         ELSE ' '
                         END STAT,
                         E.REAL_EVT_MNGR_CD,
                        NVL(E.EVT_MNGR_NM,' ') EVT_MNGR_NM,
                        CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = D.EVT_MNGR_CD), ' ') = ' '
                             THEN NVL(WORKDEPT, ' ')
                             ELSE NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = D.EVT_MNGR_CD)), ' ')
                        END AS BRANCH_NM,
                        NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = D.EVT_MNGR_CD)), ' ') BRANCH_CD,
                         A.ETC_LOC_NM,
                    CASE WHEN A.EVENT_PLACE_CL = '0001' THEN F.FUNRL_NM
                         WHEN NVL(ETC_ZIP || ETC_ADDR1 || ETC_ADDR2,' ') != ' ' THEN (ETC_ZIP || ')' || ETC_ADDR1 || ' ' || ETC_ADDR2)
                               ELSE '' END AS EVENT_PLACE_CL,
                        FN_COM_NM('0191',BUR_CRE_CL) BUR_CRE_CL,
                        CEMETERY,
                        VAL7,
                        (VAL7_H || VAL7_M) AS VAL_HM,
                        CFN_DT,
                        (CFN_H || CFN_M) AS CFN_HM,
                        FN_COM_NM('0142',BRPLOT) BRPLOT
                FROM EVENT A
                    LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                    LEFT OUTER JOIN (SELECT /*+INDEX(PAY_MNG IDX_PAY_MNG_REAL_IMST) */ACCNT_NO, SUM(PAY_AMT) AMT FROM PAY_MNG WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) C ON A.ACCNT_NO = C.ACCNT_NO
                    LEFT OUTER JOIN EVENT_MNGR_REG D ON A.SEQ = D.EVT_SEQ AND D.DEL_FG = 'N' AND D.EVT_MNGR_GUBUN = '0001'
                    LEFT OUTER JOIN EVENT_MANAGER_MNG E ON E.EVT_MNGR_CD = D.EVT_MNGR_CD AND D.DEL_FG = 'N'
                    LEFT OUTER JOIN FUNRL_HALL F ON F.FUNRL_CD = A.FUNRL_HALL
                    LEFT OUTER JOIN EMPLOYEE G ON G.EMPLE_NO = B.EMPLE_NO
                WHERE A.DEL_FG = 'N'
                  AND A.SORT = '01'
             ) TBL
         WHERE 1=1
         <if test="dt_typ != null and dt_typ != ''">
             <if test="dt_typ == '01'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '02'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
         </if>
         <if test="etc_loc != null and etc_loc != '' ">
             AND TBL.ETC_LOC_NM = #{etc_loc}
         </if>
         <if test="jibu != null and jibu != '' ">
             AND TBL.BRANCH_CD = #{jibu}
         </if>
         <if test="mngr_cd != null and mngr_cd != '' ">
             AND TBL.REAL_EVT_MNGR_CD = #{mngr_cd}
         </if>
    </select>

    <!-- 행사현황 분석 및 조회(메인) 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeAnnlList" parameterType="map" resultType="resultMap">

        SELECT *
        FROM (
                SELECT /* DlwNewTypeEvntMap.getNewTypeAnnlList */
                       /*+INDEX(B IDX_MEM_PROD_ACCNT_FLAG) */
                        ROW_NUMBER() OVER(ORDER BY A.ACCNT_NO) CNT,
                        A.EVENT_PROC_DAY,
                        A.EVENT_COMP_DAY,
                        FN_MEM_NM(B.MEM_NO) AS MEM_NM,
                        FN_PROD_NM(B.PROD_CD) AS PROD_NM,
                           CASE WHEN A.EVENT_COMP_DAY IS NOT NULL AND A.EVENT_COMP_DAY != '19000101' AND SUBSTR(A.EVENT_COMP_DAY,1,6) = SUBSTR(B.JOIN_DT,1,6)
                         THEN '신규'
                         ELSE ' '
                         END STAT,
                         E.REAL_EVT_MNGR_CD,
                        NVL(E.EVT_MNGR_NM,' ') EVT_MNGR_NM,
                        CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = D.EVT_MNGR_CD), ' ') = ' '
                             THEN NVL(WORKDEPT, ' ')
                             ELSE NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = D.EVT_MNGR_CD)), ' ')
                        END AS BRANCH_NM,
                        NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = D.EVT_MNGR_CD)), ' ') BRANCH_CD,
                         A.ETC_LOC_NM,
                    CASE WHEN A.EVENT_PLACE_CL = '0001' THEN F.FUNRL_NM
                         WHEN NVL(ETC_ZIP || ETC_ADDR1 || ETC_ADDR2,' ') != ' ' THEN (ETC_ZIP || ')' || ETC_ADDR1 || ' ' || ETC_ADDR2)
                               ELSE '' END AS EVENT_PLACE_CL,
                        FN_COM_NM('0191',BUR_CRE_CL) BUR_CRE_CL,
                        CEMETERY,
                        VAL7,
                        (VAL7_H || VAL7_M) AS VAL_HM,
                        CFN_DT,
                        (CFN_H || CFN_M) AS CFN_HM,
                        FN_COM_NM('0142',BRPLOT) BRPLOT
                FROM EVENT A
                    LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                    LEFT OUTER JOIN (SELECT /*+INDEX(PAY_MNG IDX_PAY_MNG_REAL_IMST) */ACCNT_NO, SUM(PAY_AMT) AMT FROM PAY_MNG WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) C ON A.ACCNT_NO = C.ACCNT_NO
                    LEFT OUTER JOIN EVENT_MNGR_REG D ON A.SEQ = D.EVT_SEQ AND D.DEL_FG = 'N' AND D.EVT_MNGR_GUBUN = '0001'
                    LEFT OUTER JOIN EVENT_MANAGER_MNG E ON E.EVT_MNGR_CD = D.EVT_MNGR_CD AND D.DEL_FG = 'N'
                    LEFT OUTER JOIN FUNRL_HALL F ON F.FUNRL_CD = A.FUNRL_HALL
                    LEFT OUTER JOIN EMPLOYEE G ON G.EMPLE_NO = B.EMPLE_NO
                WHERE A.DEL_FG = 'N'
                  AND A.SORT = '01'
             ) TBL
         WHERE 1=1
         <if test="dt_typ != null and dt_typ != ''">
             <if test="dt_typ == '01'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '02'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
         </if>
         <if test="etc_loc != null and etc_loc != '' ">
             AND TBL.ETC_LOC_NM = #{etc_loc}
         </if>
         <if test="jibu != null and jibu != '' ">
             AND TBL.BRANCH_CD = #{jibu}
         </if>
         <if test="mngr_cd != null and mngr_cd != '' ">
             AND TBL.REAL_EVT_MNGR_CD = #{mngr_cd}
         </if>
    </select>

    <!-- 지부 콤보박스 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeBranchList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeBranchList */
               BRANCH_CD AS CD
             , BRANCH_NM AS CD_NM
          FROM BRANCH_MNG
          WHERE DEL_FG = 'N'
        ORDER BY BRANCH_CD
    </select>

    <!-- 행사 입금 정산 데이터 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntPayData" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeEvntPayData */
                  A.ACCNT_NO, NVL(B.NO_1,0) NO_1, NVL(B.AMT_1,0) AMT_1, NVL(C.NO_2,0) NO_2, NVL(C.AMT_2,0) AMT_2, NVL(D.NO_3,0) NO_3, NVL(D.AMT_3,0) AMT_3,
                  G.PROD_AMT TOT_AMT,
                  NVL(F.TOT_MONTH_PAY_AMT,0) TAMT1,
                  NVL(F.TOT_ALLT_AMT,0) TAMT2,
                  NVL(F.TOT_ADD_AMT,0) TAMT3,
                  G.PROD_CL,
                  CASE WHEN G.PROD_CL = '03' THEN NVL(E.MONTH_PAY_AMT,0)
                       ELSE G.MON_PAY_AMT
                       END MAMT_1,
                  NVL(E.ALLT_AMT,0) MAMT_2 ,
                        CASE WHEN G.PROD_CL = '03' THEN NVL(F.TOT_MONTH_PAY_AMT,0) - (SELECT NVL(SUM(PAY_AMT),0) FROM PAY_MNG WHERE ACCNT_NO = A.ACCNT_NO AND DEL_FG = 'N')
                       ELSE ((SELECT NVL(PROD_AMT,0)
                              FROM PRODUCT
                              WHERE PROD_CD = A.PROD_CD AND DEL_FG = 'N') - (SELECT NVL(SUM(PAY_AMT),0)
                                                                             FROM PAY_MNG
                                                                             WHERE PAY_MNG.ACCNT_NO = A.ACCNT_NO  AND DEL_FG = 'N' ) -  (A.NEW_CHAN_GUNSU * (SELECT TO_NUMBER(MON_PAY_AMT)
                                                                                                                                                             FROM PRODUCT
                                                                                                                                                             WHERE PROD_CD = A.PROD_CD AND DEL_FG = 'N')))
                                END JAMT_1, -- 상조부금 실 잔여금액
                    (NVL(F.TOT_ALLT_AMT,0) - NVL(C.AMT_2,0)) JAMT_2,
                    (NVL(F.TOT_ADD_AMT,0) - NVL(D.AMT_3,0)) JAMT_3,
                    CASE WHEN G.PROD_CL = '03' THEN NVL(F.TOT_CNT,0)
                         ELSE G.EXPR_NO END AS TCNT_1,
                    NVL(( SELECT SUM(END_NO -ST_NO+1) FROM PRODUCT_DTL WHERE PROD_CD = A.PROD_CD AND ALLT_AMT>0), 0) TCNT_2,
                    NVL(( SELECT SUM(END_NO -ST_NO+1) FROM PRODUCT_DTL WHERE PROD_CD = A.PROD_CD AND ADD_AMT>0), 0) TCNT_3,
                    G.EXPR_NO,
                    G.EVT_COST_OUT,
                    NVL(GP.GP_AMT,0) + NVL(GP1.GP_AMT1,0) + NVL(GP2.GP_AMT2,0) GP_AMT,
                    NVL(A.NEW_CHAN_GUNSU,0) NEW_CHAN_GUNSU
            FROM MEM_PROD_ACCNT A
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_1, SUM(NVL(PAY_AMT,0)) AMT_1 FROM PAY_MNG WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) B ON B.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_2, SUM(NVL(PAY_AMT,0)) AMT_2 FROM PAY_MNG_DTL WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) C ON C.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_3, SUM(NVL(PAY_AMT,0)) AMT_3 FROM PAY_MNG_DTL1 WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) D ON D.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, SUM(NVL(PAY_AMT,0)) GP_AMT FROM PAY_MNG WHERE DEL_FG = 'N' AND PAY_MTHD != '06' AND NVL(EVT_RPT_CL,' ') != '01' GROUP BY ACCNT_NO) GP ON GP.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, SUM(NVL(PAY_AMT,0)) GP_AMT1 FROM PAY_MNG_DTL WHERE DEL_FG = 'N' AND PAY_MTHD != '06' AND NVL(EVT_RPT_CL,' ') != '01' GROUP BY ACCNT_NO) GP1 ON GP1.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, SUM(NVL(PAY_AMT,0)) GP_AMT2 FROM PAY_MNG_DTL1 WHERE DEL_FG = 'N' AND PAY_MTHD != '06' AND NVL(EVT_RPT_CL,' ') != '01' GROUP BY ACCNT_NO) GP2 ON GP2.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN PRODUCT_DTL E ON E.PROD_CD = A.PROD_CD AND SEQ = 1
                LEFT JOIN (SELECT PROD_CD,
                             SUM((END_NO - ST_NO + 1) * MONTH_PAY_AMT) AS TOT_MONTH_PAY_AMT,
                             SUM((END_NO - ST_NO + 1) * ALLT_AMT) AS TOT_ALLT_AMT,
                             SUM((END_NO - ST_NO + 1) * ADD_AMT) AS TOT_ADD_AMT,
                             SUM(END_NO - ST_NO + 1)  AS TOT_CNT
                           FROM PRODUCT_DTL
                           GROUP BY PROD_CD )F ON F.PROD_CD = A.PROD_CD
                 LEFT OUTER JOIN PRODUCT G ON G.PROD_CD = A.PROD_CD
            WHERE A.ACCNT_NO = #{accnt_no}
    </select>

    <!-- 입금회차에 따른 입금상세정보 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntPayDtl" parameterType="map" resultType="resultMap">

        <if test="prod_cl == '03'">

          SELECT /* DlwNewTypeEvntMap.getNewTypeEvntPayDtl */
                A.CNT,
                SUM(B.MONTH_PAY_AMT) OVER(PARTITION BY B.PROD_CD ORDER BY A.CNT ) MON_AMT ,
                SUM(B.ALLT_AMT) OVER(PARTITION BY B.PROD_CD ORDER BY A.CNT ) ALL_AMT ,
                SUM(B.ADD_AMT) OVER(PARTITION BY B.PROD_CD ORDER BY A.CNT ) ADD_AMT
          FROM
              (SELECT ROWNUM CNT
               FROM  DUAL
               CONNECT BY LEVEL <![CDATA[<=]]> (SELECT MAX(END_NO) EDNO FROM PRODUCT_DTL WHERE PROD_CD = #{prod_cd})) A
              LEFT OUTER JOIN (SELECT *
                               FROM PRODUCT_DTL
                               WHERE PROD_CD = #{prod_cd} ) B ON A.CNT <![CDATA[>=]]> B.ST_NO AND A.CNT <![CDATA[<=]]> B.END_NO
        </if>

        <if test="prod_cl != '03'">

            SELECT /* DlwNewTypeEvntMap.getEvntPayDtlCnt */
                          A.CNT,
                          SUM(B.MON_PAY_AMT) OVER(PARTITION BY B.PROD_CD ORDER BY A.CNT ) MON_AMT
            FROM
                (SELECT ROWNUM CNT
                 FROM  DUAL
                 CONNECT BY LEVEL  <![CDATA[<=]]>  (SELECT EXPR_NO FROM PRODUCT WHERE PROD_CD = #{prod_cd} AND DEL_FG = 'N')) A
                LEFT OUTER JOIN (SELECT *
                                 FROM PRODUCT
                                 WHERE PROD_CD = #{prod_cd}) B ON 1=1 AND B.DEL_FG = 'N'

        </if>

    </select>

    <!-- 입금회차에 따른 입금상세정보 조회(회차별) -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntPayDtlCnt" parameterType="map" resultType="resultMap">

        <if test="prod_cl == '03'">
            SELECT /* DlwNewTypeEvntMap.getNewTypeEvntPayDtlCnt */
                  A.CNT,
                  B.MONTH_PAY_AMT MON_AMT ,
                  B.ALLT_AMT ALL_AMT ,
                  B.ADD_AMT ADD_AMT
            FROM
                (SELECT ROWNUM CNT
                 FROM  DUAL
                 CONNECT BY LEVEL <![CDATA[<=]]> (SELECT MAX(END_NO) EDNO FROM PRODUCT_DTL WHERE PROD_CD = #{prod_cd})) A
                LEFT OUTER JOIN (SELECT *
                                 FROM PRODUCT_DTL
                                 WHERE PROD_CD = #{prod_cd} ) B ON A.CNT <![CDATA[>=]]> B.ST_NO AND A.CNT <![CDATA[<=]]> B.END_NO
       </if>

        <if test="prod_cl != '03'">

            SELECT /* DlwNewTypeEvntMap.getEvntPayDtlCnt */
                          A.CNT,
                          B.MON_PAY_AMT MON_AMT
            FROM
                (SELECT ROWNUM CNT
                 FROM  DUAL
                 CONNECT BY LEVEL  <![CDATA[<=]]>  (SELECT EXPR_NO FROM PRODUCT WHERE PROD_CD = #{prod_cd} AND DEL_FG = 'N')) A
                LEFT OUTER JOIN (SELECT *
                                 FROM PRODUCT
                                 WHERE PROD_CD = #{prod_cd}) B ON 1=1 AND B.DEL_FG = 'N'

        </if>

    </select>

    <!-- 행사보고서(직영) 상세 조회(입금정보 포함) -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntRptDtl" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeEvntRptDtl */
               A.RPT_NO,
               A.SEQ,
               A.RPT_DT,
               FN_COM_NM('0149', A.SAVE_CL) SAVE_CL_NM,
               A.SAVE_CL,
               NVL(A.REMAIN_AMT,0) REMAIN_AMT,
               NVL(A.ADD_AMT,0) ADD_AMT,
               NVL(A.TOT_RECV_AMT,0) TOT_RECV_AMT,
               NVL(A.DEDUCT_AMT,0) DEDUCT_AMT,
               NVL(A.TOT_COST_AMT,0) TOT_COST_AMT,
               NVL(A.CARD_PAY_AMT,0) CARD_PAY_AMT,
               NVL(A.CASH_PAY_AMT,0) CASH_PAY_AMT,
               A.EVENT_NOTE,
               NVL(A.PAY_CNT,0) PAY_CNT,
               NVL(A.PAYDTL_CNT,0) PAYDTL_CNT,
               NVL(A.PAYDTL1_CNT,0) PAYDTL1_CNT,
               NVL(A.JOIN_ADD_IN_AMT,0) JOIN_ADD_IN_AMT,
               WH_MOVE_GUBUN(#{accnt_no}) WH_GUBUN,
               FN_WH_CD(#{rpt_no}) OUT_WH_CD,
               (SELECT ORD_DT FROM ORD_MST WHERE DEL_FG = 'N' AND ORD_CL = '0001' AND RPT_NO = A.RPT_NO) BDATE
        FROM FUNRL_RPT A
        WHERE A.DEL_FG = 'N'
          AND A.RPT_NO = #{rpt_no}
    </select>

    <!-- 행사보고서(직영) 임시 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeEvntRptDtl" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT TO_CHAR(SYSDATE,'YYYYMM') || LPAD(NVL((SELECT TO_CHAR(TO_NUMBER(NVL(SUBSTR(MAX(RPT_NO),7,6),0)) + 1) FROM FUNRL_RPT), 0), 6, '0') AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeEvntRptDtl */
                INTO FUNRL_RPT (
               RPT_NO
              ,RPT_DT
              ,SAVE_CL
              ,REMAIN_AMT
              ,ADD_AMT
              ,TOT_RECV_AMT
              ,DEDUCT_AMT
              ,TOT_COST_AMT
              ,CARD_PAY_AMT
              ,CASH_PAY_AMT
              ,EVENT_NOTE
              ,DEL_FG
              ,REG_DM
              ,REG_MAN
              ,SEQ
              ,PAY_CNT
              ,PAYDTL_CNT
              ,PAYDTL1_CNT
              ,JOIN_ADD_IN_AMT )
            SELECT
               #{rpt_no}
              ,#{rpt_dt}
              ,'0001'
              ,#{remain_amt}
              ,#{add_amt}
              ,#{tot_recv_amt}
              ,#{deduct_amt}
              ,#{tot_cost_amt}
              ,#{card_pay_amt}
              ,#{cash_pay_amt}
              ,#{event_note}
              ,'N'
              ,SYSDATE
              ,#{reg_man}
              ,#{seq}
              ,#{pay_cnt}
              ,#{paydtl_cnt}
              ,#{paydtl1_cnt}
              ,#{join_add_in_amt}
          FROM DUAL
    </insert>

    <!-- 행사보고서(직영) 마감저장 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeEvntRptMagam" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeEvntRptMagam */
              FUNRL_RPT
          SET  SAVE_CL = '0002'
                ,RPT_DT = #{rpt_dt}
              ,REMAIN_AMT = #{remain_amt}
              ,ADD_AMT = #{add_amt}
              ,TOT_RECV_AMT = #{tot_recv_amt}
              ,DEDUCT_AMT = #{deduct_amt}
              ,TOT_COST_AMT = #{tot_cost_amt}
              ,CARD_PAY_AMT = #{card_pay_amt}
              ,CASH_PAY_AMT = #{cash_pay_amt}
              ,EVENT_NOTE = #{event_note}
              ,UPD_DM = SYSDATE
              ,UPD_MAN = #{upd_man}
              ,PAY_CNT = #{pay_cnt}
              ,PAYDTL_CNT = #{paydtl_cnt}
              ,PAYDTL1_CNT = #{paydtl1_cnt}
              ,JOIN_ADD_IN_AMT = #{join_add_in_amt}
            WHERE RPT_NO = #{rpt_no}
    </update>

    <!-- 행사보고서(직영) 임시 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeEvntRptDtl" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeEvntRptDtl */
              FUNRL_RPT
          SET  RPT_DT = #{rpt_dt}
              ,REMAIN_AMT = #{remain_amt}
              ,ADD_AMT = #{add_amt}
              ,TOT_RECV_AMT = #{tot_recv_amt}
              ,DEDUCT_AMT = #{deduct_amt}
              ,TOT_COST_AMT = #{tot_cost_amt}
              ,CARD_PAY_AMT = #{card_pay_amt}
              ,CASH_PAY_AMT = #{cash_pay_amt}
              ,EVENT_NOTE = #{event_note}
              ,UPD_DM = SYSDATE
              ,UPD_MAN = #{upd_man}
              ,PAY_CNT = #{pay_cnt}
              ,PAYDTL_CNT = #{paydtl_cnt}
              ,PAYDTL1_CNT = #{paydtl1_cnt}
              ,JOIN_ADD_IN_AMT = #{join_add_in_amt}
            WHERE RPT_NO = #{rpt_no}
    </update>

    <!-- 행사보고서(직영) 삭제 -->
    <update id="DlwNewTypeEvntMap.deleteNewTypeEvntRptDtl" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.deleteNewTypeEvntRptDtl */
              FUNRL_RPT
          SET  DEL_FG = 'Y'
              ,UPD_DM = SYSDATE
              ,UPD_MAN = #{upd_man}
            WHERE RPT_NO = #{rpt_no}
    </update>

    <!-- 행사보고서(외주) 상세 조회(입금정보 포함) -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntOutRptDtl" parameterType="map" resultType="resultMap">

           SELECT /* DlwNewTypeEvntMap.getNewTypeEvntOutRptDtl */
                       A.FUNRL_OUTSRC_NO
                      ,A.RPT_DT
                      ,A.SAVE_CL
                      ,FN_COM_NM('0149', A.SAVE_CL) SAVE_CL_NM
                      ,A.REMAIN_AMT
                      ,A.EVENT_NOTE
                      ,A.DEL_FG
                      ,A.REG_DM
                      ,A.REG_MAN
                      ,A.UPD_DM
                      ,A.UPD_MAN
                      ,A.SEQ
                      ,A.PAY_CNT
                      ,A.PAY_DTL_CNT
                      ,A.PAY_DTL1_CNT
                      ,A.OUTSRC_CUSTMR_CD
                      ,B.CUSTMR_NM AS OUTSRC_CUSTMR_NM
                      ,A.OUTSRC_AMT
                      ,A.ADD_AMT
                      ,A.JOIN_ADD_IN_AMT
                      ,A.TOT_RECV_AMT
                      ,A.CARD_PAY_AMT
                      ,A.CASH_PAY_AMT
                      ,A.DEDUCT_AMT
                      ,A.EVT_COST_OUT
                      ,A.HQ_GDS_AMT
                      ,A.TOT_EVT_COST_OUT
                      ,A.JI_DT
              FROM FUNRL_OUTSRC_MST A
                  LEFT OUTER JOIN CUSTMR_MNG B ON B.CUSTMR_CD = A.OUTSRC_CUSTMR_CD
              WHERE A.DEL_FG = 'N'
                AND A.FUNRL_OUTSRC_NO = #{rpt_no}
    </select>

    <!-- 행사보고서(외주) 임시 등록 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeEvntOutRptDtl" parameterType="map">

        <selectKey keyProperty="rpt_no" resultType="String" order="BEFORE">
            SELECT TO_CHAR(SYSDATE,'YYYYMM') || LPAD(NVL((SELECT TO_CHAR(TO_NUMBER(NVL(SUBSTR(MAX(FUNRL_OUTSRC_NO),7,6),0)) + 1) FROM FUNRL_OUTSRC_MST), 0), 6, '0') AS RPT_NO
            FROM DUAL
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeEvntOutRptDtl */
                INTO FUNRL_OUTSRC_MST (
               FUNRL_OUTSRC_NO
              ,RPT_DT
              ,SAVE_CL
              ,REMAIN_AMT
              ,EVENT_NOTE
              ,DEL_FG
              ,REG_DM
              ,REG_MAN
              ,SEQ
              ,PAY_CNT
              ,PAY_DTL_CNT
              ,PAY_DTL1_CNT
              ,OUTSRC_CUSTMR_CD
              ,ADD_AMT
              ,JOIN_ADD_IN_AMT
              ,TOT_RECV_AMT
              ,CARD_PAY_AMT
              ,CASH_PAY_AMT
              ,DEDUCT_AMT
              ,EVT_COST_OUT
              ,HQ_GDS_AMT
              ,TOT_EVT_COST_OUT
              ,JI_DT)
            SELECT
               #{rpt_no}
              ,#{rpt_dt}
              ,'0001'
              ,#{remain_amt}
              ,#{event_note}
              ,'N'
              ,SYSDATE
              ,#{reg_man}
              ,#{seq}
              ,#{pay_cnt}
              ,#{pay_dtl_cnt}
              ,#{pay_dtl1_cnt}
              ,#{outsrc_custmr_cd}
              ,#{add_amt}
              ,#{join_add_in_amt}
              ,#{tot_recv_amt}
              ,#{card_pay_amt}
              ,#{cash_pay_amt}
              ,#{deduct_amt}
              ,#{evt_cost_out}
              ,#{hq_gds_amt}
              ,#{tot_evt_cost_out}
              ,#{ji_dt}
          FROM DUAL
    </insert>

    <!-- 행사보고서(외주) 임시 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeEvntOutRptDtl" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeEvntOutRptDtl */
              FUNRL_OUTSRC_MST
          SET  RPT_DT = #{rpt_dt}
              ,REMAIN_AMT = #{remain_amt}
              ,EVENT_NOTE = #{event_note}
              ,UPD_DM = SYSDATE
              ,UPD_MAN = #{upd_man}
              ,PAY_CNT = #{pay_cnt}
              ,PAY_DTL_CNT = #{pay_dtl_cnt}
              ,PAY_DTL1_CNT = #{pay_dtl1_cnt}
              ,OUTSRC_CUSTMR_CD = #{outsrc_custmr_cd}
              ,ADD_AMT = #{add_amt}
              ,JOIN_ADD_IN_AMT = #{join_add_in_amt}
              ,TOT_RECV_AMT = #{tot_recv_amt}
              ,CARD_PAY_AMT = #{card_pay_amt}
              ,CASH_PAY_AMT = #{cash_pay_amt}
              ,DEDUCT_AMT = #{deduct_amt}
              ,EVT_COST_OUT = #{evt_cost_out}
              ,HQ_GDS_AMT = #{hq_gds_amt}
              ,TOT_EVT_COST_OUT = #{tot_evt_cost_out}
              ,JI_DT = #{ji_dt}
            WHERE FUNRL_OUTSRC_NO = #{rpt_no}
    </update>

    <!-- 행사보고서(외주) 마감 저장 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeEvntOutRptDtlMagam" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeEvntOutRptDtlMagam */
              FUNRL_OUTSRC_MST
          SET  SAVE_CL = '0002'
                ,RPT_DT = #{rpt_dt}
              ,REMAIN_AMT = #{remain_amt}
              ,EVENT_NOTE = #{event_note}
              ,UPD_DM = SYSDATE
              ,UPD_MAN = #{upd_man}
              ,PAY_CNT = #{pay_cnt}
              ,PAY_DTL_CNT = #{pay_dtl_cnt}
              ,PAY_DTL1_CNT = #{pay_dtl1_cnt}
              ,OUTSRC_CUSTMR_CD = #{outsrc_custmr_cd}
              ,ADD_AMT = #{add_amt}
              ,JOIN_ADD_IN_AMT = #{join_add_in_amt}
              ,TOT_RECV_AMT = #{tot_recv_amt}
              ,CARD_PAY_AMT = #{card_pay_amt}
              ,CASH_PAY_AMT = #{cash_pay_amt}
              ,DEDUCT_AMT = #{deduct_amt}
              ,EVT_COST_OUT = #{evt_cost_out}
              ,HQ_GDS_AMT = #{hq_gds_amt}
              ,TOT_EVT_COST_OUT = #{tot_evt_cost_out}
              ,JI_DT = #{ji_dt}
            WHERE FUNRL_OUTSRC_NO = #{rpt_no}
    </update>

    <!-- 행사보고서(외주) 삭제 -->
    <update id="DlwNewTypeEvntMap.deleteNewTypeEvntOutRptDtl" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.deleteNewTypeEvntOutRptDtl */
              FUNRL_OUTSRC_MST
          SET  DEL_FG = 'Y'
              ,UPD_DM = SYSDATE
              ,UPD_MAN = #{upd_man}
            WHERE FUNRL_OUTSRC_NO = #{rpt_no}
    </update>

    <!-- 회원상태 변경이력 등록(행사등록시) -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeUpdBitHis" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeUpdBitHis */
            INTO REG_UPD_DEL_INF(SEQ, EMPLE_NO, MEM_NO, ACCNT_NO, WORK_DM, DAT1, DAT2, DAT3, CL1, REG_DM, REG_MAN, NEW_YN)
        SELECT
            (SELECT NVL(MAX(SEQ),0)+1 FROM REG_UPD_DEL_INF),
            #{reg_man},
            MEM_NO,
            ACCNT_NO,
            TO_CHAR(SYSDATE, 'YYYYMMDD'),
            '회원상태',
            KSTBIT,
            '04',
            'U',
            SYSDATE,
            #{reg_man},
            'N'
        FROM MEM_PROD_ACCNT
        WHERE ACCNT_NO = #{accnt_no}
    </insert>

    <!-- 회원상태 변경(행사등록시)  -->
    <update id="DlwNewTypeEvntMap.updateNewTypeMemprodKstbit" parameterType="map">
          UPDATE /* DlwNewTypeEvntMap.updateNewTypeMemprodKstbit */
              MEM_PROD_ACCNT
          SET  KSTBIT = '04'
              ,UPD_DM = SYSDATE
              ,UPD_MAN = #{upd_man}
            WHERE ACCNT_NO = #{accnt_no}
    </update>

    <!-- 회원상태 변경이력 등록(행사취소시) -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeUpdBitHis_cncl" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeUpdBitHis_cncl */
            INTO REG_UPD_DEL_INF(SEQ, EMPLE_NO, MEM_NO, ACCNT_NO, WORK_DM, DAT1, DAT2, DAT3, CL1, REG_DM, REG_MAN, NEW_YN)
        SELECT
            (SELECT NVL(MAX(SEQ),0)+1 FROM REG_UPD_DEL_INF),
            #{reg_man},
            MEM_NO,
            ACCNT_NO,
            TO_CHAR(SYSDATE, 'YYYYMMDD'),
            '회원상태',
            '04',
            KSTBIT,
            'U',
            SYSDATE,
            #{reg_man},
            'N'
        FROM MEM_PROD_ACCNT
        WHERE ACCNT_NO = #{accnt_no}
    </insert>

    <!-- 회원상태 변경(행사취소시)  -->
    <update id="DlwNewTypeEvntMap.updateNewTypeMemprodKstbit_cncl" parameterType="map">

            MERGE INTO /* DlwNewTypeEvntMap.updateNewTypeMemprodKstbit_cncl */
              MEM_PROD_ACCNT A
            USING (SELECT ACCNT_NO, DAT2 FROM(
                    SELECT ACCNT_NO, DAT2 FROM(
                        SELECT ACCNT_NO,DAT2, MAX(SEQ) SEQ
                        FROM (SELECT ACCNT_NO,DAT2,SEQ FROM REG_UPD_DEL_INF WHERE ACCNT_NO = #{accnt_no} AND DAT1 = '회원상태' ) B
                        GROUP BY ACCNT_NO,DAT2 ORDER BY SEQ DESC
                      ) A WHERE ROWNUM = 1
                    UNION
                    SELECT ACCNT_NO, '' DAT2 FROM REG_UPD_DEL_INF WHERE ACCNT_NO = #{accnt_no}
                    ) D WHERE ROWNUM = 1 ) C
            ON ( A.ACCNT_NO = C.ACCNT_NO)
            WHEN MATCHED THEN
            UPDATE SET KSTBIT = CASE WHEN NVL(C.DAT2, ' ') = ' ' THEN '02' ELSE C.DAT2 END,
                       UPD_DM = SYSDATE,
                       UPD_MAN = #{upd_man}
    </update>

    <!-- 사업장내 창고이동 물품리스트 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeMoveGoodsList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeMoveGoodsList */
               '' AS CHK,
               ROW_NUMBER()OVER(ORDER BY A.GDS_CD) RNUM,
               B.GDS_CD,
               B.GDS_NM,
               B.STANDARD,
               A.QTY,
               B.UNIT,
               A.UNIT_COST,
               A.AMT,
               #{reg_man} EMP_CD,
               FN_EMPLE_NM(#{reg_man}) EMP_NM
        FROM FUNRL_RPT_GOODS A
            LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD
        WHERE  A.DEL_FG = 'N'
          AND A.SITE_BUY_YN = 'N'
          AND A.GDS_CL = '0001'
          AND NVL(A.FRG_CL,' ') IN('0001','0005')
          AND NVL(B.GDS_GRP_CD, ' ') != '0009'
          AND A.RPT_NO = #{rpt_no}
    </select>

    <!-- 사업장내 창고이동 물품리스트 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeMoveGoodsMst" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeMoveGoodsMst */
                 A.WH_MV_NO,
                 A.MV_DT,
                 A.EMPLE_NO,
                 FN_EMPLE_NM(A.EMPLE_NO) AS EMPLE_NM,
                 A.OUT_WH_CD,
                 A.IN_WH_CD,
                 A.WH_IN_NO,
                 A.WH_OUT_NO,
                 A.NOTE,
                 A.RPT_NO
          FROM WH_MV_MST A
                  LEFT OUTER JOIN WH_OUT_MST C ON C.WH_OUT_NO = A.WH_OUT_NO AND C.DEL_FG = 'N' AND C.OUT_CL = '0002'
                  LEFT OUTER JOIN FUNRL_RPT D ON D.RPT_NO = C.RPT_NO AND D.DEL_FG = 'N'
          WHERE A.DEL_FG = 'N'
            AND D.RPT_NO = #{rpt_no}
    </select>

    <!-- 창고번호 가져오기 -->
    <select id="DlwNewTypeEvntMap.getNewTypeWhmvNo" parameterType="map" resultType="String">

        SELECT /* DlwNewTypeEvntMap.getNewTypeWhmvNo */
                 A.WH_MV_NO
          FROM WH_MV_MST A
              LEFT OUTER JOIN WH_OUT_MST C ON C.WH_OUT_NO = A.WH_OUT_NO AND C.DEL_FG = 'N' AND C.OUT_CL = '0002'
              LEFT OUTER JOIN FUNRL_RPT D ON D.RPT_NO = C.RPT_NO AND D.DEL_FG = 'N'
          WHERE A.DEL_FG = 'N'
            AND D.RPT_NO = #{rpt_no}
    </select>

    <!-- 입고번호 가져오기 -->
    <select id="DlwNewTypeEvntMap.getNewTypeWhinNo" parameterType="map" resultType="String">

        <if test="in_cl == '0001'">

            SELECT /* DlwNewTypeEvntMap.getNewTypeWhinNo */
                     WH_IN_NO
              FROM WH_IN_MST
              WHERE DEL_FG = 'N'
                AND IN_CL = #{in_cl}
                AND RPT_NO = #{rpt_no}

        </if>

        <if test="in_cl == '0002'">

            SELECT /* DlwNewTypeEvntMap.getWhinNo */
                     A.WH_IN_NO
              FROM WH_MV_MST A
                  LEFT OUTER JOIN WH_OUT_MST C ON C.WH_OUT_NO = A.WH_OUT_NO AND C.DEL_FG = 'N' AND C.OUT_CL = '0002'
                  LEFT OUTER JOIN FUNRL_RPT D ON D.RPT_NO = C.RPT_NO AND D.DEL_FG = 'N'
              WHERE A.DEL_FG = 'N'
                AND D.RPT_NO = #{rpt_no}

        </if>


    </select>

    <!-- 출고창고 번호 가져오기 -->
    <select id="DlwNewTypeEvntMap.getNewTypeWhcd" parameterType="map" resultType="String">
        SELECT /* DlwNewTypeEvntMap.getNewTypeWhcd */
            FN_GET_WHCD(#{accnt_no})
        FROM DUAL
    </select>

    <!-- 출고번호 가져오기 -->
    <select id="DlwNewTypeEvntMap.getNewTypeWhoutNo" parameterType="map" resultType="String">

        SELECT /* DlwNewTypeEvntMap.getNewTypeWhoutNo */
                 A.WH_OUT_NO
          FROM WH_OUT_MST A
          WHERE A.DEL_FG = 'N'
            AND (A.RPT_NO = #{rpt_no} OR FUNRL_OUTSRC_NO = #{rpt_no})
            AND A.OUT_CL = #{out_cl}
    </select>

    <!-- 창고번호 신규생성 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSinWhmvNo" parameterType="map" resultType="String">
        SELECT /* DlwNewTypeEvntMap.getNewTypeSinWhmvNo */
            FN_CREATE_WH_MV_NO()
        FROM DUAL
    </select>

    <!-- 입고번호 신규생성 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSinWhinNo" parameterType="map" resultType="String">
        SELECT /* DlwNewTypeEvntMap.getNewTypeSinWhinNo */
            FN_CREATE_WH_IN_NO()
        FROM DUAL
    </select>

    <!-- 출고번호 신규생성 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSinWhoutNo" parameterType="map" resultType="String">
        SELECT /* DlwNewTypeEvntMap.getNewTypeSinWhoutNo */
            FN_CREATE_WH_OUT_NO()
        FROM DUAL
    </select>

    <!-- 출고 마스터 저장 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeWhOutMst" parameterType="map">

        <selectKey keyProperty="end_date" resultType="String" order="BEFORE">
            SELECT EVENT_COMP_DAY AS END_DATE
            FROM EVENT
            WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no}
        </selectKey>

        INSERT /* DlwNewTypeEvntMap.insertNewTypeWhOutMst */
          INTO WH_OUT_MST(WH_OUT_NO
                           ,OUT_CL
                           ,OUT_DT
                           ,EMPLE_NO
                           ,DEL_FG
                           ,REG_DM
                           ,REG_MAN
                           <if test="cl_gubun == '0001'">
                               ,RPT_NO)
                           </if>
                           <if test="cl_gubun == '0002'">
                               ,FUNRL_OUTSRC_NO)
                           </if>
        SELECT #{swhoutno},
               #{out_cl},
               #{end_date},
               #{reg_man},
               'N',
               SYSDATE,
               #{reg_man},
               #{rpt_no}
        FROM DUAL
    </insert>

    <!-- 입고 마스터 저장 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeWhinMst" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeWhinMst */
          INTO WH_IN_MST(WH_IN_NO, IN_DT, EMPLE_NO, DEL_FG, REG_DM, REG_MAN, IN_CL, RPT_NO)
        SELECT #{swh_in_no},
               <if test="in_cl == '0001'">
                       #{bdate},
               </if>
               <if test="in_cl == '0002'">
                    #{mv_dt},
               </if>
               #{emple_no},
               'N',
               SYSDATE,
               #{reg_man},
               #{in_cl},
               #{rpt_no}
        FROM DUAL
    </insert>

    <!-- 창고이동 마스터 저장 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeWhmvMst" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeWhmvMst */
          INTO WH_MV_MST(WH_MV_NO, MV_DT, EMPLE_NO, OUT_WH_CD, IN_WH_CD, DEL_FG, REG_DM, REG_MAN, WH_IN_NO, WH_OUT_NO, NOTE, RPT_NO)
        SELECT #{swh_mv_no},
               #{mv_dt},
               #{emple_no},
               #{wh_out},
               #{wh_in},
               'N',
               SYSDATE,
               #{reg_man},
               #{swh_in_no},
               (SELECT WH_OUT_NO FROM WH_OUT_MST WHERE DEL_FG = 'N' AND RPT_NO = #{rpt_no} AND OUT_CL = #{out_cl}),
               #{note},
               #{rpt_no}
        FROM DUAL
    </insert>

    <!-- 출고 디테일 저장 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeWhOutDtl" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeWhOutDtl */
          INTO WH_OUT_DTL(WH_OUT_NO, DTL_SEQ, WH_CD, GDS_CD, QTY, QTY_UNIT, UNIT_COST, AMT, NOTE, REG_DM, REG_MAN)
        SELECT #{swhoutno},
               (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM WH_OUT_DTL WHERE WH_OUT_NO = #{swhoutno}),
               #{wh_out},
               #{gds_cd},
               #{qty},
               (SELECT UNIT FROM EVENT_GOODS_MNG_MST WHERE DEL_FG = 'N' AND GDS_CD = #{gds_cd}),
               #{unit_cost},
               #{amt},
               #{note},
               SYSDATE,
               #{reg_man}
         FROM DUAL
         WHERE #{gds_cd} NOT IN('76','77','1225')
    </insert>

    <!-- 입고 디테일 저장 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeWhinDtl" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeWhinDtl */
          INTO WH_IN_DTL(WH_IN_NO, DTL_SEQ, WH_CD, GDS_CD, QTY_UNIT, QTY, UNIT_COST, AMT, NOTE, REG_DM, REG_MAN, ORD_NO)
        VALUES(#{swh_in_no},
               (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM WH_IN_DTL WHERE WH_IN_NO = #{swh_in_no}),
               #{wh_in},
               #{gds_cd},
               #{unit},
               #{qty},
               #{unit_cost},
               #{amt},
               #{note},
               SYSDATE,
               #{reg_man},
               <if test="in_cl == '0001'">
                    #{ord_no}
               </if>
               <if test="in_cl == '0002'">
                    null
               </if>
               )
    </insert>

    <!-- 창고이동 디테일 저장 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeWhmvDtl" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeWhmvDtl */
          INTO WH_MV_DTL(GDS_CD, QTY_UNIT, QTY, UNIT_COST, AMT, REG_DM, REG_MAN, WH_MV_NO, DTL_SEQ)
        VALUES(#{gds_cd},
               #{unit},
               #{qty},
               #{unit_cost},
               #{amt},
               SYSDATE,
               #{reg_man},
               #{swh_mv_no},
               (SELECT NVL(MAX(DTL_SEQ),0) + 1 FROM WH_MV_DTL WHERE WH_MV_NO = #{swh_mv_no}))
    </insert>

    <!-- 창고이동 마스터 삭제비트 변경 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeWhmvMst" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.deleteNewTypeWhmvMst */
            WH_MV_MST
        SET DEL_FG = 'Y',
            UPD_MAN = #{upd_man},
            UPD_DM = SYSDATE
        WHERE DEL_FG = 'N'
          AND WH_MV_NO = #{wh_mv_no}
    </delete>

    <!-- 창고이동 디테일 데이터 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeWhmvDtl" parameterType="map">
        DELETE /* DlwNewTypeEvntMap.deleteNewTypeWhmvDtl */
        FROM WH_MV_DTL WHERE WH_MV_NO = #{wh_mv_no}
    </delete>

    <!-- 출고 마스터 삭제비트 변경 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeWhOutMst" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.deleteNewTypeWhOutMst */
            WH_OUT_MST
        SET DEL_FG = 'Y',
            UPD_MAN = #{upd_man},
            UPD_DM = SYSDATE
        WHERE DEL_FG = 'N'
          AND WH_OUT_NO = #{wh_out_no}
          AND OUT_CL = #{out_cl}
    </delete>

    <!-- 출고 디테일 데이터 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeWhOutDtl" parameterType="map">
        DELETE /* DlwNewTypeEvntMap.deleteNewTypeWhOutDtl */
        FROM WH_OUT_DTL WHERE WH_OUT_NO = #{wh_out_no}
    </delete>

    <!-- 입고 마스터 삭제비트 변경 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeWhinMst" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.deleteNewTypeWhinMst */
            WH_IN_MST
        SET DEL_FG = 'Y',
            UPD_MAN = #{upd_man},
            UPD_DM = SYSDATE
        WHERE DEL_FG = 'N'
          AND WH_IN_NO = #{wh_in_no}
    </delete>

    <!-- 입고 디테일 데이터 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeWhinDtl" parameterType="map">
        DELETE /* DlwNewTypeEvntMap.deleteNewTypeWhinDtl */
        FROM WH_IN_DTL WHERE WH_IN_NO = #{wh_in_no}
    </delete>

    <!-- 입금마감 팝업 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypePayTotalList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypePayTotalList */
                  '총납입회차' GUBUN,
                  NVL(B.NO_1,0) PAY1,
                  NVL(C.NO_2,0) PAY2,
                  NVL(D.NO_3,0) PAY3,
                  0 AS TOTAL
            FROM MEM_PROD_ACCNT A
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_1, SUM(NVL(PAY_AMT,0)) AMT_1 FROM PAY_MNG WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) B ON B.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_2, SUM(NVL(PAY_AMT,0)) AMT_2 FROM PAY_MNG_DTL WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) C ON C.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_3, SUM(NVL(PAY_AMT,0)) AMT_3 FROM PAY_MNG_DTL1 WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) D ON D.ACCNT_NO = A.ACCNT_NO
            WHERE A.ACCNT_NO = #{accnt_no}

        UNION ALL

        SELECT
                  '총납입금액' GUBUN,
                  NVL(B.AMT_1,0) PAY1,
                  NVL(C.AMT_2,0) PAY2,
                  NVL(D.AMT_3,0) PAY3,
                  0 AS TOTAL
            FROM MEM_PROD_ACCNT A
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_1, SUM(NVL(PAY_AMT,0)) AMT_1 FROM PAY_MNG WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) B ON B.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_2, SUM(NVL(PAY_AMT,0)) AMT_2 FROM PAY_MNG_DTL WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) C ON C.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_3, SUM(NVL(PAY_AMT,0)) AMT_3 FROM PAY_MNG_DTL1 WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) D ON D.ACCNT_NO = A.ACCNT_NO
            WHERE A.ACCNT_NO = #{accnt_no}

        UNION ALL

        SELECT
                  '잔여회차' GUBUN,
                  CASE WHEN G.PROD_CL = '03' THEN NVL(F.TOT_CNT,0) - NVL(B.NO_1,0) - A.NEW_CHAN_GUNSU ELSE G.EXPR_NO - NVL(B.NO_1,0) - A.NEW_CHAN_GUNSU END AS PAY1,
                  NVL(( SELECT SUM(END_NO -ST_NO+1) FROM PRODUCT_DTL WHERE PROD_CD = A.PROD_CD AND ALLT_AMT>0), 0) - NVL(C.NO_2,0) AS PAY2,
                  NVL(( SELECT SUM(END_NO -ST_NO+1) FROM PRODUCT_DTL WHERE PROD_CD = A.PROD_CD AND ADD_AMT>0), 0) - NVL(D.NO_3,0) AS PAY3,
                  0 AS TOTAL
            FROM MEM_PROD_ACCNT A
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_1, SUM(NVL(PAY_AMT,0)) AMT_1 FROM PAY_MNG WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) B ON B.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_2, SUM(NVL(PAY_AMT,0)) AMT_2 FROM PAY_MNG_DTL WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) C ON C.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_3, SUM(NVL(PAY_AMT,0)) AMT_3 FROM PAY_MNG_DTL1 WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) D ON D.ACCNT_NO = A.ACCNT_NO
                LEFT JOIN (SELECT PROD_CD,
                             SUM((END_NO - ST_NO + 1) * MONTH_PAY_AMT) AS TOT_MONTH_PAY_AMT,
                             SUM((END_NO - ST_NO + 1) * ALLT_AMT) AS TOT_ALLT_AMT,
                             SUM((END_NO - ST_NO + 1) * ADD_AMT) AS TOT_ADD_AMT,
                             SUM(END_NO - ST_NO + 1)  AS TOT_CNT
                           FROM PRODUCT_DTL
                           GROUP BY PROD_CD )F ON F.PROD_CD = A.PROD_CD
                LEFT OUTER JOIN PRODUCT G ON G.PROD_CD = A.PROD_CD
            WHERE A.ACCNT_NO = #{accnt_no}

        UNION ALL

        SELECT
                  '잔여금액' GUBUN,
                  CASE WHEN G.PROD_CL = '03' THEN NVL(F.TOT_MONTH_PAY_AMT,0) - (SELECT NVL(SUM(PAY_AMT),0) FROM PAY_MNG WHERE ACCNT_NO = A.ACCNT_NO AND DEL_FG = 'N') - NVL(G.MON_PAY_AMT * NVL(A.NEW_CHAN_GUNSU,0),0)
                       ELSE ((SELECT NVL(PROD_AMT,0)
                              FROM PRODUCT
                              WHERE PROD_CD = A.PROD_CD AND DEL_FG = 'N') - (SELECT NVL(SUM(PAY_AMT),0)
                                                                             FROM PAY_MNG
                                                                             WHERE PAY_MNG.ACCNT_NO = A.ACCNT_NO  AND DEL_FG = 'N' ) -  (A.NEW_CHAN_GUNSU * (SELECT TO_NUMBER(MON_PAY_AMT)
                                                                                                                                                             FROM PRODUCT
                                                                                                                                                             WHERE PROD_CD = A.PROD_CD AND DEL_FG = 'N')))
                                END PAY1, -- 상조부금 실 잔여금액
                    (NVL(F.TOT_ALLT_AMT,0) - NVL(C.AMT_2,0)) PAY2,
                    (NVL(F.TOT_ADD_AMT,0) - NVL(D.AMT_3,0)) PAY3,
                    0 AS TOTAL
            FROM MEM_PROD_ACCNT A
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_1, SUM(NVL(PAY_AMT,0)) AMT_1 FROM PAY_MNG WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) B ON B.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_2, SUM(NVL(PAY_AMT,0)) AMT_2 FROM PAY_MNG_DTL WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) C ON C.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) NO_3, SUM(NVL(PAY_AMT,0)) AMT_3 FROM PAY_MNG_DTL1 WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) D ON D.ACCNT_NO = A.ACCNT_NO
                LEFT OUTER JOIN PRODUCT_DTL E ON E.PROD_CD = A.PROD_CD AND SEQ = 1
                LEFT JOIN (SELECT PROD_CD,
                             SUM((END_NO - ST_NO + 1) * MONTH_PAY_AMT) AS TOT_MONTH_PAY_AMT,
                             SUM((END_NO - ST_NO + 1) * ALLT_AMT) AS TOT_ALLT_AMT,
                             SUM((END_NO - ST_NO + 1) * ADD_AMT) AS TOT_ADD_AMT,
                             SUM(END_NO - ST_NO + 1)  AS TOT_CNT
                           FROM PRODUCT_DTL
                           GROUP BY PROD_CD )F ON F.PROD_CD = A.PROD_CD
                 LEFT OUTER JOIN PRODUCT G ON G.PROD_CD = A.PROD_CD
            WHERE A.ACCNT_NO = #{accnt_no}

    </select>

    <!-- 장법 분석현황 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntAnal1" parameterType="map" resultType="resultMap">

        WITH TOT_TBL /* DlwNewTypeEvntMap.getNewTypeEvntAnal1 */
            AS (
                    SELECT COUNT(TBL2.ACCNT_NO) CNT
                      FROM (SELECT '화장' BUR_CRE_CL FROM DUAL
                            UNION ALL
                            SELECT '매장' BUR_CRE_CL FROM DUAL
                            UNION ALL
                            SELECT '탈관' BUR_CRE_CL FROM DUAL
                           ) TBL1
                           LEFT OUTER JOIN
                           (SELECT ACCNT_NO
                                 , CASE WHEN NVL(EVT.BUR_CRE_CL, ' ') = '0001'
                                             THEN '매장'
                                             WHEN NVL(EVT.BUR_CRE_CL, ' ') = '0002'
                                             THEN '화장'
                                             WHEN NVL(EVT.BUR_CRE_CL, ' ') = '0003'
                                             THEN '탈관'
                                             ELSE ''
                                        END BUR_CRE_CL
                                 , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                 , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                              FROM EVENT EVT
                                   LEFT OUTER JOIN(
                                          SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                            FROM EVENT_MNGR_REG
                                           WHERE DEL_FG = 'N'
                                             AND EVT_MNGR_GUBUN = '0001'
                                          GROUP BY EVT_SEQ
                                       )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                   LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                             WHERE EVT.DEL_FG = 'N'
                             AND EVT.SORT ='01'
                             <if test="dt_typ != null and dt_typ != ''">
                                 <if test="dt_typ == '01'">
                                    <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                        AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                    </if>
                                 </if>
                                 <if test="dt_typ == '02'">
                                    <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                        AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                    </if>
                                 </if>
                             </if>
                             <if test="mngr_cd != null and mngr_cd != '' ">
                                 AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                             </if>
                           ) TBL2 ON TBL1.BUR_CRE_CL = TBL2.BUR_CRE_CL
                             <if test="etc_loc != null and etc_loc != '' ">
                                 AND TBL2.LOC = #{etc_loc}
                             </if>
                             <if test="jibu != null and jibu != '' ">
                                 AND TBL2.BRANCH = #{jibu}
                             </if>
                       )

                SELECT
                       NVL(TBL4.BUR_CRE_CL, '합계') CL
                     , TBL4.CNT
                     , TO_CHAR(TBL4.PCT) || '%' PCT
                  FROM (
                        SELECT TBL3.BUR_CRE_CL
                             , TBL3.CNT
                             , CASE WHEN TBL3.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL3.CNT) / TO_NUMBER(TBL3.TOT_CNT) * 100, 2) ELSE 0 END PCT
                          FROM (
                                SELECT TBL1.BUR_CRE_CL
                                     , COUNT(TBL2.ACCNT_NO) CNT
                                     , (SELECT CNT FROM TOT_TBL) AS TOT_CNT
                                  FROM (SELECT '화장' BUR_CRE_CL FROM DUAL
                                        UNION ALL
                                        SELECT '매장' BUR_CRE_CL FROM DUAL
                                        UNION ALL
                                        SELECT '탈관' BUR_CRE_CL FROM DUAL
                                       ) TBL1
                                       LEFT OUTER JOIN
                                       (SELECT ACCNT_NO
                                             , CASE WHEN NVL(EVT.BUR_CRE_CL, ' ') = '0001'
                                                         THEN '매장'
                                                         WHEN NVL(EVT.BUR_CRE_CL, ' ') = '0002'
                                                         THEN '화장'
                                                         WHEN NVL(EVT.BUR_CRE_CL, ' ') = '0003'
                                                         THEN '탈관'
                                                         ELSE ''
                                                    END BUR_CRE_CL
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                               LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT='01'
                                     <if test="dt_typ != null and dt_typ != ''">
                                         <if test="dt_typ == '01'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                         <if test="dt_typ == '02'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                       ) TBL2 ON TBL1.BUR_CRE_CL = TBL2.BUR_CRE_CL
                                   <if test="etc_loc != null and etc_loc != '' ">
                                       AND TBL2.LOC = #{etc_loc}
                                   </if>
                                   <if test="jibu != null and jibu != '' ">
                                       AND TBL2.BRANCH = #{jibu}
                                   </if>
                                GROUP BY TBL1.BUR_CRE_CL
                              ) TBL3
                      ) TBL4

                UNION ALL

                SELECT '합계' CL
                     , (SELECT CNT FROM TOT_TBL) AS CNT
                     , CASE WHEN (SELECT CNT FROM TOT_TBL) <![CDATA[>]]> 0
                            THEN '100.00%'
                            ELSE '0.00%'
                       END PCT
           FROM DUAL

    </select>

    <!-- 신규유지 분석현황 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntAnal2" parameterType="map" resultType="resultMap">

        WITH TOT_TBL /* DlwNewTypeEvntMap.getNewTypeEvntAnal2 */
                    AS (
                          SELECT COUNT(TBL2.ACCNT_NO) CNT
                                  FROM (SELECT '신규' NEW_ACCNT FROM DUAL
                                        UNION ALL
                                        SELECT '유지' NEW_ACCNT FROM DUAL
                                       ) TBL1
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , CASE WHEN EVT.EVENT_COMP_DAY IS NOT NULL
                                                         AND EVT.EVENT_COMP_DAY != '1900/01/01'
                                                         AND SUBSTR(EVT.EVENT_COMP_DAY, 1, 7) = SUBSTR(ACCNT.JOIN_DT, 1, 7)
                                                    THEN '신규'
                                                    ELSE '유지'
                                               END NEW_ACCNT
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                          FROM EVENT EVT
                                               INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT='01'
                                     <if test="dt_typ != null and dt_typ != ''">
                                         <if test="dt_typ == '01'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                         <if test="dt_typ == '02'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                   ) TBL2 ON TBL1.NEW_ACCNT = TBL2.NEW_ACCNT
                                   <if test="etc_loc != null and etc_loc != '' ">
                                       AND TBL2.LOC = #{etc_loc}
                                   </if>
                                   <if test="jibu != null and jibu != '' ">
                                       AND TBL2.BRANCH = #{jibu}
                                   </if>
                               )

                SELECT TBL4.NEW_ACCNT CL
                     , TBL4.CNT
                     , TO_CHAR(TBL4.PCT) || '%' PCT
                  FROM (
                        SELECT TBL3.NEW_ACCNT
                             , TBL3.CNT
                             , CASE WHEN TBL3.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL3.CNT) / TO_NUMBER(TBL3.TOT_CNT) * 100, 2) ELSE 0 END PCT
                          FROM (
                                SELECT TBL1.NEW_ACCNT
                                     , COUNT(TBL2.ACCNT_NO) CNT
                                     , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                  FROM (SELECT '신규' NEW_ACCNT FROM DUAL
                                        UNION ALL
                                        SELECT '유지' NEW_ACCNT FROM DUAL
                                       ) TBL1
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , CASE WHEN EVT.EVENT_COMP_DAY IS NOT NULL
                                                         AND EVT.EVENT_COMP_DAY != '1900/01/01'
                                                         AND SUBSTR(EVT.EVENT_COMP_DAY, 1, 7) = SUBSTR(ACCNT.JOIN_DT, 1, 7)
                                                    THEN '신규'
                                                    ELSE '유지'
                                               END NEW_ACCNT
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                          FROM EVENT EVT
                                               INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT = '01'
                                     <if test="dt_typ != null and dt_typ != ''">
                                         <if test="dt_typ == '01'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                         <if test="dt_typ == '02'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                       ) TBL2 ON TBL1.NEW_ACCNT = TBL2.NEW_ACCNT
                                   <if test="etc_loc != null and etc_loc != '' ">
                                       AND TBL2.LOC = #{etc_loc}
                                   </if>
                                   <if test="jibu != null and jibu != '' ">
                                       AND TBL2.BRANCH = #{jibu}
                                   </if>
                                GROUP BY TBL1.NEW_ACCNT
                              ) TBL3
                      ) TBL4

                UNION ALL

                SELECT '합계' CL
                     , (SELECT CNT FROM TOT_TBL) CNT
                     , CASE WHEN (SELECT CNT FROM TOT_TBL) <![CDATA[>]]> 0
                            THEN '100.00%'
                            ELSE '0.00%'
                       END PCT
            FROM DUAL

    </select>


    <!-- 지부 분석현황 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntAnal3" parameterType="map" resultType="resultMap">
        WITH TOT_TBL /* DlwNewTypeEvntMap.getNewTypeEvntAnal3 */
                    AS(SELECT COUNT(TBL6.ACCNT_NO) CNT
                                  FROM (SELECT CASE WHEN DIR_OUT_GUBUN = '0001'
                                                    THEN BRANCH_NM || ' '
                                                    ELSE BRANCH_NM
                                               END CD_NM
                                             , BRANCH_CD COM_CD
                                          FROM BRANCH_MNG A
                                                   INNER JOIN WAREHOUSE_MNG B ON A.BRANCH_CD = B.BRANCH
                                               AND B.DEL_FG = 'N'
                                               AND (A.BRANCH_CD = '0012' OR (A.BRANCH_CD != '0012'
                                                                             AND
                                                                            (B.WH_USE_YN = 'Y' OR (B.WH_USE_YN = 'N' AND B.TERMINATE_DT BETWEEN #{stt_dt} AND #{end_dt}))))
                                         WHERE A.DEL_FG = 'N'
                                        GROUP BY CASE WHEN DIR_OUT_GUBUN = '0001'
                                                    THEN BRANCH_NM || ' '
                                                    ELSE BRANCH_NM
                                                 END, BRANCH_CD
                                       ) TBL5
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                             , NVL((SELECT B.BRANCH FROM WAREHOUSE_MNG B WHERE  B.WH_CD = (SELECT A.WH_CD FROM EVENT_MANAGER_MNG A WHERE A.EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT = '01'
                                     <if test="dt_typ != null and dt_typ != ''">
                                         <if test="dt_typ == '01'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                         <if test="dt_typ == '02'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                       ) TBL6 ON TBL5.COM_CD = TBL6.BRANCH_CD
                                   <if test="etc_loc != null and etc_loc != '' ">
                                       AND TBL6.LOC = #{etc_loc}
                                   </if>
                                   <if test="jibu != null and jibu != '' ">
                                       AND TBL6.BRANCH = #{jibu}
                                   </if>
                                 WHERE TBL6.BRANCH_CD IS NOT NULL
        )
                SELECT TBL4.BRANCH_CD CL
                     , TBL4.CNT
                     , TO_CHAR(TBL4.PCT) || '%' PCT
                  FROM (SELECT TBL7.CD_NM BRANCH_CD
                             , TBL7.CNT
                             , CASE WHEN TBL7.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL7.CNT) / TO_NUMBER(TBL7.TOT_CNT) * 100, 2) ELSE 0 END PCT
                          FROM (
                                SELECT TBL5.CD_NM
                                     , TBL5.COM_CD
                                     , COUNT(TBL6.ACCNT_NO) CNT
                                     , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                  FROM (SELECT CASE WHEN DIR_OUT_GUBUN = '0001'
                                                    THEN BRANCH_NM || ' '
                                                    ELSE BRANCH_NM
                                               END CD_NM
                                             , BRANCH_CD COM_CD
                                          FROM BRANCH_MNG A
                                                   INNER JOIN WAREHOUSE_MNG B ON A.BRANCH_CD = B.BRANCH
                                               AND B.DEL_FG = 'N'
                                               AND (A.BRANCH_CD = '0012' OR (A.BRANCH_CD != '0012'
                                                                             AND
                                                                             (B.WH_USE_YN = 'Y' OR (B.WH_USE_YN = 'N' AND B.TERMINATE_DT BETWEEN #{stt_dt} AND #{end_dt}))))
                                         WHERE A.DEL_FG = 'N'
                                        GROUP BY CASE WHEN DIR_OUT_GUBUN = '0001'
                                                    THEN BRANCH_NM || ' '
                                                    ELSE BRANCH_NM
                                                 END, BRANCH_CD
                                       ) TBL5
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                             , NVL((SELECT B.BRANCH FROM WAREHOUSE_MNG B WHERE B.WH_CD = (SELECT A.WH_CD FROM EVENT_MANAGER_MNG A WHERE A.EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT = '01'
                                     <if test="dt_typ != null and dt_typ != ''">
                                         <if test="dt_typ == '01'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                         <if test="dt_typ == '02'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                       ) TBL6 ON TBL5.COM_CD = TBL6.BRANCH_CD
                                   <if test="etc_loc != null and etc_loc != '' ">
                                       AND TBL6.LOC = #{etc_loc}
                                   </if>
                                   <if test="jibu != null and jibu != '' ">
                                       AND TBL6.BRANCH = #{jibu}
                                   </if>
                                 WHERE TBL6.BRANCH_CD IS NOT NULL
                                GROUP BY TBL5.CD_NM, TBL5.COM_CD
                              ) TBL7
                      ) TBL4

                UNION ALL

                SELECT '합계' CL
                     , (SELECT CNT FROM TOT_TBL) CNT
                     , CASE WHEN (SELECT CNT FROM TOT_TBL) <![CDATA[>]]> 0
                            THEN '100.00%'
                            ELSE '0.00%'
                       END PCT
            FROM DUAL

                UNION ALL

                SELECT '' CL
                     , NULL CNT
                     , '' PCT
            FROM DUAL

                UNION ALL

                SELECT '직영' AS CL
                     , SUM(TBL4.CNT) CNT
                     , TO_NUMBER(SUM(TBL4.PCT)) || '%' PCT
                  FROM (SELECT TBL7.CD_NM BRANCH_CD
                             , TBL7.CNT
                             , CASE WHEN TBL7.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL7.CNT) / TO_NUMBER(TBL7.TOT_CNT) * 100, 2) ELSE 0 END PCT
                          FROM (
                                SELECT TBL5.CD_NM
                                     , TBL5.COM_CD
                                     , COUNT(TBL6.ACCNT_NO) CNT
                                     , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                  FROM (SELECT CASE WHEN DIR_OUT_GUBUN = '0001'
                                                    THEN BRANCH_NM || ' '
                                                    ELSE BRANCH_NM
                                               END CD_NM
                                             , BRANCH_CD COM_CD
                                          FROM BRANCH_MNG A
                                                   INNER JOIN WAREHOUSE_MNG B ON A.BRANCH_CD = B.BRANCH
                                               AND B.DEL_FG = 'N'
                                               AND (A.BRANCH_CD = '0012' OR (A.BRANCH_CD != '0012'
                                                                             AND
                                                                             (B.WH_USE_YN = 'Y' OR (B.WH_USE_YN = 'N' AND B.TERMINATE_DT BETWEEN #{stt_dt} AND #{end_dt}))))
                                         WHERE A.DEL_FG = 'N'
                                        GROUP BY CASE WHEN DIR_OUT_GUBUN = '0001'
                                                    THEN BRANCH_NM || ' '
                                                    ELSE BRANCH_NM
                                                 END, BRANCH_CD
                                       ) TBL5
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                             , NVL((SELECT B.BRANCH FROM WAREHOUSE_MNG B WHERE  B.WH_CD = (SELECT A.WH_CD FROM EVENT_MANAGER_MNG A WHERE A.EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                             , NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') DIR_OUT_GUBUN
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                               LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT = '01'
                                     <if test="dt_typ != null and dt_typ != ''">
                                         <if test="dt_typ == '01'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                         <if test="dt_typ == '02'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                       ) TBL6 ON TBL5.COM_CD = TBL6.BRANCH_CD
                                                 AND TBL6.DIR_OUT_GUBUN = '0001'
                                   <if test="etc_loc != null and etc_loc != '' ">
                                       AND TBL6.LOC = #{etc_loc}
                                   </if>
                                   <if test="jibu != null and jibu != '' ">
                                       AND TBL6.BRANCH = #{jibu}
                                   </if>
                                 WHERE TBL6.BRANCH_CD IS NOT NULL
                                GROUP BY TBL5.CD_NM, TBL5.COM_CD
                              ) TBL7
                      ) TBL4
                GROUP BY '직영'

                UNION ALL

                SELECT '전국지부' AS CL
                     , SUM(TBL4.CNT) CNT
                     , TO_NUMBER(SUM(TBL4.PCT)) || '%' PCT
                  FROM (SELECT TBL7.CD_NM BRANCH_CD
                             , TBL7.CNT
                         , CASE WHEN TBL7.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL7.CNT) / TO_NUMBER(TBL7.TOT_CNT) * 100, 2) ELSE 0 END PCT
                          FROM (
                                SELECT TBL5.CD_NM
                                     , TBL5.COM_CD
                                     , COUNT(TBL6.ACCNT_NO) CNT
                                     , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                  FROM (SELECT CASE WHEN DIR_OUT_GUBUN = '0001'
                                                    THEN BRANCH_NM || ' '
                                                    ELSE BRANCH_NM
                                               END CD_NM
                                             , BRANCH_CD COM_CD
                                          FROM BRANCH_MNG A
                                                   INNER JOIN WAREHOUSE_MNG B ON A.BRANCH_CD = B.BRANCH
                                               AND B.DEL_FG = 'N'
                                               AND (A.BRANCH_CD = '0012' OR (A.BRANCH_CD != '0012'
                                                                             AND
                                                                             (B.WH_USE_YN = 'Y' OR (B.WH_USE_YN = 'N' AND B.TERMINATE_DT BETWEEN #{stt_dt} AND #{end_dt}))))
                                         WHERE A.DEL_FG = 'N'
                                        GROUP BY CASE WHEN DIR_OUT_GUBUN = '0001'
                                                    THEN BRANCH_NM || ' '
                                                    ELSE BRANCH_NM
                                                 END, BRANCH_CD
                                       ) TBL5
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                             , NVL((SELECT B.BRANCH FROM WAREHOUSE_MNG B WHERE  B.WH_CD = (SELECT A.WH_CD FROM EVENT_MANAGER_MNG A WHERE A.EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                             , NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') DIR_OUT_GUBUN
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                   LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT = '01'
                                     <if test="dt_typ != null and dt_typ != ''">
                                         <if test="dt_typ == '01'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                         <if test="dt_typ == '02'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                       ) TBL6 ON TBL5.COM_CD = TBL6.BRANCH_CD
                                                 AND TBL6.DIR_OUT_GUBUN = '0002'
                                   <if test="etc_loc != null and etc_loc != '' ">
                                       AND TBL6.LOC = #{etc_loc}
                                   </if>
                                   <if test="jibu != null and jibu != '' ">
                                       AND TBL6.BRANCH = #{jibu}
                                   </if>
                                 WHERE TBL6.BRANCH_CD IS NOT NULL
                                GROUP BY TBL5.CD_NM, TBL5.COM_CD
                              ) TBL7
                      ) TBL4
                GROUP BY '전국지부'
    </select>

    <!-- 지역 분석현황 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntAnal4" parameterType="map" resultType="resultMap">

        WITH TOT_TBL /* DlwNewTypeEvntMap.getNewTypeEvntAnal4 */
                 AS  (SELECT COUNT(TBL2.ACCNT_NO) CNT
                                  FROM (SELECT NVL(CD_NM, ' ') LOC
                                          FROM COM_CD
                                         WHERE GRP_CD = '0177'
                                       ) TBL1
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT = '01'
                                     <if test="dt_typ != null and dt_typ != ''">
                                         <if test="dt_typ == '01'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                         <if test="dt_typ == '02'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                       ) TBL2 ON TBL1.LOC = TBL2.LOC
                                   <if test="etc_loc != null and etc_loc != '' ">
                                       AND TBL2.LOC = #{etc_loc}
                                   </if>
                                   <if test="jibu != null and jibu != '' ">
                                       AND TBL2.BRANCH = #{jibu}
                                   </if>
                   )

                SELECT TBL4.LOC CL
                     , TBL4.CNT CNT
                     , TO_CHAR(TBL4.PCT) || '%' PCT
                  FROM (
                        SELECT TBL3.LOC
                             , TBL3.CNT
                             , CASE WHEN TBL3.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL3.CNT) / TO_NUMBER(TBL3.TOT_CNT) * 100, 2) ELSE 0 END PCT
                          FROM (
                                SELECT TBL1.LOC
                                     , COUNT(TBL2.ACCNT_NO) CNT
                                     , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                  FROM (SELECT NVL(CD_NM, ' ') LOC
                                          FROM COM_CD
                                         WHERE GRP_CD = '0177'
                                       ) TBL1
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                  SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                    FROM EVENT_MNGR_REG
                                                   WHERE DEL_FG = 'N'
                                                     AND EVT_MNGR_GUBUN = '0001'
                                                  GROUP BY EVT_SEQ
                                                       )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                               LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT = '01'
                                         <if test="dt_typ != null and dt_typ != ''">
                                             <if test="dt_typ == '01'">
                                                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                    AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                                </if>
                                             </if>
                                             <if test="dt_typ == '02'">
                                                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                    AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                                </if>
                                             </if>
                                         </if>
                                         <if test="mngr_cd != null and mngr_cd != '' ">
                                             AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                         </if>
                                       ) TBL2 ON TBL1.LOC = TBL2.LOC
                                       <if test="etc_loc != null and etc_loc != '' ">
                                           AND TBL2.LOC = #{etc_loc}
                                       </if>
                                       <if test="jibu != null and jibu != '' ">
                                           AND TBL2.BRANCH = #{jibu}
                                       </if>
                                GROUP BY TBL1.LOC
                              ) TBL3
                      ) TBL4

                UNION ALL

                SELECT '합계' CL
                     , (SELECT CNT FROM TOT_TBL) CNT
                     , CASE WHEN (SELECT CNT FROM TOT_TBL) <![CDATA[>]]> 0
                            THEN '100.00%'
                            ELSE '0.00%'
                       END PCT
                FROM DUAL

                UNION ALL

                SELECT '' CL
                     , NULL CNT
                     , '' PCT
                FROM DUAL

                UNION ALL

                SELECT NVL(TBL4.LOC, '수도권') CL
                     , SUM(TBL4.CNT) CNT
                     , TO_NUMBER( SUM(TBL4.PCT)) || '%' PCT
                  FROM (
                        SELECT TBL3.LOC
                             , TBL3.CNT
                             , CASE WHEN TBL3.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL3.CNT) / TO_NUMBER(TBL3.TOT_CNT) * 100, 2) ELSE 0 END PCT
                          FROM (
                                SELECT TBL1.LOC
                                     , COUNT(TBL2.ACCNT_NO) CNT
                                     , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                  FROM (SELECT NVL(CD_NM, ' ') LOC
                                          FROM COM_CD
                                         WHERE GRP_CD = '0177'
                                       ) TBL1
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                  SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                    FROM EVENT_MNGR_REG
                                                   WHERE DEL_FG = 'N'
                                                     AND EVT_MNGR_GUBUN = '0001'
                                                  GROUP BY EVT_SEQ
                                               )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                               LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT = '01'
                                         <if test="dt_typ != null and dt_typ != ''">
                                             <if test="dt_typ == '01'">
                                                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                    AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                                </if>
                                             </if>
                                             <if test="dt_typ == '02'">
                                                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                    AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                                </if>
                                             </if>
                                         </if>
                                         <if test="mngr_cd != null and mngr_cd != '' ">
                                             AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                         </if>
                                       ) TBL2 ON TBL1.LOC = TBL2.LOC
                                                 AND TBL2.LOC IN ('서울', '경기', '인천')
                                       <if test="etc_loc != null and etc_loc != '' ">
                                           AND TBL2.LOC = #{etc_loc}
                                       </if>
                                       <if test="jibu != null and jibu != '' ">
                                           AND TBL2.BRANCH = #{jibu}
                                       </if>
                                GROUP BY TBL1.LOC
                              ) TBL3
                      ) TBL4
                GROUP BY ROLLUP(TBL4.LOC)
                HAVING GROUPING(TBL4.LOC) = 1

                UNION ALL

                SELECT NVL(TBL4.LOC, '지방') CL
                     , SUM(TBL4.CNT) CNT
                     , TO_NUMBER(SUM(TBL4.PCT)) || '%' PCT
                  FROM (
                        SELECT TBL3.LOC
                             , TBL3.CNT
                             , CASE WHEN TBL3.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL3.CNT) / TO_NUMBER(TBL3.TOT_CNT) * 100, 2) ELSE 0 END PCT
                          FROM (
                                SELECT TBL1.LOC
                                     , COUNT(TBL2.ACCNT_NO) CNT
                                     , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                  FROM (SELECT NVL(CD_NM, ' ') LOC
                                          FROM COM_CD
                                         WHERE GRP_CD = '0177'
                                       ) TBL1
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                  SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                    FROM EVENT_MNGR_REG
                                                   WHERE DEL_FG = 'N'
                                                     AND EVT_MNGR_GUBUN = '0001'
                                                  GROUP BY EVT_SEQ
                                               )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                               LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT = '01'
                                         <if test="dt_typ != null and dt_typ != ''">
                                             <if test="dt_typ == '01'">
                                                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                    AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                                </if>
                                             </if>
                                             <if test="dt_typ == '02'">
                                                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                    AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                                </if>
                                             </if>
                                         </if>
                                         <if test="mngr_cd != null and mngr_cd != '' ">
                                             AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                         </if>
                                       ) TBL2 ON TBL1.LOC = TBL2.LOC
                                                 AND TBL2.LOC NOT IN ('서울', '경기', '인천')
                                       <if test="etc_loc != null and etc_loc != '' ">
                                           AND TBL2.LOC = #{etc_loc}
                                       </if>
                                       <if test="jibu != null and jibu != '' ">
                                           AND TBL2.BRANCH = #{jibu}
                                       </if>
                                GROUP BY TBL1.LOC
                              ) TBL3
                      ) TBL4
                GROUP BY ROLLUP(TBL4.LOC)
                HAVING GROUPING(TBL4.LOC) = 1

    </select>

    <!-- 직영CP 분석현황 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntAnal5" parameterType="map" resultType="resultMap">

        WITH TOT_TBL /* DlwNewTypeEvntMap.getNewTypeEvntAnal5 */
                 AS  (SELECT COUNT(TBL2.ACCNT_NO) CNT
                                  FROM (SELECT EVT_MNGR_CD, EVT_MNGR_NM
                                          FROM EVENT_MANAGER_MNG EMM
                                         WHERE DEL_FG = 'N'
                                           AND JOB_DUTY = '0001'
                                           AND NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMM.EVT_MNGR_CD)), ' ') = '0001'
                                       ) TBL1
                                       LEFT OUTER JOIN
                                       (SELECT ACCNT_NO
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                             , EMR.EVT_MNGR_CD
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                               LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT = '01'
                                     <if test="dt_typ != null and dt_typ != ''">
                                         <if test="dt_typ == '01'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                         <if test="dt_typ == '02'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                       ) TBL2 ON TBL1.EVT_MNGR_CD = TBL2.EVT_MNGR_CD
                                     <if test="etc_loc != null and etc_loc != '' ">
                                         AND TBL2.LOC = #{etc_loc}
                                     </if>
                                     <if test="jibu != null and jibu != '' ">
                                         AND TBL2.BRANCH = #{jibu}
                                     </if>
                    )
                  SELECT TBL4.EVT_MNGR_NM CL
                       , TBL4.CNT CNT
                       , TO_NUMBER(TBL4.PCT) || '%' PCT
                    FROM (
                          SELECT TBL3.EVT_MNGR_NM
                               , TBL3.CNT
                               , CASE WHEN TBL3.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL3.CNT) / TO_NUMBER(TBL3.TOT_CNT) * 100, 2) ELSE 0 END PCT
                            FROM (
                                  SELECT TBL1.EVT_MNGR_NM
                                       , TBL1.EVT_MNGR_CD
                                       , COUNT(TBL2.ACCNT_NO) CNT
                                       , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                    FROM (SELECT EVT_MNGR_CD, EVT_MNGR_NM
                                            FROM EVENT_MANAGER_MNG EMM
                                           WHERE DEL_FG = 'N'
                                             AND JOB_DUTY = '0001'
                                             AND NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMM.EVT_MNGR_CD)), ' ') = '0001'
                                         ) TBL1
                                         LEFT OUTER JOIN
                                         (SELECT ACCNT_NO
                                               , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                               , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                                               , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                               , NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') EMP_GUBUN
                                               , EMR.EVT_MNGR_CD
                                            FROM EVENT EVT
                                                 LEFT OUTER JOIN(
                                                    SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                      FROM EVENT_MNGR_REG
                                                     WHERE DEL_FG = 'N'
                                                       AND EVT_MNGR_GUBUN = '0001'
                                                    GROUP BY EVT_SEQ
                                                 )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                 LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                           WHERE EVT.DEL_FG = 'N'
                                           AND EVT.SORT = '01'
                                           <if test="dt_typ != null and dt_typ != ''">
                                               <if test="dt_typ == '01'">
                                                  <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                      AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                                  </if>
                                               </if>
                                               <if test="dt_typ == '02'">
                                                  <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                      AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                                  </if>
                                               </if>
                                           </if>
                                           <if test="mngr_cd != null and mngr_cd != '' ">
                                               AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                           </if>
                                         ) TBL2 ON TBL1.EVT_MNGR_CD = TBL2.EVT_MNGR_CD
                                                   AND TBL2.EMP_GUBUN = '0001'
                                           <if test="etc_loc != null and etc_loc != '' ">
                                               AND TBL2.LOC = #{etc_loc}
                                           </if>
                                           <if test="jibu != null and jibu != '' ">
                                               AND TBL2.BRANCH = #{jibu}
                                           </if>
                                  GROUP BY TBL1.EVT_MNGR_NM, TBL1.EVT_MNGR_CD
                                ) TBL3
                        ) TBL4

                  UNION ALL

                  SELECT '합계' CL
                       , (SELECT CNT FROM TOT_TBL) CNT
                       , CASE WHEN (SELECT CNT FROM TOT_TBL) <![CDATA[>]]> 0
                              THEN '100.00%'
                              ELSE '0.00%'
                         END PCT
                  FROM DUAL

    </select>

    <!-- 종교 분석현황 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntAnal6" parameterType="map" resultType="resultMap">

        WITH TOT_TBL /* DlwNewTypeEvntMap.getNewTypeEvntAnal6 */
                 AS  (SELECT COUNT(TBL2.ACCNT_NO) CNT
                                  FROM (SELECT CD_NM, COM_CD
                                          FROM COM_CD
                                         WHERE GRP_CD = '0142'
                                       ) TBL1
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , EVT.BRPLOT
                                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                          FROM EVENT EVT
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                               LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'N'
                                         AND EVT.SORT ='01'
                                     <if test="dt_typ != null and dt_typ != ''">
                                         <if test="dt_typ == '01'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                         <if test="dt_typ == '02'">
                                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                            </if>
                                         </if>
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                       ) TBL2 ON TBL1.COM_CD = TBL2.BRPLOT
                                     <if test="etc_loc != null and etc_loc != '' ">
                                         AND TBL2.LOC = #{etc_loc}
                                     </if>
                                     <if test="jibu != null and jibu != '' ">
                                         AND TBL2.BRANCH = #{jibu}
                                     </if>
                    )
                    SELECT TBL4.BRPLOT CL
                         , TBL4.CNT
                         , TO_NUMBER(TBL4.PCT) || '%' PCT
                      FROM (
                            SELECT TBL3.CD_NM BRPLOT
                                 , TBL3.CNT
                                 , CASE WHEN TBL3.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL3.CNT) / TO_NUMBER(TBL3.TOT_CNT) * 100, 2) ELSE 0 END PCT
                              FROM (
                                    SELECT TBL1.CD_NM
                                         , TBL1.COM_CD
                                         , COUNT(TBL2.ACCNT_NO) CNT
                                         , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                      FROM (SELECT CD_NM, COM_CD
                                              FROM COM_CD
                                             WHERE GRP_CD = '0142'
                                           ) TBL1
                                           LEFT OUTER JOIN
                                           (SELECT EVT.ACCNT_NO
                                                 , EVT.BRPLOT
                                                 , NVL(EVT.ETC_LOC_NM, ' ') LOC
                                                 , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                                                 , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                              FROM EVENT EVT
                                                   LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                   LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                             WHERE EVT.DEL_FG = 'N'
                                             AND EVT.SORT='01'
                                             <if test="dt_typ != null and dt_typ != ''">
                                                 <if test="dt_typ == '01'">
                                                    <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                        AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                                    </if>
                                                 </if>
                                                 <if test="dt_typ == '02'">
                                                    <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                                        AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                                                    </if>
                                                 </if>
                                             </if>
                                             <if test="mngr_cd != null and mngr_cd != '' ">
                                                 AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                             </if>
                                           ) TBL2 ON TBL1.COM_CD = TBL2.BRPLOT
                                             <if test="etc_loc != null and etc_loc != '' ">
                                                 AND TBL2.LOC = #{etc_loc}
                                             </if>
                                             <if test="jibu != null and jibu != '' ">
                                                 AND TBL2.BRANCH = #{jibu}
                                             </if>
                                    GROUP BY TBL1.CD_NM, TBL1.COM_CD
                                  ) TBL3
                          ) TBL4

                    UNION ALL

                    SELECT '합계' CL
                         , (SELECT CNT FROM TOT_TBL) CNT
                         , CASE WHEN (SELECT CNT FROM TOT_TBL) <![CDATA[>]]> 0
                                THEN '100.00%'
                                ELSE '0.00%'
                           END PCT
                    FROM DUAL

    </select>

    <!-- 행사취소현황 및 분석(취소현황 조회건수) -->
    <select id="DlwNewTypeEvntMap.getNewTypeAnnlCnclCount" parameterType="map" resultType="int">

            SELECT /* DlwNewTypeEvntMap.getNewTypeAnnlCnclCount */
                COUNT(*)
              FROM (
                SELECT     ROW_NUMBER()OVER(ORDER BY EVT.SEQ) CNT
                     , TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') canclRegDm
                     , MEM.MEM_NM memNm
                     , NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), ' ') evtMngrNm
                     , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') branchNm
                     , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') branch
                     , EMP.EMPLE_NM empleNm
                     , FN_PROD_NM(ACCNT.PROD_CD) prodNm
                     , FN_DEPT_NM(EMP.DEPT_CD) deptNm
                     , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                            THEN (SELECT FUNRL_NM
                                    FROM FUNRL_HALL
                                   WHERE FUNRL_CD = EVT.FUNRL_HALL)
                            ELSE CASE WHEN EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = ''
                                      THEN ''
                                      ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                 END
                       END, ' ') eventPlace
                     , EVT.CNL_RESON cnlReson
                     , NVL(FN_COM_NM('108', EVT.CNL_REASON_CD), '기타') cnlReasonNm
                     , FN_EMPLE_NM(EVT.CANCL_REG_MAN) canclRegMan
                     , EVT.ACCNT_NO accntNo
                     , EVT.DEL_FG delFg
                     , TO_CHAR(EVT.SEQ) seq
                  FROM EVENT EVT
                       INNER JOIN MEM_PROD_ACCNT ACCNT ON ACCNT.DEL_FG = 'N' AND EVT.ACCNT_NO = ACCNT.ACCNT_NO
                       INNER JOIN MEMBER MEM ON MEM.MEM_NO = ACCNT.MEM_NO
                       INNER JOIN EMPLOYEE EMP ON ACCNT.EMPLE_NO = EMP.EMPLE_NO
                       LEFT OUTER JOIN(
                          SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                            FROM EVENT_MNGR_REG
                           WHERE DEL_FG = 'N'
                             AND EVT_MNGR_GUBUN = '0001'
                          GROUP BY EVT_SEQ
                       ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                       LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                 WHERE EVT.DEL_FG = 'Y'
                 AND EVT.SORT = '01'
                   AND NVL(EVT.CNL_REASON_CD, '01') NOT IN ('02', '003')
                   <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                          AND TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
                   </if>
                   <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                       AND EVT.CNL_WORK_YN = #{cnl_work_yn}
                   </if>
                   <if test="mem_nm != null and mem_nm != '' ">
                       AND MEM.MEM_NM LIKE '%' || #{mem_nm} || '%'
                   </if>
                   <if test="mngr_cd != null and mngr_cd != '' ">
                       AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                   </if>
                ) TBL
            WHERE 1=1
           <if test="jibu != null and jibu != '' ">
               AND TBL.BRANCH = #{jibu}
           </if>
    </select>

    <!-- 행사현황 분석 및 조회(메인) 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeAnnlCnclList" parameterType="map" resultType="resultMap">

            SELECT /* DlwNewTypeEvntMap.getNewTypeAnnlCnclList */
                TBL.*
              FROM (
                SELECT     ROW_NUMBER()OVER(ORDER BY EVT.SEQ) CNT
                     , TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') canclRegDm
                     , MEM.MEM_NM memNm
                     , NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), ' ') evtMngrNm
                     , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') branchNm
                     , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') branch
                     , EMP.EMPLE_NM empleNm
                     , FN_PROD_NM(ACCNT.PROD_CD) prodNm
                     , FN_DEPT_NM(EMP.DEPT_CD) deptNm
                     , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                            THEN (SELECT FUNRL_NM
                                    FROM FUNRL_HALL
                                   WHERE FUNRL_CD = EVT.FUNRL_HALL)
                            ELSE CASE WHEN EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = ''
                                      THEN ''
                                      ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                 END
                       END, ' ') eventPlace
                     , EVT.CNL_RESON cnlReson
                     , NVL(FN_COM_NM('108', EVT.CNL_REASON_CD), '기타') cnlReasonNm
                     , FN_EMPLE_NM(EVT.CANCL_REG_MAN) canclRegMan
                     , EVT.ACCNT_NO accntNo
                     , EVT.DEL_FG delFg
                     , TO_CHAR(EVT.SEQ) seq
                     , TRUNC(MOD((CA_DT.C - CA_DT.B), 1) * 24) || '시간 ' || TRUNC(ROUND(MOD((CA_DT.C - CA_DT.B) * 24, 1) * 60)) || '분' CADT
                  FROM EVENT EVT
                       INNER JOIN MEM_PROD_ACCNT ACCNT ON ACCNT.DEL_FG = 'N' AND EVT.ACCNT_NO = ACCNT.ACCNT_NO
                       INNER JOIN MEMBER MEM ON MEM.MEM_NO = ACCNT.MEM_NO
                       INNER JOIN EMPLOYEE EMP ON ACCNT.EMPLE_NO = EMP.EMPLE_NO
                       LEFT OUTER JOIN(
                          SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                            FROM EVENT_MNGR_REG
                           WHERE DEL_FG = 'N'
                             AND EVT_MNGR_GUBUN = '0001'
                          GROUP BY EVT_SEQ
                       ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                       LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                       LEFT OUTER JOIN(SELECT TO_DATE(VAL8 || ' ' || NVL(VAL8_H,'00') || ':' || NVL(VAL8_M,'00'), 'YYYYMMDDHH24:MI') B,
                                              TO_DATE(ARRIVE_DT || ' ' || NVL(ARR_H,'00') || ':' || NVL(ARR_M,'00'), 'YYYYMMDDHH24:MI') A,
                                              TO_DATE(NVL(TO_CHAR(CANCL_REG_DM, 'YYYYMMDD'),'99991231') || ' ' || NVL(TO_CHAR(CANCL_REG_DM,'HH24'),'00') || ':' || NVL(TO_CHAR(CANCL_REG_DM,'MI'),'00'), 'YYYYMMDDHH24:MI') C,
                                              ACCNT_NO,
                                              SEQ
                                       FROM EVENT
                                       WHERE DEL_FG = 'Y'
                                       )CA_DT ON CA_DT.ACCNT_NO = EVT.ACCNT_NO AND EVT.SEQ = CA_DT.SEQ
                 WHERE EVT.DEL_FG = 'Y'
                 AND EVT.SORT = '01'
                   AND NVL(EVT.CNL_REASON_CD, '01') NOT IN ('02', '003')
                   <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                          AND TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
                   </if>
                   <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                       AND EVT.CNL_WORK_YN = #{cnl_work_yn}
                   </if>
                   <if test="mem_nm != null and mem_nm != '' ">
                       AND MEM.MEM_NM LIKE '%' || #{mem_nm} || '%'
                   </if>
                   <if test="mngr_cd != null and mngr_cd != '' ">
                       AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                   </if>
                ) TBL
            WHERE 1=1
           <if test="jibu != null and jibu != '' ">
               AND TBL.BRANCH = #{jibu}
           </if>
    </select>

    <!-- 취소분석_지부별 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntCncl1" parameterType="map" resultType="resultMap">
         WITH /* DlwNewTypeEvntMap.getNewTypeEvntCncl1 */
              TOT_TBL AS (
                          SELECT COUNT(TBL6.ACCNT_NO) CNT
                                  FROM (SELECT CASE WHEN DIR_OUT_GUBUN = '0001'
                                                    THEN BRANCH_NM || ' '
                                                    ELSE BRANCH_NM
                                               END CD_NM
                                             , BRANCH_CD COM_CD
                                          FROM BRANCH_MNG
                                         WHERE DEL_FG = 'N'
                                     <if test="jibu != null and jibu != '' ">
                                         AND BRANCH_CD = #{jibu}
                                     </if>
                                       ) TBL5
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                             , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                                          FROM EVENT EVT
                                               INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                           LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'Y'
                                         AND EVT.SORT = '01'
                                           AND NVL(EVT.CNL_REASON_CD, '01') NOT IN ('02', '003')
                                           AND TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
                                       <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                                           AND EVT.CNL_WORK_YN = #{cnl_work_yn}
                                       </if>
                                       <if test="mngr_cd != null and mngr_cd != '' ">
                                           AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                       </if>
                                       ) TBL6 ON TBL5.COM_CD = TBL6.BRANCH_CD
                                     <if test="mem_nm != null and mem_nm != '' ">
                                         AND TBL6.MEM_NM LIKE '%' || #{mem_nm} || '%'
                                     </if>
                      )
                        SELECT TBL4.BRANCH_CD CL
                             , TBL4.CNCL_CNT
                             , TBL4.EVT_CNT
                             , TO_CHAR(TBL4.PCT) || '%' PCT
                             , TO_CHAR(TBL4.CNCL_PCT) || '%' CNCL_PCT
                          FROM (SELECT TBL7.CD_NM BRANCH_CD
                                     , TBL7.CNCL_CNT
                                     , TBL7.EVT_CNT
                                     , CASE WHEN TBL7.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL7.CNCL_CNT) / NULLIF(TO_NUMBER(TBL7.TOT_CNT),0) * 100, 2) ELSE 0 END PCT
                                     , CASE WHEN TBL7.EVT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL7.CNCL_CNT) / NULLIF((TO_NUMBER(TBL7.CNCL_CNT) + TO_NUMBER(TBL7.EVT_CNT)),0) * 100, 2) ELSE 0 END CNCL_PCT
                                  FROM (
                                        SELECT TBL5.CD_NM
                                             , TBL5.COM_CD
                                             , SUM(CASE WHEN TBL6.BRANCH_CD IS NOT NULL AND TBL6.CNCL_CL = 'C' THEN 1 ELSE 0 END) CNCL_CNT
                                             , SUM(CASE WHEN TBL6.BRANCH_CD IS NOT NULL AND TBL6.CNCL_CL = 'E' THEN 1 ELSE 0 END) EVT_CNT
                                             , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                          FROM (SELECT CASE WHEN DIR_OUT_GUBUN = '0001'
                                                            THEN BRANCH_NM || ' '
                                                            ELSE BRANCH_NM
                                                       END CD_NM
                                                     , BRANCH_CD COM_CD
                                                  FROM BRANCH_MNG
                                                 WHERE DEL_FG = 'N'
                                                 <if test="jibu != null and jibu != '' ">
                                                     AND BRANCH_CD = #{jibu}
                                                 </if>
                                               ) TBL5
                                               LEFT OUTER JOIN
                                               (SELECT EVT.ACCNT_NO
                                                     , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                                     , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                                     , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                                                     , CASE WHEN EVT.DEL_FG = 'Y' AND NVL(EVT.CNL_REASON_CD, '01') NOT IN ('02', '003')
                                                              THEN 'C'
                                                              WHEN EVT.DEL_FG = 'N'
                                                              THEN 'E'
                                                              ELSE ''
                                                         END CNCL_CL
                                                  FROM EVENT EVT
                                                       INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                                                       LEFT OUTER JOIN(
                                                          SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                            FROM EVENT_MNGR_REG
                                                           WHERE DEL_FG = 'N'
                                                             AND EVT_MNGR_GUBUN = '0001'
                                                          GROUP BY EVT_SEQ
                                                       )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                       LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                                 WHERE (
                                                            EVT.EVENT_COMP_DAY BETWEEN #{evt_stt_dt} AND #{evt_end_dt}
                                                          OR
                                                            TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
                                                         )
                                                         AND EVT.SORT= '01'
                                                         <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                                                             AND EVT.CNL_WORK_YN = #{cnl_work_yn}
                                                         </if>
                                                         <if test="mngr_cd != null and mngr_cd != '' ">
                                                             AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                                         </if>
                                               ) TBL6 ON TBL5.COM_CD = TBL6.BRANCH_CD
                                               <if test="mem_nm != null and mem_nm != '' ">
                                                   AND TBL6.MEM_NM LIKE '%' || #{mem_nm} || '%'
                                               </if>
                                        GROUP BY TBL5.CD_NM, TBL5.COM_CD
                                      ) TBL7
                              ) TBL4

                        UNION ALL

                        SELECT '합계' CL
                             , (SELECT CNT FROM TOT_TBL) CNCL_CNT
                             , TOT_EVT_CNT.CNT AS EVT_CNT
                             , CASE WHEN (SELECT CNT FROM TOT_TBL) <![CDATA[>]]> 0
                                    THEN '100.00%'
                                    ELSE '0.00%'
                               END PCT
                             , CASE WHEN TOT_EVT_CNT.CNT <![CDATA[>]]> 0 THEN TO_CHAR(ROUND(TO_NUMBER((SELECT CNT FROM TOT_TBL)) / NULLIF((TO_NUMBER((SELECT CNT FROM TOT_TBL)) + TO_NUMBER(TOT_EVT_CNT.CNT)),0) * 100, 2)) || '%'
                                    ELSE '0.00%'
                               END CNCL_PCT
                        FROM (
                                SELECT COUNT(TBL6.ACCNT_NO) CNT
                                    FROM (SELECT CASE WHEN DIR_OUT_GUBUN = '0001'
                                                      THEN BRANCH_NM || ' '
                                                      ELSE BRANCH_NM
                                                 END CD_NM
                                               , BRANCH_CD COM_CD
                                            FROM BRANCH_MNG
                                           WHERE DEL_FG = 'N'
                                           <if test="jibu != null and jibu != '' ">
                                               AND BRANCH_CD = #{jibu}
                                           </if>
                                         ) TBL5
                                         INNER JOIN
                                         (SELECT EVT.ACCNT_NO
                                               , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                               , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                               , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                                               , NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') DIR_OUT_GUBUN
                                            FROM EVENT EVT
                                                 INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                                                 LEFT OUTER JOIN(
                                                    SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                      FROM EVENT_MNGR_REG
                                                     WHERE DEL_FG = 'N'
                                                       AND EVT_MNGR_GUBUN = '0001'
                                                    GROUP BY EVT_SEQ
                                                 )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                 LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                           WHERE EVT.EVENT_COMP_DAY BETWEEN #{evt_stt_dt} AND #{evt_end_dt}
                                               AND EVT.DEL_FG = 'N'
                                               AND EVT.SORT = '01'
                                               AND NVL(EVT.CNL_REASON_CD, '01') NOT IN ('02', '003')
                                               <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                                                   AND EVT.CNL_WORK_YN = #{cnl_work_yn}
                                               </if>
                                               <if test="mngr_cd != null and mngr_cd != '' ">
                                                   AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                               </if>
                                 ) TBL6 ON TBL5.COM_CD = TBL6.BRANCH_CD AND TBL6.DIR_OUT_GUBUN IN ('0001', '0002')
                                   <if test="mem_nm != null and mem_nm != '' ">
                                       AND TBL6.MEM_NM LIKE '%' || #{mem_nm} || '%'
                                   </if>
                                   <if test="jibu != null and jibu != '' ">
                                       AND TBL6.BRANCH_CD LIKE '%' || #{jibu} || '%'
                                   </if>
                             )  TOT_EVT_CNT

                        UNION ALL

                        SELECT '' CL
                             , NULL CNCL_CNT
                             , NULL EVT_CNT
                             , '' PCT
                             , '' CNCL_PCT
                        FROM DUAL

                        UNION ALL

                        SELECT NVL(TBL4.BRANCH_CD, '직영') BRANCH_CD
                             , SUM(TBL4.CNCL_CNT) CNCL_CNT
                             , SUM(TBL4.EVT_CNT) EVT_CNT
                             , TO_CHAR(SUM(TBL4.PCT)) || '%' PCT
                             , TO_CHAR(ROUND(TO_NUMBER(SUM(TBL4.CNCL_CNT)) / NULLIF((TO_NUMBER(SUM(TBL4.CNCL_CNT)) + TO_NUMBER(SUM(TBL4.EVT_CNT))),0) * 100 , 2)) || '%' CNCL_PCT
                            FROM (SELECT TBL7.CD_NM BRANCH_CD
                                       , TBL7.CNCL_CNT
                                       , TBL7.EVT_CNT
                                       , CASE WHEN TBL7.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL7.CNCL_CNT) / NULLIF(TO_NUMBER(TBL7.TOT_CNT),0) * 100, 2) ELSE 0 END PCT
                                       , CASE WHEN TBL7.EVT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL7.CNCL_CNT) / NULLIF((TO_NUMBER(TBL7.CNCL_CNT) + TO_NUMBER(TBL7.EVT_CNT)),0) * 100, 2) ELSE 0 END CNCL_PCT
                                  FROM (
                                        SELECT TBL5.CD_NM
                                             , TBL5.COM_CD
                                             , SUM(CASE WHEN TBL6.BRANCH_CD IS NOT NULL AND TBL6.CNCL_CL = 'C' THEN 1 ELSE 0 END) CNCL_CNT
                                             , SUM(CASE WHEN TBL6.BRANCH_CD IS NOT NULL AND TBL6.CNCL_CL = 'E' THEN 1 ELSE 0 END) EVT_CNT
                                             , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                          FROM (SELECT CASE WHEN DIR_OUT_GUBUN = '0001'
                                                            THEN BRANCH_NM || ' '
                                                            ELSE BRANCH_NM
                                                       END CD_NM
                                                     , BRANCH_CD COM_CD
                                                  FROM BRANCH_MNG
                                                 WHERE DIR_OUT_GUBUN = '0001'
                                                   AND DEL_FG = 'N'
                                                   <if test="jibu != null and jibu != '' ">
                                                       AND BRANCH_CD = #{jibu}
                                                   </if>
                                               ) TBL5
                                               LEFT OUTER JOIN
                                               (SELECT EVT.ACCNT_NO
                                                     , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                                     , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                                     , NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') DIR_OUT_GUBUN
                                                     , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                                                     , CASE WHEN EVT.DEL_FG = 'Y' AND NVL(EVT.CNL_REASON_CD, '01') NOT IN ('02', '003')
                                                              THEN 'C'
                                                              WHEN EVT.DEL_FG = 'N'
                                                              THEN 'E'
                                                              ELSE ''
                                                         END CNCL_CL
                                                  FROM EVENT EVT
                                                       INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                                                       LEFT OUTER JOIN(
                                                          SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                            FROM EVENT_MNGR_REG
                                                           WHERE DEL_FG = 'N'
                                                             AND EVT_MNGR_GUBUN = '0001'
                                                          GROUP BY EVT_SEQ
                                                       )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                       LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                                 WHERE (
                                                            EVT.EVENT_COMP_DAY BETWEEN #{evt_stt_dt} AND #{evt_end_dt}
                                                          OR
                                                            TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
                                                         )
                                                     AND EVT.SORT='01'
                                                     <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                                                         AND EVT.CNL_WORK_YN = #{cnl_work_yn}
                                                     </if>
                                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                                     </if>
                                               ) TBL6 ON TBL5.COM_CD = TBL6.BRANCH_CD
                                                         AND TBL6.DIR_OUT_GUBUN = '0001'
                                                     <if test="mem_nm != null and mem_nm != '' ">
                                                         AND TBL6.MEM_NM LIKE '%' || #{mem_nm} || '%'
                                                     </if>
                                                     <if test="jibu != null and jibu != '' ">
                                                         AND TBL6.BRANCH_CD LIKE '%' || #{jibu} || '%'
                                                     </if>
                                        GROUP BY TBL5.CD_NM, TBL5.COM_CD
                                      ) TBL7
                              ) TBL4
                        GROUP BY ROLLUP(TBL4.BRANCH_CD)
                        HAVING GROUPING(TBL4.BRANCH_CD) = 1

                        UNION ALL

                        SELECT NVL(TBL4.BRANCH_CD, '외주') BRANCH_CD
                             , SUM(TBL4.CNCL_CNT) CNCL_CNT
                             , SUM(TBL4.EVT_CNT) EVT_CNT
                             , TO_CHAR(SUM(TBL4.PCT)) || '%' PCT
                             , TO_CHAR(ROUND(TO_NUMBER(SUM(TBL4.CNCL_CNT)) / NULLIF((TO_NUMBER(SUM(TBL4.CNCL_CNT)) + TO_NUMBER(SUM(TBL4.EVT_CNT))),0) * 100 , 2)) || '%' CNCL_PCT
                          FROM (SELECT TBL7.CD_NM BRANCH_CD
                                     , TBL7.CNCL_CNT
                                     , TBL7.EVT_CNT
                                     , CASE WHEN TBL7.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL7.CNCL_CNT) / NULLIF(TO_NUMBER(TBL7.TOT_CNT),0) * 100, 2) ELSE 0 END PCT
                                     , CASE WHEN TBL7.EVT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL7.CNCL_CNT) / NULLIF((TO_NUMBER(TBL7.CNCL_CNT) + TO_NUMBER(TBL7.EVT_CNT)),0) * 100, 2) ELSE 0 END CNCL_PCT
                                  FROM (
                                        SELECT TBL5.CD_NM
                                             , TBL5.COM_CD
                                             , SUM(CASE WHEN TBL6.BRANCH_CD IS NOT NULL AND TBL6.CNCL_CL = 'C' THEN 1 ELSE 0 END) CNCL_CNT
                                             , SUM(CASE WHEN TBL6.BRANCH_CD IS NOT NULL AND TBL6.CNCL_CL = 'E' THEN 1 ELSE 0 END) EVT_CNT
                                             , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                          FROM (SELECT CASE WHEN DIR_OUT_GUBUN = '0001'
                                                            THEN BRANCH_NM || ' '
                                                            ELSE BRANCH_NM
                                                       END CD_NM
                                                     , BRANCH_CD COM_CD
                                                  FROM BRANCH_MNG
                                                 WHERE DIR_OUT_GUBUN = '0002'
                                                   AND DEL_FG = 'N'
                                                   <if test="jibu != null and jibu != '' ">
                                                       AND BRANCH_CD = #{jibu}
                                                   </if>
                                               ) TBL5
                                               LEFT OUTER JOIN
                                               (SELECT EVT.ACCNT_NO
                                                     , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH
                                                     , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                                     , NVL((SELECT (SELECT Z.DIR_OUT_GUBUN FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') DIR_OUT_GUBUN
                                                     , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                                                     , CASE WHEN EVT.DEL_FG = 'Y' AND NVL(EVT.CNL_REASON_CD, '01') NOT IN ('02', '003')
                                                              THEN 'C'
                                                              WHEN EVT.DEL_FG = 'N'
                                                              THEN 'E'
                                                              ELSE ''
                                                         END CNCL_CL
                                                  FROM EVENT EVT
                                                       INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                                                       LEFT OUTER JOIN(
                                                          SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                            FROM EVENT_MNGR_REG
                                                           WHERE DEL_FG = 'N'
                                                             AND EVT_MNGR_GUBUN = '0001'
                                                          GROUP BY EVT_SEQ
                                                       )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                       LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                                 WHERE (
                                                            EVT.EVENT_COMP_DAY BETWEEN #{evt_stt_dt} AND #{evt_end_dt}
                                                          OR
                                                            TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
                                                         )
                                                     AND EVT.SORT = '01'
                                                     <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                                                         AND EVT.CNL_WORK_YN = #{cnl_work_yn}
                                                     </if>
                                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                                     </if>
                                               ) TBL6 ON TBL5.COM_CD = TBL6.BRANCH_CD
                                                         AND TBL6.DIR_OUT_GUBUN = '0002'
                                                     <if test="mem_nm != null and mem_nm != '' ">
                                                         AND TBL6.MEM_NM LIKE '%' || #{mem_nm} || '%'
                                                     </if>
                                                     <if test="jibu != null and jibu != '' ">
                                                         AND TBL6.BRANCH_CD LIKE '%' || #{jibu} || '%'
                                                     </if>
                                        GROUP BY TBL5.CD_NM, TBL5.COM_CD
                                      ) TBL7
                              ) TBL4
                        GROUP BY ROLLUP(TBL4.BRANCH_CD)
                        HAVING GROUPING(TBL4.BRANCH_CD) = 1
    </select>

    <!-- 취소분석_지부별 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntCncl2" parameterType="map" resultType="resultMap">

         WITH /* DlwNewTypeEvntMap.getNewTypeEvntCncl2 */
              TOT_TBL AS (
                          SELECT COUNT(TBL6.ACCNT_NO) CNT
                                  FROM (SELECT CD_NM
                                             , COM_CD
                                          FROM COM_CD
                                         WHERE GRP_CD = '108'
                                           AND COM_CD != '003'
                                           AND USE_YN = 'Y'
                                       ) TBL5
                                       LEFT OUTER JOIN
                                       (SELECT EVT.ACCNT_NO
                                             , CASE WHEN EVT.CNL_REASON_CD IS NULL OR EVT.CNL_REASON_CD = ''
                                                    THEN '01'
                                                    ELSE EVT.CNL_REASON_CD
                                               END CNL_REASON_CD
                                             , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                                             , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                          FROM EVENT EVT
                                                 INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                                               LEFT OUTER JOIN(
                                                      SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                        FROM EVENT_MNGR_REG
                                                       WHERE DEL_FG = 'N'
                                                         AND EVT_MNGR_GUBUN = '0001'
                                                      GROUP BY EVT_SEQ
                                                   )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                           LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                         WHERE EVT.DEL_FG = 'Y'
                                         AND EVT.SORT ='01'
                                           AND NVL(EVT.CNL_REASON_CD, '01') NOT IN ('02', '003')
                                           AND TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
                                     <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                                         AND EVT.CNL_WORK_YN = #{cnl_work_yn}
                                     </if>
                                     <if test="mngr_cd != null and mngr_cd != '' ">
                                         AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                     </if>
                                       ) TBL6 ON TBL5.COM_CD = TBL6.CNL_REASON_CD
                                     <if test="mem_nm != null and mem_nm != '' ">
                                         AND TBL6.MEM_NM LIKE '%' || #{mem_nm} || '%'
                                     </if>
                                     <if test="jibu != null and jibu != '' ">
                                         AND TBL6.BRANCH_CD LIKE '%' || #{jibu} || '%'
                                     </if>
                       )
                      SELECT TBL4.CL
                           , TBL4.COM_CD
                           , TBL4.CNT
                           , TO_CHAR(TBL4.PCT) || '%' PCT
                        FROM (SELECT TBL7.CD_NM CL
                                   , TO_NUMBER(TBL7.COM_CD) COM_CD
                                   , TBL7.CNT
                                   , CASE WHEN TBL7.TOT_CNT <![CDATA[>]]> 0 THEN ROUND(TO_NUMBER(TBL7.CNT) / NULLIF(TO_NUMBER(TBL7.TOT_CNT),0) * 100, 2) ELSE 0 END PCT
                                FROM (
                                      SELECT TBL5.CD_NM
                                           , TBL5.COM_CD
                                           , COUNT(TBL6.ACCNT_NO) CNT
                                           , (SELECT CNT FROM TOT_TBL) TOT_CNT
                                        FROM (SELECT CD_NM
                                                   , COM_CD
                                                FROM COM_CD
                                               WHERE GRP_CD = '108'
                                                 AND COM_CD NOT IN ('02', '003')
                                                 AND USE_YN = 'Y'
                                             ) TBL5
                                             LEFT OUTER JOIN
                                             (SELECT EVT.ACCNT_NO
                                                   , CASE WHEN EVT.CNL_REASON_CD IS NULL OR EVT.CNL_REASON_CD = ''
                                                          THEN '01'
                                                          ELSE EVT.CNL_REASON_CD
                                                     END CNL_REASON_CD
                                                   , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                                                   , NVL((SELECT BRANCH FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_CD
                                                FROM EVENT EVT
                                                     INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO
                                                     LEFT OUTER JOIN(
                                                        SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                                          FROM EVENT_MNGR_REG
                                                         WHERE DEL_FG = 'N'
                                                           AND EVT_MNGR_GUBUN = '0001'
                                                        GROUP BY EVT_SEQ
                                                     )EMR ON EMR.EVT_SEQ = EVT.SEQ
                                                     LEFT OUTER JOIN EVENT_MANAGER_MNG EMN ON EMN.EVT_MNGR_CD = EMR.EVT_MNGR_CD
                                               WHERE EVT.DEL_FG = 'Y'
                                               AND EVT.SORT = '01'
                                                 AND NVL(EVT.CNL_REASON_CD, '01') NOT IN ('02', '003')
                                                 AND TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
                                                 <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                                                     AND EVT.CNL_WORK_YN = #{cnl_work_yn}
                                                 </if>
                                                 <if test="mngr_cd != null and mngr_cd != '' ">
                                                     AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                                                 </if>
                                             ) TBL6 ON TBL5.COM_CD = TBL6.CNL_REASON_CD
                                               <if test="mem_nm != null and mem_nm != '' ">
                                                   AND TBL6.MEM_NM LIKE '%' || #{mem_nm} || '%'
                                               </if>
                                               <if test="jibu != null and jibu != '' ">
                                                   AND TBL6.BRANCH_CD LIKE '%' || #{jibu} || '%'
                                               </if>
                                      GROUP BY TBL5.CD_NM, TBL5.COM_CD
                                    ) TBL7
                            ) TBL4

                      UNION ALL

                      SELECT '합계' CL
                           , 9999 COM_CD
                           , (SELECT CNT FROM TOT_TBL) CNT
                           , CASE WHEN (SELECT CNT FROM TOT_TBL) <![CDATA[>]]> 0
                                  THEN '100.00%'
                                  ELSE '0.00%'
                             END PCT
                      FROM DUAL
                      ORDER BY COM_CD

    </select>

    <!-- 취소분석 소요시간별 분석 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntCncl3" parameterType="map" resultType="resultMap">

            SELECT /* DlwNewTypeEvntMap.getNewTypeEvntCncl3 */
                    CASE WHEN MI = 'A' THEN '접수 ~ 30분'
                         WHEN MI = 'B' THEN '30분 ~ 60분'
                         WHEN MI = 'C' THEN '60분 ~ 90분'
                         WHEN MI = 'D' THEN '90분 ~ 120분'
                         WHEN MI = 'E' THEN '120분 ~ 150분'
                         ELSE '150분 ~ ' END GRP,
                    COUNT(MI) CNT
              FROM (
                SELECT
                       CASE WHEN NVL(TO_NUMBER(TRUNC(MOD((CA_DT.C - CA_DT.B), 1) * 24) * 60),0) + NVL(TO_NUMBER(TRUNC(ROUND(MOD((CA_DT.C - CA_DT.B) * 24, 1) * 60))),0) <![CDATA[<=]]> 30 THEN 'A'
                            WHEN NVL(TO_NUMBER(TRUNC(MOD((CA_DT.C - CA_DT.B), 1) * 24) * 60),0) + NVL(TO_NUMBER(TRUNC(ROUND(MOD((CA_DT.C - CA_DT.B) * 24, 1) * 60))),0) BETWEEN 31 AND 60 THEN 'B'
                            WHEN NVL(TO_NUMBER(TRUNC(MOD((CA_DT.C - CA_DT.B), 1) * 24) * 60),0) + NVL(TO_NUMBER(TRUNC(ROUND(MOD((CA_DT.C - CA_DT.B) * 24, 1) * 60))),0) BETWEEN 61 AND 90 THEN 'C'
                            WHEN NVL(TO_NUMBER(TRUNC(MOD((CA_DT.C - CA_DT.B), 1) * 24) * 60),0) + NVL(TO_NUMBER(TRUNC(ROUND(MOD((CA_DT.C - CA_DT.B) * 24, 1) * 60))),0) BETWEEN 91 AND 120 THEN 'D'
                            WHEN NVL(TO_NUMBER(TRUNC(MOD((CA_DT.C - CA_DT.B), 1) * 24) * 60),0) + NVL(TO_NUMBER(TRUNC(ROUND(MOD((CA_DT.C - CA_DT.B) * 24, 1) * 60))),0) BETWEEN 121 AND 151 THEN 'E'
                            ELSE 'F' END MI
                  FROM EVENT EVT
                       LEFT OUTER JOIN(SELECT TO_DATE(VAL8 || ' ' || NVL(VAL8_H,'00') || ':' || NVL(VAL8_M,'00'), 'YYYYMMDDHH24:MI') B,
                                              TO_DATE(ARRIVE_DT || ' ' || NVL(ARR_H,'00') || ':' || NVL(ARR_M,'00'), 'YYYYMMDDHH24:MI') A,
                                              TO_DATE(NVL(TO_CHAR(CANCL_REG_DM, 'YYYYMMDD'),'99991231') || ' ' || NVL(TO_CHAR(CANCL_REG_DM,'HH24'),'00') || ':' || NVL(TO_CHAR(CANCL_REG_DM,'MI'),'00'), 'YYYYMMDDHH24:MI') C,
                                              ACCNT_NO,
                                              SEQ
                                       FROM EVENT
                                       WHERE DEL_FG = 'Y'
                                       )CA_DT ON CA_DT.ACCNT_NO = EVT.ACCNT_NO AND EVT.SEQ = CA_DT.SEQ
                 WHERE EVT.DEL_FG = 'Y'
                 AND EVT.SORT = '01'
                   AND NVL(EVT.CNL_REASON_CD, '01') NOT IN ('02', '003')
                   <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                          AND TO_CHAR(EVT.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
                   </if>
                   <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                       AND EVT.CNL_WORK_YN = #{cnl_work_yn}
                   </if>
                   <if test="mem_nm != null and mem_nm != '' ">
                       AND MEM.MEM_NM LIKE '%' || #{mem_nm} || '%'
                   </if>
                   <if test="mngr_cd != null and mngr_cd != '' ">
                       AND EMN.REAL_EVT_MNGR_CD = #{mngr_cd}
                   </if>
                ) TBL
            WHERE 1=1
           <if test="jibu != null and jibu != '' ">
               AND TBL.BRANCH = #{jibu}
           </if>
           GROUP BY MI
           ORDER BY MI
    </select>

    <!-- CP 등록 여부 체크 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntCpChkCount" parameterType="map" resultType="int">

        SELECT /* DlwNewTypeEvntMap.getNewTypeEvntCpChkCount */
               COUNT(*)
        FROM EVENT_MNGR_REG
        WHERE DEL_FG = 'N'
          AND EVT_MNGR_GUBUN = '0001'
          AND EVT_SEQ = #{seq}
    </select>

    <!-- 입금마감 - 상조부금 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeEvntPaymng" parameterType="map">

        <selectKey keyProperty="seq" resultType="String" order="BEFORE">
            SELECT MAX(SEQ) AS SEQ
            FROM PAY_MNG
            WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no}
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeEvntPaymng */
                INTO PAY_MNG(SEQ, ACCNT_NO, NO, PAY_AMT, PAY_DAY, PAY_MTHD, STAT, REG_DM, REG_MAN, DEL_FG, NEW_YN, RC_STAT, EVT_RPT_CL)

            <if test="prod_cl == '03'">

                SELECT
                      ROW_NUMBER()OVER(ORDER BY SEQ) + NVL((SELECT MAX(NVL(SEQ,0)) FROM PAY_MNG WHERE ACCNT_NO = #{accnt_no}),0) AS CNT,
                      #{accnt_no},
                      A.CNT,
                      B.MONTH_PAY_AMT MON_AMT,
                      #{pay_day},
                      '01',
                      '1',
                      SYSDATE,
                      #{reg_man},
                      'N',
                      'Y',
                      '01',
                      '01'
                FROM
                    (SELECT ROWNUM CNT
                     FROM  DUAL
                     CONNECT BY LEVEL <![CDATA[<=]]> (SELECT MAX(END_NO) EDNO FROM PRODUCT_DTL WHERE PROD_CD = #{prod_cd})) A
                    LEFT OUTER JOIN (SELECT *
                                     FROM PRODUCT_DTL
                                     WHERE PROD_CD = #{prod_cd} ) B ON A.CNT <![CDATA[>=]]> B.ST_NO AND A.CNT <![CDATA[<=]]> B.END_NO
                WHERE A.CNT <![CDATA[>]]> #{next_cnt1}
                  AND A.CNT <![CDATA[<=]]> #{tcnt1}
                  AND B.MONTH_PAY_AMT != 0

            </if>

            <if test="prod_cl != '03'">

                SELECT
                      ROW_NUMBER()OVER(ORDER BY A.CNT) + NVL((SELECT MAX(NVL(SEQ,0)) FROM PAY_MNG WHERE ACCNT_NO = #{accnt_no}),0) AS CNT,
                      #{accnt_no},
                      A.CNT,
                      B.MON_PAY_AMT,
                      #{pay_day},
                      '01',
                      '1',
                      SYSDATE,
                      #{reg_man},
                      'N',
                      'Y',
                      '01',
                      '01'
                FROM
                    (SELECT ROWNUM CNT
                     FROM  DUAL
                     CONNECT BY LEVEL <![CDATA[<=]]> (SELECT EXPR_NO FROM PRODUCT WHERE PROD_CD = #{prod_cd} AND DEL_FG = 'N')) A
                    LEFT OUTER JOIN (SELECT *
                                     FROM PRODUCT
                                     WHERE PROD_CD = #{prod_cd}) B ON 1=1 AND B.DEL_FG = 'N'
                WHERE A.CNT <![CDATA[>]]> #{next_cnt1}
                  AND A.CNT <![CDATA[<=]]> #{tcnt1}

            </if>

    </insert>

    <!-- 입금마감 - 결합금 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeEvntPaymngDtl" parameterType="map">

        <selectKey keyProperty="seq" resultType="String" order="BEFORE">
            SELECT MAX(SEQ) AS SEQ
            FROM PAY_MNG_DTL
            WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no}
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeEvntPaymngDtl */
                INTO PAY_MNG_DTL(SEQ, ACCNT_NO, NO, PAY_AMT, PAY_DAY, PAY_MTHD, STAT, REG_DM, REG_MAN, DEL_FG, EVT_RPT_CL)
            SELECT
                  ROW_NUMBER()OVER(ORDER BY SEQ) + NVL((SELECT MAX(NVL(SEQ,0)) FROM PAY_MNG_DTL WHERE ACCNT_NO = #{accnt_no}),0) AS CNT,
                  #{accnt_no},
                  A.CNT,
                  B.ALLT_AMT ALLT_AMT,
                  #{pay_day},
                  '01',
                  '1',
                  SYSDATE,
                  #{reg_man},
                  'N',
                  '01'
            FROM
                (SELECT ROWNUM CNT
                 FROM  DUAL
                 CONNECT BY LEVEL <![CDATA[<=]]> (SELECT MAX(END_NO) EDNO FROM PRODUCT_DTL WHERE PROD_CD = #{prod_cd})) A
                LEFT OUTER JOIN (SELECT *
                                 FROM PRODUCT_DTL
                                 WHERE PROD_CD = #{prod_cd}) B ON A.CNT <![CDATA[>=]]> B.ST_NO AND A.CNT <![CDATA[<=]]> B.END_NO
            WHERE A.CNT <![CDATA[>]]> #{next_cnt2}
              AND A.CNT <![CDATA[<=]]> #{tcnt2}
              AND B.ALLT_AMT != 0
    </insert>

    <!-- 입금마감 - 추가금 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeEvntPaymngDtl1" parameterType="map">

        <selectKey keyProperty="seq" resultType="String" order="BEFORE">
            SELECT MAX(SEQ) AS SEQ
            FROM PAY_MNG_DTL1
            WHERE DEL_FG = 'N' AND ACCNT_NO = #{accnt_no}
        </selectKey>

            INSERT /* DlwNewTypeEvntMap.insertNewTypeEvntPaymngDtl1 */
                INTO PAY_MNG_DTL1(SEQ, ACCNT_NO, NO, PAY_AMT, PAY_DAY, PAY_MTHD, STAT, REG_DM, REG_MAN, DEL_FG, EVT_RPT_CL)
            SELECT
                  #{seq},
                  #{accnt_no},
                  A.CNT,
                  B.ADD_AMT ADD_AMT,
                  #{pay_day},
                  '01',
                  '1',
                  SYSDATE,
                  #{reg_man},
                  'N',
                  '01'
            FROM
                (SELECT ROWNUM CNT
                 FROM  DUAL
                 CONNECT BY LEVEL <![CDATA[<=]]> (SELECT MAX(END_NO) EDNO FROM PRODUCT_DTL WHERE PROD_CD = #{prod_cd})) A
                LEFT OUTER JOIN (SELECT *
                                 FROM PRODUCT_DTL
                                 WHERE PROD_CD = #{prod_cd}) B ON A.CNT <![CDATA[>=]]> B.ST_NO AND A.CNT <![CDATA[<=]]> B.END_NO
            WHERE A.CNT <![CDATA[>]]> #{next_cnt3}
              AND A.CNT <![CDATA[<=]]> #{tcnt3}
              AND B.ADD_AMT != 0
    </insert>

    <!-- 의전행사 사진 분류 - 분류/미분류 회원 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntPicSort" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeEvntPicSort */
               '' AS CHK
             , SEQ
             , ACCNT_NO
             , EMPLE_NO
             , FN_EMPLE_NM(EMPLE_NO) AS EMPLE_NM
             , SUBSTR(UPLOAD_DT, 1, 4) || '/' || SUBSTR(UPLOAD_DT, 5, 2) || '/' || SUBSTR(UPLOAD_DT, 7, 2) || ' ' || SUBSTR(UPLOAD_DT, 9, 2) || ':' || SUBSTR(UPLOAD_DT, 11, 2) || ':' || SUBSTR(UPLOAD_DT, 13, 2)  AS UPLOAD_DT
             , PIC_FILE_NM
             , PIC_CL_CD
             , (SELECT B.PIC_CL_NM FROM EVENT_PIC_CL_CD B WHERE B.PIC_CL_CD = A.PIC_CL_CD) AS PIC_CL_NM
             , CP_CELL
             , REG_MAN
             , FN_EMPLE_NM(REG_MAN) AS REG_MAN_NM
             , TO_CHAR(REG_DM, 'YYYYMMDD') AS REG_DM
             , DEL_FG
             , CASE WHEN PIC_CL_CD = '1' THEN 1
                    WHEN PIC_CL_CD = '6' THEN 2
                    WHEN PIC_CL_CD = '3' THEN 3
                    WHEN PIC_CL_CD = '10' THEN 4
                    WHEN PIC_CL_CD = '8' THEN 5
                    WHEN PIC_CL_CD = '2' THEN 6
                    WHEN PIC_CL_CD = '11' THEN 7
                    WHEN PIC_CL_CD = '12' THEN 8
                    WHEN PIC_CL_CD = '13' THEN 9
                    WHEN PIC_CL_CD = '14' THEN 10
                    WHEN PIC_CL_CD = '15' THEN 11
                    WHEN PIC_CL_CD = '16' THEN 12
                    WHEN PIC_CL_CD = '17' THEN 13
                    WHEN PIC_CL_CD = '18' THEN 14
                    WHEN PIC_CL_CD = '4' THEN 15
                    WHEN PIC_CL_CD = '19' THEN 16
                    WHEN PIC_CL_CD = '9' THEN 17
                    WHEN PIC_CL_CD = '20' THEN 18
                    WHEN PIC_CL_CD = '5' THEN 19
                    WHEN PIC_CL_CD = '7' THEN 20 END SORT_NO
        FROM EVENT_PIC_UPLOAD A
        WHERE DEL_FG = 'N'
        <if test="accnt_no != null and accnt_no != ''">
           AND ACCNT_NO = #{accnt_no}
        </if>

        <if test="cl != null and cl != '' and cl != '0'.toString()">
           AND PIC_CL_CD = #{cl}
        </if>

        <if test="accnt_clsfy == '1'.toString()">
           AND ACCNT_NO IS NOT NULL
        </if>

        <if test="accnt_clsfy == '2'.toString()">
           AND ACCNT_NO IS NULL
        </if>

        <if test="evt_mngr_cd != null and evt_mngr_cd != ''">
           AND EMPLE_NO = (SELECT B.EMPLE_NO
                     FROM EVENT_MANAGER_MNG B
                    WHERE B.EVT_MNGR_CD = #{evt_mngr_cd})
        </if>

        <if test="stt_dt != null and stt_dt != ''">
           AND substr(UPLOAD_DT,1,8) BETWEEN #{stt_dt} AND #{end_dt}
        </if>
        <!-- /* 2016.12.06 CP 사원번호 조건 추가 */
           AND EXISTS (
            SELECT 'x'
              FROM EVENT E
                 , EVENT_MNGR_REG EMR
                 , EVENT_MANAGER_MNG EMM
             WHERE E.ACCNT_NO           = A.ACCNT_NO
               AND E.SEQ                = EMR.EVT_SEQ
               AND EMR.EVT_MNGR_CD      = EMM.EVT_MNGR_CD
               AND E.DEL_FG             = 'N'
               AND EMR.EVT_MNGR_GUBUN   = '0001'
               AND EMR.DEL_FG           = 'N'
               AND EMM.EMPLE_NO         = A.EMPLE_NO
               AND EMM.DEL_FG           = 'N'
           )
           AND A.EMPLE_NO = (SELECT EMPLE_NO
                               FROM (SELECT EMPLE_NO
                                       FROM EVENT_PIC_UPLOAD B
                                      WHERE B.ACCNT_NO = #{accnt_no}
                                      ORDER BY REG_DM DESC)
                              WHERE ROWNUM = 1) -->
        ORDER BY PIC_CL_CD
            , UPLOAD_DT
    </select>



    <!-- 의전행사 사진 분류 - 행사회원 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntPicList" parameterType="map" resultType="resultMap">

            SELECT /* DlwNewTypeEvntMap.getNewTypeEvntPicList */
                   TBL.ACCNT_NO
                 , TBL.MEM_NM
                 , TBL.PROD_NM
                 , TBL.EVENT_PLACE
                 , TBL.CP_NM
                 , TBL.EVENT_DT
                 , TBL.EVENT_PROC_DAY
                 , TBL.EVENT_COMP_DAY
                 , SUM(TBL.cl_A) AS cl_A
                 , SUM(TBL.cl_B) AS cl_B
                 , SUM(TBL.cl_C) AS cl_C
                 , SUM(TBL.cl_D) AS cl_D
                 , SUM(TBL.cl_F) AS cl_F
                 , SUM(TBL.cl_H) AS cl_H
                 , SUM(TBL.cl_I) AS cl_I
                 , SUM(TBL.cl10) AS cl10
                 , SUM(TBL.cl11) AS cl11
                 , SUM(TBL.cl12) AS cl12
                 , SUM(TBL.cl13) AS cl13
                 , SUM(TBL.cl14) AS cl14
                 , SUM(TBL.cl15) AS cl15
                 , SUM(TBL.cl16) AS cl16
                 , SUM(TBL.cl17) AS cl17
                 , SUM(TBL.cl18) AS cl18
                 , SUM(TBL.cl19) AS cl19
                 , SUM(TBL.cl20) AS cl20
              FROM (
                    SELECT EVT.ACCNT_NO AS ACCNT_NO
                        , MEM.MEM_NM AS MEM_NM
                        , PROD.PROD_NM AS PROD_NM
                        , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                                      THEN (SELECT FUNRL_NM
                                              FROM FUNRL_HALL
                                              WHERE FUNRL_CD = EVT.FUNRL_HALL)
                                      ELSE CASE WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NULL OR EVT.ETC_ADDR2 = '')
                                                THEN ''
                                                WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NOT NULL AND EVT.ETC_ADDR2 != '')
                                                THEN NVL(EVT.ETC_ADDR2, ' ')
                                                ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                            END
                                  END, ' ') AS EVENT_PLACE
                        , CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), ' ') = ' '
                                THEN NVL(val6, ' ')
                                ELSE NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), ' ')
                          END AS CP_NM
                        , TO_CHAR(TO_DATE(EVT.EVENT_PROC_DAY), 'YYYY/MM/DD') || '~' || TO_CHAR(TO_DATE(EVT.EVENT_COMP_DAY), 'YYYY/MM/DD') EVENT_DT
                        , EVT.EVENT_PROC_DAY
                        , EVT.EVENT_COMP_DAY
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 1 THEN 1 ELSE 0 END AS cl_A
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 2 THEN 1 ELSE 0 END AS cl_B
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 3 THEN 1 ELSE 0 END AS cl_C
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 4 THEN 1 ELSE 0 END AS cl_D
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 6 THEN 1 ELSE 0 END AS cl_F
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 8 THEN 1 ELSE 0 END AS cl_H
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 9 THEN 1 ELSE 0 END AS cl_I
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 10 THEN 1 ELSE 0 END AS cl10
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 11 THEN 1 ELSE 0 END AS cl11
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 12 THEN 1 ELSE 0 END AS cl12
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 13 THEN 1 ELSE 0 END AS cl13
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 14 THEN 1 ELSE 0 END AS cl14
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 15 THEN 1 ELSE 0 END AS cl15
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 16 THEN 1 ELSE 0 END AS cl16
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 17 THEN 1 ELSE 0 END AS cl17
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 18 THEN 1 ELSE 0 END AS cl18
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 19 THEN 1 ELSE 0 END AS cl19
                        , CASE WHEN NVL(EPU.PIC_CL_CD, 0) = 20 THEN 1 ELSE 0 END AS cl20
                      FROM EVENT EVT
                          INNER JOIN MEM_PROD_ACCNT ACCNT ON ACCNT.ACCNT_NO = EVT.ACCNT_NO
                          INNER JOIN MEMBER MEM ON ACCNT.MEM_NO = MEM.MEM_NO
                          INNER JOIN PRODUCT PROD ON PROD.PROD_CD = ACCNT.PROD_CD
                          LEFT OUTER JOIN (
                                        SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                          FROM EVENT_MNGR_REG
                                        WHERE DEL_FG = 'N'
                                          AND EVT_MNGR_GUBUN = '0001'
                                        GROUP BY EVT_SEQ
                                      ) EMR ON EVT.SEQ = EMR.EVT_SEQ
                                        <if test="evt_mngr_cd != null and evt_mngr_cd != '' ">
                                             AND EMR.EVT_MNGR_CD = #{evt_mngr_cd}
                                        </if>
                            LEFT OUTER JOIN FUNRL_RPT FR ON FR.SEQ = EVT.SEQ AND FR.DEL_FG = 'N'
                            LEFT OUTER JOIN FUNRL_OUTSRC_MST FOM ON FOM.SEQ = EVT.SEQ AND FOM.DEL_FG = 'N'
                            LEFT OUTER JOIN EVENT_PIC_UPLOAD EPU ON EPU.ACCNT_NO = EVT.ACCNT_NO AND EPU.DEL_FG = 'N'
                    WHERE EVT.DEL_FG = 'N'
                    <if test="evt_mngr_cd != null and evt_mngr_cd != '' ">
                      AND EMR.EVT_MNGR_CD = #{evt_mngr_cd}
                    </if>
                    <if test="accnt_no != null and accnt_no != '' ">
                      AND EVT.ACCNT_NO = #{accnt_no}
                    </if>
                    <if test="stt_dt != null and stt_dt != '' ">
                      AND EVT.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                    </if>
                   ) TBL
            GROUP BY TBL.ACCNT_NO
                   , TBL.CP_NM
                   , TBL.EVENT_PLACE
                   , TBL.MEM_NM
                   , TBL.PROD_NM
                   , TBL.EVENT_PROC_DAY
                   , TBL.EVENT_DT
                   , TBL.EVENT_PROC_DAY
                   , TBL.EVENT_COMP_DAY
            ORDER BY TBL.EVENT_PROC_DAY DESC

    </select>

    <update id="DlwNewTypeEvntMap.deleteNewTypeEvtPic" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.deleteNewTypeEvtPic */
               EVENT_PIC_UPLOAD
           SET DEL_FG = 'Y'
         WHERE SEQ = #{seq}
    </update>

    <update id="DlwNewTypeEvntMap.disconncectNewTypeAccnt" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.disconncectNewTypeAccnt */
               EVENT_PIC_UPLOAD
           SET ACCNT_NO = NULL
         WHERE SEQ = #{seq}
    </update>

    <update id="DlwNewTypeEvntMap.conncectNewTypeAccnt" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.conncectNewTypeAccnt */
               EVENT_PIC_UPLOAD
           SET ACCNT_NO = #{accnt_no}
         WHERE SEQ = #{seq}
    </update>

    <update id="DlwNewTypeEvntMap.insertNewTypeEvtPicInfo" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeEvtPicInfo */
               INTO EVENT_PIC_UPLOAD (
        SEQ
        ,ACCNT_NO
        ,EMPLE_NO
        ,UPLOAD_DT
        ,PIC_FILE_NM
        ,PIC_CL_CD
        ,CP_CELL
        ,REG_MAN
        ,REG_DM
        ,DEL_FG
        ) VALUES (
        nvl((SELECT MAX(SEQ) FROM EVENT_PIC_UPLOAD), 0) + 1
        ,#{accnt_no}
        ,#{emple_no}
        ,to_char(SYSTIMESTAMP,'yyyymmddhh24missff3')
        ,#{pic_file_nm}
        ,#{pic_cl_cd}
        ,#{cp_cell}
        ,#{rgsr_id}
        ,SYSDATE
        ,'N'
        )
    </update>

    <update id="DlwNewTypeEvntMap.insertNewTypeEvtPicInfoNew" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeEvtPicInfoNew */
               INTO EVENT_PIC_UPLOAD (
        SEQ
        ,ACCNT_NO
        ,EMPLE_NO
        ,UPLOAD_DT
        ,PIC_FILE_NM
        ,PIC_CL_CD
        ,CP_CELL
        ,REG_MAN
        ,REG_DM
        ,DEL_FG
        ) VALUES (
        nvl((SELECT MAX(SEQ) FROM EVENT_PIC_UPLOAD), 0) + 1
        ,#{accnt_no}
        ,#{emple_no}
        ,#{upload_dt}
        ,#{pic_file_nm}
        ,#{pic_cl_cd}
        ,#{cp_cell}
        ,#{rgsr_id}
        ,SYSDATE
        ,'N'
        )
    </update>

    <select id="DlwNewTypeEvntMap.getNewTypeAccntMemNo" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeAccntMemNo */
               DISTINCT MEM_NO
          FROM MEM_PROD_ACCNT
         WHERE 1=1
           AND DEL_FG = 'N'
           AND ACCNT_NO = #{accnt_no}

    </select>

    <!-- 행사분석(상품분류명/지부별) - 헤더 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntBrchAnal1" parameterType="map" resultType="resultMap">

            SELECT /* DlwNewTypeEvntMap.getNewTypeEvntBrchAnal1 */
                    G.BRANCH_NM,
                    G.BRANCH_CD
             FROM EVENT A LEFT OUTER JOIN EVENT_MNGR_REG B ON A.SEQ = B.EVT_SEQ
                      LEFT OUTER JOIN EVENT_MANAGER_MNG C ON B.EVT_MNGR_CD = C.EVT_MNGR_CD
                      LEFT OUTER JOIN WAREHOUSE_MNG D ON C.WH_CD = D.WH_CD
                      LEFT OUTER JOIN MEM_PROD_ACCNT E ON A.ACCNT_NO = E.ACCNT_NO
                      LEFT OUTER JOIN PRODUCT F ON E.PROD_CD = F.PROD_CD
                      LEFT OUTER JOIN BRANCH_MNG G ON G.BRANCH_CD = D.BRANCH
            WHERE G.DEL_FG = 'N'
              AND A.DEL_FG = 'N'
              AND A.SORT = '01'
              AND NVL(G.BRANCH_NM,' ') != ' '
            GROUP BY G.BRANCH_NM, G.BRANCH_CD
            ORDER BY G.BRANCH_NM

    </select>

    <!-- 행사분석(상품분류명/지부별) - 쿼리 -->
    <select id="DlwNewTypeEvntMap.getNewTypebranchQury" parameterType="map" resultType="String">
		/* DlwNewTypeEvntMap.getNewTypebranchQury, DlwNewTypeEvntMap.getNewTypeEvntBrchAnal2 */
        SELECT FN_GET_QUERY() AS branchqury FROM DUAL

    </select>

    <!-- 행사분석(상품분류명/지부별) - 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntBrchAnal2" parameterType="map" resultType="resultMap">

        ${branchqury}
            AND A.DEL_FG = 'N'
            AND A.SORT = '01'
            <if test="dt_typ != null and dt_typ != ''">
                <if test="dt_typ == '01'">
                   <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                       AND A.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                   </if>
                </if>
                <if test="dt_typ == '02'">
                   <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                       AND A.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                   </if>
                </if>
            </if>
            <if test="mngr_cd != null and mngr_cd != '' ">
                AND C.REAL_EVT_MNGR_CD = #{mngr_cd}
            </if>
             <if test="etc_loc != null and etc_loc != '' ">
                 AND A.ETC_LOC_NM = #{etc_loc}
             </if>
             <if test="jibu != null and jibu != '' ">
                 AND D.BRANCH = #{jibu}
             </if>
        GROUP BY ROLLUP(FN_COM_NM('0130',F.PROD_GUBUN))

    </select>

    <!-- 행사분석(CP별/상품분류별) - 헤더 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntEmplAnal1" parameterType="map" resultType="resultMap">

            SELECT /* DlwNewTypeEvntMap.getNewTypeEvntEmplAnal1 */
                    FN_COM_NM('0130',F.PROD_GUBUN) GUBUN_NM
             FROM EVENT A LEFT OUTER JOIN EVENT_MNGR_REG B ON A.SEQ = B.EVT_SEQ
                      LEFT OUTER JOIN EVENT_MANAGER_MNG C ON B.EVT_MNGR_CD = C.EVT_MNGR_CD
                      LEFT OUTER JOIN WAREHOUSE_MNG D ON C.WH_CD = D.WH_CD
                      LEFT OUTER JOIN MEM_PROD_ACCNT E ON A.ACCNT_NO = E.ACCNT_NO
                      LEFT OUTER JOIN PRODUCT F ON E.PROD_CD = F.PROD_CD
                      LEFT OUTER JOIN BRANCH_MNG G ON G.BRANCH_CD = D.BRANCH
            WHERE A.DEL_FG = 'N'
               AND NVL(FN_COM_NM('0130',F.PROD_GUBUN),' ') <![CDATA[>]]> ' '
               AND A.SORT = '01'
            GROUP BY FN_COM_NM('0130',F.PROD_GUBUN)

    </select>

    <!-- 행사분석(CP별/상품분류별) - 쿼리 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEmplQury" parameterType="map" resultType="String">
		/* DlwNewTypeEvntMap.getNewTypeEmplQury, DlwNewTypeEvntMap.getNewTypeEvntEmplAnal2 */
        SELECT FN_GET_QUERY_EMPLE() AS emplqury FROM DUAL

    </select>

    <!-- 행사분석(CP별/상품분류별) - 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntEmplAnal2" parameterType="map" resultType="resultMap">

        ${emplqury}
            AND A.DEL_FG = 'N'
            AND A.SORT = '01'
            AND C.DEL_FG = 'N'
            <if test="dt_typ != null and dt_typ != ''">
                <if test="dt_typ == '01'">
                   <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                       AND A.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                   </if>
                </if>
                <if test="dt_typ == '02'">
                   <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                       AND A.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                   </if>
                </if>
            </if>
            <if test="mngr_cd != null and mngr_cd != '' ">
                AND C.REAL_EVT_MNGR_CD = #{mngr_cd}
            </if>
             <if test="etc_loc != null and etc_loc != '' ">
                 AND A.ETC_LOC_NM = #{etc_loc}
             </if>
             <if test="jibu != null and jibu != '' ">
                 AND D.BRANCH = #{jibu}
             </if>
        GROUP BY ROLLUP(C.EVT_MNGR_NM)

    </select>

    <!-- 행사취소분석(상품분류명/지부별) - 헤더 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntBrchCncl1" parameterType="map" resultType="resultMap">

            SELECT /* DlwNewTypeEvntMap.getNewTypeEvntBrchCncl1 */
                    G.BRANCH_NM,
                    G.BRANCH_CD
             FROM EVENT A LEFT OUTER JOIN EVENT_MNGR_REG B ON A.SEQ = B.EVT_SEQ
                      LEFT OUTER JOIN EVENT_MANAGER_MNG C ON B.EVT_MNGR_CD = C.EVT_MNGR_CD
                      LEFT OUTER JOIN WAREHOUSE_MNG D ON C.WH_CD = D.WH_CD
                      LEFT OUTER JOIN MEM_PROD_ACCNT E ON A.ACCNT_NO = E.ACCNT_NO
                      LEFT OUTER JOIN PRODUCT F ON E.PROD_CD = F.PROD_CD
                      LEFT OUTER JOIN BRANCH_MNG G ON G.BRANCH_CD = D.BRANCH
            WHERE G.DEL_FG = 'N'
              AND A.SORT = '01'
              AND NVL(A.CNL_REASON_CD, '01') NOT IN ('02', '003')
              AND NVL(G.BRANCH_NM,' ') != ' '
            GROUP BY G.BRANCH_NM, G.BRANCH_CD
            ORDER BY G.BRANCH_NM

    </select>

    <!-- 행사취소분석(상품분류명/지부별) - 쿼리 -->
    <select id="DlwNewTypeEvntMap.getNewTypebranchQuryCncl" parameterType="map" resultType="String">
		/* DlwNewTypeEvntMap.getNewTypebranchQuryCncl, DlwNewTypeEvntMap.getNewTypeEvntBrchCncl2 */
        SELECT FN_GET_QUERY_CNCL() AS branchqury FROM DUAL

    </select>

    <!-- 행사취소분석(상품분류명/지부별) - 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntBrchCncl2" parameterType="map" resultType="resultMap">

        ${branchqury}
            AND A.DEL_FG = 'Y'
            AND A.SORT = '01'
            AND NVL(A.CNL_REASON_CD, '01') NOT IN ('02', '003')
            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                AND TO_CHAR(A.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
            </if>
            <if test="mngr_cd != null and mngr_cd != '' ">
                AND C.REAL_EVT_MNGR_CD = #{mngr_cd}
            </if>
            <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                AND A.CNL_WORK_YN = #{cnl_work_yn}
            </if>
             <if test="jibu != null and jibu != '' ">
                 AND D.BRANCH = #{jibu}
             </if>
              <if test="mem_nm != null and mem_nm != '' ">
                  AND H.MEM_NM LIKE '%' || #{mem_nm} || '%'
              </if>
        GROUP BY ROLLUP(FN_COM_NM('0130',F.PROD_GUBUN))

    </select>

    <!-- 행사취소분석(CP별/상품분류별) - 헤더 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntEmplCncl1" parameterType="map" resultType="resultMap">

            SELECT /* DlwNewTypeEvntMap.getNewTypeEvntEmplCncl1 */
                    FN_COM_NM('0130',F.PROD_GUBUN) GUBUN_NM
             FROM EVENT A LEFT OUTER JOIN EVENT_MNGR_REG B ON A.SEQ = B.EVT_SEQ
                      LEFT OUTER JOIN EVENT_MANAGER_MNG C ON B.EVT_MNGR_CD = C.EVT_MNGR_CD
                      LEFT OUTER JOIN WAREHOUSE_MNG D ON C.WH_CD = D.WH_CD
                      LEFT OUTER JOIN MEM_PROD_ACCNT E ON A.ACCNT_NO = E.ACCNT_NO
                      LEFT OUTER JOIN PRODUCT F ON E.PROD_CD = F.PROD_CD
                      LEFT OUTER JOIN BRANCH_MNG G ON G.BRANCH_CD = D.BRANCH
            WHERE NVL(FN_COM_NM('0130',F.PROD_GUBUN),' ') <![CDATA[>]]> ' '
               AND A.SORT = '01'
               AND NVL(A.CNL_REASON_CD, '01') NOT IN ('02', '003')
            GROUP BY FN_COM_NM('0130',F.PROD_GUBUN)

    </select>

    <!-- 행사취소분석(CP별/상품분류별) - 쿼리 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEmplQuryCncl" parameterType="map" resultType="String">
		/* DlwNewTypeEvntMap.getNewTypeEmplQuryCncl, DlwNewTypeEvntMap.getNewTypeEvntEmplCncl2 */
        SELECT FN_GET_QUERY_EMPLE_CNCL() AS emplqury FROM DUAL

    </select>

    <!-- 행사취소분석(CP별/상품분류별) - 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntEmplCncl2" parameterType="map" resultType="resultMap">

        ${emplqury}
            AND A.DEL_FG = 'Y'
            AND A.SORT = '01'
            AND NVL(A.CNL_REASON_CD, '01') NOT IN ('02', '003')
            AND C.DEL_FG = 'N'
            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                AND TO_CHAR(A.CANCL_REG_DM, 'YYYYMMDD') BETWEEN #{stt_dt} AND #{end_dt}
            </if>
            <if test="mngr_cd != null and mngr_cd != '' ">
                AND C.REAL_EVT_MNGR_CD = #{mngr_cd}
            </if>
            <if test="cnl_work_yn != null and cnl_work_yn != '' ">
                AND A.CNL_WORK_YN = #{cnl_work_yn}
            </if>
             <if test="jibu != null and jibu != '' ">
                 AND D.BRANCH = #{jibu}
             </if>
              <if test="mem_nm != null and mem_nm != '' ">
                  AND H.MEM_NM LIKE '%' || #{mem_nm} || '%'
              </if>
        GROUP BY ROLLUP(C.EVT_MNGR_NM)

    </select>

    <!-- 외부 일용직 입금대장 조회 건수 -->
    <select id="DlwNewTypeEvntMap.getNewTypeMngrIpCount" parameterType="map" resultType="int">

            SELECT /* DlwNewTypeEvntMap.getNewTypeMngrIpCount */
                   COUNT(*)
            FROM EVENT A
                LEFT OUTER JOIN EVENT_MNGR_REG B ON A.SEQ = B.EVT_SEQ AND B.DEL_FG = 'N'
                LEFT OUTER JOIN EVENT_MANAGER_MNG C ON C.EVT_MNGR_CD = B.EVT_MNGR_CD
                LEFT OUTER JOIN MEM_PROD_ACCNT D ON A.ACCNT_NO = D.ACCNT_NO
            WHERE A.DEL_FG = 'N'
        <if test="dt_typ != null and dt_typ != ''">
            <if test="dt_typ == '01'">
               <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                   AND B.WORK_DM BETWEEN #{stt_dt} AND #{end_dt}
               </if>
            </if>
            <if test="dt_typ == '02'">
               <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                   AND A.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
               </if>
            </if>
        </if>
        <if test="mem_nm != null and mem_nm != '' ">
            AND FN_MEM_NM(D.MEM_NO) = #{mem_nm}
        </if>
        <if test="mngr_cd != null and mngr_cd != '' ">
            AND C.REAL_EVT_MNGR_CD = #{mngr_cd}
        </if>
        <if test="ji_stt_dt != null and ji_stt_dt != '' ">
            AND B.GIVE_PAY_DM <![CDATA[>=]]> #{ji_stt_dt}
        </if>
        <if test="ji_end_dt != null and ji_end_dt != '' ">
            AND B.GIVE_PAY_DM <![CDATA[<=]]> #{ji_end_dt}
        </if>
        <if test="job_duty != null and job_duty != '' ">
            AND B.B.EVT_MNGR_GUBUN IN(${job_duty})
        </if>

    </select>

    <!-- 외부 일용직 입금대장 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeMngrIpList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeMngrIpList */
               ROW_NUMBER()OVER(ORDER BY A.SEQ) CNT,
               A.ACCNT_NO,
               FN_MEM_NM(D.MEM_NO) MEM_NM,
               NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                     THEN (SELECT FUNRL_NM
                             FROM FUNRL_HALL
                            WHERE FUNRL_CD = A.FUNRL_HALL)
                     ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                               THEN ''
                               WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                               THEN NVL(A.ETC_ADDR2, '')
                               ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                          END
                END, '') AS EVENT_PLACE,
                FN_PROD_NM(D.PROD_CD) PROD_NM,
                TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD') || '~' || TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                FN_COM_NM('0138', B.EVT_MNGR_GUBUN) JOB_DUTY,
                C.EVT_MNGR_NM,
                SUBSTR(C.IDN_NO,1,6) IDN_NO,
                <!-- 2018.05.31 정승철 : 기존(생년월일) → 변경(주민번호)  by.김지연매니저 요청-->
                CASE WHEN C.IDN_NO IS NOT NULL
                     THEN SUBSTR(C.IDN_NO,1,6) || '-' || SUBSTR(C.IDN_NO,7)
                     ELSE '' END IDN_NO_2,
                B.WORK_DM,
                B.START_TIME,
                B.END_TIME,
                CASE WHEN NVL(B.START_TIME, '0') >= '0' AND NVL(B.END_TIME, '0') >= '0'
                     THEN CASE WHEN B.START_TIME > B.END_TIME
                          THEN (24 + TO_NUMBER(B.END_TIME)) - TO_NUMBER(B.START_TIME)
                          ELSE TO_NUMBER(B.END_TIME) - TO_NUMBER(B.START_TIME) END
                     ELSE 0 END WORK_TIME,
                B.OVER_TIME,
                FN_COM_NM('63', C.BANK_CD) BANK_NM,
                C.BANK_ACCNT_NO,
                NVL(B.PAY_AMT,0) PAY_AMT,
                NVL(B.NUMBER_OF_DAY,0) NUMBER_OF_DAY,
                NVL(B.PAY_ADD_AMT,0) PAY_ADD_AMT,
                NVL(B.PAY_AMT,0) + NVL(B.PAY_ADD_AMT,0) AS TOT_AMT,
                TRUNC((NVL(B.PAY_AMT,0) + NVL(B.PAY_ADD_AMT,0)) * 0.03) STAX,
                TRUNC(TRUNC((NVL(B.PAY_AMT,0) + NVL(B.PAY_ADD_AMT,0)) * 0.03) * 0.1) JTAX,
                (NVL(B.PAY_AMT,0) + NVL(B.PAY_ADD_AMT,0)) - NVL(TRUNC((NVL(B.PAY_AMT,0) + NVL(B.PAY_ADD_AMT,0)) * 0.03),0) - NVL(TRUNC(TRUNC((NVL(B.PAY_AMT,0) + NVL(B.PAY_ADD_AMT,0)) * 0.03) * 0.1),0) TOT_PAY,
                NVL(B.GIVE_PAY_DM,' ') GIVE_PAY_DM,
                B.NOTE,
                C.GRP_EMPLE_NO
        FROM EVENT A
            LEFT OUTER JOIN EVENT_MNGR_REG B ON A.SEQ = B.EVT_SEQ AND B.DEL_FG = 'N'
            LEFT OUTER JOIN EVENT_MANAGER_MNG C ON C.EVT_MNGR_CD = B.EVT_MNGR_CD
            LEFT OUTER JOIN MEM_PROD_ACCNT D ON A.ACCNT_NO = D.ACCNT_NO
        WHERE A.DEL_FG = 'N'
        <if test="dt_typ != null and dt_typ != ''">
            <if test="dt_typ == '01'">
               <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                   AND B.WORK_DM BETWEEN #{stt_dt} AND #{end_dt}
               </if>
            </if>
            <if test="dt_typ == '02'">
               <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                   AND A.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
               </if>
            </if>
        </if>
        <if test="mem_nm != null and mem_nm != '' ">
            AND FN_MEM_NM(D.MEM_NO) = #{mem_nm}
        </if>
        <if test="mngr_cd != null and mngr_cd != '' ">
            AND C.REAL_EVT_MNGR_CD = #{mngr_cd}
        </if>
        <if test="ji_stt_dt != null and ji_stt_dt != '' ">
            AND B.GIVE_PAY_DM <![CDATA[>=]]> #{ji_stt_dt}
        </if>
        <if test="ji_end_dt != null and ji_end_dt != '' ">
            AND B.GIVE_PAY_DM <![CDATA[<=]]> #{ji_end_dt}
        </if>
        <if test="job_duty != null and job_duty != '' ">
            AND B.B.EVT_MNGR_GUBUN IN(${job_duty})
        </if>
        ORDER BY A.EVENT_COMP_DAY, A.ACCNT_NO, B.EVT_MNGR_GUBUN

    </select>

    <!-- 장례용품 재고현황 조회 건수-->
    <select id="DlwNewTypeEvntMap.getNewTypeStockClCount" parameterType="map" resultType="int">

          SELECT /* DlwNewTypeEvntMap.getNewTypeStockClCount */
                COUNT(*)
          FROM
              (
                SELECT
                  GDSCD
                  , SUM(STOCKQTY) STOCKQTY
                  , SUM(INQTY) INQTY
                  , SUM(OUTQTY) OUTQTY
                  , SUM(INAMT) INAMT
                  , SUM(OUTAMT) OUTAMT
                FROM
                    (
                        SELECT
                        GDSCD
                        , (SUM(STOCKQTY) + SUM(INQTY) - SUM(OUTQTY)) AS STOCKQTY
                        , 0 INQTY
                        , 0 OUTQTY
                        , 0 INAMT
                        , 0 OUTAMT
                      FROM
                          (
                            SELECT
                            GDS_CD GDSCD
                            , SUM(STOCK_QTY) STOCKQTY
                            , 0 INQTY
                            , 0 OUTQTY
                            FROM STOCK_CLOSE SC
                            JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = SC.WH_CD AND WHMNG.DEL_FG='N'
                            WHERE 1=1
                            <if test="stt_dt != null and stt_dt != '' ">
                                AND CLOSE_YYMM = TO_CHAR(ADD_MONTHS(TO_DATE(#{stt_dt}), -1), 'YYYYMM')
                            </if>
                                /*AND GDS_CD IN ( $GDSCDARR$ )*/
                            <if test="whcd != null and whcd != '' ">
                                AND SC.WH_CD = #{whcd}
                            </if>
                            <if test="branch != null and branch != '' ">
                                AND BRANCH =  #{branch}
                            </if>
                            GROUP BY GDS_CD
                            UNION ALL

                            SELECT
                             WD.GDS_CD GDSCD
                            , 0 STOCKQTY
                            , SUM(WD.QTY) INQTY
                            , 0 OUTQTY
                            FROM WH_IN_DTL WD
                            JOIN WH_IN_MST WM ON WD.WH_IN_NO = WM.WH_IN_NO AND WM.DEL_FG='N'
                            JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
                            WHERE 1=1

                            /*AND WD.GDS_CD IN ( $GDSCDARR$ )*/
                            <if test="whcd != null and whcd != '' ">
                                AND WD.WH_CD = #{whcd}
                               </if>
                            <if test="stt_dt != null and stt_dt != '' ">
                            AND WM.IN_DT BETWEEN TO_CHAR(TO_DATE(#{stt_dt}), 'YYYYMM') || '01' AND TO_CHAR(TO_DATE(#{stt_dt}) - 1, 'YYYYMMDD')
                            </if>
                            <if test="branch != null and branch != '' ">
                            AND BRANCH =  #{branch}
                            </if>
                            GROUP BY GDS_CD

                            UNION ALL

                            SELECT
                             WD.GDS_CD GDSCD
                            , 0 STOCKQTY
                            , 0 INQTY
                            , SUM(WD.QTY) OUTQTY
                            FROM WH_OUT_DTL WD
                            JOIN WH_OUT_MST WM ON WD.WH_OUT_NO = WM.WH_OUT_NO AND WM.DEL_FG='N'
                            JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
                            WHERE 1=1

                            /*	AND WD.GDS_CD IN ( $GDSCDARR$ )*/
                            <if test="whcd != null and whcd != '' ">
                                AND WD.WH_CD = #{whcd}
                            </if>
                            <if test="stt_dt != null and stt_dt != '' ">
                                AND WM.OUT_DT BETWEEN TO_CHAR(TO_DATE(#{stt_dt}), 'YYYYMM') || '01' AND TO_CHAR(TO_DATE(#{stt_dt}) - 1, 'YYYYMMDD')
                            </if>
                            <if test="branch != null and branch != '' ">
                                AND BRANCH = #{branch}
                            </if>
                          GROUP BY GDS_CD
                      )STTMP
                      GROUP BY GDSCD

                      UNION ALL

                       SELECT
                        TMP.GDSCD
                        , 0 STOCKQTY
                        , SUM(INQTY) INQTY
                        , SUM(OUTQTY) OUTQTY
                        , SUM(INAMT) INAMT
                        , SUM(OUTAMT) OUTAMT
                      FROM
                          (
                            SELECT
                             WD.GDS_CD GDSCD
                            , WD.QTY INQTY
                            , 0 OUTQTY
                            , WD.AMT INAMT
                            , 0 OUTAMT
                            FROM WH_IN_DTL WD
                            JOIN WH_IN_MST WM ON WD.WH_IN_NO = WM.WH_IN_NO AND WM.DEL_FG='N'
                            JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
                            WHERE 1=1

                            /*AND WD.GDS_CD IN ( $GDSCDARR$ )*/
                            <if test="whcd != null and whcd != '' ">
                                    AND WD.WH_CD = #{whcd}
                               </if>
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                            AND WM.IN_DT BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                            <if test="branch != null and branch != '' ">
                            AND BRANCH =  #{branch}
                            </if>
                            UNION ALL

                            SELECT
                             WD.GDS_CD GDSCD
                            , 0 INQTY
                            , WD.QTY OUTQTY
                            , 0 INAMT
                            , WD.AMT OUTAMT
                            FROM WH_OUT_DTL WD
                            JOIN WH_OUT_MST WM ON WD.WH_OUT_NO = WM.WH_OUT_NO AND WM.DEL_FG='N'
                            JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
                            WHERE 1=1

                            /*AND WD.GDS_CD IN ( $GDSCDARR$ )*/
                            <if test="whcd != null and whcd != '' ">
                                   AND WD.WH_CD = #{whcd}
                            </if>
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND WM.OUT_DT BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                            <if test="branch != null and branch != '' ">
                            AND BRANCH = #{branch}
                            </if>
                          )TMP
                          GROUP BY GDSCD
                    )TEMPP
                    WHERE TEMPP.GDSCD IN (SELECT GDS_CD FROM EVENT_GOODS_MNG_MST WHERE NVL(REPORT_MNG_YN, 'N') = 'Y')
                    GROUP BY GDSCD
              )TP
          LEFT JOIN
                  (
                    SELECT
                            T.GDS_CD GDSCD, ED.BUYING_COST UNITCOST
                    FROM (SELECT GDS_CD, MAX(BIS_START_DT) STARTDT FROM EVENT_GOODS_MNG_DTL
                          WHERE DEL_FG='N'
                              AND GDS_CD IS NOT NULL
                          GROUP BY GDS_CD) T
                          JOIN EVENT_GOODS_MNG_DTL ED ON ED.GDS_CD = T.GDS_CD AND T.STARTDT = ED.BIS_START_DT
                    WHERE ED.DEL_FG='N'
                      AND ED.GDS_CD IS NOT NULL
                  ) ED ON ED.GDSCD = TP.GDSCD

    </select>

    <!-- 장례용품 재고 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeStockClList" parameterType="map" resultType="resultMap">


          SELECT /* DlwNewTypeEvntMap.getNewTypeStockClList */
                TP.GDSCD
                , (SELECT STANDARD FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = TP.GDSCD) GDSSTND
                , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = TP.GDSCD) GDSNM
                , NVL(ED.UNITCOST,0) UNITCOST
                , NVL(ED.UNITCOST,0)  * NVL(STOCKQTY,0) PRESTOCKAMT
                , NVL(STOCKQTY,0) PRESTOCKQTY
                , NVL(INQTY,0) INQTY
                , NVL(OUTQTY,0) OUTQTY
                , NVL(INAMT,0) INAMT
                , NVL(OUTAMT,0) OUTAMT
                , (NVL(STOCKQTY,0) +  TP.INQTY - TP.OUTQTY) AS STOCKQTY
          FROM
              (
                SELECT
                  GDSCD
                  , SUM(STOCKQTY) STOCKQTY
                  , SUM(INQTY) INQTY
                  , SUM(OUTQTY) OUTQTY
                  , SUM(INAMT) INAMT
                  , SUM(OUTAMT) OUTAMT
                FROM
                    (
                        SELECT
                        GDSCD
                        , (SUM(STOCKQTY) + SUM(INQTY) - SUM(OUTQTY)) AS STOCKQTY
                        , 0 INQTY
                        , 0 OUTQTY
                        , 0 INAMT
                        , 0 OUTAMT
                      FROM
                          (
                            SELECT
                            GDS_CD GDSCD
                            , SUM(STOCK_QTY) STOCKQTY
                            , 0 INQTY
                            , 0 OUTQTY
                            FROM STOCK_CLOSE SC
                            JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = SC.WH_CD AND WHMNG.DEL_FG='N'
                            WHERE 1=1
                            <if test="stt_dt != null and stt_dt != '' ">
                                AND CLOSE_YYMM = TO_CHAR(ADD_MONTHS(TO_DATE(#{stt_dt}), -1), 'YYYYMM')
                            </if>
                            <if test="gds_cd != null and gds_cd != '' ">
                                  AND GDS_CD IN (${gds_cd})
                              </if>
                            <if test="whcd != null and whcd != '' ">
                                AND SC.WH_CD = #{whcd}
                            </if>
                            <if test="branch != null and branch != '' ">
                                AND BRANCH =  #{branch}
                            </if>
                            GROUP BY GDS_CD

                            UNION ALL

                            SELECT
                             WD.GDS_CD GDSCD
                            , 0 STOCKQTY
                            , SUM(WD.QTY) INQTY
                            , 0 OUTQTY
                            FROM WH_IN_DTL WD
                            JOIN WH_IN_MST WM ON WD.WH_IN_NO = WM.WH_IN_NO AND WM.DEL_FG='N'
                            JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
                            WHERE 1=1
                            <if test="gds_cd != null and gds_cd != '' ">
                                  AND WD.GDS_CD IN (${gds_cd})
                              </if>
                            <if test="whcd != null and whcd != '' ">
                                AND WD.WH_CD = #{whcd}
                               </if>
                            <if test="stt_dt != null and stt_dt != '' ">
                                AND WM.IN_DT BETWEEN TO_CHAR(TO_DATE(#{stt_dt}), 'YYYYMM') || '01' AND TO_CHAR(TO_DATE(#{stt_dt}) - 1, 'YYYYMMDD')
                            </if>
                            <if test="branch != null and branch != '' ">
                                AND BRANCH =  #{branch}
                            </if>
                            GROUP BY GDS_CD

                            UNION ALL

                            SELECT
                             WD.GDS_CD GDSCD
                            , 0 STOCKQTY
                            , 0 INQTY
                            , SUM(WD.QTY) OUTQTY
                            FROM WH_OUT_DTL WD
                            JOIN WH_OUT_MST WM ON WD.WH_OUT_NO = WM.WH_OUT_NO AND WM.DEL_FG='N'
                            JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
                            WHERE 1=1
                            <if test="gds_cd != null and gds_cd != '' ">
                                  AND WD.GDS_CD IN (${gds_cd})
                              </if>
                            <if test="whcd != null and whcd != '' ">
                                AND WD.WH_CD = #{whcd}
                            </if>
                            <if test="stt_dt != null and stt_dt != '' ">
                                AND WM.OUT_DT BETWEEN TO_CHAR(TO_DATE(#{stt_dt}), 'YYYYMM') || '01' AND TO_CHAR(TO_DATE(#{stt_dt}) - 1, 'YYYYMMDD')
                            </if>
                            <if test="branch != null and branch != '' ">
                                AND BRANCH = #{branch}
                            </if>
                          GROUP BY GDS_CD
                      )STTMP
                      GROUP BY GDSCD

                      UNION ALL

                       SELECT
                        TMP.GDSCD
                        , 0 STOCKQTY
                        , SUM(INQTY) INQTY
                        , SUM(OUTQTY) OUTQTY
                        , SUM(INAMT) INAMT
                        , SUM(OUTAMT) OUTAMT
                      FROM
                          (
                            SELECT
                             WD.GDS_CD GDSCD
                            , WD.QTY INQTY
                            , 0 OUTQTY
                            , WD.AMT INAMT
                            , 0 OUTAMT
                            FROM WH_IN_DTL WD
                            JOIN WH_IN_MST WM ON WD.WH_IN_NO = WM.WH_IN_NO AND WM.DEL_FG='N'
                            JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
                            WHERE 1=1
                            <if test="gds_cd != null and gds_cd != '' ">
                                  AND WD.GDS_CD IN (${gds_cd})
                              </if>
                            <if test="whcd != null and whcd != '' ">
                                    AND WD.WH_CD = #{whcd}
                               </if>
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                            AND WM.IN_DT BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                            <if test="branch != null and branch != '' ">
                            AND BRANCH =  #{branch}
                            </if>
                            UNION ALL

                            SELECT
                             WD.GDS_CD GDSCD
                            , 0 INQTY
                            , WD.QTY OUTQTY
                            , 0 INAMT
                            , WD.AMT OUTAMT
                            FROM WH_OUT_DTL WD
                            JOIN WH_OUT_MST WM ON WD.WH_OUT_NO = WM.WH_OUT_NO AND WM.DEL_FG='N'
                            JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
                            WHERE 1=1
                            <if test="gds_cd != null and gds_cd != '' ">
                                  AND WD.GDS_CD IN (${gds_cd})
                              </if>
                            <if test="whcd != null and whcd != '' ">
                                   AND WD.WH_CD = #{whcd}
                            </if>
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND WM.OUT_DT BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                            <if test="branch != null and branch != '' ">
                            AND BRANCH = #{branch}
                            </if>
                          )TMP
                          GROUP BY GDSCD
                    )TEMPP
                    WHERE TEMPP.GDSCD IN (SELECT GDS_CD FROM EVENT_GOODS_MNG_MST WHERE NVL(REPORT_MNG_YN, 'N') = 'Y')
                    GROUP BY GDSCD
              )TP
          LEFT JOIN
                  (
                    SELECT
                            T.GDS_CD GDSCD, ED.BUYING_COST UNITCOST
                    FROM (SELECT GDS_CD, MAX(BIS_START_DT) STARTDT FROM EVENT_GOODS_MNG_DTL
                          WHERE DEL_FG='N'
                              AND GDS_CD IS NOT NULL
                          GROUP BY GDS_CD) T
                          JOIN EVENT_GOODS_MNG_DTL ED ON ED.GDS_CD = T.GDS_CD AND T.STARTDT = ED.BIS_START_DT
                    WHERE ED.DEL_FG='N'
                      AND ED.GDS_CD IS NOT NULL
                  ) ED ON ED.GDSCD = TP.GDSCD

    </select>

    <!-- 의전행사 사진 삭제(행사일련번호로 삭제) - 행사취소 시 사용 -->
    <update id="DlwNewTypeEvntMap.deleteNewTypeEvtPicByEventSeq" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.deleteNewTypeEvtPicByEventSeq */
               EVENT_PIC_UPLOAD
           SET DEL_FG = 'Y'
         WHERE ACCNT_NO = #{accnt_no}
           AND EMPLE_NO IN (SELECT EMM.EMPLE_NO
                             FROM EVENT E
                                , EVENT_MNGR_REG EMR
                                , EVENT_MANAGER_MNG EMM
                            WHERE E.SEQ = EMR.EVT_SEQ
                              AND EMR.EVT_MNGR_CD = EMM.EVT_MNGR_CD
                              AND E.SEQ = #{seq}
                              AND EMR.EVT_MNGR_GUBUN   = '0001'
                              AND EMR.DEL_FG           = 'N'
                              AND EMM.DEL_FG           = 'N'
                              )
           AND REG_DM > to_date(#{event_reg_day}, 'YYYYMMDD')
    </update>

    <!-- 추가매출(직영) 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeAddSalesInList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeAddSalesInList */
               F.EVT_MNGR_NM,
               F.EVT_MNGR_CD,
               H.BRANCH_NM,
               FN_MEM_NM(B.MEM_NO) MEM_NM,
               A.ACCNT_NO,
               CASE WHEN NVL(C.PAY_TYPE, '0000') = '002'
                    THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = B.PROD_CD)
                    ELSE C.PROD_AMT
               END PROD_AMT,
               I.DEDUCT_AMT,
               (CASE WHEN PROD_CL != '03' THEN C.MON_PAY_AMT ELSE D.MONTH_PAY_AMT END) * NVL(NEW_CHAN_GUNSU,0) DISAMT,
               NVL(J.SALES_AMT,0) + NVL(K.AMT,0) AS ADDAMT,
               NVL(J.AMT,0) AMT,
               NVL(J.BASIC_COST,0) BASIC_COST,
               NVL(J.SALES_AMT,0) + NVL(K.AMT,0) + NVL(J.BASIC_COST,0) - NVL(J.AMT,0) AS SAMT,
               NVL(ROUND((NVL(J.SALES_AMT,0) + NVL(K.AMT,0) + NVL(J.BASIC_COST,0) - NVL(J.AMT,0)) / NULLIF((NVL(J.SALES_AMT,0) + NVL(K.AMT,0)),0),5) * 100,0) RATE,
               NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE ITEM_CD = '0001' AND RPT_NO = I.RPT_NO),0) ADD_1,
               NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE ITEM_CD = '0002' AND RPT_NO = I.RPT_NO),0) ADD_2,
               NVL(TRUNC((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE ITEM_CD = '0002' AND RPT_NO = I.RPT_NO) / 1.1,0),0) GAMT,
               NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE ITEM_CD = '0002' AND RPT_NO = I.RPT_NO)
                  - TRUNC((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE ITEM_CD = '0002' AND RPT_NO = I.RPT_NO) / 1.1,0),0) TAXAMT,
               NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE ITEM_CD = '0003' AND RPT_NO = I.RPT_NO),0) ADD_3,
               NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE ITEM_CD = '0004' AND RPT_NO = I.RPT_NO),0) ADD_4,
               NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE ITEM_CD = '0005' AND RPT_NO = I.RPT_NO),0) ADD_5,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0001'),0) SALES_1,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0002'),0) SALES_2,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0003'),0) SALES_3,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0004'),0) SALES_4,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0005'),0) SALES_5,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0006'),0) SALES_6,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0007'),0) SALES_7,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0008'),0) SALES_8,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0009'),0) SALES_9,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0010'),0) SALES_10,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0011'),0) SALES_11,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0012'),0) SALES_12,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE RPT_NO = I.RPT_NO AND B.GDS_GRP_CD = '0013'),0) SALES_13
        FROM EVENT A
            LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
            LEFT OUTER JOIN PRODUCT C ON C.PROD_CD = B.PROD_CD
            LEFT OUTER JOIN PRODUCT_DTL D ON B.PROD_CD = D.PROD_CD AND ST_NO = 1
            LEFT OUTER JOIN EVENT_MNGR_REG E ON E.EVT_SEQ = A.SEQ AND E.DEL_FG = 'N' AND E.EVT_MNGR_GUBUN = '0001'
            LEFT OUTER JOIN EVENT_MANAGER_MNG F ON F.EVT_MNGR_CD = E.EVT_MNGR_CD AND F.DEL_FG = 'N'
            LEFT OUTER JOIN WAREHOUSE_MNG G ON G.WH_CD = F.WH_CD AND G.DEL_FG = 'N'
            LEFT OUTER JOIN BRANCH_MNG H ON H.BRANCH_CD = G.BRANCH AND H.DEL_FG = 'N'
            LEFT OUTER JOIN FUNRL_RPT I ON I.SEQ = A.SEQ AND I.DEL_FG = 'N'
            LEFT OUTER JOIN (
                             SELECT A.RPT_NO
                                  , SUM(A.SALES_AMT) SALES_AMT
                                  , SUM(A.AMT) AMT
                                  , SUM(A.BASIC_COST) BASIC_COST
                               FROM FUNRL_RPT_GOODS A
                                    INNER JOIN EVENT_GOODS_MNG_MST EGMM ON EGMM.DEL_FG = 'N' AND A.GDS_CD = EGMM.GDS_CD
                              WHERE A.GDS_CL = '0002'
                                AND A.DEL_FG = 'N'
                             GROUP BY A.RPT_NO
                           ) J ON I.RPT_NO = J.RPT_NO
            LEFT OUTER JOIN (SELECT RPT_NO, SUM(MARGIN) AMT FROM FUNRL_RPT_SALES2 GROUP BY RPT_NO) K ON K.RPT_NO = I.RPT_NO
        WHERE A.DEL_FG = 'N'
          AND F.EMP_GUBUN = '0001'
          <if test="start_dt != null and start_dt != '' and end_dt != null and end_dt != ''">
              AND A.EVENT_COMP_DAY BETWEEN #{start_dt} AND #{end_dt}
          </if>
          <if test="prod_cd != null and prod_cd != '' ">
              AND B.PROD_CD = #{prod_cd}
          </if>
          <if test="cp_nm != null and cp_nm != '' ">
              AND F.EVT_MNGR_NM LIKE '%' || #{cp_nm} || '%'
          </if>
          <if test="branch != null and branch != '' ">
              AND H.BRANCH_CD = #{branch}
          </if>
          ORDER BY F.EVT_MNGR_NM
    </select>

    <!-- 추가매출(외주) 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeAddSalesOutList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeAddSalesOutList */
               F.EVT_MNGR_NM,
               F.EVT_MNGR_CD,
               H.BRANCH_NM,
               FN_MEM_NM(B.MEM_NO) MEM_NM,
               A.ACCNT_NO,
               CASE WHEN NVL(C.PAY_TYPE, '0000') = '002'
                    THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = B.PROD_CD)
                    ELSE C.PROD_AMT
               END PROD_AMT,
               NVL(J.SALES_AMT,0) AS ADDAMT,
               NVL(J.AMT,0) AMT,
               NVL(J.MARGIN,0) MARGIN,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '76'),0) SALES_1,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '64'),0) SALES_2,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1201'),0) SALES_3,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '95'),0) SALES_4,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1209'),0) SALES_5,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1207'),0) SALES_6,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '81'),0) SALES_7,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '11'),0) SALES_8,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1229'),0) SALES_9,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '65'),0) SALES_10,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '49'),0) SALES_11,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1193'),0) SALES_12,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '16'),0) SALES_13,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1200'),0) SALES_14,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1226'),0) SALES_15,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1182'),0) SALES_16,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '2245'),0) SALES_17,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '82'),0) SALES_18,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '61'),0) SALES_19,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '40'),0) SALES_20,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '2242'),0) SALES_21,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1186'),0) SALES_22,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '17'),0) SALES_23,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1181'),0) SALES_24,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '7'),0) SALES_25,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '2244'),0) SALES_26,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '84'),0) SALES_27,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '66'),0) SALES_28,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '8'),0) SALES_29,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '67'),0) SALES_30,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1228'),0) SALES_31,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '1208'),0) SALES_32,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '9'),0) SALES_33,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '80'),0) SALES_34,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '79'),0) SALES_35,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '18'),0) SALES_36,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '2230'),0) SALES_37,
               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON A.GDS_CD = B.GDS_CD WHERE FUNRL_OUTSRC_NO = I.FUNRL_OUTSRC_NO AND A.GDS_CD = '171'),0) SALES_38
        FROM EVENT A
            LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
            LEFT OUTER JOIN PRODUCT C ON C.PROD_CD = B.PROD_CD
            LEFT OUTER JOIN EVENT_MNGR_REG E ON E.EVT_SEQ = A.SEQ AND E.DEL_FG = 'N' AND E.EVT_MNGR_GUBUN = '0001'
            LEFT OUTER JOIN EVENT_MANAGER_MNG F ON F.EVT_MNGR_CD = E.EVT_MNGR_CD AND F.DEL_FG = 'N'
            LEFT OUTER JOIN WAREHOUSE_MNG G ON G.WH_CD = F.WH_CD AND G.DEL_FG = 'N'
            LEFT OUTER JOIN BRANCH_MNG H ON H.BRANCH_CD = G.BRANCH AND H.DEL_FG = 'N'
            LEFT OUTER JOIN FUNRL_OUTSRC_MST I ON I.SEQ = A.SEQ AND I.DEL_FG = 'N'
            LEFT OUTER JOIN (
                             SELECT A.FUNRL_OUTSRC_NO
                                  , SUM(A.SALES_AMT) SALES_AMT
                                  , SUM(A.AMT) AMT
                                  , SUM(A.MARGIN) MARGIN
                               FROM FUNRL_OUTSRC_GOODS A
                                    INNER JOIN EVENT_GOODS_MNG_MST EGMM ON EGMM.DEL_FG = 'N' AND A.GDS_CD = EGMM.GDS_CD
                              WHERE A.FOG_CL = '0001'
                             GROUP BY A.FUNRL_OUTSRC_NO
                           ) J ON I.FUNRL_OUTSRC_NO = J.FUNRL_OUTSRC_NO
        WHERE A.DEL_FG = 'N'
          AND F.EMP_GUBUN = '0002'
          <if test="start_dt != null and start_dt != '' and end_dt != null and end_dt != ''">
              AND A.EVENT_COMP_DAY BETWEEN #{start_dt} AND #{end_dt}
          </if>
          <if test="prod_cd != null and prod_cd != '' ">
              AND B.PROD_CD = #{prod_cd}
          </if>
          <if test="cp_nm != null and cp_nm != '' ">
              AND F.EVT_MNGR_NM LIKE '%' || #{cp_nm} || '%'
          </if>
          <if test="branch != null and branch != '' ">
              AND H.BRANCH_CD = #{branch}
          </if>
          ORDER BY F.EVT_MNGR_NM
    </select>

    <!-- 일자별 발주현황 조회 건수-->
    <select id="DlwNewTypeEvntMap.getNewTypeOrderAnalCount" parameterType="map" resultType="int">
            SELECT /* DlwNewTypeEvntMap.getNewTypeOrderAnalCount */
                    COUNT(*)
              FROM ORD_MST OM
                   INNER JOIN ORD_DTL OD ON OD.ORD_NO = OM.ORD_NO
             WHERE 1=1
               AND DEL_FG='N'
               <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                       AND OM.ORD_DT BETWEEN #{stt_dt} AND #{end_dt}
               </if>
               <if test="custmr_cd != null and custmr_cd != '' ">
               AND OM.CUSTMR_CD = #{custmr_cd}
               </if>
               <if test="wh_cd != null and wh_cd != '' ">
               AND OD.WH_CD = #{wh_cd}
               </if>
               <if test="gds_cd != null and gds_cd != '' ">
               AND OD.GDS_CD IN (${gds_cd})
               </if>
               <if test="ord_cl != null and ord_cl != '' ">
               AND OM.ORD_CL = #{ord_cl}
               </if>
            ORDER BY OM.ORD_NO DESC
    </select>

    <!-- 일자별 발주현황 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeOrderAnalList" parameterType="map" resultType="resultMap">
            SELECT /* DlwNewTypeEvntMap.getNewTypeOrderAnalList */
                   FN_COM_NM('0144',OM.PROC_STAT) AS PROCSTAT_NM
                 , OM.ORD_NO
                 , FN_COM_NM('0143',OM.ORD_CL) AS ORDCL_NM
                 , OM.ORD_DT
                 , OM.CUSTMR_CD
                 , (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE DEL_FG='N' AND CUSTMR_CD = OM.CUSTMR_CD) AS CUSTMR_NM
                 , OD.WH_CD
                 , (SELECT WH_NM FROM WAREHOUSE_MNG WHERE WH_CD = OD.WH_CD) WH_NM
                 , OD.GDS_CD
                 , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = OD.GDS_CD) GDS_NM
                 , (SELECT STANDARD FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = OD.GDS_CD) GDSSTND
                 , OD.QTY AS QTY
                 , OD.UNIT_COST AS UNIT_COST
                 , OD.AMT
                 , OD.VAT
                 , OD.TOT_AMT
                 , OM.ORD_CL
                 , OD.NOTE
                 , OM.PROC_STAT
              FROM ORD_MST OM
                   INNER JOIN ORD_DTL OD ON OD.ORD_NO = OM.ORD_NO
             WHERE 1=1
               AND DEL_FG='N'
               <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                       AND OM.ORD_DT BETWEEN #{stt_dt} AND #{end_dt}
               </if>
               <if test="custmr_cd != null and custmr_cd != '' ">
               AND OM.CUSTMR_CD = #{custmr_cd}
               </if>
               <if test="wh_cd != null and wh_cd != '' ">
               AND OD.WH_CD = #{wh_cd}
               </if>
               <if test="gds_cd != null and gds_cd != '' ">
               AND OD.GDS_CD IN (${gds_cd})
               </if>
               <if test="ord_cl != null and ord_cl != '' ">
               AND OM.ORD_CL = #{ord_cl}
               </if>
            ORDER BY OM.ORD_NO DESC
    </select>

    <!-- 행사잔금처리현황 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntRemainAmtList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeEvntRemainAmtList */
               TBL.SEQ
             , FN_RPT_GUBUN(TBL.ACCNT_NO) GUBUN_CODE
             , CASE WHEN FN_RPT_GUBUN(TBL.ACCNT_NO) = '0001' THEN '직영'
                    WHEN FN_RPT_GUBUN(TBL.ACCNT_NO) = '0002' THEN '외주'
               ELSE '' END GUBUN
             , TBL.EVENT_COMP_DAY
             , TBL.MEMNM
             , TBL.ACCNT_NO
             , CASE WHEN FN_YEN_CHE(TBL.ACCNT_NO) = '만기'
                     THEN '만기'
                     ELSE ''
                END YENCHE
             , CASE WHEN NVL(TBL.PRODAMT, 0) - NVL(TBL.NEWCHANAMT, 0) - NVL(TBL.DEDUCTAMT, 0) + NVL(TBL.ADDAMT, 0) - NVL(TBL.SALESMARGINAMT, 0) - (NVL(TBL.PAY_AMT,0) + NVL(TBL.EVTCARDAMT,0) + NVL(TBL.EVTBANKAMT, 0)) + NVL(TBL.REMAIN_DTL_AMT,0) + NVL(TBL.SALESMARGINAMT, 0) = 0 THEN 'X'
                    WHEN NVL(TBL.PRODAMT, 0) - NVL(TBL.NEWCHANAMT, 0) - NVL(TBL.DEDUCTAMT, 0) + NVL(TBL.ADDAMT, 0) - NVL(TBL.SALESMARGINAMT, 0) - (NVL(TBL.PAY_AMT,0) + NVL(TBL.EVTCARDAMT,0) + NVL(TBL.EVTBANKAMT, 0)) + NVL(TBL.REMAIN_DTL_AMT,0) + NVL(TBL.SALESMARGINAMT, 0)!= 0 AND TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(EVENT_COMP_DAY, 'YYYYMMDDHH24MISS'))* 30.5) - 2 > 0 THEN
                         '+' || TO_CHAR(TRUNC(MONTHS_BETWEEN(SYSDATE, TO_DATE(EVENT_COMP_DAY, 'YYYYMMDDHH24MISS'))* 30.5) - 2)
                    ELSE '0' END JADD_DATE -- 잔금입금초과일
             , TBL.PRODNM
             , NVL(TBL.NEWCHANAMT, 0) + NVL(TBL.DEDUCTAMT, 0) NEWCHANAMT
             , NVL(TBL.PRODAMT, 0) PRODAMT
             , NVL(TBL.DEDUCTAMT, 0) DEDUCTAMT
             , NVL(TBL.PRODAMT, 0) - NVL(TBL.NEWCHANAMT, 0) - NVL(TBL.DEDUCTAMT, 0) PRODSALESAMT
             , NVL(TBL.ADDAMT, 0) - NVL(TBL.SALESMARGINAMT, 0) ADDAMT
             , NVL(TBL.PRODAMT, 0) - NVL(TBL.NEWCHANAMT, 0) - NVL(TBL.DEDUCTAMT, 0) + NVL(TBL.ADDAMT, 0) - NVL(TBL.SALESMARGINAMT, 0) TOTAMT
             , TBL.CMSAMT
             , TBL.CARDAMT
             , NVL(TBL.PAY_AMT,0) PAY_AMT
             , NVL(TBL.REMAIN_DTL_AMT,0) REMAIN_DTL_AMT
             , TBL.HANDAMT
             , TBL.CMSAMT + TBL.CARDAMT + TBL.HANDAMT AS TOTPAYAMT
             , ' ' TMPCOL
             , NVL(TBL.EVTBANKAMT, 0) EVTBANKAMT
             , NVL(TBL.EVTBANKLISTAMT, ' ') EVTBANKLISTAMT
             , NVL(TBL.EVTBANKDT, ' ') EVTBANKDT
             , NVL(TBL.EVTCARDAMT, 0) EVTCARDAMT
             , NVL(TBL.EVTBANKAMT,0) + NVL(TBL.EVTCARDAMT,0) EVT_AF_AMT
             , NVL(TBL.EVTCARDAPPDT, ' ') EVTCARDAPPDT
             , NVL(TBL.EVTCARDPAYDT, ' ') EVTCARDPAYDT
             , NVL(TBL.PAY_AMT,0) + NVL(TBL.EVTBANKAMT, 0) + NVL(TBL.EVTCARDAMT, 0) PAYTOTAMT
             , NVL(TBL.SALESMARGINAMT, 0) SALESMARGINAMT
             , NVL(TRUNC(TBL.SALESMARGINAMT / 1.1), 0) SALESAMT
             , NVL(TBL.SALESMARGINAMT - TRUNC(TBL.SALESMARGINAMT / 1.1, 0), 0) SALESVAT
             , NVL(TBL.SALESBUYINGCOM, ' ') SALESBUYINGCOM
             , NVL(TBL.PRODAMT, 0) - NVL(TBL.NEWCHANAMT, 0) - NVL(TBL.DEDUCTAMT, 0) + NVL(TBL.ADDAMT, 0) - NVL(TBL.SALESMARGINAMT, 0) - (NVL(TBL.PAY_AMT,0) + NVL(TBL.EVTCARDAMT,0) + NVL(TBL.EVTBANKAMT, 0)) + NVL(TBL.REMAIN_DTL_AMT,0) + NVL(TBL.SALESMARGINAMT, 0) DIFAMT
             , NVL(REPLACE(REPLACE(REPLACE(TBL.BIGO1, CHR(13), ' '), CHR(10), ' '), CHR(9), ' '), '') BIGO1
             , NVL(REPLACE(REPLACE(REPLACE(TBL.BIGO2, CHR(13), ' '), CHR(10), ' '), CHR(9), ' '), '') BIGO2
             , TBL.IP_MG
             , TBL.BILL_MG
             , TBL.SECTION_THR
          FROM (
                SELECT EVT.SEQ SEQ
                     , EVT.EVENT_COMP_DAY
                     , MEM.MEM_NM MEMNM
                     , EVT.ACCNT_NO ACCNT_NO
                     , ACCNT.PROD_CD
                     , FN_PROD_NM(ACCNT.PROD_CD) PRODNM
                     , ACCNT.NEW_CHAN_GUNSU * PROD.MON_PAY_AMT NEWCHANAMT
                     , CASE WHEN NVL(PAY_TYPE, '0000') = '002'
                            THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = PROD.PROD_CD)
                            ELSE PROD.PROD_AMT
                       END PRODAMT
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS WHERE GDS_CL = '0002' AND RPT_NO = FR.RPT_NO), 0)
                                 +
                                 NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE RPT_NO = FR.RPT_NO), 0)
                            WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                            THEN NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT <![CDATA[>]]> 0)), 0)
                                 +
                                 NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0)
                            ELSE NULL
                       END ADDAMT
                     , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE DEL_FG = 'N' AND ACCNT_NO = ACCNT.ACCNT_NO AND PAY_MTHD = '04' AND CASE WHEN FR.RPT_NO IS NOT NULL THEN NVL(FR.PAY_CNT, 0) WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL THEN NVL(FOM.PAY_CNT, 0) ELSE NO END <![CDATA[>=]]> NO), 0)
                       +
                       NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE DEL_FG = 'N' AND ACCNT_NO = ACCNT.ACCNT_NO AND PAY_MTHD = '04' AND CASE WHEN FR.RPT_NO IS NOT NULL THEN NVL(FR.PAYDTL_CNT, 0) WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL THEN NVL(FOM.PAY_DTL_CNT, 0) ELSE NO END <![CDATA[>=]]> NO), 0) CMSAMT
                     , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE DEL_FG = 'N' AND ACCNT_NO = ACCNT.ACCNT_NO AND PAY_MTHD = '06' AND CASE WHEN FR.RPT_NO IS NOT NULL THEN NVL(FR.PAY_CNT, 0) WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL THEN NVL(FOM.PAY_CNT, 0) ELSE NO END >= NO), 0)
                       +
                       NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE DEL_FG = 'N' AND ACCNT_NO = ACCNT.ACCNT_NO AND PAY_MTHD = '06' AND CASE WHEN FR.RPT_NO IS NOT NULL THEN NVL(FR.PAYDTL_CNT, 0) WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL THEN NVL(FOM.PAY_DTL_CNT, 0) ELSE NO END <![CDATA[>=]]> NO), 0) CARDAMT
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N' AND NO <![CDATA[<=]]> FR.PAY_CNT), 0)
                            WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                            THEN NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N' AND NO <![CDATA[<=]]> FOM.PAY_CNT), 0)
                            ELSE NULL
                       END PAY_AMT
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN (SELECT SUM((END_NO - ST_NO + 1) * (ALLT_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                  - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N' AND NO <![CDATA[<=]]> FR.PAYDTL_CNT), 0)
                                  + (SELECT SUM((END_NO - ST_NO + 1) * (ADD_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                  - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N' AND NO  <![CDATA[<=]]>  FR.PAYDTL1_CNT), 0)
                            WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                            THEN (SELECT SUM((END_NO - ST_NO + 1) * (ALLT_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                  - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N' AND NO <![CDATA[<=]]> FOM.PAY_DTL_CNT), 0)
                                  + (SELECT SUM((END_NO - ST_NO + 1) * (ADD_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                  - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = ACCNT.ACCNT_NO AND DEL_FG = 'N' AND NO  <![CDATA[<=]]>  FOM.PAY_DTL1_CNT), 0)
                            ELSE NULL
                       END REMAIN_DTL_AMT
                     , NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE DEL_FG = 'N' AND ACCNT_NO = ACCNT.ACCNT_NO AND PAY_MTHD = '01' AND CASE WHEN FR.RPT_NO IS NOT NULL THEN NVL(FR.PAY_CNT, 0) WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL THEN NVL(FOM.PAY_CNT, 0) ELSE NO END <![CDATA[>=]]> NO), 0)
                       +
                       NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE DEL_FG = 'N' AND ACCNT_NO = ACCNT.ACCNT_NO AND PAY_MTHD = '01' AND CASE WHEN FR.RPT_NO IS NOT NULL THEN NVL(FR.PAYDTL_CNT, 0) WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL THEN NVL(FOM.PAY_DTL_CNT, 0) ELSE NO END <![CDATA[>=]]> NO), 0) HANDAMT
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN NVL((SELECT SUM(AMT) FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO AND PAY_OPT = '0003'), 0)
                            WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                            THEN NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO AND PAY_OPT = '0003'), 0)
                            ELSE NULL
                       END EVTBANKAMT
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN (SELECT LISTAGG(FN_AMT_COMMA(AMT),'/' ) WITHIN GROUP(ORDER BY RPT_NO)
                                  FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO  AND PAY_OPT = '0003')
                            WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                            THEN (SELECT LISTAGG(FN_AMT_COMMA(AMT),'/' ) WITHIN GROUP(ORDER BY RPT_NO)
                                  FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO   AND PAY_OPT = '0003' )
                            ELSE NULL
                       END EVTBANKLISTAMT
                    , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN
                                (SELECT LISTAGG(PAY_DT,',' ) WITHIN GROUP(ORDER BY PAY_DT)
                                 FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO  AND PAY_OPT = '0003')
                            WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                            THEN
                                (SELECT LISTAGG(PAY_DT,',' )  WITHIN GROUP(ORDER BY PAY_DT)
                                 FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO   AND PAY_OPT = '0003' )
                            ELSE NULL
                       END EVTBANKDT
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN NVL((SELECT SUM(AMT) FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO AND PAY_OPT = '0002'), 0)
                            WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                            THEN NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO AND PAY_OPT = '0002'), 0)
                            ELSE NULL
                       END EVTCARDAMT
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN
                            (SELECT LISTAGG(CARD_APP_DT,',' ) WITHIN GROUP(ORDER BY CARD_APP_DT)
                             FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO AND PAY_OPT = '0002')
                        WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                        THEN
                            (SELECT LISTAGG(CARD_APP_DT,',' ) WITHIN GROUP(ORDER BY CARD_APP_DT)
                             FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO AND PAY_OPT = '0002')
                        ELSE NULL
                       END EVTCARDAPPDT
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN
                           (SELECT LISTAGG(PAY_DT,',' ) WITHIN GROUP(ORDER BY PAY_DT)
                            FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO AND PAY_OPT = '0002')
                        WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                        THEN
                           (SELECT LISTAGG(PAY_DT,',' ) WITHIN GROUP(ORDER BY PAY_DT)
                            FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO AND PAY_OPT = '0002')
                        ELSE NULL
                       END EVTCARDPAYDT
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE RPT_NO = FR.RPT_NO AND ITEM_CD = '0002'), 0)
                            WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                            THEN NULL
                            ELSE NULL
                       END SALESMARGINAMT
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN
                            (SELECT (SELECT CUSTMR_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = SALES_CD) || TO_CHAR(TO_DATE(IPDATE),'MM/DD')
                            FROM FUNRL_RPT_SALES2 WHERE ITEM_CD = '0002' AND RPT_NO = FR.RPT_NO)
                        WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                                  THEN NULL
                                  ELSE NULL
                       END SALESBUYINGCOM
                     , EVT.BIGO1
                     , EVT.BIGO2
                     , CASE WHEN FR.RPT_NO IS NOT NULL
                            THEN FR.DEDUCT_AMT
                            WHEN FOM.FUNRL_OUTSRC_NO IS NOT NULL
                            THEN FOM.DEDUCT_AMT
                            ELSE NULL
                       END DEDUCTAMT
                     , CASE WHEN NVL((SELECT EVT_MNGR_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD), '') = ''
                            THEN NVL(WORKDEPT, '')
                            ELSE NVL((SELECT (SELECT Z.BRANCH_CD FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), '')
                       END AS BRANCH_CD
                     , EVT.IP_MG
                     , EVT.BILL_MG
                     , PROD.SECTION_THR
                  FROM EVENT EVT
                       INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
                       INNER JOIN MEMBER MEM ON ACCNT.MEM_NO = MEM.MEM_NO
                       INNER JOIN PRODUCT PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                       LEFT OUTER JOIN FUNRL_RPT FR ON FR.SEQ = EVT.SEQ AND FR.DEL_FG = 'N'
                       LEFT OUTER JOIN FUNRL_OUTSRC_MST FOM ON FOM.SEQ = EVT.SEQ AND FOM.DEL_FG = 'N'
                       LEFT OUTER JOIN (SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                         FROM EVENT_MNGR_REG
                                        WHERE DEL_FG = 'N'
                                          AND EVT_MNGR_GUBUN = '0001'
                                        GROUP BY EVT_SEQ
                                       ) EMR ON EVT.SEQ = EMR.EVT_SEQ
                 WHERE EVT.DEL_FG = 'N'
                   AND EVT.SORT = '01'
                   <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                       AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                   </if>
                   <if test="mem_nm != null and mem_nm != '' ">
                      AND MEM.MEM_NM LIKE '%' + #{mem_nm} + '%'
                   </if>
                   <if test="prod_cd != null and prod_cd != '' ">
                      AND ACCNT.PROD_CD = #{prod_cd}
                   </if>
                ) TBL
                WHERE 1=1
                 <if test="branch_cd != null and branch_cd != '' ">
                    AND TBL.BRANCH_CD = #{branch_cd}
                 </if>
                 <if test="gubun != null and gubun != '' ">
                    AND FN_RPT_GUBUN(TBL.ACCNT_NO) = #{gubun}
                 </if>
        <!-- 2017.11.23 김찬영  MEMNM 순서로 수정-->
        <!-- 2017.11.28 정승철  1순위(행사종료일) + 2순위(이름명) 오름차순 정렬 요청 : 김지연매니저 요청 -->
        ORDER BY TBL.EVENT_COMP_DAY, TBL.MEMNM

    </select>

    <!-- 행사잔금처리현황 비고 수정 -->
    <update id="DlwNewTypeEvntMap.RemainNewTypeBigoUpdate" parameterType="map">

           UPDATE /* DlwNewTypeEvntMap.RemainNewTypeBigoUpdate */
               EVENT
           SET IP_MG   = #{ip_mg}
              ,BILL_MG = #{bill_mg}
              ,BIGO1   = #{bigo1}
              ,BIGO2   = #{bigo2}
              ,UPD_DM  = SYSDATE
              ,UPD_MAN = #{upd_man}
           WHERE ACCNT_NO = #{accnt_no}
             AND DEL_FG = 'N'

    </update>

    <!-- 일자별 입출고 내역 조회 건수 -->
    <select id="DlwNewTypeEvntMap.getNewTypeStockDayCount" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeEvntMap.getNewTypeStockDayCount */
            COUNT(*)
        FROM
            (
              SELECT
                '0001' IOGBN
                , WD.WH_CD WHCD
                , (SELECT WH_NM FROM WAREHOUSE_MNG WHERE WH_CD = WD.WH_CD) WHNM
                , EG.REAL_GDS_CD GDSCD
                , EG.STANDARD GDSSTND
                , EG.GDS_NM GDSNM
                , WD.QTY_UNIT QTYUNIT
                , WD.QTY INQTY
                , 0 OUTQTY
                , WD.UNIT_COST UNITCOST
                , WD.AMT
                , WM.IN_DT AS IODT
                , FN_COM_NM('0150', WM.IN_CL) IOCL
              FROM WH_IN_DTL WD
                  JOIN WH_IN_MST WM ON WD.WH_IN_NO = WM.WH_IN_NO AND WM.DEL_FG='N'
                  JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WHMNG.DEL_FG='N'
                  JOIN EVENT_GOODS_MNG_MST EG ON EG.GDS_CD= WD.GDS_CD AND EG.DEL_FG='N'
              WHERE 1=1
              <if test="gds_cd != null and gds_cd != '' ">
                AND WD.GDS_CD IN (${gds_cd})
              </if>
              <if test="whcd != null and whcd != '' ">
                AND WD.WH_CD = #{whcd}
              </if>
              <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                AND WM.IN_DT BETWEEN #{stt_dt} AND #{end_dt}
              </if>
              <if test="branch != null and branch != '' ">
                AND WHMNG.BRANCH =  #{branch}
              </if>
          UNION ALL

              SELECT
                '0002' IOGBN
                , WD.WH_CD WHCD
                , (SELECT WH_NM FROM WAREHOUSE_MNG WHERE WH_CD = WD.WH_CD) WHNM
                , EG.REAL_GDS_CD GDSCD
                , EG.STANDARD GDSSTND
                , EG.GDS_NM GDSNM
                , WD.QTY_UNIT QTYUNIT
                , 0 INQTY
                , WD.QTY OUTQTY
                , WD.UNIT_COST UNITCOST
                , WD.AMT
                , WM.OUT_DT AS IODT
                , FN_COM_NM('0151', WM.OUT_CL) IOCL
              FROM WH_OUT_DTL WD
                  JOIN WH_OUT_MST WM ON WD.WH_OUT_NO = WM.WH_OUT_NO AND WM.DEL_FG='N'
                  JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WHMNG.DEL_FG='N'
                  JOIN EVENT_GOODS_MNG_MST EG ON EG.GDS_CD= WD.GDS_CD AND EG.DEL_FG='N'
              WHERE 1=1
                <if test="gds_cd != null and gds_cd != '' ">
                    AND WD.GDS_CD IN (${gds_cd})
                </if>
                <if test="whcd != null and whcd != '' ">
                       AND WD.WH_CD = #{whcd}
                </if>
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND WM.OUT_DT BETWEEN #{stt_dt} AND #{end_dt}
                </if>
                <if test="branch != null and branch != '' ">
                     AND WHMNG.BRANCH =  #{branch}
                </if>
            )TMP
        WHERE 1=1
        <if test="iogbn != null and iogbn != '' ">
            AND IOGBN = #{iogbn}
        </if>
    </select>

    <!-- 일자별 입출고 내역 조회 리스트 -->
    <select id="DlwNewTypeEvntMap.getNewTypeStockDayList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeStockDayList */
            TMP.IOGBN,
            TMP.WHCD,
            TMP.WHNM,
            TMP.GDSCD,
            TMP.GDSSTND,
            TMP.GDSNM,
            TMP.QTYUNIT,
            TMP.INQTY,
            TMP.OUTQTY,
            TMP.UNITCOST,
            TMP.AMT,
            TMP.IODT,
            TMP.IOCL
        FROM
            (
              SELECT
                '0001' IOGBN
                , WD.WH_CD WHCD
                , (SELECT WH_NM FROM WAREHOUSE_MNG WHERE WH_CD = WD.WH_CD) WHNM
                , EG.REAL_GDS_CD GDSCD
                , EG.STANDARD GDSSTND
                , EG.GDS_NM GDSNM
                , WD.QTY_UNIT QTYUNIT
                , WD.QTY INQTY
                , 0 OUTQTY
                , WD.UNIT_COST UNITCOST
                , WD.AMT
                , WM.IN_DT AS IODT
                , FN_COM_NM('0150', WM.IN_CL) IOCL
              FROM WH_IN_DTL WD
                  JOIN WH_IN_MST WM ON WD.WH_IN_NO = WM.WH_IN_NO AND WM.DEL_FG='N'
                  JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WHMNG.DEL_FG='N'
                  JOIN EVENT_GOODS_MNG_MST EG ON EG.GDS_CD= WD.GDS_CD AND EG.DEL_FG='N'
              WHERE 1=1
              <if test="gds_cd != null and gds_cd != '' ">
                AND WD.GDS_CD IN (${gds_cd})
              </if>
              <if test="whcd != null and whcd != '' ">
                AND WD.WH_CD = #{whcd}
              </if>
              <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                AND WM.IN_DT BETWEEN #{stt_dt} AND #{end_dt}
              </if>
              <if test="branch != null and branch != '' ">
                AND WHMNG.BRANCH =  #{branch}
              </if>
          UNION ALL

              SELECT
                '0002' IOGBN
                , WD.WH_CD WHCD
                , (SELECT WH_NM FROM WAREHOUSE_MNG WHERE WH_CD = WD.WH_CD) WHNM
                , EG.REAL_GDS_CD GDSCD
                , EG.STANDARD GDSSTND
                , EG.GDS_NM GDSNM
                , WD.QTY_UNIT QTYUNIT
                , 0 INQTY
                , WD.QTY OUTQTY
                , WD.UNIT_COST UNITCOST
                , WD.AMT
                , WM.OUT_DT AS IODT
                , FN_COM_NM('0151', WM.OUT_CL) IOCL
              FROM WH_OUT_DTL WD
                  JOIN WH_OUT_MST WM ON WD.WH_OUT_NO = WM.WH_OUT_NO AND WM.DEL_FG='N'
                  JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WHMNG.DEL_FG='N'
                  JOIN EVENT_GOODS_MNG_MST EG ON EG.GDS_CD= WD.GDS_CD AND EG.DEL_FG='N'
              WHERE 1=1
                <if test="gds_cd != null and gds_cd != '' ">
                    AND WD.GDS_CD IN (${gds_cd})
                </if>
                <if test="whcd != null and whcd != '' ">
                       AND WD.WH_CD = #{whcd}
                </if>
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND WM.OUT_DT BETWEEN #{stt_dt} AND #{end_dt}
                </if>
                <if test="branch != null and branch != '' ">
                     AND WHMNG.BRANCH =  #{branch}
                </if>
            )TMP
        WHERE 1=1
        <if test="iogbn != null and iogbn != '' ">
            AND IOGBN = #{iogbn}
        </if>
        ORDER BY  IODT, GDSCD DESC
    </select>

    <!-- SMS 전송 시 결제정보 조회(현금영수증 정보) -->
    <select id="DlwNewTypeEvntMap.getNewTypesmsPayMent" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypesmsPayMent */
            TBL.ISU_NO,
            TBL.APPR_NO,
            TBL.AMT
        FROM(
              SELECT
                    '0001' IOGBN,
                    LISTAGG(C.ISU_NO,',') WITHIN GROUP(ORDER BY '') AS ISU_NO,
                    LISTAGG(C.APPR_NO,',') WITHIN GROUP(ORDER BY '') AS APPR_NO,
                    LISTAGG(D.PAY_AMT,',') WITHIN GROUP(ORDER BY '') AS AMT
              FROM EVENT A
                LEFT OUTER JOIN FUNRL_RPT B ON A.SEQ = B.SEQ AND B.DEL_FG = 'N'
                LEFT OUTER JOIN (SELECT RPT_NO, ISU_NO, APPR_NO, DTL_SEQ FROM FUNRL_RPT_PAYMENT WHERE PAY_OPT = '0003' AND DEL_FG = 'N') C ON C.RPT_NO = B.RPT_NO
                LEFT OUTER JOIN (SELECT RPT_NO, DTL_SEQ, (SUM(PAY_AMT_CASH) + SUM(AMT))||'원' PAY_AMT FROM FUNRL_RPT_PAYMENT WHERE PAY_OPT = '0003' AND DEL_FG = 'N' AND (NVL(ISU_NO,' ') ! = ' ' AND NVL(APPR_NO, ' ') != ' ') GROUP BY RPT_NO, DTL_SEQ) D ON D.RPT_NO = B.RPT_NO AND D.DTL_SEQ = C.DTL_SEQ
              WHERE A.DEL_FG = 'N'
                AND A.ACCNT_NO = #{accnt_no}

              UNION ALL

              SELECT
                    '0002' IOGBN,
                    LISTAGG(C.ISU_NO,',') WITHIN GROUP(ORDER BY '') AS ISU_NO,
                    LISTAGG(C.APPR_NO,',') WITHIN GROUP(ORDER BY '') AS APPR_NO,
                    LISTAGG(D.PAY_AMT,',') WITHIN GROUP(ORDER BY '') AS AMT
              FROM EVENT A
                LEFT OUTER JOIN FUNRL_OUTSRC_MST B ON A.SEQ = B.SEQ AND B.DEL_FG = 'N'
                LEFT OUTER JOIN (SELECT RPT_NO, DTL_SEQ, ISU_NO, APPR_NO FROM FUNRL_OUTSRC_PAYMENT WHERE PAY_OPT = '0003' AND DEL_FG = 'N') C ON C.RPT_NO = B.FUNRL_OUTSRC_NO
                LEFT OUTER JOIN (SELECT RPT_NO, DTL_SEQ, (SUM(PAY_AMT_CASH) + SUM(AMT))||'원' PAY_AMT FROM FUNRL_OUTSRC_PAYMENT WHERE PAY_OPT = '0003' AND DEL_FG = 'N' AND (NVL(ISU_NO,' ') ! = ' ' AND NVL(APPR_NO, ' ') != ' ') GROUP BY RPT_NO, DTL_SEQ) D ON D.RPT_NO = B.FUNRL_OUTSRC_NO AND D.DTL_SEQ = C.DTL_SEQ
              WHERE A.DEL_FG = 'N'
                AND A.ACCNT_NO = #{accnt_no}
              ) TBL
         WHERE TBL.IOGBN = #{rpt_gubun}

    </select>

    <!-- 물품 및 서비스 제공현황 - 상복 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdList1" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeSrvProdList1 */
               TBL.IOGBN,
               TBL.ACCNT_NO,
               TBL.MEM_NM,
               TBL.EVT_MNGR_NM,
               TBL.PROD_NM,
               TBL.SEQ,
               TBL.EVENT_REG_DAY,
               TBL.EVENT_PROC_DAY,
               TBL.EVENT_COMP_DAY,
               TBL.VAL1,
               TBL.EDATE,
               TBL.EVENT_PLACE,
               TBL.A1,
               TBL.A2,
               TBL.A3,
               TBL.A4,
               TBL.A5,
               TBL.A6,
               TBL.CUSTMR_NM
        FROM (
              SELECT
                  '0001' AS IOGBN,
                  A.ACCNT_NO,
                  FN_MEM_NM(B.MEM_NO) MEM_NM,
                  D.EVT_MNGR_NM,
                  B.PROD_CD,
                  FN_PROD_NM(B.PROD_CD) PROD_NM,
                  A.SEQ,
                  A.EVENT_REG_DAY,
                  A.EVENT_PROC_DAY,
                  A.EVENT_COMP_DAY,
                  A.VAL1,
                  TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                  NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                         THEN (SELECT FUNRL_NM
                                 FROM FUNRL_HALL
                                WHERE FUNRL_CD = A.FUNRL_HALL)
                         ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                   THEN ''
                                   WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                   THEN NVL(A.ETC_ADDR2, '')
                                   ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                              END
                   END, '') AS EVENT_PLACE,
                   NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '79' AND PAY_OPT != '0004'), 0) A1,
                   NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '80' AND PAY_OPT != '0004'), 0) A2,
                   NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '81' AND PAY_OPT != '0004'), 0) A3,
                   NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '82' AND PAY_OPT != '0004'), 0) A4,
                   NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '172' AND PAY_OPT != '0004'), 0) A5,
                   NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '173' AND PAY_OPT != '0004'), 0) A6,
                   (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CL = '0001' AND A.GDS_CD IN ('172', '173', '79', '80', '81', '82')
                   <if test="custmr_cd != null and custmr_cd != '' ">
		          		AND A.BYUING_CD = #{custmr_cd}
		           </if>
                   )) CUSTMR_NM
              FROM EVENT A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                  LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_RPT E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                  LEFT OUTER JOIN (SELECT RPT_NO, SUM(QTY) QTY FROM FUNRL_RPT_GOODS WHERE GDS_CL = '0001' AND GDS_CD IN('172', '173', '79', '80', '81', '82') GROUP BY RPT_NO ) F ON E.RPT_NO = F.RPT_NO
              WHERE A.DEL_FG = 'N'
                AND NVL(F.QTY,0) > 0

              UNION ALL

              SELECT
                  '0002' AS IOGBN,
                  A.ACCNT_NO,
                  FN_MEM_NM(B.MEM_NO) MEM_NM,
                  D.EVT_MNGR_NM,
                  B.PROD_CD,
                  FN_PROD_NM(B.PROD_CD) PROD_NM,
                  A.SEQ,
                  A.EVENT_REG_DAY,
                  A.EVENT_PROC_DAY,
                  A.EVENT_COMP_DAY,
                  A.VAL1,
                  TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                  NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                         THEN (SELECT FUNRL_NM
                                 FROM FUNRL_HALL
                                WHERE FUNRL_CD = A.FUNRL_HALL)
                         ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                   THEN ''
                                   WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                   THEN NVL(A.ETC_ADDR2, '')
                                   ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                              END
                   END, '') AS EVENT_PLACE,
                   NVL((SELECT SUM(QTY) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '79' AND PAY_OPT != '0004'), 0) A1,
                   NVL((SELECT SUM(QTY) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '80' AND PAY_OPT != '0004'), 0) A2,
                   NVL((SELECT SUM(QTY) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '81' AND PAY_OPT != '0004'), 0) A3,
                   NVL((SELECT SUM(QTY) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '82' AND PAY_OPT != '0004'), 0) A4,
                   NVL((SELECT SUM(QTY) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '172' AND PAY_OPT != '0004'), 0) A5,
                   NVL((SELECT SUM(QTY) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '173' AND PAY_OPT != '0004'), 0) A6,
                   (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_OUTSRC_GOODS A WHERE A.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND A.GDS_CD IN ('172', '173', '79', '80', '81', '82')
                   <if test="custmr_cd != null and custmr_cd != '' ">
		          		AND A.BYUING_CD = #{custmr_cd}
		           </if>
		           )) CUSTMR_NM
              FROM EVENT A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                  LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_OUTSRC_MST E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                  LEFT OUTER JOIN (SELECT FUNRL_OUTSRC_NO, SUM(QTY) QTY FROM FUNRL_OUTSRC_GOODS WHERE GDS_CD IN('172', '173', '79', '80', '81', '82') GROUP BY FUNRL_OUTSRC_NO ) F ON E.FUNRL_OUTSRC_NO = F.FUNRL_OUTSRC_NO
              WHERE A.DEL_FG = 'N'
                AND NVL(F.QTY,0) > 0
              ) TBL
        WHERE 1=1
         <if test="dt_typ != null and dt_typ != ''">
             <if test="dt_typ == '01'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '02'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '03'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
         </if>
          <if test="custmr_nm != null and custmr_nm != '' ">
          AND TBL.CUSTMR_NM LIKE '%' || #{custmr_nm} || '%'
          </if>
          <if test="prod_cd != null and prod_cd != '' ">
          AND TBL.PROD_CD = #{prod_cd}
          </if>
          <if test="accnt_no != null and accnt_no != '' ">
          AND TBL.ACCNT_NO = #{accnt_no}
          </if>
          <if test="cp_nm != null and cp_nm != '' ">
          AND TBL.EVT_MNGR_NM LIKE '%' || #{cp_nm} || '%'
          </if>
          <if test="emp_gubun != null and emp_gubun != '' ">
          AND TBL.IOGBN = #{emp_gubun}
          </if>
        ORDER BY TBL.SEQ DESC
    </select>

    <!-- 물품 및 서비스 제공현황 - 제단 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdList2" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeSrvProdList2 */
               TBL.IOGBN,
               TBL.ACCNT_NO,
               TBL.MEM_NM,
               TBL.EVT_MNGR_NM,
               TBL.PROD_NM,
               TBL.SEQ,
               TBL.EVENT_PROC_DAY,
               TBL.EVENT_COMP_DAY,
               TBL.VAL1,
               TBL.EDATE,
               TBL.EVENT_PLACE,
               TBL.A1,
               TBL.A2,
               TBL.A3,
               TBL.NOTE,
               TBL.CUSTMR_NM
        FROM (
              SELECT
                  '0001' AS IOGBN,
                  A.ACCNT_NO,
                  FN_MEM_NM(B.MEM_NO) MEM_NM,
                  D.EVT_MNGR_NM,
                  B.PROD_CD,
                  FN_PROD_NM(B.PROD_CD) PROD_NM,
                  A.SEQ,
                  A.EVENT_REG_DAY,
                  A.EVENT_PROC_DAY,
                  A.EVENT_COMP_DAY,
                  A.VAL1,
                  TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                  NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                         THEN (SELECT FUNRL_NM
                                 FROM FUNRL_HALL
                                WHERE FUNRL_CD = A.FUNRL_HALL)
                         ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                   THEN ''
                                   WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                   THEN NVL(A.ETC_ADDR2, '')
                                   ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                              END
                   END, '') AS EVENT_PLACE,
                   NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '64' AND PAY_OPT != '0004'), 0) A1,
                   NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '66' AND PAY_OPT != '0004'), 0) A2,
                   NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '67' AND PAY_OPT != '0004'), 0) A3,
                   (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CD IN ('64','66','67')) NOTE,
                   (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CL = '0001' AND A.GDS_CD IN ('64','66','67')
                   <if test="custmr_cd != null and custmr_cd != '' ">
		          		AND A.BYUING_CD = #{custmr_cd}
		           </if>
		           )) CUSTMR_NM
              FROM EVENT A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                  LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_RPT E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                  LEFT OUTER JOIN (SELECT RPT_NO, SUM(QTY) QTY FROM FUNRL_RPT_GOODS WHERE GDS_CL = '0001' AND GDS_CD IN('64','66','67') GROUP BY RPT_NO ) F ON E.RPT_NO = F.RPT_NO
              WHERE A.DEL_FG = 'N'
                AND NVL(F.QTY,0) > 0

              UNION ALL

              SELECT
                  '0002' AS IOGBN,
                  A.ACCNT_NO,
                  FN_MEM_NM(B.MEM_NO) MEM_NM,
                  D.EVT_MNGR_NM,
                  B.PROD_CD,
                  FN_PROD_NM(B.PROD_CD) PROD_NM,
                  A.SEQ,
                  A.EVENT_REG_DAY,
                  A.EVENT_PROC_DAY,
                  A.EVENT_COMP_DAY,
                  A.VAL1,
                  TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                  NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                         THEN (SELECT FUNRL_NM
                                 FROM FUNRL_HALL
                                WHERE FUNRL_CD = A.FUNRL_HALL)
                         ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                   THEN ''
                                   WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                   THEN NVL(A.ETC_ADDR2, '')
                                   ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                              END
                   END, '') AS EVENT_PLACE,
                   NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '64' AND PAY_OPT != '0004'), 0) A1,
                   NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '66' AND PAY_OPT != '0004'), 0) A2,
                   NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '67' AND PAY_OPT != '0004'), 0) A3,
                   (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_OUTSRC_GOODS A WHERE A.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND A.GDS_CD IN ('64','66','67')) NOTE,
                   (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_OUTSRC_GOODS A WHERE A.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND A.GDS_CD IN ('64','66','67')
                   <if test="custmr_cd != null and custmr_cd != '' ">
		          		AND A.BYUING_CD = #{custmr_cd}
		           </if>
                   
                   )) CUSTMR_NM
              FROM EVENT A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                  LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_OUTSRC_MST E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                  LEFT OUTER JOIN (SELECT FUNRL_OUTSRC_NO, SUM(QTY) QTY FROM FUNRL_OUTSRC_GOODS WHERE GDS_CD IN('64','66','67') GROUP BY FUNRL_OUTSRC_NO ) F ON E.FUNRL_OUTSRC_NO = F.FUNRL_OUTSRC_NO
              WHERE A.DEL_FG = 'N'
                AND NVL(F.QTY,0) > 0
              ) TBL
        WHERE 1=1
         <if test="dt_typ != null and dt_typ != ''">
             <if test="dt_typ == '01'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '02'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '03'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
         </if>
          <if test="custmr_nm != null and custmr_nm != '' ">
          AND TBL.CUSTMR_NM LIKE '%' || #{custmr_nm} || '%'
          </if>
          <if test="prod_cd != null and prod_cd != '' ">
          AND TBL.PROD_CD = #{prod_cd}
          </if>
          <if test="accnt_no != null and accnt_no != '' ">
          AND TBL.ACCNT_NO = #{accnt_no}
          </if>
          <if test="cp_nm != null and cp_nm != '' ">
          AND TBL.EVT_MNGR_NM LIKE '%' || #{cp_nm} || '%'
          </if>
          <if test="emp_gubun != null and emp_gubun != '' ">
          AND TBL.IOGBN = #{emp_gubun}
          </if>
        ORDER BY TBL.SEQ DESC
    </select>

    <!-- 물품 및 서비스 제공현황 - 장의차량 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdList3" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeSrvProdList3 */
               TBL.IOGBN,
               TBL.ACCNT_NO,
               TBL.MEM_NM,
               TBL.EVT_MNGR_NM,
               TBL.PROD_NM,
               TBL.SEQ,
               TBL.EVENT_PROC_DAY,
               TBL.EVENT_COMP_DAY,
               TBL.VAL1,
               TBL.CEMETERY,
               TBL.EDATE,
               TBL.EVENT_PLACE,
               TBL.A1,
               TBL.A2,
               TBL.NOTE,
               TBL.CUSTMR_NM
        FROM (
              SELECT
                  '0001' AS IOGBN,
                  A.ACCNT_NO,
                  FN_MEM_NM(B.MEM_NO) MEM_NM,
                  D.EVT_MNGR_NM,
                  B.PROD_CD,
                  FN_PROD_NM(B.PROD_CD) PROD_NM,
                  A.SEQ,
                  A.EVENT_REG_DAY,
                  A.EVENT_PROC_DAY,
                  A.EVENT_COMP_DAY,
                  A.VAL1,
                  A.CEMETERY,
                  TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                  NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                         THEN (SELECT FUNRL_NM
                                 FROM FUNRL_HALL
                                WHERE FUNRL_CD = A.FUNRL_HALL)
                         ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                   THEN ''
                                   WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                   THEN NVL(A.ETC_ADDR2, '')
                                   ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                              END
                   END, '') AS EVENT_PLACE,
                   NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '7' AND PAY_OPT != '0004'), 0) A1,
                   NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '8' AND PAY_OPT != '0004'), 0) A2,
                   (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CD IN ('7','8')) NOTE,
                   (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CL = '0001' AND A.GDS_CD IN ('7','8')
                   <if test="custmr_cd != null and custmr_cd != '' ">
		          		AND A.BYUING_CD = #{custmr_cd}
		           </if>
		           )) CUSTMR_NM
              FROM EVENT A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                  LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_RPT E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                  LEFT OUTER JOIN (SELECT RPT_NO, SUM(QTY) QTY FROM FUNRL_RPT_GOODS WHERE GDS_CL = '0001' AND GDS_CD IN('7','8') GROUP BY RPT_NO ) F ON E.RPT_NO = F.RPT_NO
              WHERE A.DEL_FG = 'N'
                AND NVL(F.QTY,0) > 0

              UNION ALL

              SELECT
                  '0002' AS IOGBN,
                  A.ACCNT_NO,
                  FN_MEM_NM(B.MEM_NO) MEM_NM,
                  D.EVT_MNGR_NM,
                  B.PROD_CD,
                  FN_PROD_NM(B.PROD_CD) PROD_NM,
                  A.SEQ,
                  A.EVENT_REG_DAY,
                  A.EVENT_PROC_DAY,
                  A.EVENT_COMP_DAY,
                  A.VAL1,
                  A.CEMETERY,
                  TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                  NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                         THEN (SELECT FUNRL_NM
                                 FROM FUNRL_HALL
                                WHERE FUNRL_CD = A.FUNRL_HALL)
                         ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                   THEN ''
                                   WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                   THEN NVL(A.ETC_ADDR2, '')
                                   ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                              END
                   END, '') AS EVENT_PLACE,
                   NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '7' AND PAY_OPT != '0004'), 0) A1,
                   NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '8' AND PAY_OPT != '0004'), 0) A2,
                   (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_OUTSRC_GOODS A WHERE A.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND A.GDS_CD IN ('7','8')) NOTE,
                   (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_OUTSRC_GOODS A WHERE A.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND A.GDS_CD IN ('7','8')
                   <if test="custmr_cd != null and custmr_cd != '' ">
		          		AND A.BYUING_CD = #{custmr_cd}
		           </if>
		           )) CUSTMR_NM
              FROM EVENT A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                  LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_OUTSRC_MST E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                  LEFT OUTER JOIN (SELECT FUNRL_OUTSRC_NO, SUM(QTY) QTY FROM FUNRL_OUTSRC_GOODS WHERE GDS_CD IN('7','8') GROUP BY FUNRL_OUTSRC_NO ) F ON E.FUNRL_OUTSRC_NO = F.FUNRL_OUTSRC_NO
              WHERE A.DEL_FG = 'N'
                AND NVL(F.QTY,0) > 0
              ) TBL
        WHERE 1=1
         <if test="dt_typ != null and dt_typ != ''">
             <if test="dt_typ == '01'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '02'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '03'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
         </if>
          <if test="custmr_nm != null and custmr_nm != '' ">
          AND TBL.CUSTMR_NM LIKE '%' || #{custmr_nm} || '%'
          </if>
          <if test="prod_cd != null and prod_cd != '' ">
          AND TBL.PROD_CD = #{prod_cd}
          </if>
          <if test="accnt_no != null and accnt_no != '' ">
          AND TBL.ACCNT_NO = #{accnt_no}
          </if>
          <if test="cp_nm != null and cp_nm != '' ">
          AND TBL.EVT_MNGR_NM LIKE '%' || #{cp_nm} || '%'
          </if>
          <if test="emp_gubun != null and emp_gubun != '' ">
          AND TBL.IOGBN = #{emp_gubun}
          </if>
        ORDER BY TBL.SEQ DESC
    </select>

    <!-- 물품 및 서비스 제공현황 - 앰블런스 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdList4" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeSrvProdList4 */
               TBL.IOGBN,
               TBL.ACCNT_NO,
               TBL.MEM_NM,
               TBL.EVT_MNGR_NM,
               TBL.PROD_NM,
               TBL.SEQ,
               TBL.EVENT_PROC_DAY,
               TBL.EVENT_COMP_DAY,
               TBL.VAL1,
               TBL.LOC,
               TBL.EDATE,
               TBL.EVENT_PLACE,
               TBL.A1,
               TBL.NOTE,
               TBL.CUSTMR_NM
        FROM (
              SELECT
                  '0001' AS IOGBN,
                  A.ACCNT_NO,
                  FN_MEM_NM(B.MEM_NO) MEM_NM,
                  D.EVT_MNGR_NM,
                  B.PROD_CD,
                  FN_PROD_NM(B.PROD_CD) PROD_NM,
                  A.SEQ,
                  A.EVENT_REG_DAY,
                  A.EVENT_PROC_DAY,
                  A.EVENT_COMP_DAY,
                  A.VAL1,
                  A.LOC,
                  TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                  NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                         THEN (SELECT FUNRL_NM
                                 FROM FUNRL_HALL
                                WHERE FUNRL_CD = A.FUNRL_HALL)
                         ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                   THEN ''
                                   WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                   THEN NVL(A.ETC_ADDR2, '')
                                   ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                              END
                   END, '') AS EVENT_PLACE,
                   NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '9' AND PAY_OPT != '0004'), 0) A1,
                   (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CD IN ('9')) NOTE,
                   (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CL = '0001' AND A.GDS_CD IN ('9')
                   <if test="custmr_cd != null and custmr_cd != '' ">
		          		AND A.BYUING_CD = #{custmr_cd}
		           </if>
		           )) CUSTMR_NM
              FROM EVENT A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                  LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_RPT E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                  LEFT OUTER JOIN (SELECT RPT_NO, SUM(QTY) QTY FROM FUNRL_RPT_GOODS WHERE GDS_CL = '0001' AND GDS_CD IN('9') GROUP BY RPT_NO ) F ON E.RPT_NO = F.RPT_NO
              WHERE A.DEL_FG = 'N'
                AND NVL(F.QTY,0) > 0

              UNION ALL

              SELECT
                  '0002' AS IOGBN,
                  A.ACCNT_NO,
                  FN_MEM_NM(B.MEM_NO) MEM_NM,
                  D.EVT_MNGR_NM,
                  B.PROD_CD,
                  FN_PROD_NM(B.PROD_CD) PROD_NM,
                  A.SEQ,
                  A.EVENT_REG_DAY,
                  A.EVENT_PROC_DAY,
                  A.EVENT_COMP_DAY,
                  A.VAL1,
                  A.LOC,
                  TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                  NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                         THEN (SELECT FUNRL_NM
                                 FROM FUNRL_HALL
                                WHERE FUNRL_CD = A.FUNRL_HALL)
                         ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                   THEN ''
                                   WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                   THEN NVL(A.ETC_ADDR2, '')
                                   ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                              END
                   END, '') AS EVENT_PLACE,
                   NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '9' AND PAY_OPT != '0004'), 0) A1,
                   (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_OUTSRC_GOODS A WHERE A.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND A.GDS_CD IN ('9')) NOTE,
                   (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_OUTSRC_GOODS A WHERE A.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND A.GDS_CD IN ('9')
                   <if test="custmr_cd != null and custmr_cd != '' ">
		          		AND A.BYUING_CD = #{custmr_cd}
		           </if>
		           )) CUSTMR_NM
              FROM EVENT A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                  LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_OUTSRC_MST E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                  LEFT OUTER JOIN (SELECT FUNRL_OUTSRC_NO, SUM(QTY) QTY FROM FUNRL_OUTSRC_GOODS WHERE GDS_CD IN('9') GROUP BY FUNRL_OUTSRC_NO ) F ON E.FUNRL_OUTSRC_NO = F.FUNRL_OUTSRC_NO
              WHERE A.DEL_FG = 'N'
                AND NVL(F.QTY,0) > 0
              ) TBL
        WHERE 1=1
         <if test="dt_typ != null and dt_typ != ''">
             <if test="dt_typ == '01'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '02'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '03'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
         </if>
          <if test="custmr_nm != null and custmr_nm != '' ">
          AND TBL.CUSTMR_NM LIKE '%' || #{custmr_nm} || '%'
          </if>
          <if test="prod_cd != null and prod_cd != '' ">
          AND TBL.PROD_CD = #{prod_cd}
          </if>
          <if test="accnt_no != null and accnt_no != '' ">
          AND TBL.ACCNT_NO = #{accnt_no}
          </if>
          <if test="cp_nm != null and cp_nm != '' ">
          AND TBL.EVT_MNGR_NM LIKE '%' || #{cp_nm} || '%'
          </if>
          <if test="emp_gubun != null and emp_gubun != '' ">
          AND TBL.IOGBN = #{emp_gubun}
          </if>
        ORDER BY TBL.SEQ DESC
    </select>

    <!-- 물품 및 서비스 제공현황 - 유골함 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdList5" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeSrvProdList5 */
               TBL.IOGBN,
               TBL.ACCNT_NO,
               TBL.MEM_NM,
               TBL.EVT_MNGR_NM,
               TBL.PROD_NM,
               TBL.SEQ,
               TBL.EVENT_PROC_DAY,
               TBL.EVENT_COMP_DAY,
               TBL.VAL1,
               TBL.EDATE,
               TBL.EVENT_PLACE,
               TBL.A1,
               TBL.A2,
               TBL.NOTE,
               TBL.CUSTMR_NM
        FROM (
              SELECT
                  '0001' AS IOGBN,
                  A.ACCNT_NO,
                  FN_MEM_NM(B.MEM_NO) MEM_NM,
                  D.EVT_MNGR_NM,
                  B.PROD_CD,
                  FN_PROD_NM(B.PROD_CD) PROD_NM,
                  A.SEQ,
                  A.EVENT_REG_DAY,
                  A.EVENT_PROC_DAY,
                  A.EVENT_COMP_DAY,
                  A.VAL1,
                  TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                  NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                         THEN (SELECT FUNRL_NM
                                 FROM FUNRL_HALL
                                WHERE FUNRL_CD = A.FUNRL_HALL)
                         ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                   THEN ''
                                   WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                   THEN NVL(A.ETC_ADDR2, '')
                                   ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                              END
                   END, '') AS EVENT_PLACE,
                   NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '40' AND PAY_OPT != '0004'), 0) A1,
                   NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '170' AND PAY_OPT != '0004'), 0) A2,
                   (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CD IN ('40','170')) NOTE,
                   (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CL = '0001' AND A.GDS_CD IN ('40','170')
                   <if test="custmr_cd != null and custmr_cd != '' ">
		          		AND A.BYUING_CD = #{custmr_cd}
		           </if>
		           )) CUSTMR_NM
              FROM EVENT A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                  LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_RPT E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                  LEFT OUTER JOIN (SELECT RPT_NO, SUM(QTY) QTY FROM FUNRL_RPT_GOODS WHERE GDS_CL = '0001' AND GDS_CD IN('40','170') GROUP BY RPT_NO ) F ON E.RPT_NO = F.RPT_NO
              WHERE A.DEL_FG = 'N'
                AND NVL(F.QTY,0) > 0

              UNION ALL

              SELECT
                  '0002' AS IOGBN,
                  A.ACCNT_NO,
                  FN_MEM_NM(B.MEM_NO) MEM_NM,
                  D.EVT_MNGR_NM,
                  B.PROD_CD,
                  FN_PROD_NM(B.PROD_CD) PROD_NM,
                  A.SEQ,
                  A.EVENT_REG_DAY,
                  A.EVENT_PROC_DAY,
                  A.EVENT_COMP_DAY,
                  A.VAL1,
                  TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                  NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                         THEN (SELECT FUNRL_NM
                                 FROM FUNRL_HALL
                                WHERE FUNRL_CD = A.FUNRL_HALL)
                         ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                   THEN ''
                                   WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                   THEN NVL(A.ETC_ADDR2, '')
                                   ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                              END
                   END, '') AS EVENT_PLACE,
                   NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '40' AND PAY_OPT != '0004'), 0) A1,
                   NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS F WHERE F.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND F.GDS_CD = '170' AND PAY_OPT != '0004'), 0) A2,
                   (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_OUTSRC_GOODS A WHERE A.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND A.GDS_CD IN ('40','170')) NOTE,
                   (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_OUTSRC_GOODS A WHERE A.FUNRL_OUTSRC_NO = E.FUNRL_OUTSRC_NO AND A.GDS_CD IN ('40','170')
                   <if test="custmr_cd != null and custmr_cd != '' ">
		          		AND A.BYUING_CD = #{custmr_cd}
		           </if>
		           )) CUSTMR_NM
              FROM EVENT A
                  LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                  LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                  LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                  LEFT OUTER JOIN FUNRL_OUTSRC_MST E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                  LEFT OUTER JOIN (SELECT FUNRL_OUTSRC_NO, SUM(QTY) QTY FROM FUNRL_OUTSRC_GOODS WHERE GDS_CD IN('40','170') GROUP BY FUNRL_OUTSRC_NO ) F ON E.FUNRL_OUTSRC_NO = F.FUNRL_OUTSRC_NO
              WHERE A.DEL_FG = 'N'
                AND NVL(F.QTY,0) > 0
              ) TBL
        WHERE 1=1
         <if test="dt_typ != null and dt_typ != ''">
             <if test="dt_typ == '01'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '02'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '03'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND TBL.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
         </if>
          <if test="custmr_nm != null and custmr_nm != '' ">
          AND TBL.CUSTMR_NM LIKE '%' || #{custmr_nm} || '%'
          </if>
          <if test="prod_cd != null and prod_cd != '' ">
          AND TBL.PROD_CD = #{prod_cd}
          </if>
          <if test="accnt_no != null and accnt_no != '' ">
          AND TBL.ACCNT_NO = #{accnt_no}
          </if>
          <if test="cp_nm != null and cp_nm != '' ">
          AND TBL.EVT_MNGR_NM LIKE '%' || #{cp_nm} || '%'
          </if>
          <if test="emp_gubun != null and emp_gubun != '' ">
          AND TBL.IOGBN = #{emp_gubun}
          </if>
        ORDER BY TBL.SEQ DESC
    </select>

    <!-- 물품 및 서비스 제공현황(직영) - 헤더 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdList_Head" parameterType="map" resultType="resultMap">
          /* DlwNewTypeEvntMap.getNewTypeSrvProdList_Head */
          SELECT D.GDS_NM, D.GDS_CD
          FROM EVENT A
            LEFT OUTER JOIN FUNRL_RPT B ON A.SEQ = B.SEQ AND B.DEL_FG = 'N'
            LEFT OUTER JOIN FUNRL_RPT_GOODS C ON C.RPT_NO = B.RPT_NO
            LEFT OUTER JOIN EVENT_GOODS_MNG_MST D ON D.GDS_CD = C.GDS_CD
            LEFT OUTER JOIN EVENT_MNGR_REG E ON E.EVT_SEQ = A.SEQ AND E.DEL_FG = 'N' AND E.EVT_MNGR_GUBUN = '0001'
            LEFT OUTER JOIN EVENT_MANAGER_MNG F ON F.EVT_MNGR_CD = E.EVT_MNGR_CD AND F.DEL_FG = 'N' AND F.EMP_GUBUN = '0001'
          WHERE A.DEL_FG = 'N'
            AND NVL(D.GDS_CD, ' ') != ' '
            <if test="stt_dt != null and stt_dt != ''">
                AND A.EVENT_COMP_DAY <![CDATA[>=]]> #{stt_dt}
            </if>
            <if test="end_dt != null and end_dt != ''">
                AND A.EVENT_COMP_DAY <![CDATA[<=]]> #{end_dt}
            </if>
            <if test="frg_cl != null and frg_cl != '' ">
                AND C.FRG_CL = #{frg_cl}
            </if>
          GROUP BY D.GDS_NM, D.GDS_CD
          ORDER BY D.GDS_CD
    </select>

    <!-- 물품 및 서비스 제공현황(직영) - 펑션 실행 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdList_func" parameterType="map" resultType="resultMap">
        /* DlwNewTypeEvntMap.getNewTypeSrvProdList_func */
        <if test="frg_cl != null and frg_cl != '' ">
            SELECT FN_SRV_TAB1(#{stt_dt}, #{end_dt}, #{frg_cl}) FROM DUAL
        </if>
        <if test="frg_cl == null or frg_cl == '' ">
            SELECT FN_SRV_ALL(#{stt_dt}, #{end_dt}) FROM DUAL
        </if>
    </select>

    <!-- 물품 및 서비스 제공현황(직영) - 펑션 실행 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdList_func2" parameterType="map" resultType="resultMap">
			/* DlwNewTypeEvntMap.getNewTypeSrvProdList_func2 */
            SELECT FN_SRV_TAB2(#{stt_dt}, #{end_dt}, #{frg_cl}) FROM DUAL

    </select>

    <!-- 물품 및 서비스 제공현황(직영) - 쿼리 가져오기 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdList_qry" parameterType="map" resultType="String">
        /* DlwNewTypeEvntMap.getNewTypeSrvProdList_qry */
        SELECT QRY_DATA FROM CLOB_DATA
    </select>

    <!-- 물품 및 서비스 제공현황(직영) - 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdListIn" parameterType="map" resultType="resultMap">
        /* DlwNewTypeEvntMap.getNewTypeSrvProdListIn */
        SELECT A.ACCNT_NO,
               H.MEM_NM,
               F.EVT_MNGR_NM,
               P.PROD_NM,
               TO_CHAR(TO_DATE(A.EVENT_PROC_DAY), 'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY), 'YYYY/MM/DD') EDATE,
               A.CEMETERY,
                NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                       THEN I.FUNRL_NM
                       ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                 THEN ''
                                 WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                 THEN NVL(A.ETC_ADDR2, '')
                                 ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                            END
                 END, '') AS EVENT_PLACE,
                 NVL((SELECT NVL(A.AMT,0) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON B.GDS_CD = A.GDS_CD WHERE A.DEL_FG = 'N' AND A.FRG_CL IN('0001','0002') AND B.GDS_GRP_CD = '0002' AND A.RPT_NO = C.RPT_NO),0) SAMT,
                 SUM(CASE WHEN C.FRG_CL = '0003' THEN C.AMT ELSE 0 END) TOT_AMT,
                 MAX((SELECT SUM(AMT) AMT FROM FUNRL_RPT_GOODS WHERE RPT_NO = B.RPT_NO AND FRG_CL IN('0001','0002') GROUP BY B.RPT_NO)) JAMT
                 ${gds_qury}
        FROM EVENT A
          LEFT OUTER JOIN FUNRL_RPT B ON A.SEQ = B.SEQ AND B.DEL_FG = 'N'
          LEFT OUTER JOIN FUNRL_RPT_GOODS C ON C.RPT_NO = B.RPT_NO
          LEFT OUTER JOIN EVENT_GOODS_MNG_MST D ON D.GDS_CD = C.GDS_CD
          LEFT OUTER JOIN EVENT_MNGR_REG E ON E.EVT_SEQ = A.SEQ AND E.DEL_FG = 'N' AND E.EVT_MNGR_GUBUN = '0001'
          LEFT OUTER JOIN EVENT_MANAGER_MNG F ON F.EVT_MNGR_CD = E.EVT_MNGR_CD AND F.DEL_FG = 'N' AND F.EMP_GUBUN = '0001'
          LEFT OUTER JOIN MEM_PROD_ACCNT G ON G.ACCNT_NO = A.ACCNT_NO AND G.DEL_FG = 'N'
          LEFT OUTER JOIN MEMBER H ON H.MEM_NO = G.MEM_NO AND H.DEL_FG = 'N'
          LEFT OUTER JOIN PRODUCT P ON P.PROD_CD = G.PROD_CD AND P.DEL_FG = 'N'
          LEFT OUTER JOIN FUNRL_HALL I ON I.FUNRL_CD = A.FUNRL_HALL
        WHERE A.DEL_FG = 'N'
          AND NVL(D.GDS_CD, ' ') != ' '
          <if test="stt_dt != null and stt_dt != ''">
              AND A.EVENT_COMP_DAY <![CDATA[>=]]> #{stt_dt}
          </if>
          <if test="end_dt != null and end_dt != ''">
              AND A.EVENT_COMP_DAY <![CDATA[<=]]> #{end_dt}
          </if>
          <if test="frg_cl != null and frg_cl != '' ">
              AND C.FRG_CL = #{frg_cl}
          </if>
          <if test="prod_cd != null and prod_cd != '' ">
          AND G.PROD_CD = #{prod_cd}
          </if>
          <if test="accnt_no != null and accnt_no != '' ">
          AND A.ACCNT_NO = #{accnt_no}
          </if>
          <if test="cp_nm != null and cp_nm != '' ">
          AND F.EVT_MNGR_NM LIKE '%' || #{cp_nm} || '%'
          </if>
        GROUP BY A.ACCNT_NO, H.MEM_NM, F.EVT_MNGR_NM, P.PROD_NM, A.EVENT_PROC_DAY, A.EVENT_COMP_DAY, A.CEMETERY
                 ,A.EVENT_PLACE_CL, I.FUNRL_NM, A.ETC_ZIP, A.ETC_ADDR1, A.ETC_ADDR2, C.RPT_NO
    </select>

    <!-- 물품 제공현황 분석 - 상복 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdAnal1" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeSrvProdAnal1 */
              ROW_NUMBER() OVER (PARTITION BY CLO ORDER BY CLOTHES,SEQ) AS CNT,
              A.*
        FROM (
              SELECT
                             TBL.CLOTHES,
                             TBL.CLO,
                             ROW_NUMBER() OVER (PARTITION BY ACCNT_NO ORDER BY APP_DM DESC) AS PAGE_INDX,
                             TBL.IOGBN,
                             TBL.ACCNT_NO,
                             TBL.MEM_NM,
                             TBL.EVT_MNGR_NM,
                             TBL.PROD_NM,
                             TBL.SEQ,
                             TBL.EVENT_PROC_DAY,
                             TBL.EVENT_COMP_DAY,
                             TBL.VAL1,
                             TBL.CEMETERY,
                             TBL.EDATE,
                             TBL.EVENT_PLACE,
                             TBL.A1,
                             TBL.ADD1,
                             NVL(TBL.A1,0) - NVL(TBL.ADD1,0) AC1,
                             TBL.A2,
                             TBL.ADD2,
                             NVL(TBL.A2,0) - NVL(TBL.ADD2,0) AC2,
                             TBL.A3,
                             TBL.ADD3,
                             NVL(TBL.A3,0) - NVL(TBL.ADD3,0) AC3,
                             TBL.A4,
                             TBL.ADD4,
                             NVL(TBL.A4,0) - NVL(TBL.ADD4,0) AC4,
                             TBL.A5,
                             TBL.ADD5,
                             NVL(TBL.A5,0) - NVL(TBL.ADD5,0) AC5,
                             TBL.A6,
                             TBL.ADD6,
                             NVL(TBL.A6,0) - NVL(TBL.ADD6,0) AC6,
                             TBL.AMT1,
                             TBL.AMT2,
                             TBL.AMT3,
                             TBL.AMT4,
                             TBL.AMT5,
                             TBL.AMT6,
                             TBL.NOTE,
                             TBL.CUSTMR_NM
                      FROM (
                            SELECT
                                '0001' AS IOGBN,
                                A.ACCNT_NO,
                                FN_MEM_NM(B.MEM_NO) MEM_NM,
                                D.EVT_MNGR_NM,
                                B.PROD_CD,
                                B.JOIN_DT,
                                FN_PROD_NM(B.PROD_CD) PROD_NM,
                                EVT.APP_DM,
                                EVT.CLOTHES,
                                EVT.CLO,
                                A.SEQ,
                                A.EVENT_REG_DAY,
                                A.EVENT_PROC_DAY,
                                A.EVENT_COMP_DAY,
                                A.VAL1,
                                A.CEMETERY,
                                TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                                NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                                       THEN (SELECT FUNRL_NM
                                               FROM FUNRL_HALL
                                              WHERE FUNRL_CD = A.FUNRL_HALL)
                                       ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                                 THEN ''
                                                 WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                                 THEN NVL(A.ETC_ADDR2, '')
                                                 ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                                            END
                                 END, '') AS EVENT_PLACE,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '79' AND PAY_OPT != '0004'), 0) A1,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0002' AND F.GDS_CD = '79' AND PAY_OPT != '0004'), 0) ADD1,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '80' AND PAY_OPT != '0004'), 0) A2,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0002' AND F.GDS_CD = '80' AND PAY_OPT != '0004'), 0) ADD2,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '81' AND PAY_OPT != '0004'), 0) A3,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0002' AND F.GDS_CD = '81' AND PAY_OPT != '0004'), 0) ADD3,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '82' AND PAY_OPT != '0004'), 0) A4,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0002' AND F.GDS_CD = '82' AND PAY_OPT != '0004'), 0) ADD4,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '172' AND PAY_OPT != '0004'), 0) A5,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0002' AND F.GDS_CD = '172' AND PAY_OPT != '0004'), 0) ADD5,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '173' AND PAY_OPT != '0004'), 0) A6,
                                 NVL((SELECT SUM(QTY) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0002' AND F.GDS_CD = '173' AND PAY_OPT != '0004'), 0) ADD6,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '79' AND PAY_OPT != '0004'), 0) AMT1,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '80' AND PAY_OPT != '0004'), 0) AMT2,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '81' AND PAY_OPT != '0004'), 0) AMT3,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '82' AND PAY_OPT != '0004'), 0) AMT4,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '172' AND PAY_OPT != '0004'), 0) AMT5,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '173' AND PAY_OPT != '0004'), 0) AMT6,
                                 (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CD IN ('79','80','81','82','172','173')) NOTE,
                                 (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CL = '0001' AND A.GDS_CD IN ('79','80','81','82','172','173'))) CUSTMR_NM
                            FROM EVENT A
                                LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                                LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                                LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                                LEFT OUTER JOIN FUNRL_RPT E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                                LEFT OUTER JOIN (SELECT RPT_NO, SUM(QTY) QTY FROM FUNRL_RPT_GOODS WHERE GDS_CL = '0001' AND GDS_CD IN('79','80','81','82','172','173') GROUP BY RPT_NO ) F ON E.RPT_NO = F.RPT_NO
                                LEFT OUTER JOIN EVT_JS EVT ON EVT.PROD_CD = B.PROD_CD AND EVT.DEL_FG = 'N'
                            WHERE A.DEL_FG = 'N'
                              AND EVT.APP_DM <![CDATA[<=]]> B.JOIN_DT
                              AND NVL(F.QTY,0) <![CDATA[>]]> 0
                            ) TBL
                    WHERE 1=1
                     <if test="dt_typ != null and dt_typ != ''">
                         <if test="dt_typ == '01'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND TBL.EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                         <if test="dt_typ == '02'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND TBL.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                         <if test="dt_typ == '03'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND TBL.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                     </if>
                      <if test="prod_cd != null and prod_cd != '' ">
                      AND TBL.PROD_CD = #{prod_cd}
                      </if>
                      <if test="accnt_no != null and accnt_no != '' ">
                      AND TBL.ACCNT_NO = #{accnt_no}
                      </if>
                  ) A
            WHERE PAGE_INDX = '1'
            ORDER BY A.CLO, A.SEQ

    </select>

    <!-- 물품 제공현황 분석- 제단 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdAnal2" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeSrvProdAnal2 */
              ROW_NUMBER() OVER (PARTITION BY ALTAR ORDER BY ALTAR,SEQ) AS CNT,
              A.*
        FROM (
              SELECT
                             TBL.ALTAR,
                             ROW_NUMBER() OVER (PARTITION BY ACCNT_NO ORDER BY APP_DM DESC) AS PAGE_INDX,
                             TBL.IOGBN,
                             TBL.ACCNT_NO,
                             TBL.MEM_NM,
                             TBL.EVT_MNGR_NM,
                             TBL.PROD_NM,
                             TBL.SEQ,
                             TBL.EVENT_PROC_DAY,
                             TBL.EVENT_COMP_DAY,
                             TBL.VAL1,
                             TBL.CEMETERY,
                             TBL.EDATE,
                             TBL.EVENT_PLACE,
                             TBL.A1,
                             TBL.A2,
                             TBL.A3,
                             CASE WHEN NVL(TBL.A1,0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END C1,
                             CASE WHEN NVL(TBL.A2,0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END C2,
                             CASE WHEN NVL(TBL.A3,0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END C3,
                             TBL.NOTE,
                             TBL.CUSTMR_NM
                      FROM (
                            SELECT
                                '0001' AS IOGBN,
                                A.ACCNT_NO,
                                FN_MEM_NM(B.MEM_NO) MEM_NM,
                                D.EVT_MNGR_NM,
                                B.PROD_CD,
                                B.JOIN_DT,
                                FN_PROD_NM(B.PROD_CD) PROD_NM,
                                EVT.APP_DM,
                                EVT.ALTAR,
                                A.SEQ,
                                A.EVENT_REG_DAY,
                                A.EVENT_PROC_DAY,
                                A.EVENT_COMP_DAY,
                                A.VAL1,
                                A.CEMETERY,
                                TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                                NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                                       THEN (SELECT FUNRL_NM
                                               FROM FUNRL_HALL
                                              WHERE FUNRL_CD = A.FUNRL_HALL)
                                       ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                                 THEN ''
                                                 WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                                 THEN NVL(A.ETC_ADDR2, '')
                                                 ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                                            END
                                 END, '') AS EVENT_PLACE,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '64' AND PAY_OPT != '0004'), 0) A1,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '66' AND PAY_OPT != '0004'), 0) A2,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '67' AND PAY_OPT != '0004'), 0) A3,
                                 (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CD IN ('64','66','67')) NOTE,
                                 (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CL = '0001' AND A.GDS_CD IN ('64','66','67'))) CUSTMR_NM
                            FROM EVENT A
                                LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                                LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                                LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                                LEFT OUTER JOIN FUNRL_RPT E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                                LEFT OUTER JOIN (SELECT RPT_NO, SUM(QTY) QTY FROM FUNRL_RPT_GOODS WHERE GDS_CL = '0001' AND GDS_CD IN('64','66','67') GROUP BY RPT_NO ) F ON E.RPT_NO = F.RPT_NO
                                LEFT OUTER JOIN EVT_JS EVT ON EVT.PROD_CD = B.PROD_CD AND EVT.DEL_FG = 'N'
                            WHERE A.DEL_FG = 'N'
                              AND EVT.APP_DM <![CDATA[<=]]> B.JOIN_DT
                              AND NVL(F.QTY,0) <![CDATA[>]]> 0
                            ) TBL
                    WHERE 1=1
                     <if test="dt_typ != null and dt_typ != ''">
                         <if test="dt_typ == '01'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND TBL.EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                         <if test="dt_typ == '02'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND TBL.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                         <if test="dt_typ == '03'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND TBL.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                     </if>
                      <if test="prod_cd != null and prod_cd != '' ">
                      AND TBL.PROD_CD = #{prod_cd}
                      </if>
                      <if test="accnt_no != null and accnt_no != '' ">
                      AND TBL.ACCNT_NO = #{accnt_no}
                      </if>
                  ) A
            WHERE PAGE_INDX = '1'
            ORDER BY A.ALTAR, A.SEQ
    </select>

    <!-- 물품 제공현황 분석- 장의차량 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdAnal3" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeSrvProdAnal3 */
              ROW_NUMBER() OVER (PARTITION BY CAR ORDER BY CAR,SEQ) AS CNT,
              A.*
        FROM (
              SELECT
                             TBL.CAR,
                             ROW_NUMBER() OVER (PARTITION BY ACCNT_NO ORDER BY APP_DM DESC) AS PAGE_INDX,
                             TBL.IOGBN,
                             TBL.ACCNT_NO,
                             TBL.MEM_NM,
                             TBL.EVT_MNGR_NM,
                             TBL.PROD_NM,
                             TBL.SEQ,
                             TBL.EVENT_PROC_DAY,
                             TBL.EVENT_COMP_DAY,
                             TBL.VAL1,
                             TBL.CEMETERY,
                             TBL.EDATE,
                             TBL.EVENT_PLACE,
                             TBL.A1,
                             TBL.ADD1,
                             NVL(TBL.A1,0) - NVL(TBL.ADD1,0) AC1,
                             CASE WHEN NVL(TBL.A1,0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END C1,
                             TBL.A2,
                             TBL.ADD2,
                             NVL(TBL.A2,0) - NVL(TBL.ADD2,0) AC2,
                             CASE WHEN NVL(TBL.A2,0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END C2,
                             TBL.NOTE,
                             TBL.CUSTMR_NM
                      FROM (
                            SELECT
                                '0001' AS IOGBN,
                                A.ACCNT_NO,
                                FN_MEM_NM(B.MEM_NO) MEM_NM,
                                D.EVT_MNGR_NM,
                                B.PROD_CD,
                                B.JOIN_DT,
                                FN_PROD_NM(B.PROD_CD) PROD_NM,
                                EVT.APP_DM,
                                EVT.CAR,
                                A.SEQ,
                                A.EVENT_REG_DAY,
                                A.EVENT_PROC_DAY,
                                A.EVENT_COMP_DAY,
                                A.VAL1,
                                A.CEMETERY,
                                TO_CHAR(TO_DATE(A.EVENT_PROC_DAY),'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY),'YYYY/MM/DD') EDATE,
                                NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                                       THEN (SELECT FUNRL_NM
                                               FROM FUNRL_HALL
                                              WHERE FUNRL_CD = A.FUNRL_HALL)
                                       ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                                 THEN ''
                                                 WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                                 THEN NVL(A.ETC_ADDR2, '')
                                                 ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                                            END
                                 END, '') AS EVENT_PLACE,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '7' AND PAY_OPT != '0004'), 0) A1,
                                 NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0001' AND F.GDS_CD = '8' AND PAY_OPT != '0004'), 0) A2,
                                 NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0002' AND F.GDS_CD = '7' AND PAY_OPT != '0004'), 0) ADD1,
                                 NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS F WHERE F.RPT_NO = E.RPT_NO AND F.GDS_CL = '0002' AND F.GDS_CD = '8' AND PAY_OPT != '0004'), 0) ADD2,
                                 (SELECT LISTAGG((NOTE),',' ) within GROUP(ORDER BY '') FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CD IN ('7','8')) NOTE,
                                 (SELECT LISTAGG((CUSTMR_NM),',' ) within GROUP(ORDER BY '') FROM CUSTMR_MNG WHERE CUSTMR_CD IN(SELECT A.BYUING_CD FROM FUNRL_RPT_GOODS A WHERE A.RPT_NO = E.RPT_NO AND A.GDS_CL = '0001' AND A.GDS_CD IN ('7','8'))) CUSTMR_NM
                            FROM EVENT A
                                LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO AND B.DEL_FG = 'N'
                                LEFT OUTER JOIN EVENT_MNGR_REG C ON A.SEQ = C.EVT_SEQ AND C.DEL_FG = 'N' AND C.EVT_MNGR_GUBUN = '0001'
                                LEFT OUTER JOIN EVENT_MANAGER_MNG D ON D.EVT_MNGR_CD = C.EVT_MNGR_CD AND D.DEL_FG = 'N'
                                LEFT OUTER JOIN FUNRL_RPT E ON E.SEQ = A.SEQ AND E.DEL_FG = 'N'
                                LEFT OUTER JOIN (SELECT RPT_NO, SUM(QTY) QTY FROM FUNRL_RPT_GOODS WHERE GDS_CL = '0001' AND GDS_CD IN('7','8') GROUP BY RPT_NO ) F ON E.RPT_NO = F.RPT_NO
                                LEFT OUTER JOIN EVT_JS EVT ON EVT.PROD_CD = B.PROD_CD AND EVT.DEL_FG = 'N'
                            WHERE A.DEL_FG = 'N'
                              AND EVT.APP_DM <![CDATA[<=]]> B.JOIN_DT
                              AND NVL(F.QTY,0) <![CDATA[>]]> 0
                            ) TBL
                    WHERE 1=1
                     <if test="dt_typ != null and dt_typ != ''">
                         <if test="dt_typ == '01'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND TBL.EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                         <if test="dt_typ == '02'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND TBL.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                         <if test="dt_typ == '03'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND TBL.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                     </if>
                      <if test="prod_cd != null and prod_cd != '' ">
                      AND TBL.PROD_CD = #{prod_cd}
                      </if>
                      <if test="accnt_no != null and accnt_no != '' ">
                      AND TBL.ACCNT_NO = #{accnt_no}
                      </if>
                  ) A
            WHERE PAGE_INDX = '1'
            ORDER BY A.CAR, A.SEQ

    </select>

    <!-- 물품 제공현황 분석- 장례식장(CP) -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdAnal4" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeSrvProdAnal4 */
              ROW_NUMBER() OVER (ORDER BY EVT_MNGR_NM,EVENT_COMP_DAY,ACCNT_NO) AS ACNT,
              ROW_NUMBER() OVER (PARTITION BY EVT_MNGR_NM ORDER BY EVT_MNGR_NM,EVENT_COMP_DAY,ACCNT_NO) AS CNT,
              TBL.*,
              NVL(A1,0) + NVL(A2,0) + NVL(A3,0) FU_AMT,
              NVL(JAMT,0) - NVL(SAMT,0) SJ_AMT
        FROM (
              SELECT A.ACCNT_NO,
                     H.MEM_NM,
                     F.EVT_MNGR_NM,
                     P.PROD_NM,
                     A.EVENT_COMP_DAY,
                     TO_CHAR(TO_DATE(A.EVENT_PROC_DAY), 'YYYY/MM/DD')||'~'||TO_CHAR(TO_DATE(A.EVENT_COMP_DAY), 'YYYY/MM/DD') EDATE,
                     A.CEMETERY,
                      NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                             THEN I.FUNRL_NM
                             ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                                       THEN ''
                                       WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                                       THEN NVL(A.ETC_ADDR2, '')
                                       ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                                  END
                       END, '') AS EVENT_PLACE,
                       SUM(CASE WHEN D.GDS_CD = '168' THEN C.AMT ELSE 0 END) A1 ,
                       SUM(CASE WHEN D.GDS_CD = '169' THEN C.AMT ELSE 0 END) A2 ,
                       SUM(CASE WHEN D.GDS_CD = '171' THEN C.AMT ELSE 0 END) A3 ,
                       NVL((SELECT NVL(A.AMT,0) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON B.GDS_CD = A.GDS_CD WHERE A.DEL_FG = 'N' AND A.FRG_CL IN('0001','0002') AND B.GDS_GRP_CD = '0002' AND A.RPT_NO = C.RPT_NO),0) SAMT,
                       MAX((SELECT SUM(AMT) AMT FROM FUNRL_RPT_GOODS WHERE RPT_NO = B.RPT_NO AND FRG_CL IN('0001','0002') GROUP BY B.RPT_NO)) JAMT,
                       1 P_INDX
              FROM EVENT A
                LEFT OUTER JOIN FUNRL_RPT B ON A.SEQ = B.SEQ AND B.DEL_FG = 'N'
                LEFT OUTER JOIN FUNRL_RPT_GOODS C ON C.RPT_NO = B.RPT_NO
                LEFT OUTER JOIN EVENT_GOODS_MNG_MST D ON D.GDS_CD = C.GDS_CD
                LEFT OUTER JOIN EVENT_MNGR_REG E ON E.EVT_SEQ = A.SEQ AND E.DEL_FG = 'N' AND E.EVT_MNGR_GUBUN = '0001'
                LEFT OUTER JOIN EVENT_MANAGER_MNG F ON F.EVT_MNGR_CD = E.EVT_MNGR_CD AND F.DEL_FG = 'N' AND F.EMP_GUBUN = '0001'
                LEFT OUTER JOIN MEM_PROD_ACCNT G ON G.ACCNT_NO = A.ACCNT_NO AND G.DEL_FG = 'N'
                LEFT OUTER JOIN MEMBER H ON H.MEM_NO = G.MEM_NO AND H.DEL_FG = 'N'
                LEFT OUTER JOIN PRODUCT P ON P.PROD_CD = G.PROD_CD AND P.DEL_FG = 'N'
                LEFT OUTER JOIN FUNRL_HALL I ON I.FUNRL_CD = A.FUNRL_HALL
              WHERE A.DEL_FG = 'N'
                AND NVL(D.GDS_CD, ' ') != ' '
                     <if test="dt_typ != null and dt_typ != ''">
                         <if test="dt_typ == '01'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND A.EVENT_REG_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                         <if test="dt_typ == '02'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND A.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                         <if test="dt_typ == '03'">
                            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                                AND A.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                            </if>
                         </if>
                     </if>
                      <if test="prod_cd != null and prod_cd != '' ">
                          AND G.PROD_CD = #{prod_cd}
                      </if>
                      <if test="accnt_no != null and accnt_no != '' ">
                          AND A.ACCNT_NO = #{accnt_no}
                      </if>
              GROUP BY A.ACCNT_NO, H.MEM_NM, F.EVT_MNGR_NM, P.PROD_NM, A.EVENT_PROC_DAY, A.EVENT_COMP_DAY, A.CEMETERY
                       ,A.EVENT_PLACE_CL, I.FUNRL_NM, A.ETC_ZIP, A.ETC_ADDR1, A.ETC_ADDR2, C.RPT_NO
        ) TBL
        ORDER BY EVT_MNGR_NM, EVENT_COMP_DAY,ACCNT_NO

    </select>

    <!-- 물품 제공현황 분석- 월별분석 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSrvProdAnal5" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeSrvProdAnal5 */
              YYMM,
              NVL(A1,0) + NVL(A2,0) + NVL(A3,0) + NVL(JAMT,0) AS TOT_AMT,
              NVL(A1,0) + NVL(A2,0) + NVL(A3,0) AS FU_AMT,
              NVL(JAMT,0) JAMT,
              TRUNC((NVL(A1,0) + NVL(A2,0) + NVL(A3,0) + NVL(JAMT,0)) / ACNT) EV_AVG,
              TRUNC((NVL(A1,0) + NVL(A2,0) + NVL(A3,0)) / JCNT) FU_AVG,
              TRUNC(NVL(JAMT,0) / ACNT) JS_AVG, -- 직영전체건수
              TRUNC((NVL(JAMT,0) - NVL(SAMT,0)) / SCNT) JO_AVG, -- 수의금액 0원 이상
              ACNT,
              JCNT,
              SCNT,
              YCNT
        FROM(
              SELECT
                    YYMM,
                    SUM(NVL(A1,0)) A1,
                    SUM(NVL(A2,0)) A2,
                    SUM(NVL(A3,0)) A3,
                    SUM(NVL(SAMT,0)) SAMT,
                    SUM(NVL(JAMT,0)) JAMT,
                    SUM(NVL(JAMT,0) - NVL(SAMT,0)) SJ_AMT,
                    COUNT(ACCNT_NO) ACNT,
                    SUM(CASE WHEN NVL(A1,0) + NVL(A2,0) + NVL(A3,0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END) JCNT,
                    SUM(CASE WHEN NVL(SAMT,0) <![CDATA[>]]> 0 THEN 1 ELSE 0 END) SCNT,
                    COUNT(DISTINCT(YYMM)) YCNT
              FROM (
                    SELECT
                             SUBSTR(A.EVENT_COMP_DAY,1,6) YYMM,
                             A.ACCNT_NO,
                             --COUNT(DISTINCT(A.ACCNT_NO)) JCNT,
                             SUM(CASE WHEN D.GDS_CD = '168' THEN C.AMT ELSE 0 END) A1 ,
                             SUM(CASE WHEN D.GDS_CD = '169' THEN C.AMT ELSE 0 END) A2 ,
                             SUM(CASE WHEN D.GDS_CD = '171' THEN C.AMT ELSE 0 END) A3 ,
                             <!-- 2017.11.30 정승철 - 합동장례로 인한 수의(행사물품, GDS_GRP_CD : '0002') 2건 이상 발생으로 SUM 처리 -->
                             NVL((SELECT NVL(SUM(A.AMT),0) FROM FUNRL_RPT_GOODS A LEFT OUTER JOIN EVENT_GOODS_MNG_MST B ON B.GDS_CD = A.GDS_CD WHERE A.DEL_FG = 'N' AND A.FRG_CL IN('0001','0002') AND B.GDS_GRP_CD = '0002' AND A.RPT_NO = C.RPT_NO),0) SAMT,
                             MAX((SELECT SUM(AMT) AMT FROM FUNRL_RPT_GOODS WHERE RPT_NO = B.RPT_NO AND FRG_CL IN('0001','0002') GROUP BY B.RPT_NO)) JAMT
                    FROM EVENT A
                      LEFT OUTER JOIN FUNRL_RPT B ON A.SEQ = B.SEQ AND B.DEL_FG = 'N'
                      LEFT OUTER JOIN FUNRL_RPT_GOODS C ON C.RPT_NO = B.RPT_NO
                      LEFT OUTER JOIN EVENT_GOODS_MNG_MST D ON D.GDS_CD = C.GDS_CD
                      LEFT OUTER JOIN EVENT_MNGR_REG E ON E.EVT_SEQ = A.SEQ AND E.DEL_FG = 'N' AND E.EVT_MNGR_GUBUN = '0001'
                      LEFT OUTER JOIN EVENT_MANAGER_MNG F ON F.EVT_MNGR_CD = E.EVT_MNGR_CD AND F.DEL_FG = 'N' AND F.EMP_GUBUN = '0001'
                      LEFT OUTER JOIN MEM_PROD_ACCNT G ON G.ACCNT_NO = A.ACCNT_NO AND G.DEL_FG = 'N'
                      LEFT OUTER JOIN MEMBER H ON H.MEM_NO = G.MEM_NO AND H.DEL_FG = 'N'
                      LEFT OUTER JOIN PRODUCT P ON P.PROD_CD = G.PROD_CD AND P.DEL_FG = 'N'
                      LEFT OUTER JOIN FUNRL_HALL I ON I.FUNRL_CD = A.FUNRL_HALL
                    WHERE A.DEL_FG = 'N'
                      AND NVL(D.GDS_CD, ' ') != ' '
                      --AND SUBSTR(A.EVENT_COMP_DAY,1,4) = '2017'
                      -- 물품 제공현황 분석 - 월별분석(탭) 화면에서 연도별로 조회할 수 있도록 요청 : 2018.02.06
                      AND SUBSTR(A.EVENT_COMP_DAY,1,4) = #{stt_dt}
                    GROUP BY SUBSTR(A.EVENT_COMP_DAY,1,6) , A.ACCNT_NO, C.RPT_NO
              ) TBL
              GROUP BY YYMM
        ) A
        ORDER BY YYMM


    </select>

    <!-- 월별 지부별 장의용품 재고현황 -->
    <select id="DlwNewTypeEvntMap.getNewTypeMonthBrList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeMonthBrList */
            B.BRANCH_NM,
            TBL.WH_NM,
            SUM(TBL.STOCKQTY) STOCKQTY,
            SUM(TBL.INQTY) INQTY,
            SUM(TBL.OUTQTY) OUTQTY,
            SUM(TBL.STOCKQTY) + SUM(TBL.INQTY) - SUM(TBL.OUTQTY) AS REALQTY
        FROM (
              SELECT
                WH.BRANCH
                , WH.WH_CD
                , WH.WH_NM
                , SUM(STOCK_QTY) STOCKQTY
                , 0 INQTY
                , 0 OUTQTY
              FROM STOCK_CLOSE SC
              JOIN WAREHOUSE_MNG WH ON WH.WH_CD = SC.WH_CD AND WH.DEL_FG='N'
              WHERE 1=1
              <if test="gds_cd != null and gds_cd != '' ">
                  AND SC.GDS_CD = #{gds_cd}
              </if>
              <if test="stt_dt != null and stt_dt != '' ">
                  AND CLOSE_YYMM = TO_CHAR(ADD_MONTHS(TO_DATE(#{stt_dt}||'01'),-1),'YYYYMM')
              </if>
              GROUP BY WH.BRANCH, WH.WH_CD, WH.WH_NM

              UNION ALL

              SELECT
                WH.BRANCH
                , WH.WH_CD
                , WH.WH_NM
                , 0 STOCKQTY
                , SUM(QTY) INQTY
                , 0 OUTQTY
              FROM WH_IN_DTL WD
              JOIN WH_IN_MST WM ON WD.WH_IN_NO = WM.WH_IN_NO AND WM.DEL_FG='N'
              JOIN WAREHOUSE_MNG WH ON WH.WH_CD = WD.WH_CD AND WH.DEL_FG='N'
              WHERE 1=1
              <if test="gds_cd != null and gds_cd != '' ">
                  AND WD.GDS_CD = #{gds_cd}
              </if>
              <if test="stt_dt != null and stt_dt != '' ">
              AND SUBSTR(WM.IN_DT,1,6) = #{stt_dt}
              </if>
              GROUP BY WH.BRANCH, WH.WH_CD, WH.WH_NM

              UNION ALL

              SELECT
                WH.BRANCH
                , WH.WH_CD
                , WH.WH_NM
                , 0 STOCKQTY
                , 0 INQTY
                , SUM(QTY) OUTQTY
              FROM WH_OUT_DTL WD
              JOIN WH_OUT_MST WM ON WD.WH_OUT_NO = WM.WH_OUT_NO AND WM.DEL_FG='N'
              JOIN WAREHOUSE_MNG WH ON WH.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
               WHERE 1=1
               <if test="gds_cd != null and gds_cd != '' ">
                     AND WD.GDS_CD = #{gds_cd}
               </if>
               <if test="stt_dt != null and stt_dt != '' ">
                     AND SUBSTR(WM.OUT_DT,1,6) = #{stt_dt}
               </if>
              GROUP BY WH.BRANCH, WH.WH_CD, WH.WH_NM
            ) TBL
            LEFT OUTER JOIN BRANCH_MNG B ON TBL.BRANCH = B.BRANCH_CD
        GROUP BY B.BRANCH_NM, TBL.WH_NM
        ORDER BY B.BRANCH_NM
    </select>

    <!-- 월별 창고별 장의용품 재고현황 -->
    <select id="DlwNewTypeEvntMap.getNewTypeMonthWhList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeMonthWhList */
              B.BRANCH_NM,
              TBL.WH_NM,
              SUM(TBL.STOCKQTY) STOCKQTY,
              SUM(TBL.INQTY) INQTY,
              SUM(TBL.OUTQTY) OUTQTY,
              NVL(SUM(TBL.STOCKQTY),0) + NVL(SUM(TBL.INQTY),0) - NVL(SUM(TBL.OUTQTY),0) AS REALQTY
        FROM (
              SELECT
                WH.BRANCH
                , WH.WH_CD
                    , WH.WH_NM
                , SUM(STOCK_QTY) STOCKQTY
                , 0 INQTY
                , 0 OUTQTY
              FROM STOCK_CLOSE SC
              JOIN WAREHOUSE_MNG WH ON WH.WH_CD = SC.WH_CD AND WH.DEL_FG='N'
              WHERE 1=1
                AND WH.BRANCH = '0012'
              <if test="gds_cd != null and gds_cd != '' ">
                  AND SC.GDS_CD = #{gds_cd}
              </if>
              <if test="stt_dt != null and stt_dt != '' ">
              AND CLOSE_YYMM = TO_CHAR(ADD_MONTHS(TO_DATE(#{stt_dt}||'01'),-1),'YYYYMM')
              </if>
              GROUP BY WH.BRANCH, WH.WH_CD, WH.WH_NM

              UNION ALL

              SELECT
                WH.BRANCH
                , WH.WH_CD
                    , WH.WH_NM
                , 0 STOCKQTY
                , SUM(QTY) INQTY
                , 0 OUTQTY
              FROM WH_IN_DTL WD
              JOIN WH_IN_MST WM ON WD.WH_IN_NO = WM.WH_IN_NO AND WM.DEL_FG='N'
              JOIN WAREHOUSE_MNG WH ON WH.WH_CD = WD.WH_CD AND WH.DEL_FG='N'
              WHERE 1=1
                AND WH.BRANCH = '0012'
              <if test="gds_cd != null and gds_cd != '' ">
                   AND WD.GDS_CD = #{gds_cd}
              </if>
              <if test="stt_dt != null and stt_dt != '' ">
              AND SUBSTR(WM.IN_DT, 1,6) = #{stt_dt}
              </if>
              GROUP BY WH.BRANCH, WH.WH_CD, WH.WH_NM

              UNION ALL

              SELECT
                WH.BRANCH
                , WH.WH_CD
                    , WH.WH_NM
                , 0 STOCKQTY
                , 0 INQTY
                , SUM(QTY) OUTQTY
              FROM WH_OUT_DTL WD
              JOIN WH_OUT_MST WM ON WD.WH_OUT_NO = WM.WH_OUT_NO AND WM.DEL_FG='N'
              JOIN WAREHOUSE_MNG WH ON WH.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
               WHERE 1=1
                 AND WH.BRANCH = '0012'
               <if test="gds_cd != null and gds_cd != '' ">
                    AND WD.GDS_CD = #{gds_cd}
               </if>
               <if test="stt_dt != null and stt_dt != '' ">
                   AND SUBSTR(WM.OUT_DT,1,6) = #{stt_dt}
               </if>
              GROUP BY WH.BRANCH, WH.WH_CD, WH.WH_NM
            ) TBL
            LEFT OUTER JOIN BRANCH_MNG B ON TBL.BRANCH = B.BRANCH_CD
        GROUP BY B.BRANCH_NM, TBL.WH_NM
        ORDER BY B.BRANCH_NM
    </select>

    <!-- 일자별 지부별 물품 입고 조회 - 헤더 -->
    <select id="DlwNewTypeEvntMap.getNewTypeGdsIpList_Head" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeGdsIpList_Head */
               WH_CD,
               WH_NM
        FROM WAREHOUSE_MNG
        WHERE DEL_FG = 'N'
          AND WH_USE_YN = 'Y'
          AND SUBSTR(WH_NM,1,3) != '(구)'
        ORDER BY WH_CD
    </select>

    <!-- 일자별 지부별 물품 입고 조회 - 펑션 실행 -->
    <select id="DlwNewTypeEvntMap.getNewTypeGdsIpList_func" parameterType="map" resultType="resultMap">
        /* DlwNewTypeEvntMap.getNewTypeGdsIpList_func */
        SELECT FN_GOODS_SRV() FROM DUAL
    </select>

    <!-- 일자별 지부별 물품 입고 조회 - 쿼리 가져오기 -->
    <select id="DlwNewTypeEvntMap.getNewTypeGdsIpList_qry" parameterType="map" resultType="String">
        /* DlwNewTypeEvntMap.getNewTypeGdsIpList_qry */
        SELECT QRY_DATA FROM CLOB_DATA
    </select>

    <!-- 일자별 지부별 물품 입고 조회 - 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeGdsIpList" parameterType="map" resultType="resultMap">
        /* DlwNewTypeEvntMap.getNewTypeGdsIpList */
        SELECT B.IN_DT
               ${gds_qury}
        FROM WH_IN_DTL A
            LEFT OUTER JOIN WH_IN_MST B ON A.WH_IN_NO = B.WH_IN_NO AND B.DEL_FG = 'N'
            LEFT OUTER JOIN WAREHOUSE_MNG C ON C.WH_CD = A.WH_CD
        WHERE 1=1
          <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
              AND B.IN_DT BETWEEN #{stt_dt} AND #{end_dt}
          </if>
          <if test="gds_cd != null and gds_cd != '' ">
              AND A.GDS_CD = #{gds_cd}
          </if>
          <if test="whcd != null and whcd != '' ">
              AND C.WH_CD = #{whcd}
          </if>
        GROUP BY ROLLUP(B.IN_DT )
        ORDER BY B.IN_DT
    </select>

    <!-- 일자별 지부별 물품 사용 조회 - 헤더 -->
    <select id="DlwNewTypeEvntMap.getNewTypeGdsUseList_Head" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeGdsUseList_Head */
               WH_CD,
               WH_NM
        FROM WAREHOUSE_MNG
        WHERE DEL_FG = 'N'
          AND WH_USE_YN = 'Y'
          AND SUBSTR(WH_NM,1,3) != '(구)'
        ORDER BY WH_CD
    </select>

    <!-- 일자별 지부별 물품 사용 조회 - 펑션 실행 -->
    <select id="DlwNewTypeEvntMap.getNewTypeGdsUseList_func" parameterType="map" resultType="resultMap">
        /* DlwNewTypeEvntMap.getNewTypeGdsUseList_func */
        SELECT FN_GOODS_USE() FROM DUAL
    </select>

    <!-- 일자별 지부별 물품 사용 조회 - 쿼리 가져오기 -->
    <select id="DlwNewTypeEvntMap.getNewTypeGdsUseList_qry" parameterType="map" resultType="String">
        /* DlwNewTypeEvntMap.getNewTypeGdsUseList_qry */
        SELECT QRY_DATA FROM CLOB_DATA
    </select>

    <!-- 일자별 지부별 물품 사용 조회 - 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeGdsUseList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeGdsUseList */
              EV.EVENT_PROC_DAY,
              TMP.ACCNT_NO,
              FN_MEM_NM(MPA.MEM_NO) MEM_NM,
              FN_PROD_NM(MPA.PROD_CD) PROD_NM,
              TMP.BRANCH
              ${gds_qury}
        FROM
            (
              SELECT
                      WD.GDS_CD
                    , WD.WH_CD
                    , WHMNG.BRANCH
                    , WD.QTY
                    , EV.ACCNT_NO
              FROM WH_OUT_DTL WD
                  JOIN WH_OUT_MST WM ON WM.WH_OUT_NO = WD.WH_OUT_NO
                  JOIN FUNRL_OUTSRC_MST FOM ON FOM.FUNRL_OUTSRC_NO = WM.FUNRL_OUTSRC_NO AND FOM.DEL_FG='N'
                  JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
                  JOIN EVENT EV ON FOM.SEQ = EV.SEQ
                  JOIN EVENT_MNGR_REG EMR ON EMR.EVT_SEQ = EV.SEQ  AND EMR.DEL_FG = 'N'
                  JOIN EVENT_MANAGER_MNG EMM ON EMM.EVT_MNGR_CD = EMR.EVT_MNGR_CD AND EMM.JOB_DUTY ='0001'
              WHERE 1=1
                  <if test="gds_cd != null and gds_cd != '' ">
                    AND GDS_CD = #{gds_cd}
                </if>
                <if test="whcd != null and whcd != '' ">
                    AND WD.WH_CD = #{whcd}
                  </if>
              UNION ALL

              SELECT
                      WD.GDS_CD
                    , WD.WH_CD
                    , WHMNG.BRANCH
                    , WD.QTY
                    , EV.ACCNT_NO
              FROM WH_OUT_DTL WD
                  JOIN WH_OUT_MST WM ON WM.WH_OUT_NO = WD.WH_OUT_NO AND WM.DEL_FG='N'
                  JOIN FUNRL_RPT FR ON FR.RPT_NO = WM.RPT_NO AND FR.DEL_FG='N'
                  JOIN WAREHOUSE_MNG WHMNG ON WHMNG.WH_CD = WD.WH_CD AND WM.DEL_FG='N'
                  JOIN EVENT EV ON FR.SEQ = EV.SEQ AND EV.DEL_FG='N'
                  JOIN EVENT_MNGR_REG EMR ON EMR.EVT_SEQ = EV.SEQ AND EMR.DEL_FG='N'
                  JOIN EVENT_MANAGER_MNG EMM ON EMM.EVT_MNGR_CD = EMR.EVT_MNGR_CD AND WHMNG.WH_CD = EMM.WH_CD AND EMM.JOB_DUTY ='0001' AND EMM.DEL_FG='N'
              WHERE 1=1
                  <if test="gds_cd != null and gds_cd != '' ">
                    AND GDS_CD = #{gds_cd}
                </if>
                <if test="whcd != null and whcd != '' ">
                    AND WD.WH_CD = #{whcd}
                  </if>
            )TMP
                JOIN MEM_PROD_ACCNT MPA ON TMP.ACCNT_NO = MPA.ACCNT_NO AND MPA.DEL_FG='N'
                JOIN EVENT EV ON TMP.ACCNT_NO = EV.ACCNT_NO AND EV.DEL_FG='N'
        WHERE 1=1
            <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                AND EV.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
            </if>
        GROUP BY ROLLUP(TMP.ACCNT_NO, BRANCH, EV.EVENT_PROC_DAY ,MPA.PROD_CD, MPA.MEM_NO)
        HAVING GROUPING_ID(TMP.ACCNT_NO, BRANCH, EV.EVENT_PROC_DAY ,MPA.PROD_CD, MPA.MEM_NO) IN(0,31)
        ORDER BY EV.EVENT_PROC_DAY
    </select>

    <!-- CP별/일반경비별 현황 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCostList" parameterType="map" resultType="resultMap">

          SELECT /* DlwNewTypeEvntMap.getNewTypeCostList */
               C.EVT_MNGR_CD,
               C.EVT_MNGR_NM,
               SUM(CASE WHEN E.COST_CD = '0001' AND E.PAY_OPT = '0002' THEN E.AMT ELSE 0 END) SC_AMT,
               SUM(CASE WHEN E.COST_CD = '0001' AND E.PAY_OPT = '0003' THEN E.AMT ELSE 0 END) SP_AMT,
               SUM(CASE WHEN E.COST_CD = '0002' AND E.PAY_OPT = '0002' THEN E.AMT ELSE 0 END) UC_AMT,
               SUM(CASE WHEN E.COST_CD = '0002' AND E.PAY_OPT = '0003' THEN E.AMT ELSE 0 END) UP_AMT,
               SUM(CASE WHEN E.COST_CD = '0003' AND E.PAY_OPT = '0002' THEN E.AMT ELSE 0 END) TC_AMT,
               SUM(CASE WHEN E.COST_CD = '0003' AND E.PAY_OPT = '0003' THEN E.AMT ELSE 0 END) TP_AMT,
               SUM(CASE WHEN E.COST_CD = '0004' AND E.PAY_OPT = '0002' THEN E.AMT ELSE 0 END) PC_AMT,
               SUM(CASE WHEN E.COST_CD = '0004' AND E.PAY_OPT = '0003' THEN E.AMT ELSE 0 END) PP_AMT,
               SUM(CASE WHEN E.COST_CD = '0005' AND E.PAY_OPT = '0002' THEN E.AMT ELSE 0 END) RC_AMT,
               SUM(CASE WHEN E.COST_CD = '0005' AND E.PAY_OPT = '0003' THEN E.AMT ELSE 0 END) RP_AMT,
               NVL(SUM(E.AMT),0) TOT_AMT,
               LISTAGG(E.NOTE,',') WITHIN GROUP(ORDER BY '') AS NOTE
        FROM EVENT A
            LEFT OUTER JOIN EVENT_MNGR_REG B ON A.SEQ = B.EVT_SEQ AND B.DEL_FG = 'N' AND B.EVT_MNGR_GUBUN = '0001'
            LEFT OUTER JOIN EVENT_MANAGER_MNG C ON C.EVT_MNGR_CD = B.EVT_MNGR_CD AND C.DEL_FG = 'N'
            LEFT OUTER JOIN FUNRL_RPT D ON D.SEQ = A.SEQ AND D.DEL_FG = 'N'
            LEFT OUTER JOIN FUNRL_PRT_COST E ON E.RPT_NO = D.RPT_NO
            LEFT OUTER JOIN WAREHOUSE_MNG W ON W.WH_CD = C.WH_CD AND W.DEL_FG = 'N'
        WHERE A.DEL_FG = 'N'
          <if test="dt_typ != null and dt_typ != ''">
              <if test="dt_typ == '01'">
                 <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                     AND A.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                 </if>
              </if>
              <if test="dt_typ == '02'">
                 <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                     AND A.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                 </if>
              </if>
          </if>
          AND E.AMT <![CDATA[>]]> 0
          <if test="loc != null and loc != '' ">
              AND A.ETC_LOC_NM = #{loc}
          </if>
          <if test="branch != null and branch != '' ">
              AND W.BRANCH = #{branch}
          </if>
          <if test="mngr_cd != null and mngr_cd != '' ">
            AND C.REAL_EVT_MNGR_CD = #{mngr_cd}
          </if>
        GROUP BY C.EVT_MNGR_CD, C.EVT_MNGR_NM
        ORDER BY C.EVT_MNGR_NM

    </select>

    <!-- 회원별 일반경비 현황 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeCostMemList" parameterType="map" resultType="resultMap">

          SELECT /* DlwNewTypeEvntMap.getNewTypeCostMemList */
               A.ACCNT_NO,
               M.MEM_NM,
               C.EVT_MNGR_CD,
               SUM(CASE WHEN E.COST_CD = '0001' AND E.PAY_OPT = '0002' THEN E.AMT ELSE 0 END) SC_AMT,
               SUM(CASE WHEN E.COST_CD = '0001' AND E.PAY_OPT = '0003' THEN E.AMT ELSE 0 END) SP_AMT,
               SUM(CASE WHEN E.COST_CD = '0002' AND E.PAY_OPT = '0002' THEN E.AMT ELSE 0 END) UC_AMT,
               SUM(CASE WHEN E.COST_CD = '0002' AND E.PAY_OPT = '0003' THEN E.AMT ELSE 0 END) UP_AMT,
               SUM(CASE WHEN E.COST_CD = '0003' AND E.PAY_OPT = '0002' THEN E.AMT ELSE 0 END) TC_AMT,
               SUM(CASE WHEN E.COST_CD = '0003' AND E.PAY_OPT = '0003' THEN E.AMT ELSE 0 END) TP_AMT,
               SUM(CASE WHEN E.COST_CD = '0004' AND E.PAY_OPT = '0002' THEN E.AMT ELSE 0 END) PC_AMT,
               SUM(CASE WHEN E.COST_CD = '0004' AND E.PAY_OPT = '0003' THEN E.AMT ELSE 0 END) PP_AMT,
               SUM(CASE WHEN E.COST_CD = '0005' AND E.PAY_OPT = '0002' THEN E.AMT ELSE 0 END) RC_AMT,
               SUM(CASE WHEN E.COST_CD = '0005' AND E.PAY_OPT = '0003' THEN E.AMT ELSE 0 END) RP_AMT,
               NVL(SUM(E.AMT),0) TOT_AMT,
               LISTAGG(E.NOTE,',') WITHIN GROUP(ORDER BY '') AS NOTE
        FROM EVENT A
            LEFT OUTER JOIN EVENT_MNGR_REG B ON A.SEQ = B.EVT_SEQ AND B.DEL_FG = 'N' AND B.EVT_MNGR_GUBUN = '0001'
            LEFT OUTER JOIN EVENT_MANAGER_MNG C ON C.EVT_MNGR_CD = B.EVT_MNGR_CD AND C.DEL_FG = 'N'
            LEFT OUTER JOIN FUNRL_RPT D ON D.SEQ = A.SEQ AND D.DEL_FG = 'N'
            LEFT OUTER JOIN FUNRL_PRT_COST E ON E.RPT_NO = D.RPT_NO
            LEFT OUTER JOIN WAREHOUSE_MNG W ON W.WH_CD = C.WH_CD AND W.DEL_FG = 'N'
            LEFT OUTER JOIN MEM_PROD_ACCNT P ON A.ACCNT_NO = P.ACCNT_NO AND P.DEL_FG = 'N'
            LEFT OUTER JOIN MEMBER M ON P.MEM_NO = M.MEM_NO AND M.DEL_FG = 'N'
        WHERE A.DEL_FG = 'N'
          <if test="dt_typ != null and dt_typ != ''">
              <if test="dt_typ == '01'">
                 <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                     AND A.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                 </if>
              </if>
              <if test="dt_typ == '02'">
                 <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                     AND A.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                 </if>
              </if>
          </if>
          AND E.AMT <![CDATA[>]]> 0
          <if test="loc != null and loc != '' ">
              AND A.ETC_LOC_NM = #{loc}
          </if>
          <if test="branch != null and branch != '' ">
              AND W.BRANCH = #{branch}
          </if>
            AND C.EVT_MNGR_CD = #{mngr_cd}

        GROUP BY A.ACCNT_NO, M.MEM_NM, C.EVT_MNGR_CD
        ORDER BY A.ACCNT_NO

    </select>

    <!-- 손익분석집계표 - 행사별 -->
    <select id="DlwNewTypeEvntMap.getNewTypeBenefitList1" parameterType="map" resultType="resultMap">

    SELECT *         /* 직영 DlwNewTypeEvntMap.getNewTypeBenefitList1 */
    FROM(
        <if test="iogbn == '0000' or iogbn == '0001' ">
        SELECT TBL.ACCNT_NO
             , TBL.MEM_NM
             , TBL.EVENT_COMP_DAY
             , TBL.LOC
             , TBL.PROD_NM
             , TBL.CP_NM
             , TBL.BRANCH_NM
             , TBL.EVENT_PLACE
             , '' AS JI_DT
             , TBL.PROD_AMT
             , (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) - TBL.DEDUCTAMT EVT_SALES_COST
             , TBL.EVT_ADD_SALES
             , TBL.EVT_ADD_SALES_COST EVT_ADD_SALES_COST
         , (PROD_AMT-TBL.NEWCHANAMT-TBL.DEDUCTAMT) + EVT_ADD_SALES AS TOT_EVT_SALES
         , (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) + TBL.EVT_ADD_SALES_COST - TBL.DEDUCTAMT AS TOT_EVT_SALES_COST
         , PROD_AMT - NEWCHANAMT - ((TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) - TBL.DEDUCTAMT)-TBL.DEDUCTAMT AS PROFIT
         , ( (PROD_AMT-TBL.NEWCHANAMT-TBL.DEDUCTAMT) +EVT_ADD_SALES)	- ( (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) + TBL.EVT_ADD_SALES_COST - TBL.DEDUCTAMT ) AS PROFIT2
         , TBL.EVT_PAY_AMT
         , TBL.EVT_PAY_AMT_CARD
         , TBL.EVT_PAY_AMT_CASH
         , TBL.CARD_FEE
         , 0 EVT_COST
         , TBL.CARD_AMT
         , TBL.DEDUCTAMT
         , TBL.NEWCHANAMT
         , TBL.SAVE_CL
         , TBL.AMT1
         , TBL.AMT2
         , TBL.AMT3
         , TBL.AMT4
         , TBL.CUSTMR_NM
          FROM (SELECT EVT.ACCNT_NO
                     , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                     , EVT.EVENT_COMP_DAY
                     , NVL(EVT.ETC_LOC_NM, ' ') LOC
                     , PROD.PROD_NM
                     , (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) CP_NM
                     , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                 , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                            THEN (SELECT FUNRL_NM
                                  FROM FUNRL_HALL
                                  WHERE FUNRL_CD = EVT.FUNRL_HALL)
                            ELSE CASE WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NULL OR EVT.ETC_ADDR2 = '')
                                      THEN ''
                                      WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NOT NULL AND EVT.ETC_ADDR2 != '')
                                      THEN NVL(EVT.ETC_ADDR2, ' ')
                                      ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                 END
                            END, ' ') AS EVENT_PLACE
                     , CASE WHEN NVL(PROD.PAY_TYPE, '0000') = '002'
                            THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                            ELSE PROD.PROD_AMT
                       END PROD_AMT
                     , NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0001' AND RPT_NO = FR.RPT_NO), 0) EVT_SALES_COST
                     , NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0002' AND RPT_NO = FR.RPT_NO), 0)
                       +
                       NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE RPT_NO = FR.RPT_NO), 0) EVT_ADD_SALES
                 , NVL((SELECT SUM(NVL(SALES_AMT, 0)) - SUM(NVL(MARGIN, 0)) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0002' AND RPT_NO = FR.RPT_NO), 0) EVT_ADD_SALES_COST
                     , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO), 0) EVT_PAY_AMT
                     , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO AND pay_opt='0002'), 0) EVT_PAY_AMT_CARD
                     , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO AND pay_opt='0003'), 0) EVT_PAY_AMT_CASH
                     , NVL((SELECT SUM(CARD_FEE) FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO), 0) CARD_FEE
                     , FR.TOT_COST_AMT
                      , FR.TOT_COST_AMT as EVT_COST
                     , NVL((SELECT SUM(AMT) FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO AND PAY_OPT = '0002'), 0) CARD_AMT
                     , FR.DEDUCT_AMT deductAmt
                     , ACCNT.NEW_CHAN_GUNSU * PROD.MON_PAY_AMT newChanAmt
                     , FN_COM_NM('0149', FR.SAVE_CL) SAVE_CL
                     , NVL(AMT.AMT1,0) AMT1
                 , NVL(AMT.AMT2,0) AMT2
                 , NVL(AMT.AMT3,0) AMT3
                 , NVL(AMT.AMT4,0) AMT4
                 , '' CUSTMR_NM
                  FROM EVENT EVT
                       INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
                       INNER JOIN PRODUCT PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                       INNER JOIN(
                           SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                             FROM EVENT_MNGR_REG
                            WHERE DEL_FG = 'N'
                              AND EVT_MNGR_GUBUN = '0001'
                           GROUP BY EVT_SEQ
                       ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                   INNER JOIN FUNRL_RPT FR ON EVT.SEQ = FR.SEQ AND FR.DEL_FG = 'N'
                       <if test="evt_gubun != null and evt_gubun != '' ">
                           AND FR.SAVE_CL = #{evt_gubun}
                       </if>
                   INNER JOIN
                             (
                              SELECT
                                   SEQ
                                  ,SUM(AMT1) AMT1
                                  ,SUM(AMT2) AMT2
                                  ,SUM(AMT3) AMT3
                                  ,SUM(AMT4) AMT4
                              FROM
                                  (
                                    SELECT
                                      SEQ
                                       , FRG.PAY_OPT
                                       , CASE WHEN FRG.PAY_OPT='0001' THEN AMT ELSE 0 END AMT1
                                       , CASE WHEN FRG.PAY_OPT='0002' THEN AMT ELSE 0 END AMT2
                                       , CASE WHEN FRG.PAY_OPT='0003' THEN AMT ELSE 0 END AMT3
                                       , CASE WHEN FRG.PAY_OPT='0004' THEN AMT ELSE 0 END AMT4
                                    FROM FUNRL_RPT FR
                                        INNER JOIN FUNRL_RPT_GOODS FRG ON FR.RPT_NO = FRG.RPT_NO AND FRG.DEL_FG='N'
                                    WHERE FR.DEL_FG='N'
                                    AND FRG.FRG_CL IS NOT NULL
                                      <if test="evt_gubun != null and evt_gubun != '' ">
                                       AND FR.SAVE_CL = #{evt_gubun}
                                    </if>
                                  ) TM
                              GROUP BY SEQ) AMT  ON AMT.SEQ=EVT.SEQ
                 WHERE EVT.DEL_FG = 'N'
                   AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                   <if test="prod_cd != null and prod_cd != '' ">
                       AND PROD.PROD_CD = #{prod_cd}
                   </if>
               ) TBL
          WHERE 1=1
          <if test="mngr_nm != null and mngr_nm != '' ">
                  AND TBL.CP_NM like '%' || #{mngr_nm} || '%'
          </if>
          <if test="mem_nm != null and mem_nm != '' ">
                  AND TBL.MEM_NM = #{mem_nm}
          </if>
          <if test="custmr_nm != null and custmr_nm != '' ">
                  AND TBL.CUSTMR_NM LIKE '%' || #{custmr_nm} || '%'
          </if>

        </if>

        <if test="iogbn == '0000' ">
        UNION ALL
        </if>

        <if test="iogbn == '0000' or iogbn == '0002' ">
         /* 외주 */
        SELECT TBL.ACCNT_NO
             , TBL.MEM_NM
             , TBL.EVENT_COMP_DAY
             , TBL.LOC
             , TBL.PROD_NM
             , TBL.CP_NM
             , TBL.BRANCH_NM
             , TBL.EVENT_PLACE
             , TBL.JI_DT
             , TBL.PROD_AMT
             , TBL.EVT_SALES_COST
             , TBL.EVT_ADD_SALES
             , TBL.EVT_ADD_SALES_COST
             , TBL.PROD_AMT + TBL.EVT_ADD_SALES - TBL.NEWCHANAMT - TBL.DEDUCTAMT TOT_EVT_SALES
             , TBL.EVT_SALES_COST + TBL.EVT_ADD_SALES_COST TOT_EVT_SALES_COST
             , (TBL.PROD_AMT - TBL.NEWCHANAMT) - (TBL.EVT_SALES_COST + TBL.EVT_ADD_SALES_COST)-TBL.DEDUCTAMT AS PROFIT
         , (TBL.PROD_AMT + TBL.EVT_ADD_SALES - TBL.NEWCHANAMT - TBL.DEDUCTAMT) - TBL.EVT_SALES_COST AS PROFIT2
             , TBL.EVT_PAY_AMT
             , TBL.EVT_PAY_AMT_CARD
             , TBL.EVT_PAY_AMT_CASH
             , TBL.CARD_FEE
             , 0 EVT_COST
             , TBL.CARD_AMT
             , TBL.DEDUCTAMT
         , TBL.NEWCHANAMT
         , TBL.SAVE_CL
         , 0 AMT1
         , 0 AMT2
         , 0 AMT3
         , 0 AMT4
         , TBL.CUSTMR_NM
          FROM (SELECT EVT.ACCNT_NO
                     , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                     , EVT.EVENT_COMP_DAY
                     , NVL(EVT.ETC_LOC_NM, '') LOC
                     , PROD.PROD_NM
                     , (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) CP_NM
                     , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                 , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                            THEN (SELECT FUNRL_NM
                                  FROM FUNRL_HALL
                                  WHERE FUNRL_CD = EVT.FUNRL_HALL)
                            ELSE CASE WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NULL OR EVT.ETC_ADDR2 = '')
                                      THEN ''
                                      WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NOT NULL AND EVT.ETC_ADDR2 != '')
                                      THEN NVL(EVT.ETC_ADDR2, ' ')
                                      ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                 END
                            END, ' ') AS EVENT_PLACE
                     , CASE WHEN NVL(PROD.PAY_TYPE, '0000') = '002'
                        THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                            ELSE PROD.PROD_AMT
                       END PROD_AMT
                     , NVL(FOM.OUTSRC_AMT, 0) EVT_COST
                     , NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT > 0)), 0)
                       +
                       NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0) EVT_ADD_SALES
                     , NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT > 0)), 0)
                       +
                       NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0) EVT_ADD_SALES_COST
                      , 0 EVT_PAY_AMT
                      , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO AND pay_opt='0002'), 0) EVT_PAY_AMT_CARD
                     , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO AND pay_opt='0003'), 0) EVT_PAY_AMT_CASH
                      , NVL((SELECT SUM(CARD_FEE) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO), 0) CARD_FEE
                      , FOM.TOT_EVT_COST_OUT EVT_SALES_COST
                      , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO AND PAY_OPT = '0002'), 0) CARD_AMT
                      , FOM.DEDUCT_AMT deductAmt
                      , ACCNT.NEW_CHAN_GUNSU * PROD.MON_PAY_AMT newChanAmt
                      , FN_COM_NM('0149', FOM.SAVE_CL) SAVE_CL
                      , CUSTMR.CUSTMR_NM
                      , FOM.JI_DT
                  FROM EVENT EVT
                       INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
                       INNER JOIN PRODUCT PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                       INNER JOIN(
                               SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                 FROM EVENT_MNGR_REG
                                WHERE DEL_FG = 'N'
                                  AND EVT_MNGR_GUBUN = '0001'
                               GROUP BY EVT_SEQ
                             ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                       INNER JOIN FUNRL_OUTSRC_MST FOM ON EVT.SEQ = FOM.SEQ AND FOM.DEL_FG = 'N'
                           <if test="evt_gubun != null and evt_gubun != '' ">
                               AND FOM.SAVE_CL = #{evt_gubun}
                           </if>
                       INNER JOIN CUSTMR_MNG CUSTMR ON CUSTMR.CUSTMR_CD = FOM.OUTSRC_CUSTMR_CD AND CUSTMR.DEL_FG = 'N' AND CUSTMR.CUSTMR_FG = '0002'
                 WHERE EVT.DEL_FG = 'N'
                   AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                   <if test="prod_cd != null and prod_cd != '' ">
                       AND PROD.PROD_CD = #{prod_cd}
                   </if>
                   <if test="custmr_nm != null and custmr_nm != '' ">
                       AND CUSTMR.CUSTMR_NM LIKE '%' || #{custmr_nm} || '%'
                   </if>
               ) TBL
          WHERE 1=1
          <if test="mngr_nm != null and mngr_nm != '' ">
                AND TBL.CP_NM like '%' || #{mngr_nm} || '%'
          </if>
          <if test="mem_nm != null and mem_nm != '' ">
                AND TBL.MEM_NM = #{mem_nm}
          </if>
          <if test="j_stt_dt != null and j_stt_dt != '' and j_end_dt != null and j_end_dt != ''">
                  AND NVL(TBL.JI_DT,'00000000') BETWEEN #{j_stt_dt} AND #{j_end_dt}
          </if>
        </if>

     ) EVT
     <!-- 2017.11.23  김찬영 MEM_NM 순서로 수정-->
     <!-- 2017.11.28  정승철 1순위(행사종료일) + 2순위(이름명) 오름차순 정렬 요청 : 김지연매니저 요청 -->
     ORDER BY EVT.EVENT_COMP_DAY, EVT.MEM_NM

    </select>

    <!-- 손익분석집계표 - 월별 -->
    <select id="DlwNewTypeEvntMap.getNewTypeBenefitList2" parameterType="map" resultType="resultMap">
		 /* DlwNewTypeEvntMap.getNewTypeBenefitList2 */
         SELECT    SUBSTR(TBL1.EVENT_COMP_DAY,1,4) || '-' || SUBSTR(TBL1.EVENT_COMP_DAY,5,2) EVENT_COMP_DAY
                 , COUNT(TBL1.ACCNT_NO) CNT
                 , NVL(SUM(TBL1.PROD_AMT), 0) PROD_AMT
                 , NVL(SUM(TBL1.EVT_SALES_COST), 0) EVT_SALES_COST
                 , NVL(SUM(TBL1.EVT_ADD_SALES), 0) EVT_ADD_SALES
                 , NVL(SUM(TBL1.EVT_ADD_SALES_COST), 0) EVT_ADD_SALES_COST
                 , NVL(SUM(TBL1.TOT_EVT_SALES), 0) TOT_EVT_SALES
                 , NVL(SUM(TBL1.TOT_EVT_SALES_COST), 0) TOT_EVT_SALES_COST
                 , NVL(SUM(TBL1.PROFIT), 0) PROFIT
                 , NVL(SUM(TBL1.PROFIT2), 0) PROFIT2
                 , CASE WHEN COUNT(TBL1.ACCNT_NO) = 0
                        THEN 0
                        ELSE NVL(SUM(TBL1.PROFIT), 0)/COUNT(TBL1.ACCNT_NO)
                   END PROFIT_PER_GUN
                 , NVL(SUM(TBL1.EVT_PAY_AMT_CARD), 0) EVT_PAY_AMT_CARD
                 , NVL(SUM(TBL1.EVT_PAY_AMT_CASH), 0) EVT_PAY_AMT_CASH
                 , NVL(SUM(TBL1.EVT_PAY_AMT), 0) EVT_PAY_AMT
                 , NVL(SUM(TBL1.CARD_FEE), 0) CARD_FEE
                 , NVL(SUM(TBL1.EVT_COST), 0) EVT_COST
                 , NVL(SUM(TBL1.CARD_AMT), 0) CARD_AMT
                 , NVL(SUM(TBL1.deductAmt), 0) deductAmt
                 , NVL(SUM(TBL1.newChanAmt), 0) newChanAmt
                 , NVL(SUM(TBL1.AMT1), 0) AMT1
                 , NVL(SUM(TBL1.AMT2), 0) AMT2
                 , NVL(SUM(TBL1.AMT3), 0) AMT3
                 , NVL(SUM(TBL1.AMT4), 0) AMT4
         FROM(
             /* 직영 */
            SELECT '0001' IOGBN
                 , SUBSTR(TBL.EVENT_COMP_DAY,1,6) EVENT_COMP_DAY
                 , TBL.ACCNT_NO
                 , TBL.PROD_AMT
                 , (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) - TBL.DEDUCTAMT EVT_SALES_COST
                 , TBL.EVT_ADD_SALES
                 , TBL.EVT_ADD_SALES_COST EVT_ADD_SALES_COST
                 , (PROD_AMT-TBL.NEWCHANAMT-TBL.DEDUCTAMT) + EVT_ADD_SALES AS TOT_EVT_SALES
                 , (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) + TBL.EVT_ADD_SALES_COST - TBL.DEDUCTAMT AS TOT_EVT_SALES_COST
                 , PROD_AMT - NEWCHANAMT - ((TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) - TBL.DEDUCTAMT)-TBL.DEDUCTAMT AS PROFIT
                 , ( (PROD_AMT-TBL.NEWCHANAMT-TBL.DEDUCTAMT) +EVT_ADD_SALES)	- ( (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) + TBL.EVT_ADD_SALES_COST - TBL.DEDUCTAMT ) AS PROFIT2
                 , TBL.EVT_PAY_AMT
                 , TBL.EVT_PAY_AMT_CARD
                 , TBL.EVT_PAY_AMT_CASH
                 , TBL.CARD_FEE
                 , TBL.EVT_COST
                 , TBL.CARD_AMT
                 , TBL.DEDUCTAMT
                 , TBL.NEWCHANAMT
                 , TBL.SAVE_CL
                 , TBL.AMT1
                 , TBL.AMT2
                 , TBL.AMT3
                 , TBL.AMT4
                  FROM (SELECT EVT.ACCNT_NO
                             , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                             , EVT.EVENT_COMP_DAY
                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                             , PROD.PROD_NM
                             , (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) CP_NM
                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                         , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                                    THEN (SELECT FUNRL_NM
                                          FROM FUNRL_HALL
                                          WHERE FUNRL_CD = EVT.FUNRL_HALL)
                                    ELSE CASE WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NULL OR EVT.ETC_ADDR2 = '')
                                              THEN ''
                                              WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NOT NULL AND EVT.ETC_ADDR2 != '')
                                              THEN NVL(EVT.ETC_ADDR2, ' ')
                                              ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                         END
                                    END, ' ') AS EVENT_PLACE
                             , CASE WHEN NVL(PROD.PAY_TYPE, '0000') = '002'
                                    THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                    ELSE PROD.PROD_AMT
                               END PROD_AMT
                             , NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0001' AND RPT_NO = FR.RPT_NO), 0) EVT_SALES_COST
                             , NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0002' AND RPT_NO = FR.RPT_NO), 0)
                               +
                               NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE RPT_NO = FR.RPT_NO), 0) EVT_ADD_SALES
                         , NVL((SELECT SUM(NVL(SALES_AMT, 0)) - SUM(NVL(MARGIN, 0)) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0002' AND RPT_NO = FR.RPT_NO), 0) EVT_ADD_SALES_COST
                             , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO), 0) EVT_PAY_AMT
                             , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO AND pay_opt='0002'), 0) EVT_PAY_AMT_CARD
                             , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO AND pay_opt='0003'), 0) EVT_PAY_AMT_CASH
                             , NVL((SELECT SUM(CARD_FEE) FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO), 0) CARD_FEE
                             , FR.TOT_COST_AMT
                              , FR.TOT_COST_AMT as EVT_COST
                             , NVL((SELECT SUM(AMT) FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO AND PAY_OPT = '0002'), 0) CARD_AMT
                             , FR.DEDUCT_AMT deductAmt
                             , ACCNT.NEW_CHAN_GUNSU * PROD.MON_PAY_AMT newChanAmt
                             , FN_COM_NM('0149', FR.SAVE_CL) SAVE_CL
                             , NVL(AMT.AMT1,0) AMT1
                         , NVL(AMT.AMT2,0) AMT2
                         , NVL(AMT.AMT3,0) AMT3
                         , NVL(AMT.AMT4,0) AMT4
                          FROM EVENT EVT
                               INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
                               INNER JOIN PRODUCT PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                               INNER JOIN(
                                   SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                     FROM EVENT_MNGR_REG
                                    WHERE DEL_FG = 'N'
                                      AND EVT_MNGR_GUBUN = '0001'
                                   GROUP BY EVT_SEQ
                               ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                           INNER JOIN FUNRL_RPT FR ON EVT.SEQ = FR.SEQ AND FR.DEL_FG = 'N'
                           <if test="evt_gubun != null and evt_gubun != '' ">
                               AND FR.SAVE_CL = #{evt_gubun}
                           </if>
                           INNER JOIN
                                     (
                                      SELECT
                                           SEQ
                                          ,SUM(AMT1) AMT1
                                          ,SUM(AMT2) AMT2
                                          ,SUM(AMT3) AMT3
                                          ,SUM(AMT4) AMT4
                                      FROM
                                          (
                                            SELECT
                                              SEQ
                                               , FRG.PAY_OPT
                                               , CASE WHEN FRG.PAY_OPT='0001' THEN AMT ELSE 0 END AMT1
                                               , CASE WHEN FRG.PAY_OPT='0002' THEN AMT ELSE 0 END AMT2
                                               , CASE WHEN FRG.PAY_OPT='0003' THEN AMT ELSE 0 END AMT3
                                               , CASE WHEN FRG.PAY_OPT='0004' THEN AMT ELSE 0 END AMT4
                                            FROM FUNRL_RPT FR
                                                INNER JOIN FUNRL_RPT_GOODS FRG ON FR.RPT_NO = FRG.RPT_NO AND FRG.DEL_FG='N'
                                            WHERE FR.DEL_FG='N'
                                            AND FRG.FRG_CL IS NOT NULL
                                          <if test="evt_gubun != null and evt_gubun != '' ">
                                           AND FR.SAVE_CL = #{evt_gubun}
                                          </if>
                                          ) TM
                                      GROUP BY SEQ) AMT  ON AMT.SEQ=EVT.SEQ
                         WHERE EVT.DEL_FG = 'N'
                           AND SUBSTR(EVT.EVENT_COMP_DAY,1,6) BETWEEN SUBSTR(#{stt_dt},1,6) AND SUBSTR(#{end_dt},1,6)
                           <if test="prod_cd != null and prod_cd != '' ">
                               AND PROD.PROD_CD = #{prod_cd}
                           </if>
                       ) TBL
                  WHERE 1=1


                UNION ALL



                 /* 외주 */
                SELECT
                   '0002' IOGBN
                 , SUBSTR(TBL.EVENT_COMP_DAY,1,6) EVENT_COMP_DAY
                 , TBL.ACCNT_NO
                 , TBL.PROD_AMT
                 , TBL.EVT_SALES_COST
                 , TBL.EVT_ADD_SALES
                 , TBL.EVT_ADD_SALES_COST
                 , TBL.PROD_AMT + TBL.EVT_ADD_SALES - TBL.NEWCHANAMT - TBL.DEDUCTAMT TOT_EVT_SALES
                 , TBL.EVT_SALES_COST + TBL.EVT_ADD_SALES_COST TOT_EVT_SALES_COST
                 , (TBL.PROD_AMT - TBL.NEWCHANAMT) - (TBL.EVT_SALES_COST + TBL.EVT_ADD_SALES_COST)-TBL.DEDUCTAMT AS PROFIT
                 , (TBL.PROD_AMT + TBL.EVT_ADD_SALES - TBL.NEWCHANAMT - TBL.DEDUCTAMT) - TBL.EVT_SALES_COST AS PROFIT2
                 , TBL.EVT_PAY_AMT
                 , TBL.EVT_PAY_AMT_CARD
                 , TBL.EVT_PAY_AMT_CASH
                 , TBL.CARD_FEE
                 , TBL.EVT_COST
                 , TBL.CARD_AMT
                 , TBL.DEDUCTAMT
                 , TBL.NEWCHANAMT
                 , TBL.SAVE_CL
                 , 0 AMT1
                 , 0 AMT2
                 , 0 AMT3
                 , 0 AMT4
                  FROM (SELECT EVT.ACCNT_NO
                             , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                             , EVT.EVENT_COMP_DAY
                             , NVL(EVT.ETC_LOC_NM, '') LOC
                             , PROD.PROD_NM
                             , (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) CP_NM
                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                         , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                                    THEN (SELECT FUNRL_NM
                                          FROM FUNRL_HALL
                                          WHERE FUNRL_CD = EVT.FUNRL_HALL)
                                    ELSE CASE WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NULL OR EVT.ETC_ADDR2 = '')
                                              THEN ''
                                              WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NOT NULL AND EVT.ETC_ADDR2 != '')
                                              THEN NVL(EVT.ETC_ADDR2, ' ')
                                              ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                         END
                                    END, ' ') AS EVENT_PLACE
                             , CASE WHEN NVL(PROD.PAY_TYPE, '0000') = '002'
                                THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                    ELSE PROD.PROD_AMT
                               END PROD_AMT
                             , NVL(FOM.TOT_EVT_COST_OUT, 0) EVT_COST
                             , NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT > 0)), 0)
                               +
                               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0) EVT_ADD_SALES
                             , NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT > 0)), 0)
                               +
                               NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0) EVT_ADD_SALES_COST
                              , 0 EVT_PAY_AMT
                              , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO AND pay_opt='0002'), 0) EVT_PAY_AMT_CARD
                             , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO AND pay_opt='0003'), 0) EVT_PAY_AMT_CASH
                              , NVL((SELECT SUM(CARD_FEE) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO), 0) CARD_FEE
                              , FOM.TOT_EVT_COST_OUT EVT_SALES_COST
                              , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO AND PAY_OPT = '0002'), 0) CARD_AMT
                              , FOM.DEDUCT_AMT deductAmt
                              , ACCNT.NEW_CHAN_GUNSU * PROD.MON_PAY_AMT newChanAmt
                              , FN_COM_NM('0149', FOM.SAVE_CL) SAVE_CL
                          FROM EVENT EVT
                               INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
                               INNER JOIN PRODUCT PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                               INNER JOIN(
                                       SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                         FROM EVENT_MNGR_REG
                                        WHERE DEL_FG = 'N'
                                          AND EVT_MNGR_GUBUN = '0001'
                                       GROUP BY EVT_SEQ
                                     ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                               INNER JOIN FUNRL_OUTSRC_MST FOM ON EVT.SEQ = FOM.SEQ AND FOM.DEL_FG = 'N'
                               <if test="evt_gubun != null and evt_gubun != '' ">
                                   AND FOM.SAVE_CL = #{evt_gubun}
                               </if>
                         WHERE EVT.DEL_FG = 'N'
                           AND SUBSTR(EVT.EVENT_COMP_DAY,1,6) BETWEEN SUBSTR(#{stt_dt},1,6) AND SUBSTR(#{end_dt},1,6)
                           <if test="prod_cd != null and prod_cd != '' ">
                               AND PROD.PROD_CD = #{prod_cd}
                           </if>
                       ) TBL
                  WHERE 1=1
            ) TBL1
        <if test="iogbn == '0001' or iogbn == '0002' ">
        WHERE IOGBN = #{iogbn}
        </if>
        GROUP BY TBL1.EVENT_COMP_DAY
        ORDER BY TBL1.EVENT_COMP_DAY
    </select>

    <!-- 손익분석집계표 - 지부별 -->
    <select id="DlwNewTypeEvntMap.getNewTypeBenefitList3" parameterType="map" resultType="resultMap">
         /* DlwNewTypeEvntMap.getNewTypeBenefitList3 */
         SELECT    TBL1.BRANCH_NM
                 , COUNT(TBL1.ACCNT_NO) CNT
                 , NVL(SUM(TBL1.PROD_AMT), 0) PROD_AMT
                 , NVL(SUM(TBL1.EVT_SALES_COST), 0) EVT_SALES_COST
                 , NVL(SUM(TBL1.EVT_ADD_SALES), 0) EVT_ADD_SALES
                 , NVL(SUM(TBL1.EVT_ADD_SALES_COST), 0) EVT_ADD_SALES_COST
                 , NVL(SUM(TBL1.TOT_EVT_SALES), 0) TOT_EVT_SALES
                 , NVL(SUM(TBL1.TOT_EVT_SALES_COST), 0) TOT_EVT_SALES_COST
                 , NVL(SUM(TBL1.PROFIT), 0) PROFIT
                 , NVL(SUM(TBL1.PROFIT2), 0) PROFIT2
                 , CASE WHEN COUNT(TBL1.ACCNT_NO) = 0
                        THEN 0
                        ELSE NVL(SUM(TBL1.PROFIT), 0)/COUNT(TBL1.ACCNT_NO)
                   END PROFIT_PER_GUN
                 , NVL(SUM(TBL1.EVT_PAY_AMT_CARD), 0) EVT_PAY_AMT_CARD
                 , NVL(SUM(TBL1.EVT_PAY_AMT_CASH), 0) EVT_PAY_AMT_CASH
                 , NVL(SUM(TBL1.EVT_PAY_AMT), 0) EVT_PAY_AMT
                 , NVL(SUM(TBL1.CARD_FEE), 0) CARD_FEE
                 , NVL(SUM(TBL1.EVT_COST), 0) EVT_COST
                 , NVL(SUM(TBL1.CARD_AMT), 0) CARD_AMT
                 , NVL(SUM(TBL1.deductAmt), 0) deductAmt
                 , NVL(SUM(TBL1.newChanAmt), 0) newChanAmt
                 , NVL(SUM(TBL1.AMT1), 0) AMT1
                 , NVL(SUM(TBL1.AMT2), 0) AMT2
                 , NVL(SUM(TBL1.AMT3), 0) AMT3
                 , NVL(SUM(TBL1.AMT4), 0) AMT4
         FROM(
             /* 직영 */
            SELECT '0001' IOGBN
                 , TBL.BRANCH_NM
                 , TBL.ACCNT_NO
                 , TBL.PROD_AMT
                 , (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) - TBL.DEDUCTAMT EVT_SALES_COST
                 , TBL.EVT_ADD_SALES
                 , TBL.EVT_ADD_SALES_COST EVT_ADD_SALES_COST
                 , (PROD_AMT-TBL.NEWCHANAMT-TBL.DEDUCTAMT) + EVT_ADD_SALES AS TOT_EVT_SALES
                 , (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) + TBL.EVT_ADD_SALES_COST - TBL.DEDUCTAMT AS TOT_EVT_SALES_COST
                 , PROD_AMT - NEWCHANAMT - ((TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) - TBL.DEDUCTAMT)-TBL.DEDUCTAMT AS PROFIT
                 , ( (PROD_AMT-TBL.NEWCHANAMT-TBL.DEDUCTAMT) +EVT_ADD_SALES)	- ( (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) + TBL.EVT_ADD_SALES_COST - TBL.DEDUCTAMT ) AS PROFIT2
                 , TBL.EVT_PAY_AMT
                 , TBL.EVT_PAY_AMT_CARD
                 , TBL.EVT_PAY_AMT_CASH
                 , TBL.CARD_FEE
                 , TBL.EVT_COST
                 , TBL.CARD_AMT
                 , TBL.DEDUCTAMT
                 , TBL.NEWCHANAMT
                 , TBL.SAVE_CL
                 , TBL.AMT1
                 , TBL.AMT2
                 , TBL.AMT3
                 , TBL.AMT4
                  FROM (SELECT EVT.ACCNT_NO
                             , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                             , EVT.EVENT_COMP_DAY
                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                             , PROD.PROD_NM
                             , (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) CP_NM
                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                         , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                                    THEN (SELECT FUNRL_NM
                                          FROM FUNRL_HALL
                                          WHERE FUNRL_CD = EVT.FUNRL_HALL)
                                    ELSE CASE WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NULL OR EVT.ETC_ADDR2 = '')
                                              THEN ''
                                              WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NOT NULL AND EVT.ETC_ADDR2 != '')
                                              THEN NVL(EVT.ETC_ADDR2, ' ')
                                              ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                         END
                                    END, ' ') AS EVENT_PLACE
                             , CASE WHEN NVL(PROD.PAY_TYPE, '0000') = '002'
                                    THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                    ELSE PROD.PROD_AMT
                               END PROD_AMT
                             , NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0001' AND RPT_NO = FR.RPT_NO), 0) EVT_SALES_COST
                             , NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0002' AND RPT_NO = FR.RPT_NO), 0)
                               +
                               NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE RPT_NO = FR.RPT_NO), 0) EVT_ADD_SALES
                         , NVL((SELECT SUM(NVL(SALES_AMT, 0)) - SUM(NVL(MARGIN, 0)) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0002' AND RPT_NO = FR.RPT_NO), 0) EVT_ADD_SALES_COST
                             , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO), 0) EVT_PAY_AMT
                             , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO AND pay_opt='0002'), 0) EVT_PAY_AMT_CARD
                             , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO AND pay_opt='0003'), 0) EVT_PAY_AMT_CASH
                             , NVL((SELECT SUM(CARD_FEE) FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO), 0) CARD_FEE
                             , FR.TOT_COST_AMT
                              , FR.TOT_COST_AMT as EVT_COST
                             , NVL((SELECT SUM(AMT) FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO AND PAY_OPT = '0002'), 0) CARD_AMT
                             , FR.DEDUCT_AMT deductAmt
                             , ACCNT.NEW_CHAN_GUNSU * PROD.MON_PAY_AMT newChanAmt
                             , FN_COM_NM('0149', FR.SAVE_CL) SAVE_CL
                             , NVL(AMT.AMT1,0) AMT1
                         , NVL(AMT.AMT2,0) AMT2
                         , NVL(AMT.AMT3,0) AMT3
                         , NVL(AMT.AMT4,0) AMT4
                          FROM EVENT EVT
                               INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
                               INNER JOIN PRODUCT PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                               INNER JOIN(
                                   SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                     FROM EVENT_MNGR_REG
                                    WHERE DEL_FG = 'N'
                                      AND EVT_MNGR_GUBUN = '0001'
                                   GROUP BY EVT_SEQ
                               ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                           INNER JOIN FUNRL_RPT FR ON EVT.SEQ = FR.SEQ AND FR.DEL_FG = 'N'
                           <if test="evt_gubun != null and evt_gubun != '' ">
                               AND FR.SAVE_CL = #{evt_gubun}
                           </if>
                           INNER JOIN
                                     (
                                      SELECT
                                           SEQ
                                          ,SUM(AMT1) AMT1
                                          ,SUM(AMT2) AMT2
                                          ,SUM(AMT3) AMT3
                                          ,SUM(AMT4) AMT4
                                      FROM
                                          (
                                            SELECT
                                              SEQ
                                               , FRG.PAY_OPT
                                               , CASE WHEN FRG.PAY_OPT='0001' THEN AMT ELSE 0 END AMT1
                                               , CASE WHEN FRG.PAY_OPT='0002' THEN AMT ELSE 0 END AMT2
                                               , CASE WHEN FRG.PAY_OPT='0003' THEN AMT ELSE 0 END AMT3
                                               , CASE WHEN FRG.PAY_OPT='0004' THEN AMT ELSE 0 END AMT4
                                            FROM FUNRL_RPT FR
                                                INNER JOIN FUNRL_RPT_GOODS FRG ON FR.RPT_NO = FRG.RPT_NO AND FRG.DEL_FG='N'
                                            WHERE FR.DEL_FG='N'
                                            AND FRG.FRG_CL IS NOT NULL
                                          <if test="evt_gubun != null and evt_gubun != '' ">
                                           AND FR.SAVE_CL = #{evt_gubun}
                                          </if>
                                          ) TM
                                      GROUP BY SEQ) AMT  ON AMT.SEQ=EVT.SEQ
                         WHERE EVT.DEL_FG = 'N'
                           AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                           <if test="prod_cd != null and prod_cd != '' ">
                               AND PROD.PROD_CD = #{prod_cd}
                           </if>
                       ) TBL
                  WHERE 1=1


                UNION ALL



                 /* 외주 */
                SELECT
                   '0002' IOGBN
                 , TBL.BRANCH_NM
                 , TBL.ACCNT_NO
                 , TBL.PROD_AMT
                 , TBL.EVT_SALES_COST
                 , TBL.EVT_ADD_SALES
                 , TBL.EVT_ADD_SALES_COST
                 , TBL.PROD_AMT + TBL.EVT_ADD_SALES - TBL.NEWCHANAMT - TBL.DEDUCTAMT TOT_EVT_SALES
                 , TBL.EVT_SALES_COST + TBL.EVT_ADD_SALES_COST TOT_EVT_SALES_COST
                 , (TBL.PROD_AMT - TBL.NEWCHANAMT) - (TBL.EVT_SALES_COST + TBL.EVT_ADD_SALES_COST)-TBL.DEDUCTAMT AS PROFIT
                 , (TBL.PROD_AMT + TBL.EVT_ADD_SALES - TBL.NEWCHANAMT - TBL.DEDUCTAMT) - TBL.EVT_SALES_COST AS PROFIT2
                 , TBL.EVT_PAY_AMT
                 , TBL.EVT_PAY_AMT_CARD
                 , TBL.EVT_PAY_AMT_CASH
                 , TBL.CARD_FEE
                 , TBL.EVT_COST
                 , TBL.CARD_AMT
                 , TBL.DEDUCTAMT
                 , TBL.NEWCHANAMT
                 , TBL.SAVE_CL
                 , 0 AMT1
                 , 0 AMT2
                 , 0 AMT3
                 , 0 AMT4
                  FROM (SELECT EVT.ACCNT_NO
                             , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                             , EVT.EVENT_COMP_DAY
                             , NVL(EVT.ETC_LOC_NM, '') LOC
                             , PROD.PROD_NM
                             , (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) CP_NM
                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                         , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                                    THEN (SELECT FUNRL_NM
                                          FROM FUNRL_HALL
                                          WHERE FUNRL_CD = EVT.FUNRL_HALL)
                                    ELSE CASE WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NULL OR EVT.ETC_ADDR2 = '')
                                              THEN ''
                                              WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NOT NULL AND EVT.ETC_ADDR2 != '')
                                              THEN NVL(EVT.ETC_ADDR2, ' ')
                                              ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                         END
                                    END, ' ') AS EVENT_PLACE
                             , CASE WHEN NVL(PROD.PAY_TYPE, '0000') = '002'
                                THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                    ELSE PROD.PROD_AMT
                               END PROD_AMT
                             , NVL(FOM.TOT_EVT_COST_OUT, 0) EVT_COST
                             , NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT > 0)), 0)
                               +
                               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0) EVT_ADD_SALES
                             , NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT > 0)), 0)
                               +
                               NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0) EVT_ADD_SALES_COST
                              , 0 EVT_PAY_AMT
                              , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO AND pay_opt='0002'), 0) EVT_PAY_AMT_CARD
                             , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO AND pay_opt='0003'), 0) EVT_PAY_AMT_CASH
                              , NVL((SELECT SUM(CARD_FEE) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO), 0) CARD_FEE
                              , FOM.TOT_EVT_COST_OUT EVT_SALES_COST
                              , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO AND PAY_OPT = '0002'), 0) CARD_AMT
                              , FOM.DEDUCT_AMT deductAmt
                              , ACCNT.NEW_CHAN_GUNSU * PROD.MON_PAY_AMT newChanAmt
                              , FN_COM_NM('0149', FOM.SAVE_CL) SAVE_CL
                          FROM EVENT EVT
                               INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
                               INNER JOIN PRODUCT PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                               INNER JOIN(
                                       SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                         FROM EVENT_MNGR_REG
                                        WHERE DEL_FG = 'N'
                                          AND EVT_MNGR_GUBUN = '0001'
                                       GROUP BY EVT_SEQ
                                     ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                               INNER JOIN FUNRL_OUTSRC_MST FOM ON EVT.SEQ = FOM.SEQ AND FOM.DEL_FG = 'N'
                               <if test="evt_gubun != null and evt_gubun != '' ">
                                   AND FOM.SAVE_CL = #{evt_gubun}
                               </if>
                         WHERE EVT.DEL_FG = 'N'
                           AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                           <if test="prod_cd != null and prod_cd != '' ">
                               AND PROD.PROD_CD = #{prod_cd}
                           </if>
                       ) TBL
                  WHERE 1=1
            ) TBL1
        <if test="iogbn == '0001' or iogbn == '0002' ">
        WHERE IOGBN = #{iogbn}
        </if>
        GROUP BY TBL1.BRANCH_NM
        ORDER BY TBL1.BRANCH_NM
    </select>

    <!-- 손익분석집계표 - CP별 -->
    <select id="DlwNewTypeEvntMap.getNewTypeBenefitList4" parameterType="map" resultType="resultMap">
         /* DlwNewTypeEvntMap.getNewTypeBenefitList4 */
         SELECT    TBL1.CP_NM
                 , COUNT(TBL1.ACCNT_NO) CNT
                 , NVL(SUM(TBL1.PROD_AMT), 0) PROD_AMT
                 , NVL(SUM(TBL1.EVT_SALES_COST), 0) EVT_SALES_COST
                 , NVL(SUM(TBL1.EVT_ADD_SALES), 0) EVT_ADD_SALES
                 , NVL(SUM(TBL1.EVT_ADD_SALES_COST), 0) EVT_ADD_SALES_COST
                 , NVL(SUM(TBL1.TOT_EVT_SALES), 0) TOT_EVT_SALES
                 , NVL(SUM(TBL1.TOT_EVT_SALES_COST), 0) TOT_EVT_SALES_COST
                 , NVL(SUM(TBL1.PROFIT), 0) PROFIT
                 , NVL(SUM(TBL1.PROFIT2), 0) PROFIT2
                 , CASE WHEN COUNT(TBL1.ACCNT_NO) = 0
                        THEN 0
                        ELSE NVL(SUM(TBL1.PROFIT), 0)/COUNT(TBL1.ACCNT_NO)
                   END PROFIT_PER_GUN
                 , NVL(SUM(TBL1.EVT_PAY_AMT_CARD), 0) EVT_PAY_AMT_CARD
                 , NVL(SUM(TBL1.EVT_PAY_AMT_CASH), 0) EVT_PAY_AMT_CASH
                 , NVL(SUM(TBL1.EVT_PAY_AMT), 0) EVT_PAY_AMT
                 , NVL(SUM(TBL1.CARD_FEE), 0) CARD_FEE
                 , NVL(SUM(TBL1.EVT_COST), 0) EVT_COST
                 , NVL(SUM(TBL1.CARD_AMT), 0) CARD_AMT
                 , NVL(SUM(TBL1.deductAmt), 0) deductAmt
                 , NVL(SUM(TBL1.newChanAmt), 0) newChanAmt
                 , NVL(SUM(TBL1.AMT1), 0) AMT1
                 , NVL(SUM(TBL1.AMT2), 0) AMT2
                 , NVL(SUM(TBL1.AMT3), 0) AMT3
                 , NVL(SUM(TBL1.AMT4), 0) AMT4
         FROM(
             /* 직영 */
            SELECT '0001' IOGBN
                 , TBL.CP_NM
                 , TBL.ACCNT_NO
                 , TBL.PROD_AMT
                 , (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) - TBL.DEDUCTAMT EVT_SALES_COST
                 , TBL.EVT_ADD_SALES
                 , TBL.EVT_ADD_SALES_COST EVT_ADD_SALES_COST
                 , (PROD_AMT-TBL.NEWCHANAMT-TBL.DEDUCTAMT) + EVT_ADD_SALES AS TOT_EVT_SALES
                 , (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) + TBL.EVT_ADD_SALES_COST - TBL.DEDUCTAMT AS TOT_EVT_SALES_COST
                 , PROD_AMT - NEWCHANAMT - ((TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) - TBL.DEDUCTAMT)-TBL.DEDUCTAMT AS PROFIT
                 , ( (PROD_AMT-TBL.NEWCHANAMT-TBL.DEDUCTAMT) +EVT_ADD_SALES)	- ( (TBL.TOT_COST_AMT - TBL.EVT_ADD_SALES_COST) + TBL.EVT_ADD_SALES_COST - TBL.DEDUCTAMT ) AS PROFIT2
                 , TBL.EVT_PAY_AMT
                 , TBL.EVT_PAY_AMT_CARD
                 , TBL.EVT_PAY_AMT_CASH
                 , TBL.CARD_FEE
                 , TBL.EVT_COST
                 , TBL.CARD_AMT
                 , TBL.DEDUCTAMT
                 , TBL.NEWCHANAMT
                 , TBL.SAVE_CL
                 , TBL.AMT1
                 , TBL.AMT2
                 , TBL.AMT3
                 , TBL.AMT4
                  FROM (SELECT EVT.ACCNT_NO
                             , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                             , EVT.EVENT_COMP_DAY
                             , NVL(EVT.ETC_LOC_NM, ' ') LOC
                             , PROD.PROD_NM
                             , (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) CP_NM
                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                         , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                                    THEN (SELECT FUNRL_NM
                                          FROM FUNRL_HALL
                                          WHERE FUNRL_CD = EVT.FUNRL_HALL)
                                    ELSE CASE WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NULL OR EVT.ETC_ADDR2 = '')
                                              THEN ''
                                              WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NOT NULL AND EVT.ETC_ADDR2 != '')
                                              THEN NVL(EVT.ETC_ADDR2, ' ')
                                              ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                         END
                                    END, ' ') AS EVENT_PLACE
                             , CASE WHEN NVL(PROD.PAY_TYPE, '0000') = '002'
                                    THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                    ELSE PROD.PROD_AMT
                               END PROD_AMT
                             , NVL((SELECT SUM(AMT) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0001' AND RPT_NO = FR.RPT_NO), 0) EVT_SALES_COST
                             , NVL((SELECT SUM(SALES_AMT) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0002' AND RPT_NO = FR.RPT_NO), 0)
                               +
                               NVL((SELECT SUM(MARGIN) FROM FUNRL_RPT_SALES2 WHERE RPT_NO = FR.RPT_NO), 0) EVT_ADD_SALES
                         , NVL((SELECT SUM(NVL(SALES_AMT, 0)) - SUM(NVL(MARGIN, 0)) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND GDS_CL = '0002' AND RPT_NO = FR.RPT_NO), 0) EVT_ADD_SALES_COST
                             , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO), 0) EVT_PAY_AMT
                             , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO AND pay_opt='0002'), 0) EVT_PAY_AMT_CARD
                             , NVL((SELECT SUM(AMT) FROM FUNRL_PRT_COST WHERE DEL_FG = 'N' AND RPT_NO = FR.RPT_NO AND pay_opt='0003'), 0) EVT_PAY_AMT_CASH
                             , NVL((SELECT SUM(CARD_FEE) FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO), 0) CARD_FEE
                             , FR.TOT_COST_AMT
                              , FR.TOT_COST_AMT as EVT_COST
                             , NVL((SELECT SUM(AMT) FROM FUNRL_RPT_PAYMENT WHERE RPT_NO = FR.RPT_NO AND PAY_OPT = '0002'), 0) CARD_AMT
                             , FR.DEDUCT_AMT deductAmt
                             , ACCNT.NEW_CHAN_GUNSU * PROD.MON_PAY_AMT newChanAmt
                             , FN_COM_NM('0149', FR.SAVE_CL) SAVE_CL
                             , NVL(AMT.AMT1,0) AMT1
                         , NVL(AMT.AMT2,0) AMT2
                         , NVL(AMT.AMT3,0) AMT3
                         , NVL(AMT.AMT4,0) AMT4
                          FROM EVENT EVT
                               INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
                               INNER JOIN PRODUCT PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                               INNER JOIN(
                                   SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                     FROM EVENT_MNGR_REG
                                    WHERE DEL_FG = 'N'
                                      AND EVT_MNGR_GUBUN = '0001'
                                   GROUP BY EVT_SEQ
                               ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                           INNER JOIN FUNRL_RPT FR ON EVT.SEQ = FR.SEQ AND FR.DEL_FG = 'N'
                           <if test="evt_gubun != null and evt_gubun != '' ">
                               AND FR.SAVE_CL = #{evt_gubun}
                           </if>
                           INNER JOIN
                                     (
                                      SELECT
                                           SEQ
                                          ,SUM(AMT1) AMT1
                                          ,SUM(AMT2) AMT2
                                          ,SUM(AMT3) AMT3
                                          ,SUM(AMT4) AMT4
                                      FROM
                                          (
                                            SELECT
                                              SEQ
                                               , FRG.PAY_OPT
                                               , CASE WHEN FRG.PAY_OPT='0001' THEN AMT ELSE 0 END AMT1
                                               , CASE WHEN FRG.PAY_OPT='0002' THEN AMT ELSE 0 END AMT2
                                               , CASE WHEN FRG.PAY_OPT='0003' THEN AMT ELSE 0 END AMT3
                                               , CASE WHEN FRG.PAY_OPT='0004' THEN AMT ELSE 0 END AMT4
                                            FROM FUNRL_RPT FR
                                                INNER JOIN FUNRL_RPT_GOODS FRG ON FR.RPT_NO = FRG.RPT_NO AND FRG.DEL_FG='N'
                                            WHERE FR.DEL_FG='N'
                                            AND FRG.FRG_CL IS NOT NULL
                                          <if test="evt_gubun != null and evt_gubun != '' ">
                                           AND FR.SAVE_CL = #{evt_gubun}
                                          </if>
                                          ) TM
                                      GROUP BY SEQ) AMT  ON AMT.SEQ=EVT.SEQ
                         WHERE EVT.DEL_FG = 'N'
                           AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                           <if test="prod_cd != null and prod_cd != '' ">
                               AND PROD.PROD_CD = #{prod_cd}
                           </if>
                       ) TBL
                  WHERE 1=1


                UNION ALL



                 /* 외주 */
                SELECT
                   '0002' IOGBN
                 , TBL.CP_NM
                 , TBL.ACCNT_NO
                 , TBL.PROD_AMT
                 , TBL.EVT_SALES_COST
                 , TBL.EVT_ADD_SALES
                 , TBL.EVT_ADD_SALES_COST
                 , TBL.PROD_AMT + TBL.EVT_ADD_SALES - TBL.NEWCHANAMT - TBL.DEDUCTAMT TOT_EVT_SALES
                 , TBL.EVT_SALES_COST + TBL.EVT_ADD_SALES_COST TOT_EVT_SALES_COST
                 , (TBL.PROD_AMT - TBL.NEWCHANAMT) - (TBL.EVT_SALES_COST + TBL.EVT_ADD_SALES_COST)-TBL.DEDUCTAMT AS PROFIT
                 , (TBL.PROD_AMT + TBL.EVT_ADD_SALES - TBL.NEWCHANAMT - TBL.DEDUCTAMT) - TBL.EVT_SALES_COST AS PROFIT2
                     , TBL.EVT_PAY_AMT
                     , TBL.EVT_PAY_AMT_CARD
                     , TBL.EVT_PAY_AMT_CASH
                     , TBL.CARD_FEE
                     , TBL.EVT_COST
                     , TBL.CARD_AMT
                     , TBL.DEDUCTAMT
                 , TBL.NEWCHANAMT
                 , TBL.SAVE_CL
                 , 0 AMT1
                 , 0 AMT2
                 , 0 AMT3
                 , 0 AMT4
                  FROM (SELECT EVT.ACCNT_NO
                             , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                             , EVT.EVENT_COMP_DAY
                             , NVL(EVT.ETC_LOC_NM, '') LOC
                             , PROD.PROD_NM
                             , (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) CP_NM
                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                         , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                                    THEN (SELECT FUNRL_NM
                                          FROM FUNRL_HALL
                                          WHERE FUNRL_CD = EVT.FUNRL_HALL)
                                    ELSE CASE WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NULL OR EVT.ETC_ADDR2 = '')
                                              THEN ''
                                              WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NOT NULL AND EVT.ETC_ADDR2 != '')
                                              THEN NVL(EVT.ETC_ADDR2, ' ')
                                              ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                         END
                                    END, ' ') AS EVENT_PLACE
                             , CASE WHEN NVL(PROD.PAY_TYPE, '0000') = '002'
                                THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                    ELSE PROD.PROD_AMT
                               END PROD_AMT
                             , NVL(FOM.TOT_EVT_COST_OUT, 0) EVT_COST
                             , NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT > 0)), 0)
                               +
                               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0) EVT_ADD_SALES
                             , NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT > 0)), 0)
                               +
                               NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0) EVT_ADD_SALES_COST
                              , 0 EVT_PAY_AMT
                              , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO AND pay_opt='0002'), 0) EVT_PAY_AMT_CARD
                             , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO AND pay_opt='0003'), 0) EVT_PAY_AMT_CASH
                              , NVL((SELECT SUM(CARD_FEE) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO), 0) CARD_FEE
                              , FOM.TOT_EVT_COST_OUT EVT_SALES_COST
                              , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO AND PAY_OPT = '0002'), 0) CARD_AMT
                              , FOM.DEDUCT_AMT deductAmt
                              , ACCNT.NEW_CHAN_GUNSU * PROD.MON_PAY_AMT newChanAmt
                              , FN_COM_NM('0149', FOM.SAVE_CL) SAVE_CL
                          FROM EVENT EVT
                               INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
                               INNER JOIN PRODUCT PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                               INNER JOIN(
                                       SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                         FROM EVENT_MNGR_REG
                                        WHERE DEL_FG = 'N'
                                          AND EVT_MNGR_GUBUN = '0001'
                                       GROUP BY EVT_SEQ
                                     ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                               INNER JOIN FUNRL_OUTSRC_MST FOM ON EVT.SEQ = FOM.SEQ AND FOM.DEL_FG = 'N'
                               <if test="evt_gubun != null and evt_gubun != '' ">
                                   AND FOM.SAVE_CL = #{evt_gubun}
                               </if>
                         WHERE EVT.DEL_FG = 'N'
                           AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                           <if test="prod_cd != null and prod_cd != '' ">
                               AND PROD.PROD_CD = #{prod_cd}
                           </if>
                       ) TBL
                  WHERE 1=1
            ) TBL1
        WHERE 1=1
        <if test="iogbn == '0001' or iogbn == '0002' ">
            AND IOGBN = #{iogbn}
        </if>
        <if test="mngr_nm != null and mngr_nm != '' ">
            AND TBL1.CP_NM like '%' || #{mngr_nm} || '%'
        </if>

        GROUP BY TBL1.CP_NM
        ORDER BY TBL1.CP_NM
    </select>

    <!-- 손익분석집계표 - 외주업체별 -->
    <select id="DlwNewTypeEvntMap.getNewTypeBenefitList5" parameterType="map" resultType="resultMap">
         /* DlwNewTypeEvntMap.getNewTypeBenefitList5 */
         SELECT    TBL1.CUSTMR_NM
                 , COUNT(TBL1.ACCNT_NO) CNT
                 , NVL(SUM(TBL1.PROD_AMT), 0) PROD_AMT
                 , NVL(SUM(TBL1.EVT_SALES_COST), 0) EVT_SALES_COST
                 , NVL(SUM(TBL1.EVT_ADD_SALES), 0) EVT_ADD_SALES
                 , NVL(SUM(TBL1.EVT_ADD_SALES_COST), 0) EVT_ADD_SALES_COST
                 , NVL(SUM(TBL1.TOT_EVT_SALES), 0) TOT_EVT_SALES
                 , NVL(SUM(TBL1.TOT_EVT_SALES_COST), 0) TOT_EVT_SALES_COST
                 , NVL(SUM(TBL1.PROFIT), 0) PROFIT
                 , NVL(SUM(TBL1.PROFIT2), 0) PROFIT2
                 , CASE WHEN COUNT(TBL1.ACCNT_NO) = 0
                        THEN 0
                        ELSE NVL(SUM(TBL1.PROFIT), 0)/COUNT(TBL1.ACCNT_NO)
                   END PROFIT_PER_GUN
                 , NVL(SUM(TBL1.EVT_PAY_AMT_CARD), 0) EVT_PAY_AMT_CARD
                 , NVL(SUM(TBL1.EVT_PAY_AMT_CASH), 0) EVT_PAY_AMT_CASH
                 , NVL(SUM(TBL1.EVT_PAY_AMT), 0) EVT_PAY_AMT
                 , NVL(SUM(TBL1.CARD_FEE), 0) CARD_FEE
                 , NVL(SUM(TBL1.EVT_COST), 0) EVT_COST
                 , NVL(SUM(TBL1.CARD_AMT), 0) CARD_AMT
                 , NVL(SUM(TBL1.deductAmt), 0) deductAmt
                 , NVL(SUM(TBL1.newChanAmt), 0) newChanAmt
                 , NVL(SUM(TBL1.AMT1), 0) AMT1
                 , NVL(SUM(TBL1.AMT2), 0) AMT2
                 , NVL(SUM(TBL1.AMT3), 0) AMT3
                 , NVL(SUM(TBL1.AMT4), 0) AMT4
         FROM(
                 /* 외주 */
                SELECT
                   '0002' IOGBN
                 , TBL.CUSTMR_NM
                 , TBL.ACCNT_NO
                 , TBL.PROD_AMT
                 , TBL.EVT_SALES_COST
                 , TBL.EVT_ADD_SALES
                 , TBL.EVT_ADD_SALES_COST
                 , TBL.PROD_AMT + TBL.EVT_ADD_SALES - TBL.NEWCHANAMT - TBL.DEDUCTAMT TOT_EVT_SALES
                 , TBL.EVT_SALES_COST + TBL.EVT_ADD_SALES_COST TOT_EVT_SALES_COST
                 , (TBL.PROD_AMT - TBL.NEWCHANAMT) - (TBL.EVT_SALES_COST + TBL.EVT_ADD_SALES_COST)-TBL.DEDUCTAMT AS PROFIT
                 , (TBL.PROD_AMT + TBL.EVT_ADD_SALES - TBL.NEWCHANAMT - TBL.DEDUCTAMT) - TBL.EVT_SALES_COST AS PROFIT2
                 , TBL.EVT_PAY_AMT
                 , TBL.EVT_PAY_AMT_CARD
                 , TBL.EVT_PAY_AMT_CASH
                 , TBL.CARD_FEE
                 , TBL.EVT_COST
                 , TBL.CARD_AMT
                 , TBL.DEDUCTAMT
                 , TBL.NEWCHANAMT
                 , TBL.SAVE_CL
                 , 0 AMT1
                 , 0 AMT2
                 , 0 AMT3
                 , 0 AMT4
                  FROM (SELECT EVT.ACCNT_NO
                             , FN_MEM_NM(ACCNT.MEM_NO) MEM_NM
                             , EVT.EVENT_COMP_DAY
                             , NVL(EVT.ETC_LOC_NM, '') LOC
                             , PROD.PROD_NM
                             , (SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD) CP_NM
                             , NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = EMR.EVT_MNGR_CD)), ' ') BRANCH_NM
                             , NVL(CASE WHEN EVT.EVENT_PLACE_CL = '0001'
                                        THEN (SELECT FUNRL_NM
                                              FROM FUNRL_HALL
                                              WHERE FUNRL_CD = EVT.FUNRL_HALL)
                                        ELSE CASE WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NULL OR EVT.ETC_ADDR2 = '')
                                                  THEN ''
                                                  WHEN (EVT.ETC_ZIP IS NULL OR EVT.ETC_ZIP = '') AND (EVT.ETC_ADDR2 IS NOT NULL AND EVT.ETC_ADDR2 != '')
                                                  THEN NVL(EVT.ETC_ADDR2, ' ')
                                                  ELSE NVL(EVT.ETC_ZIP, ' ') || ')' || NVL(EVT.ETC_ADDR1, ' ') || ' ' || NVL(EVT.ETC_ADDR2, ' ')
                                             END
                                        END, ' ') AS EVENT_PLACE
                             , CUSTMR.CUSTMR_NM
                             , CASE WHEN NVL(PROD.PAY_TYPE, '0000') = '002'
                                THEN (SELECT SUM((END_NO - ST_NO + 1) * (MONTH_PAY_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = ACCNT.PROD_CD)
                                    ELSE PROD.PROD_AMT
                               END PROD_AMT
                             , PROD.EVT_COST_OUT AS EVT_COST
                             , NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT > 0)), 0)
                               +
                               NVL((SELECT SUM(SALES_AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0) EVT_ADD_SALES
                             , NVL((SELECT SUM(AMT) FROM FUNRL_SERVICE_DTL WHERE FUNRL_OUTSRC_NO = FOM.FUNRL_OUTSRC_NO AND (AMT IS NOT NULL AND AMT > 0)), 0)
                               +
                               NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO), 0) EVT_ADD_SALES_COST
                              , 0 EVT_PAY_AMT
                              , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO AND pay_opt='0002'), 0) EVT_PAY_AMT_CARD
                             , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_GOODS WHERE ADD_SALES_YN = 'Y' AND FOM.FUNRL_OUTSRC_NO = FUNRL_OUTSRC_NO AND pay_opt='0003'), 0) EVT_PAY_AMT_CASH
                              , NVL((SELECT SUM(CARD_FEE) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO), 0) CARD_FEE
                              , FOM.TOT_EVT_COST_OUT EVT_SALES_COST
                              , NVL((SELECT SUM(AMT) FROM FUNRL_OUTSRC_PAYMENT WHERE RPT_NO = FOM.FUNRL_OUTSRC_NO AND PAY_OPT = '0002'), 0) CARD_AMT
                              , FOM.DEDUCT_AMT deductAmt
                              , ACCNT.NEW_CHAN_GUNSU * PROD.MON_PAY_AMT newChanAmt
                              , FN_COM_NM('0149', FOM.SAVE_CL) SAVE_CL
                          FROM EVENT EVT
                               INNER JOIN MEM_PROD_ACCNT ACCNT ON EVT.ACCNT_NO = ACCNT.ACCNT_NO AND ACCNT.DEL_FG = 'N'
                               INNER JOIN PRODUCT PROD ON ACCNT.PROD_CD = PROD.PROD_CD
                               INNER JOIN(
                                       SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                                         FROM EVENT_MNGR_REG
                                        WHERE DEL_FG = 'N'
                                          AND EVT_MNGR_GUBUN = '0001'
                                       GROUP BY EVT_SEQ
                                     ) EMR ON EMR.EVT_SEQ = EVT.SEQ
                               INNER JOIN FUNRL_OUTSRC_MST FOM ON EVT.SEQ = FOM.SEQ AND FOM.DEL_FG = 'N'
                               <if test="evt_gubun != null and evt_gubun != '' ">
                                   AND FOM.SAVE_CL = #{evt_gubun}
                               </if>
                               LEFT OUTER JOIN CUSTMR_MNG CUSTMR ON CUSTMR.CUSTMR_CD = FOM.OUTSRC_CUSTMR_CD AND CUSTMR.DEL_FG = 'N' AND CUSTMR.CUSTMR_FG = '0002'
                         WHERE EVT.DEL_FG = 'N'
                           AND EVT.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                           <if test="prod_cd != null and prod_cd != '' ">
                               AND PROD.PROD_CD = #{prod_cd}
                           </if>
                       ) TBL
                  WHERE 1=1
            ) TBL1

        GROUP BY TBL1.CUSTMR_NM
        ORDER BY TBL1.CUSTMR_NM
    </select>

    <!-- 재고마감 - 품목별 마감 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeStockGoodsList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeStockGoodsList */
            CLOSE_YYMM CLOSEYYMM
          , SC.GDS_CD GDSCD
          , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = SC.GDS_CD) GDSNM
          , SUM(CARRIED_QTY) CARRIEDQTY
          , SUM(IN_QTY) INQTY
          , SUM(OUT_QTY) OUTQTY
          , SUM(STOCK_QTY) STOCKQTY
          , MAX(TO_CHAR(SC.REG_DM, 'YYYYMMDD')) REGDM
        FROM STOCK_CLOSE SC
        WHERE 1=1
          AND SC.CLOSE_YYMM = #{yymm}
        GROUP BY CLOSE_YYMM,  GDS_CD
        ORDER BY GDS_CD

    </select>

    <!-- 재고마감 - 창고별 마감 조회 -->
    <select id="DlwNewTypeEvntMap.getNewTypeStockWhList" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeStockWhList */
            CLOSE_YYMM CLOSEYYMM
          , SC.WH_CD WHCD
          , (SELECT WH_NM FROM WAREHOUSE_MNG WHERE WH_CD = SC.WH_CD) WHNM
          , SC.GDS_CD GDSCD
          , (SELECT GDS_NM FROM EVENT_GOODS_MNG_MST WHERE GDS_CD = SC.GDS_CD) GDSNM
          , SUM(CARRIED_QTY) CARRIEDQTY
          , SUM(IN_QTY) INQTY
          , SUM(OUT_QTY) OUTQTY
          , SUM(STOCK_QTY) STOCKQTY
          , MAX(TO_CHAR(SC.REG_DM, 'YYYYMMDD')) REGDM
        FROM STOCK_CLOSE SC
        WHERE 1=1
          AND SC.CLOSE_YYMM = #{yymm}
        GROUP BY CLOSE_YYMM, WH_CD, GDS_CD
        ORDER BY WH_CD, GDS_CD

    </select>

    <!-- 재고마감 - 마감취소(재고마감 데이터 삭제) -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeStockMg" parameterType="map">
        DELETE /* DlwNewTypeEvntMap.deleteNewTypeStockMg */
        FROM STOCK_CLOSE WHERE CLOSE_YYMM = #{yymm}
    </delete>

    <parameterMap id="insertNewTypeStockMg" type="map">
        <parameter property="yymm" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
        <parameter property="reg_man" mode="IN" jdbcType="VARCHAR"  javaType="java.lang.String" />
    </parameterMap>

    <update id="DlwNewTypeEvntMap.insertNewTypeStockMg" statementType="CALLABLE" parameterMap="insertNewTypeStockMg">
           {call SP_STOCK_CLOSE (?, ?) }
    </update>

    <!-- 발주번호 가져오기 -->
    <select id="DlwNewTypeEvntMap.getNewTypeOrdNo" parameterType="map" resultType="String">

        SELECT /* DlwNewTypeEvntMap.getNewTypeOrdNo */
                 A.ORD_NO
          FROM ORD_MST A
          WHERE A.DEL_FG = 'N'
            AND A.ORD_CL = '0001'
            AND A.RPT_NO = #{rpt_no}
    </select>

    <!-- 발주번호 신규생성 -->
    <select id="DlwNewTypeEvntMap.getNewTypeSinOrdNo" parameterType="map" resultType="String">
        SELECT /* DlwNewTypeEvntMap.getNewTypeSinOrdNo */
            FN_CREATE_ORD_NO(#{bdate})
        FROM DUAL
    </select>

    <!-- 발주 마스터 삭제비트 변경 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeOrdMst" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.deleteNewTypeOrdMst */
            ORD_MST
        SET DEL_FG = 'Y',
            UPD_MAN = #{upd_man},
            UPD_DM = SYSDATE
        WHERE DEL_FG = 'N'
          AND ORD_NO = #{ord_no}
    </delete>

    <!-- 발주 디테일 데이터 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeOrdDtl" parameterType="map">
        DELETE /* DlwNewTypeEvntMap.deleteNewTypeOrdDtl */
            FROM ORD_DTL WHERE ORD_NO = #{ord_no}
    </delete>

    <!-- 발주 마스터 저장 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeOrdMst" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeOrdMst */
            INTO ORD_MST
            (ORD_NO,
             ORD_DT,
             CUSTMR_CD,
             CUSTMR_CHARG_NM,
             EFF_DT,
             EMPLE_NO,
             ORD_CL,
             AMT,
             VAT,
             TOT_AMT,
             NOTE,
             REG_DM,
             REG_MAN,
             DEL_FG,
             PROC_STAT,
             RPT_NO)
        SELECT #{swhordno},
               #{bdate},
               #{byuing_cd},
               (SELECT STAFF_NM FROM CUSTMR_MNG WHERE CUSTMR_CD = #{byuing_cd}),
               #{bdate},
               #{reg_man},
               '0001',
               (SELECT TRUNC(SUM(AMT)/1.1) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND RPT_NO = #{rpt_no} AND FRG_CL = '0002'),
               (SELECT SUM(AMT) - TRUNC(SUM(AMT)/1.1) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND RPT_NO = #{rpt_no} AND FRG_CL = '0002'),
               (SELECT SUM(AMT) FROM FUNRL_RPT_GOODS WHERE DEL_FG = 'N' AND RPT_NO = #{rpt_no} AND FRG_CL = '0002'),
               '',
               SYSDATE,
               #{reg_man},
               'N',
               '0003',
                #{rpt_no}
        FROM DUAL
    </insert>

    <!-- 발주 디테일 저장 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeOrdDtl" parameterType="map">
        INSERT /* DlwNewTypeEvntMap.insertNewTypeOrdDtl */
          INTO ORD_DTL(ORD_NO, DTL_NO, WH_CD, DEADLINE_DT, GDS_CD, QTY, QTY_UNIT, UNIT_COST, AMT, VAT, TOT_AMT, NOTE, REG_DM, REG_MAN, VAT_YN)
        SELECT #{swhordno},
               (SELECT NVL(MAX(DTL_NO),0) + 1 FROM ORD_DTL WHERE ORD_NO = #{swhordno}),
               #{wh_out},
               #{bdate},
               #{gds_cd},
               #{qty},
               #{qty_unit},
               #{unit_cost},
               TRUNC(#{amt}/1.1),
               #{amt} - TRUNC(#{amt}/1.1),
               #{amt},
               '',
               SYSDATE,
               #{reg_man},
               'Y'
        FROM DUAL
    </insert>

    <!-- 대체용품 수정 -->
    <update id="DlwNewTypeEvntMap.updateNewTypeRepGoods" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.updateNewTypeRepGoods */
            REP_GOODS
        SET CHG_GD   = #{chg_gd}
           ,CHG_CNT  = #{chg_cnt}
           ,REP_GD1  = #{rep_gd1}
           ,REP_CNT1 = #{rep_cnt1}
           ,REP_GD2  = #{rep_gd2}
           ,REP_CNT2 = #{rep_cnt2}
           ,REP_GD3  = #{rep_gd3}
           ,REP_CNT3 = #{rep_cnt3}
           ,BIGO     = #{bigo}
           ,UPD_DM   = SYSDATE
           ,UPD_MAN  = #{upd_man}
       WHERE SEQ = #{seq}
         AND CNT = #{cnt}
    </update>

    <!-- 대체용품 입력 -->
    <insert id="DlwNewTypeEvntMap.insertNewTypeRepGoods" parameterType="map">

        <selectKey keyProperty="cnt" resultType="String" order="BEFORE">
            SELECT NVL(MAX(CNT),0) + 1 AS CNT
            FROM REP_GOODS
            WHERE DEL_FG = 'N' AND SEQ = #{seq}
        </selectKey>

        INSERT /* DlwNewTypeEvntMap.insertNewTypeRepGoods */
            INTO REP_GOODS(CNT, SEQ, CHG_GD, CHG_CNT, REP_GD1, REP_CNT1, REP_GD2, REP_CNT2, REP_GD3, REP_CNT3, BIGO, REG_DM, REG_MAN, DEL_FG)
        SELECT
              ${cnt},
              ${seq},
              #{chg_gd},
              #{chg_cnt},
              #{rep_gd1},
              #{rep_cnt1},
              #{rep_gd2},
              #{rep_cnt2},
              #{rep_gd3},
              #{rep_cnt3},
              #{bigo},
              SYSDATE,
              #{reg_man},
              'N'
        FROM DUAL

    </insert>

    <!-- 대체용품 삭제 -->
    <delete id="DlwNewTypeEvntMap.deleteNewTypeRepGoods" parameterType="map">
        UPDATE /* DlwNewTypeEvntMap.deleteNewTypeRepGoods */
            REP_GOODS
        SET DEL_FG   = 'Y'
           ,UPD_DM   = SYSDATE
           ,UPD_MAN  = #{upd_man}
       WHERE SEQ = #{seq}
         AND CNT = #{cnt}
    </delete>

    <!-- 대체용품 조회(회원개인) -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtRepList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtRepList */
            CNT,
            SEQ,
            CHG_GD,
            FN_GDS_NM(CHG_GD) CHG_NM,
            CHG_CNT,
            REP_GD1,
            FN_GDS_NM(REP_GD1) REP_NM1,
            REP_CNT1,
            REP_GD2,
            FN_GDS_NM(REP_GD2) REP_NM2,
            REP_CNT2,
            REP_GD3,
            FN_GDS_NM(REP_GD3) REP_NM3,
            REP_CNT3,
            BIGO,
            REG_DM,
            REG_MAN,
            DEL_FG
        FROM REP_GOODS
        WHERE DEL_FG = 'N'
          AND SEQ = #{seq}
        ORDER BY CNT
    </select>

    <!-- 대체용품현황 조회 건수 -->
    <select id="DlwNewTypeEvntMap.getNewTypeRepGoodsCount" parameterType="map" resultType="int">
        SELECT /* DlwNewTypeEvntMap.getNewTypeRepGoodsCount */
               COUNT(*)
                FROM REP_GOODS A
                    INNER JOIN EVENT B ON A.SEQ = B.SEQ AND B.DEL_FG = 'N'
                    LEFT OUTER JOIN MEM_PROD_ACCNT C ON B.ACCNT_NO = C.ACCNT_NO
                    LEFT OUTER JOIN MEMBER D ON C.MEM_NO = D.MEM_NO
                WHERE A.DEL_FG = 'N'
                 <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                     AND B.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                 </if>
                 <if test="mem_nm != null and mem_nm != ''">
                     AND D.MEM_NM = #{mem_nm}
                 </if>
    </select>

    <!-- 대체용품현황 조회 리스트  -->
    <select id="DlwNewTypeEvntMap.getNewTypeRepGoodsList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeRepGoodsList */
                    A.CNT,
                    A.SEQ,
                    A.CHG_GD,
                    FN_GDS_NM(A.CHG_GD) CHG_NM,
                    A.CHG_CNT,
                    A.REP_GD1,
                    FN_GDS_NM(A.REP_GD1) REP_NM1,
                    A.REP_CNT1,
                    A.REP_GD2,
                    FN_GDS_NM(A.REP_GD2) REP_NM2,
                    A.REP_CNT2,
                    A.REP_GD3,
                    FN_GDS_NM(A.REP_GD3) REP_NM3,
                    A.REP_CNT3,
                    A.BIGO,
                    A.REG_DM,
                    A.REG_MAN,
                    A.DEL_FG,
                    B.EVENT_COMP_DAY,
                    FN_MEM_NM(C.MEM_NO) MEM_NM,
                    B.ACCNT_NO,
                    FN_PROD_NM(C.PROD_CD) PROD_NM
                FROM REP_GOODS A
                    INNER JOIN EVENT B ON A.SEQ = B.SEQ AND B.DEL_FG = 'N'
                    LEFT OUTER JOIN MEM_PROD_ACCNT C ON B.ACCNT_NO = C.ACCNT_NO
                    LEFT OUTER JOIN MEMBER D ON C.MEM_NO = D.MEM_NO
                WHERE A.DEL_FG = 'N'
                 <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                     AND B.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                 </if>
                 <if test="mem_nm != null and mem_nm != ''">
                     AND D.MEM_NM = #{mem_nm}
                 </if>
                ORDER BY B.EVENT_COMP_DAY, B.ACCNT_NO, A.CNT
    </select>

    <!-- 행사유지현황 조회 리스트  -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvtUjiList" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeEvtUjiList */
               A.EVENT_PROC_DAY,
               A.EVENT_COMP_DAY,
               A.ACCNT_NO,
               FN_MEM_NM(B.MEM_NO) MEM_NM,
               B.PROD_CD,
               FN_PROD_NM(B.PROD_CD) PROD_NM,
               CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = D.EVT_MNGR_CD), '') = ''
                    THEN NVL(VAL6, '')
                    ELSE NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = D.EVT_MNGR_CD), '')
               END AS VAL6,
               CASE WHEN NVL((SELECT EVT_MNGR_NM FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = D.EVT_MNGR_CD), '') = ''
                    THEN NVL(WORKDEPT, '')
                    ELSE NVL((SELECT (SELECT Z.BRANCH_NM FROM BRANCH_MNG Z WHERE Z.BRANCH_CD = BRANCH) FROM WAREHOUSE_MNG WHERE WH_CD = (SELECT WH_CD FROM EVENT_MANAGER_MNG WHERE EVT_MNGR_CD = D.EVT_MNGR_CD)), '')
               END AS WORK_DEPT,
               NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                     THEN (SELECT FUNRL_NM
                             FROM FUNRL_HALL
                            WHERE FUNRL_CD = A.FUNRL_HALL)
                     ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                               THEN ''
                               WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                               THEN NVL(A.ETC_ADDR2, '')
                               ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                          END
                END, '') AS EVENT_PLACE,
               A.EVT_ACCNO,
               F.COM_NM B2BCOM,
               C.PROD_CD PROD_CD_BF,
               FN_PROD_NM(C.PROD_CD) PROD_NM_BF,
               FN_COM_NM('S014',C.KSTBIT) KSTBIT,
               E.NO,
               FN_YEN_CHE(C.ACCNT_NO) YEN_CHE,
               TO_CHAR(G.PAY_NO) || '회 ' || TO_CHAR(ADD_MONTHS(TO_DATE(C.JOIN_DT), G.PAY_NO-1), 'YYYY-MM') || '월분 ' || TO_CHAR(PAY_DAY) AS LAST_PAY
        FROM EVENT A
          LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO
          LEFT OUTER JOIN MEM_PROD_ACCNT C ON A.EVT_ACCNO = C.ACCNT_NO
          LEFT OUTER JOIN (SELECT EVT_SEQ, MAX(EVT_MNGR_CD) EVT_MNGR_CD
                             FROM EVENT_MNGR_REG
                            WHERE DEL_FG = 'N'
                              AND EVT_MNGR_GUBUN = '0001'
                            GROUP BY EVT_SEQ
                          ) D ON A.SEQ = D.EVT_SEQ
          LEFT OUTER JOIN (SELECT COUNT(NO) NO, ACCNT_NO
                           FROM PAY_MNG
                           WHERE DEL_FG = 'N'
                           GROUP BY ACCNT_NO
                           ) E ON E.ACCNT_NO = A.EVT_ACCNO
          LEFT OUTER JOIN B2BCOMCD F ON F.COM_CD = C.B2B_COMP_CD
          LEFT OUTER JOIN (SELECT ACCNT_NO
                         , COUNT(NO) PAY_NO
                         , MAX(PAY_DAY) PAY_DAY
                         , SUM(PAY_AMT) PAY_AMT
                                       FROM PAY_MNG
                                      WHERE DEL_FG='N'
                                      GROUP BY ACCNT_NO
                          ) G ON C.ACCNT_NO = G.ACCNT_NO
        WHERE A.DEL_FG = 'N'
          AND NVL(A.EVT_ACCNO,' ') != ' '
         <if test="dt_typ != null and dt_typ != ''">
             <if test="dt_typ == '01'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND A.EVENT_PROC_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
             <if test="dt_typ == '02'">
                <if test="stt_dt != null and stt_dt != '' and end_dt != null and end_dt != ''">
                    AND A.EVENT_COMP_DAY BETWEEN #{stt_dt} AND #{end_dt}
                </if>
             </if>
         </if>
         <if test="accnt_no != null and accnt_no != ''">
             AND A.ACCNT_NO = #{accnt_no}
         </if>
         <if test="prod_cd != null and prod_cd != ''">
             AND B.PROD_CD = #{prod_cd}
         </if>
    </select>

    <!-- 행사문자 전송시 회원정보 조회  -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntChatInfo" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeEvntChatInfo */
               A.ACCNT_NO,
               E.MEM_NM,
               FN_EMPLE_NM(B.EMPLE_NO) EMPLE_NM,
               FN_PROD_NM(B.PROD_CD) PROD_NM,
               TO_CHAR(TO_DATE(B.JOIN_DT),'YYYY-MM-DD') JOIN_DT,
               D.EVT_MNGR_NM,
               E.CELL,
               NVL(A.VAL1,'미상') VAL1,
               NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                    THEN (SELECT FUNRL_NM
                            FROM FUNRL_HALL
                           WHERE FUNRL_CD = A.FUNRL_HALL)
                    ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                              THEN ''
                              WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                              THEN NVL(A.ETC_ADDR2, '')
                              ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                         END
               END, '') FUNRL_HALL,
               F.JAMT,
               NVL(G.AMT,0) + NVL(H.AMT,0) + NVL(I.AMT,0) NAMT,
               G.CNT,
               D.CELL CPCELL,
               FN_COM_NM('108', A.CNL_REASON_CD) CNCL_NM
        FROM EVENT A
            LEFT OUTER JOIN MEM_PROD_ACCNT B ON A.ACCNT_NO = B.ACCNT_NO
            LEFT OUTER JOIN (SELECT *
                             FROM EVENT_MNGR_REG
                             WHERE DEL_FG = 'N'
                               AND EVT_MNGR_GUBUN = '0001'
                            ) C ON C.EVT_SEQ = A.SEQ
            LEFT OUTER JOIN EVENT_MANAGER_MNG D ON C.EVT_MNGR_CD = D.EVT_MNGR_CD
            LEFT OUTER JOIN MEMBER E ON E.MEM_NO = B.MEM_NO
            LEFT OUTER JOIN (SELECT CASE WHEN P.PAY_TYPE = '001'
                                  THEN (P.EXPR_NO - MPA.NEW_CHAN_GUNSU - NVL((SELECT COUNT(NO) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0))*P.MON_PAY_AMT
                                  ELSE NVL((SELECT SUM((END_NO - ST_NO + 1) * MONTH_PAY_AMT) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD), 0)
                                          - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
                             END +
                             CASE WHEN P.PAY_TYPE = '001'
                                  THEN 0
                                  ELSE (SELECT SUM((END_NO - ST_NO + 1) * (ALLT_AMT + ADD_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD)
                                          - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
                                          - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
                             END JAMT,
                             MPA.ACCNT_NO
                            FROM MEM_PROD_ACCNT MPA
                                 INNER JOIN PRODUCT P ON MPA.PROD_CD = P.PROD_CD
                            WHERE ACCNT_NO = #{accnt_no}) F ON F.ACCNT_NO = A.ACCNT_NO
            LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) CNT, SUM(PAY_AMT) AMT FROM PAY_MNG P WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) G ON G.ACCNT_NO = A.ACCNT_NO
            LEFT OUTER JOIN (SELECT ACCNT_NO, SUM(PAY_AMT) AMT FROM PAY_MNG_DTL P WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) H ON H.ACCNT_NO = A.ACCNT_NO
            LEFT OUTER JOIN (SELECT ACCNT_NO, SUM(PAY_AMT) AMT FROM PAY_MNG_DTL1 P WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) I ON I.ACCNT_NO = A.ACCNT_NO
        WHERE A.DEL_FG = 'N'
          AND A.ACCNT_NO = #{accnt_no}

    </select>

    <!-- 행사현황 건수 조회 -->
    <!--
           2017.07.27 김준호
         관리업무>행사조회>모니터링>모니터링 결과 보고서
        중복 입력시 오류건으로 인해 저장전 회원번호로 EVENT TABLE확인후 저장
     -->
    <select id="DlwNewTypeEvntMap.countNewTypeEvent" parameterType="map" resultType="int">
         SELECT /* DlwNewTypeEvntMap.countNewTypeEvent */
             COUNT(ACCNT_NO)
         FROM EVENT
         WHERE DEL_FG ='N'
         AND ACCNT_NO =#{accnt_no}
    </select>


    <!-- 알림톡 회원정보 조회  -->
    <select id="DlwNewTypeEvntMap.getNewTypeEvntcjChatInfo" parameterType="map" resultType="resultMap">

        SELECT /* DlwNewTypeEvntMap.getNewTypeEvntcjChatInfo */
               B.ACCNT_NO,
               E.MEM_NM,
               FN_EMPLE_NM(B.EMPLE_NO) EMPLE_NM,
               FN_PROD_NM(B.PROD_CD) PROD_NM,
               TO_CHAR(TO_DATE(B.JOIN_DT),'YYYY-MM-DD') JOIN_DT,
               D.EVT_MNGR_NM,
               E.CELL,
               NVL(A.VAL1,'미상') VAL1,
               NVL(CASE WHEN A.EVENT_PLACE_CL = '0001'
                    THEN (SELECT FUNRL_NM
                            FROM FUNRL_HALL
                           WHERE FUNRL_CD = A.FUNRL_HALL)
                    ELSE CASE WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NULL OR A.ETC_ADDR2 = '')
                              THEN ''
                              WHEN (A.ETC_ZIP IS NULL OR A.ETC_ZIP = '') AND (A.ETC_ADDR2 IS NOT NULL AND A.ETC_ADDR2 != '')
                              THEN NVL(A.ETC_ADDR2, '')
                              ELSE NVL(A.ETC_ZIP, '') || ')' || NVL(A.ETC_ADDR1, '') || ' ' || NVL(A.ETC_ADDR2, '')
                         END
               END, '') FUNRL_HALL,
               F.JAMT,
               NVL(G.AMT,0) + NVL(H.AMT,0) + NVL(I.AMT,0) NAMT,
              nvl( G.CNT , 0 )  CNT,
               D.CELL CPCELL,
               FN_COM_NM('108', A.CNL_REASON_CD) CNCL_NM
               , (SELECT FN_EMPLE_NM(EMPLE_NO)
                          FROM HP_CALL
                         WHERE ACCNT_NO = B.ACCNT_NO) AS CNSL_MAN
               ,FN_COM_NM('07', A.rel)  AS REL
            , nvl((select cancl_note from event where ACCNT_NO = #{accnt_no}),'') as cancl_note

        FROM  MEM_PROD_ACCNT B
            LEFT OUTER JOIN EVENT A  ON A.ACCNT_NO = B.ACCNT_NO    and a.del_fg='N'
            LEFT OUTER JOIN (SELECT *
                             FROM EVENT_MNGR_REG
                             WHERE DEL_FG = 'N'
                               AND EVT_MNGR_GUBUN = '0001'
                            ) C ON C.EVT_SEQ = A.SEQ
            LEFT OUTER JOIN EVENT_MANAGER_MNG D ON C.EVT_MNGR_CD = D.EVT_MNGR_CD
            LEFT OUTER JOIN MEMBER E ON E.MEM_NO = B.MEM_NO
            LEFT OUTER JOIN (SELECT CASE WHEN P.PAY_TYPE = '001'
                                  THEN (P.EXPR_NO - MPA.NEW_CHAN_GUNSU - NVL((SELECT COUNT(NO) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0))*P.MON_PAY_AMT
                                  ELSE NVL((SELECT SUM((END_NO - ST_NO + 1) * MONTH_PAY_AMT) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD), 0)
                                          - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
                             END +
                             CASE WHEN P.PAY_TYPE = '001'
                                  THEN 0
                                  ELSE (SELECT SUM((END_NO - ST_NO + 1) * (ALLT_AMT + ADD_AMT)) FROM PRODUCT_DTL WHERE PROD_CD = P.PROD_CD)
                                          - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
                                          - NVL((SELECT SUM(PAY_AMT) FROM PAY_MNG_DTL1 WHERE ACCNT_NO = MPA.ACCNT_NO AND DEL_FG = 'N'), 0)
                             END JAMT,
                             MPA.ACCNT_NO
                            FROM MEM_PROD_ACCNT MPA
                                 INNER JOIN PRODUCT P ON MPA.PROD_CD = P.PROD_CD
                            WHERE ACCNT_NO = #{accnt_no}) F ON F.ACCNT_NO = B.ACCNT_NO
            LEFT OUTER JOIN (SELECT ACCNT_NO, MAX(NO) CNT, SUM(PAY_AMT) AMT FROM PAY_MNG P WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) G ON G.ACCNT_NO = B.ACCNT_NO
            LEFT OUTER JOIN (SELECT ACCNT_NO, SUM(PAY_AMT) AMT FROM PAY_MNG_DTL P WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) H ON H.ACCNT_NO = B.ACCNT_NO
            LEFT OUTER JOIN (SELECT ACCNT_NO, SUM(PAY_AMT) AMT FROM PAY_MNG_DTL1 P WHERE DEL_FG = 'N' GROUP BY ACCNT_NO) I ON I.ACCNT_NO = B.ACCNT_NO
        WHERE B.DEL_FG = 'N'
          AND B.ACCNT_NO = #{accnt_no}

    </select>


  <!-- 알림톡 구동시 가상계좌 검색
  2017-09-06 김준호
    -->
    <select id="DlwNewTypeEvntMap.getNewTypeEventcjChatVrtlInfo" parameterType="map" resultType="resultMap">

        SELECT  /* DlwNewTypeEvntMap.getNewTypeEventcjChatVrtlInfo */
              VAM.MEM_NO                                        /* 고유번호 */
            , VAM.VRTL_ACCNT_NO                                 /* 가상계좌번호 */
            ,  FN_COM_NM('63', VAM.BANK_CD) AS BANK_NM          /* 은행명 */
            , VAM.EXPIRY_YYYYMMDD AS EXPIRY_DT                  /* 가상계좌번호 입금 마감 일자 */
            ,  MEM.MEM_NM                                       /* 가상계좌예금주명 */
            , VAD.WDRW_REQ_AMT                                  /* 입금금액 */
        FROM  NICE_VRTL_ACCNT_WDRW_REQ_MST VAM
              LEFT OUTER JOIN MEMBER MEM ON MEM.MEM_NO = VAM.MEM_NO
              LEFT OUTER JOIN NICE_VRTL_ACCNT_WDRW_REQ_DTL VAD ON VAM.SEQ = VAD.SEQ
        WHERE VAM.MEM_NO = #{mem_no}
                AND (
                    (VAM.STAT = '02' AND VAM.EXPIRY_YYYYMMDD || VAM.EXPIRY_HHMMSS > TO_CHAR(SYSDATE-(1/24), 'YYYYMMDDHH24MISS'))
                    OR VAM.STAT = '01') /* 상태가 나이스 전송전 또는 나이스 전송후 아직 마감일 전인 건*/
     </select>


    <!--
    * ================================================================
    * 날짜 : 20171226
    * 이름 : 송준빈
    * 추가내용 : 쇼핑몰 연동 Table에 해당 고객의 상태값을 행사로 바꿈
    * ================================================================
    -->
    <parameterMap id="getNewTypeListByProcParamMap2" type="map">
        <parameter property="P_MEM_NO" 	 mode="IN" 	jdbcType="VARCHAR" javaType="java.lang.String" />
        <parameter property="P_ACCNT_NO" mode="IN" 	jdbcType="VARCHAR" javaType="java.lang.String" />
        <parameter property="P_STATE" 	 mode="IN" 	jdbcType="VARCHAR" javaType="java.lang.String" />
        <parameter property="P_CREATE_ID" 	 mode="IN" 	jdbcType="VARCHAR" javaType="java.lang.String" />
    </parameterMap>

    <update id="DlwNewTypeEvntMap.updateNewTypeEventMemberState" statementType="CALLABLE" parameterMap="getNewTypeListByProcParamMap2">
        {call SP_WEB_MEMBER_STATE(?, ?, ?, ?)}
    </update>

        <!--
    * ================================================================
    * 날짜 : 20181114
    * 이름 : 송준빈
    * 추가내용 : 청구가 존재하는 회원인지 확인
    * ================================================================
    -->
    <select id="DlwNewTypeEvntMap.getNewTypeWdrwReqConfirm" parameterType="map" resultType="resultMap">
        SELECT /* DlwNewTypeEvntMap.getNewTypeWdrwReqConfirm */
                 ACCNT_NO         /* 회원번호                                                                 */
                ,BANK_FILIN_BRKDN /* 통장기재내역                                                             */
                ,BILL_GUBUN       /* 36회 카드사 전달 구분값                                                  */
                ,BIRTH            /* 생년월일(CMS용)                                                          */
                ,DEL_FG           /* 청구여부(N:청구전 Y:삭제 R:청구 C:완료(변환/입금) F:완료(실패))          */
                ,ICHAE_CD         /* 이체코드(은행, 카드사)                                                   */
                ,ICHAE_DT         /* 정기건 및 연체건 이체일                                                  */
                ,ICHAE_NO         /* 이체번호(계좌 혹은 BID)                                                  */
                ,KSTBIT           /* 회원상태(01:대기, 02:가입, 03:해약, 04:행사, 09:만기)                    */
                ,MEM_NO           /* 당월회차                                                                 */
                ,MONTH_CNT        /* 당월회차                                                                 */
                ,PAY_AMT          /* 청구금액                                                                 */
                ,PAY_BIT          /* 산출비트                                                                 */
                ,PAY_MTHD         /* 산출구분(CMS:04, CARD:06, 가상계좌:05)                                   */
                ,PROD_CD          /* 상품코드                                                                 */
                ,REG_DM           /* 등록일                                                                   */
                ,REG_MAN          /* 등록자                                                                   */
                ,REQ_BIT          /* 산출상세구분(01:정기, 02:미출금, 03:임의 ,04:연체, 05:임시, 06:고객센터) */
                ,REQ_DAY          /* 청구일                                                                   */
                ,REQ_PAY_GUNSU    /* 산출청구건수                                                             */
                ,REQ_PAY_NO       /* 산출청구회차                                                             */
                ,RESULT_KEY       /* 카드/CMS결과KEY(실시간포함)                                              */
                ,RESULT_KIND      /* 01:파일, 02:실시간, 03:자유,04:기타                                      */
                ,STAT             /* 상태                                                                     */
                ,TRUE_CNT         /* 실납입회수                                                               */
                ,UPD_DM           /* 수정일                                                                   */
                ,UPD_MAN          /* 수정자                                                                   */
                ,(SELECT AMT     FROM PRODUCT_NO_DATA PND WHERE 1=1 AND PND.PROD_CD = MWR.PROD_CD AND PND.NO = MWR.REQ_PAY_NO) AS NOR_PAY_AMT /* 상조 가수금 */
                ,(SELECT REL_AMT FROM PRODUCT_NO_DATA PND WHERE 1=1 AND PND.PROD_CD = MWR.PROD_CD AND PND.NO = MWR.REQ_PAY_NO) AS REL_PAY_AMT /* 결합 가수금 */
                ,(SELECT ADD_AMT FROM PRODUCT_NO_DATA PND WHERE 1=1 AND PND.PROD_CD = MWR.PROD_CD AND PND.NO = MWR.REQ_PAY_NO) AS ADD_PAY_AMT /* 추가 가수금 */
                ,AUTH_YN
            FROM LF_DMUSER.TB_MEMBER_WDRW_REQ MWR
           WHERE 1=1
           	 AND DEL_FG = 'R'
             AND ACCNT_NO = #{accnt_no}
    </select>

</mapper>