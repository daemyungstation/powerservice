package powerservice.business.dlw.web;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.maven.model.Model;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import egovframework.rte.cmmn.ria.xplatform.XPlatformConstant;
import egovframework.rte.cmmn.ria.xplatform.map.DataSetMap;
import egovframework.rte.cmmn.ria.xplatform.map.XPlatformMapDTO;
import powerservice.business.bean.UserSession;
import powerservice.business.dlw.service.DlwHanaCardMngService;
import powerservice.common.util.CommonUtils;
import powerservice.common.util.SftpManager;
import powerservice.core.util.SessionUtils;

@Controller
@RequestMapping(value = "/dlw/hanamng")
public class DlwHanaCardMngController {


    @Resource
    private DlwHanaCardMngService dlwHanaCardMngService;

    /** ================================================================
     * 날짜 : 20230111
     * 이름 : 임동진
     * 추가내용 : 하나카드 전송 관리
     * 대상 테이블 : LF_DMUSER.TB_HANA_SEND_INFO
     * ================================================================
     */
    @RequestMapping(value = "/getHanaList")
    public ModelAndView getHanaSendList(XPlatformMapDTO xpDto, Model model) throws Exception {
    	ModelAndView modelAndView = new ModelAndView("xplatformMapView");
        DataSetMap listMap = new DataSetMap();
        Map<String, Object> hmParam = new HashMap<String, Object>();

        // 에러코드및 메시지
        String szErrorCode = "0";
        String szErrorMsg = "OK";

        try
        {
            Map<String, Object> mapInVar = xpDto.getInVariableMap();
            Map<String, DataSetMap> mapInDs = xpDto.getInDataSetMap();
            Map<String, Object> mapOutVar = xpDto.getOutVariableMap();
            Map<String, DataSetMap> mapOutDs = xpDto.getOutDataSetMap();

            DataSetMap listInDs = (DataSetMap) mapInDs.get("ds_input");
            if (listInDs.size() > 0)
            {
                hmParam = listInDs.get(0);

                List<Map<String, Object>> mList = dlwHanaCardMngService.getHanaSendList(hmParam);
                listMap.setRowMaps(mList);
                mapOutDs.put("ds_output", listMap);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg = e.getMessage();
        }

        modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
        modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, xpDto.getOutDataSetMap());
        modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
        modelAndView.addObject(XPlatformConstant.ERROR_MSG, szErrorMsg);

        return modelAndView;
    }
    
    /** ================================================================
     * 날짜 : 20230111
     * 이름 : 임동진
     * 추가내용 : 하나카드 전송관련 FTP정보
     * 대상 테이블 : LF_DMUSER.TB_HANA_SEND_INFO
     * ================================================================
     */
    @RequestMapping(value = "/getFtpList")
    public ModelAndView getHanaFtpList(XPlatformMapDTO xpDto, Model model) throws Exception {
    	ModelAndView modelAndView = new ModelAndView("xplatformMapView");
    	DataSetMap listInDs = new DataSetMap();        

        // 에러코드및 메시지
        String szErrorCode = "0";
        String szErrorMsg = "OK";

        try
        {
            Map<String, Object> mapInVar = xpDto.getInVariableMap();
            Map<String, DataSetMap> mapInDs = xpDto.getInDataSetMap();
            Map<String, Object> mapOutVar = xpDto.getOutVariableMap();
            Map<String, DataSetMap> mapOutDs = xpDto.getOutDataSetMap();
            
            DataSetMap rtnDs = new DataSetMap();    
                               
            final SftpManager SftpManager = new SftpManager();
            
            String sHost = "localhost";
            String sUserName = "790585";
            Integer sPort = 22;
            String sPW = "1111111111";
            String sFtpPath = "/ftp";
                        
    		// 접속
            SftpManager.init(sHost, sUserName, sPW, sPort, null );
            
            //파일여부
            //System.out.println("xxxxxxxx> : " + SftpManager.equals("aaa.rcv"));
            
          //파일 리스트            
            listInDs = SftpManager.FtpFileList(sFtpPath);
            
            if(listInDs.size() > 0){            	            
	            for(int i=0; i< listInDs.size(); i++){
	            	
	            	Map<String, Object> hmParam = new HashMap<String, Object>();            	                      	
	            	String strFileNm = listInDs.get(i).get("file_name").toString();
	            	String strFileDt = listInDs.get(i).get("file_info").toString();
	            	int strSize = strFileNm.length();
	            	
	            	//ftp에서 폴더는 제외함
	            	if(strFileNm.substring(strSize - 3).equals("rcv") || strFileNm.substring(strSize - 3).equals("ved") || strFileNm.substring(strSize - 3).equals("snd")){
	            		hmParam.put("file_nm", strFileNm);
	            		hmParam.put("file_date", strFileDt);
	            		
	            		//ftp받은 자료인지 확인
	            		if(strFileNm.substring(strSize - 3).equals("rcv")){
	            			hmParam.put("new_yn", "Y");
	            		} else {
	            			hmParam.put("new_yn", "N");
	            		}   
	            		rtnDs.add(hmParam);          
	            	}	            		            		            	  	
	            }
            }
            //FTP연결종료    
            SftpManager.disconnection();
            mapOutDs.put("ds_output", rtnDs);
        }
        catch (Exception e)
        {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg = e.getMessage();
        }

        modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
        modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, xpDto.getOutDataSetMap());
        modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
        modelAndView.addObject(XPlatformConstant.ERROR_MSG, szErrorMsg);

        return modelAndView;
    }
    
    /** ================================================================
     * 날짜 : 20230111
     * 이름 : 임동진
     * 추가내용 : 하나카드 재수신하기
     * 대상 테이블 : LF_DMUSER.TB_HANA_SEND_INFO
     * ================================================================
     */
    @RequestMapping(value = "/fileReRecieve")
    public ModelAndView getFileReRecieve(XPlatformMapDTO xpDto, Model model) throws Exception {
    	ModelAndView modelAndView = new ModelAndView("xplatformMapView");    	
    	DataSetMap listMap = new DataSetMap();    
        Map<String, Object> hmParam = new HashMap<String, Object>();

        // 에러코드및 메시지
        String szErrorCode = "0";
        String szErrorMsg = "OK";

        try
        {
            Map<String, Object> mapInVar = xpDto.getInVariableMap();
            Map<String, DataSetMap> mapInDs = xpDto.getInDataSetMap();
            Map<String, Object> mapOutVar = xpDto.getOutVariableMap();
            Map<String, DataSetMap> mapOutDs = xpDto.getOutDataSetMap();
            
            UserSession oLoginUser = (UserSession) SessionUtils.getLoginUser();
            
            //String strLocalPath = "C:\\app\\LGUPLUS\\"; //local
            String strLocalPath = "/send"; //서버
            //하나카드 발급정보 데이터 저장 
            listMap = saveHana001FileRecieve(strLocalPath);                                                
            

            //하나카드 발급정보 이력 저장
            for(int i = 0; i<listMap.size(); i++){            	
            	hmParam.put("send_dt",listMap.get(i).get("sendDt"));
            	hmParam.put("file_nm",listMap.get(i).get("fileNm"));
            	hmParam.put("send_loc",listMap.get(i).get("sendLoc"));
            	hmParam.put("send_stat",listMap.get(i).get("sendStat"));
            	hmParam.put("file_info",listMap.get(i).get("fileInfo"));
            	hmParam.put("row_cnt",listMap.get(i).get("rowCnt"));
            	hmParam.put("reg_man",oLoginUser.getUserid());	// 등록자
                                	                                	            	            	            	            
            	dlwHanaCardMngService.insertHanaRecieveHistory(hmParam);  // 등록
            	
            	// 수신파일명 변경 -> 결과 받은 파일을 변경해서 추가 갱신이 안되도록 처리
                File file = new File(strLocalPath + listMap.getMapValue(i,"fileNm"));
                File newFile = new File(strLocalPath + "X" +listMap.getMapValue(i,"fileNm"));
                                
                file.renameTo(newFile);
            } 
            
            mapOutVar.put("nTotalListCnt", listMap.size());
        }
        catch (Exception e)
        {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg = e.getMessage();
        }

        modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
        modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, xpDto.getOutDataSetMap());
        modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
        modelAndView.addObject(XPlatformConstant.ERROR_MSG, szErrorMsg);

        return modelAndView;
    }
    
    /** ================================================================
     * 날짜 : 20230111
     * 이름 : 임동진
     * 추가내용 : 하나카드 FTP에서 받은 발급신청DB저장
     * 대상 테이블 : LF_DMUSER.TB_HANA_SEND_INFO
     * ================================================================
     */
    public DataSetMap saveHana001FileRecieve(String filePath) throws Exception {
    	         
    	DataSetMap dataParam  = new DataSetMap();
    	
        File dir = new File(filePath);
        FileFilter filter = new FileFilter() {
            public boolean accept(File f) {
                return f.getName().startsWith("DAE");
            }
        };

        File files[] = dir.listFiles(filter);
        for (int i = 0; i < files.length; i++) {            
            //BufferedReader reader = new BufferedReader(new FileReader(files[i]),,"UTF-8");        
            BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(files[i]), "EUC-KR"));
            Map<String, Object> paramData = new HashMap<String, Object>(); //FILE 이력 MAP
            UserSession oLoginUser = (UserSession) SessionUtils.getLoginUser();
            
            String str = ""; 						//한줄문자
            String strFirstWord = "";   //첫글자 (H:헤더, D:데이터, T:TAIL)
            String sInputDate = "";     // 전송일
            String sInputTime = "";     // 전송시간 
            int iLine = 0;					// 라인수
            int iEndLind = 0;				// 최종라인수            
            String strPhone = "";		// 전화번호
            String strAccntNo = "";		// 회원번호
            int iAmt = 0;					// 혜택금액
                            
            /* ####################################################################################
             * 받은 DATA 발급 DB등록
             * #################################################################################### */    
            
            while ((str = reader.readLine()) != null) {
            	Map<String, Object> pData = new HashMap<String, Object>(); //DATA이력 MAP
            	strFirstWord = str.substring(0,1);            	
            	switch(strFirstWord)
            	{
	            	case "H" :
	            		System.out.println("in header");
	            		sInputDate = str.substring(17,25);
	            		sInputTime = str.substring(25,31);
	            		System.out.println("sInputDate : " + sInputDate);
	                break;
	                
	            	case "D" :
	            		System.out.println("in data");	            			            		
	            		pData.put("card_seq", sInputDate + str.substring(5,11));		// 카드순번 
	            		pData.put("hana_no", str.substring(99,110).trim());		// 하나발급번호	
	            		pData.put("ci_val", str.substring(11,99));						// ci
	            		pData.put("card_no", str.substring(178,194).trim());		// 카드번호		
	            		pData.put("expire_dt", str.substring(194,200).trim());		// 유효일
	            		pData.put("mem_nm", str.substring(118,158).trim());		// 고객명
	            		pData.put("card_birth", str.substring(158,166).trim());		// 카드생년월일
	            		pData.put("cell", str.substring(166,178).trim());				// 전화번호
	            		pData.put("card_dt", str.substring(110,118).trim());		// 카드발급일
	            		pData.put("card_stat", str.substring(200,201));		// 카드상태 (발급, 해지)
	            		pData.put("send_dt", sInputDate);					// 전송일
	            		pData.put("send_time", sInputTime);				// 전송시간	            		
	            		pData.put("reg_man",oLoginUser.getUserid());	// 등록자
	            		
	                	dlwHanaCardMngService.insertHanaMember(pData);  // 등록
	                break;
	                
	            	case "T" :
	            		System.out.println("in tail");
	            		iEndLind = Integer.parseInt(str.substring(11,21));
	            		System.out.println("iEndLind : " + iEndLind);
	                break;            	
            	}         	                	
            }             
           reader.close();
                    
           /* ####################################################################################
            * 받은 파일에 대한 이력 정보 전달 준비 
            * #################################################################################### */              
           
           paramData.put("fileInfo",  "하나카드 발급 정보 수신데이터");           
           paramData.put("fileNm",  files[i].getName());
           paramData.put("rowCnt",  iEndLind);
           paramData.put("sendDt",  sInputDate);
           paramData.put("sendLoc",  "IN");
           paramData.put("sendStat",  "00");
                                    
           dataParam.add(paramData);
           
           /* ####################################################################################
            * #################################################################################### */     
        }
                  	
    	return dataParam;
    }
    
    /** ================================================================
     * 날짜 : 20230111
     * 이름 : 임동진
     * 추가내용 : 하나카드FTP에서 파일가져오기(신규파일만)
     * 대상 테이블 : LF_DMUSER.TB_HANA_SEND_INFO
     * ================================================================
     */
    @RequestMapping(value = "/ftpFileRecieve")
    public ModelAndView getFtpFileRecieve(XPlatformMapDTO xpDto, Model model) throws Exception {
    	ModelAndView modelAndView = new ModelAndView("xplatformMapView");    	

        // 에러코드및 메시지
        String szErrorCode = "0";
        String szErrorMsg = "OK";

        try
        {
        	Map<String, Object> mapInVar = xpDto.getInVariableMap();
            Map<String, Object> mapOutVar = xpDto.getOutVariableMap();
            
            String sLocalPath = "/send";
            String strFileNm = mapInVar.get("file_nm").toString();
            
            ftpManager("IN", sLocalPath, strFileNm);
        	
            String rtnMsg = "";
        }
        catch (Exception e)
        {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg = e.getMessage(); 
        }

        modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
        modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, xpDto.getOutDataSetMap());
        modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
        modelAndView.addObject(XPlatformConstant.ERROR_MSG, szErrorMsg);

        return modelAndView;
    }
    
    /** ================================================================
     * 날짜 : 20230111
     * 이름 : 임동진
     * 추가내용 : 하나카드발급회원정보
     * 대상 테이블 : LF_DMUSER.TB_HANA_SEND_INFO
     * ================================================================
     */
    @RequestMapping(value = "/getHanaMemInfo")
    public ModelAndView getHanaMemList(XPlatformMapDTO xpDto, Model model) throws Exception {
    	ModelAndView modelAndView = new ModelAndView("xplatformMapView");
        DataSetMap listMap = new DataSetMap();
        Map<String, Object> hmParam = new HashMap<String, Object>();

        // 에러코드및 메시지
        String szErrorCode = "0";
        String szErrorMsg = "OK";

        try
        {
            Map<String, Object> mapInVar = xpDto.getInVariableMap();
            Map<String, DataSetMap> mapInDs = xpDto.getInDataSetMap();
            Map<String, Object> mapOutVar = xpDto.getOutVariableMap();
            Map<String, DataSetMap> mapOutDs = xpDto.getOutDataSetMap();

            DataSetMap listInDs = (DataSetMap) mapInDs.get("ds_input");
            if (listInDs.size() > 0)
            {
                hmParam = listInDs.get(0);
                
                String strSendDt = hmParam.get("send_dt").toString().substring(0,6);
                hmParam.put("send_dt", strSendDt);
                
                // 페이징 정보
                DataSetMap listInGds = (DataSetMap) mapInDs.get("gds_RequestCompVariable");
                if (listInGds != null && listInGds.size() > 0)
                {
                    Map pMap = listInGds.get(0);

                    String excel_fg = (String) mapInVar.get("excel_fg");
                    if (!"Y".equals(excel_fg))
                    {
                        hmParam.put("startLine", pMap.get("startNum"));
                        hmParam.put("endLine", pMap.get("endNum"));
                    }
                }

                int nTotal = dlwHanaCardMngService.getHanaMemCount(hmParam);
                mapOutVar.put("nTotalListCnt", nTotal);

                List<Map<String, Object>> mList = dlwHanaCardMngService.getHanaMemList(hmParam);                
                listMap.setRowMaps(mList);
                mapOutDs.put("ds_output", listMap);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg = e.getMessage();
        }

        modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
        modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, xpDto.getOutDataSetMap());
        modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
        modelAndView.addObject(XPlatformConstant.ERROR_MSG, szErrorMsg);

        return modelAndView;
    }
    
    /** ================================================================
     * 날짜 : 20230111
     * 이름 : 임동진
     * 추가내용 : 하나카드혜택정보관리
     * 대상 테이블 : LF_DMUSER.TB_HANA_PAYMENTS
     * ================================================================
     */
    @RequestMapping(value = "/getHanaPayInfo")
    public ModelAndView getHanaPayList(XPlatformMapDTO xpDto, Model model) throws Exception {
    	ModelAndView modelAndView = new ModelAndView("xplatformMapView");
        DataSetMap listMap = new DataSetMap();
        Map<String, Object> hmParam = new HashMap<String, Object>();

        // 에러코드및 메시지
        String szErrorCode = "0";
        String szErrorMsg = "OK";

        try
        {
            Map<String, Object> mapInVar = xpDto.getInVariableMap();
            Map<String, DataSetMap> mapInDs = xpDto.getInDataSetMap();
            Map<String, Object> mapOutVar = xpDto.getOutVariableMap();
            Map<String, DataSetMap> mapOutDs = xpDto.getOutDataSetMap();

            DataSetMap listInDs = (DataSetMap) mapInDs.get("ds_input");
            if (listInDs.size() > 0)
            {
                hmParam = listInDs.get(0);
                
                String strSendDt = hmParam.get("send_dt").toString().substring(0,6);
                hmParam.put("send_dt", strSendDt);
                
                // 페이징 정보
                DataSetMap listInGds = (DataSetMap) mapInDs.get("gds_RequestCompVariable");
                if (listInGds != null && listInGds.size() > 0)
                {
                    Map pMap = listInGds.get(0);

                    String excel_fg = (String) mapInVar.get("excel_fg");
                    if (!"Y".equals(excel_fg))
                    {
                        hmParam.put("startLine", pMap.get("startNum"));
                        hmParam.put("endLine", pMap.get("endNum"));
                    }
                }

                int nTotal = dlwHanaCardMngService.getHanaPayCount(hmParam);
                mapOutVar.put("nTotalListCnt", nTotal);

                List<Map<String, Object>> mList = dlwHanaCardMngService.getHanaPayList(hmParam);                
                listMap.setRowMaps(mList);
                mapOutDs.put("ds_output", listMap);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg = e.getMessage();
        }

        modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
        modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, xpDto.getOutDataSetMap());
        modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
        modelAndView.addObject(XPlatformConstant.ERROR_MSG, szErrorMsg);

        return modelAndView;
    }
    
    /** ================================================================
     * 날짜 : 20230111
     * 이름 : 임동진
     * 추가내용 : 대명에서 하나카드로 결과값 전송 (첫번째 선납대상)
     * 대상 테이블 : LF_DMUSER.TB_HANA_PAYMENTS
     * ================================================================
     */
    @RequestMapping(value = "/sendPayFtp")
    public ModelAndView setHanaFileCreate(XPlatformMapDTO xpDto, Model model) throws Exception {
    	ModelAndView modelAndView = new ModelAndView("xplatformMapView");    	
    	DataSetMap listMap = new DataSetMap();    
        Map<String, Object> hmParam = new HashMap<String, Object>();

        // 에러코드및 메시지
        String szErrorCode = "0";
        String szErrorMsg = "OK";

        try
        {
        	Map<String, Object> mapInVar = xpDto.getInVariableMap();
        	Map<String, DataSetMap> mapInDs = xpDto.getInDataSetMap();
            Map<String, Object> mapOutVar = xpDto.getOutVariableMap();
            
            String fileName ="";	//전송 파일명
            String strSendDt = "";    
            StringBuilder strbuf;
            int totCnt = 0;
            //String sLocalPath = "C:\\app\\LGUPLUS\\";
            String sLocalPath = "/send";
            
            DataSetMap listInDs = (DataSetMap) mapInDs.get("ds_input");
            if (listInDs.size() > 0) {
                hmParam = listInDs.get(0);
                
                strSendDt = hmParam.get("send_dt").toString().substring(0,6);
                totCnt = Integer.parseInt(hmParam.get("tot_cnt").toString());
                hmParam.put("send_dt", strSendDt);
            }
            
            if (totCnt <= 0) {       
            	 throw new Exception("대상정보가 없습니다.[IT 문의 바랍니다.]");
            }
                                  	            	                                               
            /**############################################################################################
             * 하나카드 선납혜택 첫번째 파일생성             
             * ############################################################################################*/
            
            // 날짜형식가져오기            ​
            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyyMMdd");
            SimpleDateFormat sdf2 = new SimpleDateFormat("HHmmss");
            
            //오늘날짜 및 시간 가져오기
            Date now = new Date();            
            String nowDate = sdf1.format(now);
            String nowTime = sdf2.format(now);
            
            fileName = (new StringBuilder("HAC")).append("_").append(nowDate).append(".snd").toString();

            //File f = new File((new StringBuilder("/sftp_home/inicis/send/")).toString(), fileName);  	//운영
            File localFile = new File((new StringBuilder(sLocalPath)).toString(), fileName); 	//로컬

            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(localFile), "EUC-KR"));

            strbuf = new StringBuilder();
            strbuf.append("H").append("0000000000").append("DAE").append("HAC").append(nowDate).append(nowTime).append(CommonUtils.fillEmpVal(269,"", "L", " ")); // 파일의 1번째행은 헤더로서 "H,YYYYMMDD,건수" 의 형태를 가진다
            
            strbuf.append("\r\n");
            out.write(strbuf.toString());
            strbuf.delete(0, strbuf.length());
            	            
            // 하나카드 선납대상자 조회
            List<Map<String, Object>> mList = dlwHanaCardMngService.getHanaPayList(hmParam);
            Map<String, Object> pmParam = new HashMap<String, Object>();
            	            
            for(int i = 0; mList.size() > i; i++){	            			            
                pmParam = mList.get(i);
                String strPaySeq = (pmParam.get("pay_seq").toString().substring(8, 14));
                	                
                strbuf.append("D").append(CommonUtils.fillEmpVal(10,strPaySeq, "R", "0")).append(pmParam.get("ci_val")).append(pmParam.get("hana_no")).append(pmParam.get("pay_mon"));
                strbuf.append(CommonUtils.fillEmpVal(15,pmParam.get("pay_amt").toString(), "R", "0")).append(pmParam.get("target_yn")).append(CommonUtils.fillEmpVal(168,"", "L", " "));
                
                strbuf.append("\r\n");
                out.write(strbuf.toString());
                strbuf.delete(0, strbuf.length());
                
                if(i % 100 == 0)
                {
                    out.flush();
                }
            }
            	            
            strbuf.append("T").append("9999999999").append(CommonUtils.fillEmpVal(10,Integer.toString(totCnt), "R", "0")).append(CommonUtils.fillEmpVal(279,"", "L", " "));            
            out.write(strbuf.toString());            
            out.close();	           
            
            File dir = new File(sLocalPath);
            FileFilter filter = new FileFilter() {
                public boolean accept(File f) {
                    return f.getName().startsWith("HAC");
                }
            };

            File files[] = dir.listFiles(filter);            
            int cntFiles = files.length;            
            if (cntFiles <= 0) {       
            	throw new Exception("대상파일이 삭제되거나 없습니다.[IT 문의 바랍니다.]");
            }
            
            UserSession oLoginUser = (UserSession) SessionUtils.getLoginUser();
            
            for(int i=0; i<files.length; i++){
            	
            	//ftpManager("OUT", sLocalPath,  files[i].getName());  //FTP전송
            	
            	hmParam.put("send_dt",nowDate);
            	hmParam.put("pay_mon",strSendDt);
            	hmParam.put("file_nm",files[i].getName());
            	hmParam.put("send_loc","OUT");
            	hmParam.put("send_stat","00");
            	hmParam.put("file_info", "하나카드 혜택(선납) 정보 발신 데이터");
            	hmParam.put("row_cnt",totCnt);
            	hmParam.put("reg_man",oLoginUser.getUserid());	// 등록자
                            	            	
            	dlwHanaCardMngService.insertHanaRecieveHistory(hmParam);  // 등록
            }                        	        
        }        
        catch (Exception e)
        {
            e.printStackTrace();
            szErrorCode = "-1";
            szErrorMsg = e.getMessage();
        }

        modelAndView.addObject(XPlatformConstant.OUT_VARIABLES_ATT_NAME, xpDto.getOutVariableMap());
        modelAndView.addObject(XPlatformConstant.OUT_DATASET_ATT_NAME, xpDto.getOutDataSetMap());
        modelAndView.addObject(XPlatformConstant.ERROR_CODE, szErrorCode);
        modelAndView.addObject(XPlatformConstant.ERROR_MSG, szErrorMsg);

        return modelAndView;
    }
    
    /** ================================================================
     * 날짜 : 20230111
     * 이름 : 임동진
     * 추가내용 : FTP관리 프로세스
     * ================================================================
     */
    public void ftpManager(String pmLoc, String pmlocalPath,  String pmFileNm) throws Exception {
    	
        final SftpManager SftpManager = new SftpManager();
        
        String sHost = "localhost";
        String sUserName = "790585";
        Integer sPort = 22;
        String sPW = "1111111111";
        String sFtpPath = "/ftp";
        String sLocalPath = pmlocalPath;
        String strFileNm = pmFileNm;
        String rtnMsg = "";
        
		// 접속
        SftpManager.init(sHost, sUserName, sPW, sPort, null );
    	
        // IN : [FTP -> LOCAL]
        if (pmLoc == "IN"){        	                
	        //파일여부
	        if(SftpManager.exists(sFtpPath, strFileNm)){
	        	//파일다운로드 
	        	SftpManager.FtpDownload(sFtpPath, strFileNm, sLocalPath + strFileNm);
	        	
	        	//다운로드 받은 파일명 변경하기 (파일명.rec -> 파일명.recved
	        	SftpManager.FtpFileRename (sFtpPath, strFileNm, strFileNm + "ed");            	
	        } 
        } else {
            // IN : [LOCAL -> FTP]
        	
        	// 파일 넘겨 받고 
            File pmFile = new File(pmlocalPath + pmFileNm);      
            
        	//FTP 전송
        	SftpManager.FtpUpload(sFtpPath,  pmFile);
        	
        	// 발송파일명 변경 -> 결과 받은 파일을 변경해서 추가 갱신이 안되도록 처리            
            File newFile = new File(pmlocalPath + "X" +pmFileNm);                           
            pmFile.renameTo(newFile);
        }
        
        //FTP연결종료    
        SftpManager.disconnection();        
    }            

}